[{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2019-04-29 00:28:37","commitOrder":2,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createPlaceholder(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, new Listener() {\n                public void handleEvent(Event event) {\n                    TableItem item = (TableItem) event.item;\n                    if (item != null) {\n                        MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                        if (event.detail == SWT.CHECK) {\n                            catalogTable.select(catalogTable.indexOf(item));\n                            checkedObjects.remove(catalog);\n                        }\n                        loadTables(catalog);\n                        updateState();\n                    }\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(catPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createPlaceholder(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, new Listener() {\n                public void handleEvent(Event event) {\n                    if (event.detail == SWT.CHECK) {\n                        updateCheckedTables();\n                        updateState();\n                    }\n                }\n            });\n            Composite buttonsPanel = UIUtils.createPlaceholder(tablesPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-04-29 00:28:39","endLine":183,"groupId":"11468","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/fdb627208f63347df09555ca36991c241b1f04.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createPlaceholder(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, new Listener() {\n                public void handleEvent(Event event) {\n                    TableItem item = (TableItem) event.item;\n                    if (item != null) {\n                        MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                        if (event.detail == SWT.CHECK) {\n                            catalogTable.select(catalogTable.indexOf(item));\n                            checkedObjects.remove(catalog);\n                        }\n                        loadTables(catalog);\n                        updateState();\n                    }\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(catPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createPlaceholder(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, new Listener() {\n                public void handleEvent(Event event) {\n                    if (event.detail == SWT.CHECK) {\n                        updateCheckedTables();\n                        updateState();\n                    }\n                }\n            });\n            Composite buttonsPanel = UIUtils.createPlaceholder(tablesPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2019-04-02 01:47:10","commitOrder":2,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createPlaceholder(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(catPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createPlaceholder(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(tablesPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreSchema catalog = ((PostgreTableBase) object).getContainer();\n                dataBase = catalog.getDatabase();\n                activeCatalogs.add(catalog);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(catalog, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-04-02 01:47:11","endLine":186,"groupId":"6573","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/70/d9a3edb89a6ef5fae75fe0051385a50cc43386.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createPlaceholder(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(catPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createPlaceholder(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(tablesPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreSchema catalog = ((PostgreTableBase) object).getContainer();\n                dataBase = catalog.getDatabase();\n                activeCatalogs.add(catalog);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(catalog, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"NB"}],"commitId":"0d1915d6b91418006ddd21959702768c3d02d742","commitMessage":"@@@MySQL UI module refactoring\n\n\nFormer-commit-id: 6ebe0bcc6d531508bdc5dffaf16a50a7a3bade75","date":"2019-04-29 00:28:39","modifiedFileCount":"14","status":"M","submitter":"serge-rider"},{"authorTime":"2019-05-22 03:56:32","codes":[{"authorDate":"2019-05-22 03:56:32","commitOrder":3,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-05-22 03:56:32","endLine":179,"groupId":"9156","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/14/1b6e3a0822c645feca455823a18c550295393e.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createPlaceholder(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, new Listener() {\n                public void handleEvent(Event event) {\n                    TableItem item = (TableItem) event.item;\n                    if (item != null) {\n                        MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                        if (event.detail == SWT.CHECK) {\n                            catalogTable.select(catalogTable.indexOf(item));\n                            checkedObjects.remove(catalog);\n                        }\n                        loadTables(catalog);\n                        updateState();\n                    }\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(catPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createPlaceholder(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, new Listener() {\n                public void handleEvent(Event event) {\n                    if (event.detail == SWT.CHECK) {\n                        updateCheckedTables();\n                        updateState();\n                    }\n                }\n            });\n            Composite buttonsPanel = UIUtils.createPlaceholder(tablesPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-05-22 03:56:32","commitOrder":3,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreSchema catalog = ((PostgreTableBase) object).getContainer();\n                dataBase = catalog.getDatabase();\n                activeCatalogs.add(catalog);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(catalog, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-05-22 03:56:32","endLine":186,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7c/188c804b3154cfe3a34f664a89a8c2742baf8a.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createPlaceholder(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(catPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createPlaceholder(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createPlaceholder(tablesPanel, 3, 5);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreSchema catalog = ((PostgreTableBase) object).getContainer();\n                dataBase = catalog.getDatabase();\n                activeCatalogs.add(catalog);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(catalog, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"706726c7522fe29edb4d663fada814802a00c04e","commitMessage":"@@@Backup/restore wizard buttons styling fix\n\n\nFormer-commit-id: 81ca0f014c254eb672f0cbe2e677c373980ec811","date":"2019-05-22 03:56:32","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2019-07-09 00:18:53","codes":[{"authorDate":"2019-05-22 03:56:32","commitOrder":4,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-05-22 03:56:32","endLine":179,"groupId":"9156","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/14/1b6e3a0822c645feca455823a18c550295393e.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2019-07-09 00:18:53","commitOrder":4,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-07-09 00:18:53","endLine":187,"groupId":"487","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/de/b02d8ab0e48e273a50ff36f8146ca603d6622c.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreSchema catalog = ((PostgreTableBase) object).getContainer();\n                dataBase = catalog.getDatabase();\n                activeCatalogs.add(catalog);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(catalog, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"01cc0d96abec1cdec311938f62256f721dadec6c","commitMessage":"@@@PostgreSQL table model refactoring\n\n\nFormer-commit-id: 110966cdb29335457fbd81734b88bd48a05babcc","date":"2019-07-09 00:18:53","modifiedFileCount":"23","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-09 00:18:53","codes":[{"authorDate":"2019-08-07 17:27:13","commitOrder":5,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-08-07 17:27:14","endLine":179,"groupId":"9156","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cb/2893eb5b893bd1d684d11c1a38e88e3a68d90b.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-07-09 00:18:53","commitOrder":5,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-07-09 00:18:53","endLine":187,"groupId":"487","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/de/b02d8ab0e48e273a50ff36f8146ca603d6622c.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"7955cadb9fc267eed76534432a0d1b0ff22b775e","commitMessage":"@@@MySQL UI bundle refactoring\n\n\nFormer-commit-id: 8aefc2bf5150902ae43f5a304a65062a721b7e83","date":"2019-08-07 17:27:14","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-18 18:59:54","codes":[{"authorDate":"2019-12-18 18:59:54","commitOrder":6,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.getSettings().setShowViews(true);\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-12-18 18:59:54","endLine":179,"groupId":"11065","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/771f18104cf532f8ae36ee4e1f0480272f45d2.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-12-18 18:59:54","commitOrder":6,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.getSettings().setShowViews(true);\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-12-18 18:59:54","endLine":187,"groupId":"487","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/52/df354b551222bcbe643ae84e4bd92ff313b916.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.showViews = exportViewsCheck.getSelection();\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.showViews = true;\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"c69ca2cdd3e2c2e3f70458f2d2b9bfaba2f75aa3","commitMessage":"@@@#6972 Dump/restore tools refactoring (keep settings separately)\n\n\nFormer-commit-id: afa2737eedb1b6f784e2e88042dcba4cc091c5d3","date":"2019-12-18 18:59:54","modifiedFileCount":"21","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-18 18:59:54","codes":[{"authorDate":"2019-12-19 16:57:57","commitOrder":7,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","date":"2019-12-19 16:57:57","endLine":139,"groupId":"17004","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/86/31bb9b88a7ede1ebbbbb8b03c33ecf53675e65.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        MySQLDataSource dataSource = null;\n        Set<MySQLCatalog> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof MySQLCatalog) {\n                activeCatalogs.add((MySQLCatalog) object);\n                dataSource = ((MySQLCatalog) object).getDataSource();\n            } else if (object instanceof MySQLTableBase) {\n                MySQLCatalog catalog = ((MySQLTableBase) object).getContainer();\n                dataSource = catalog.getDataSource();\n                activeCatalogs.add(catalog);\n                Set<MySQLTableBase> tables = checkedObjects.get(catalog);\n                if (tables == null) {\n                    tables = new HashSet<>();\n                    checkedObjects.put(catalog, tables);\n                }\n                tables.add((MySQLTableBase) object);\n                if (((MySQLTableBase) object).isView()) {\n                    wizard.getSettings().setShowViews(true);\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof MySQLDataSource) {\n                dataSource = (MySQLDataSource) object.getDataSource();\n            }\n        }\n        if (dataSource != null) {\n            boolean tablesLoaded = false;\n            for (MySQLCatalog catalog : dataSource.getCatalogs()) {\n                TableItem item = new TableItem(catalogTable, SWT.NONE);\n                item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                item.setText(0, catalog.getName());\n                item.setData(catalog);\n                if (activeCatalogs.contains(catalog)) {\n                    item.setChecked(true);\n                    catalogTable.select(catalogTable.indexOf(item));\n                    if (!tablesLoaded) {\n                        loadTables(catalog);\n                        tablesLoaded = true;\n                    }\n                }\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2019-12-18 18:59:54","commitOrder":7,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.getSettings().setShowViews(true);\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-12-18 18:59:54","endLine":187,"groupId":"487","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/52/df354b551222bcbe643ae84e4bd92ff313b916.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.getSettings().setShowViews(true);\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"8a32b4f5fcdc8814025f57a430141f1624643a2d","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 07d0df3f900bbc1ba70fa61086f0803c64b27a01","date":"2019-12-19 16:57:57","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-22 02:01:10","codes":[{"authorDate":"2019-12-19 16:57:57","commitOrder":8,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","date":"2019-12-19 16:57:57","endLine":139,"groupId":"17004","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/86/31bb9b88a7ede1ebbbbb8b03c33ecf53675e65.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2019-12-22 02:01:10","commitOrder":8,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        updateState();\n        setControl(composite);\n    }\n","date":"2019-12-22 02:01:10","endLine":144,"groupId":"10536","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/2d4133f25cdaa4c9b185dd6981322a3979a319.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        final Button exportViewsCheck;\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        dataBase = null;\n        Set<PostgreSchema> activeCatalogs = new LinkedHashSet<>();\n        for (DBSObject object : wizard.getDatabaseObjects()) {\n            if (object instanceof PostgreSchema) {\n                activeCatalogs.add((PostgreSchema) object);\n                dataBase = ((PostgreSchema) object).getDatabase();\n            } else if (object instanceof PostgreTableBase) {\n                PostgreTableContainer tableContainer = ((PostgreTableBase) object).getContainer();\n                if (!(tableContainer instanceof PostgreSchema)) {\n                    continue;\n                }\n                PostgreSchema schema = (PostgreSchema) tableContainer;\n                dataBase = schema.getDatabase();\n                activeCatalogs.add(schema);\n                Set<PostgreTableBase> tables = checkedObjects.computeIfAbsent(schema, k -> new HashSet<>());\n                tables.add((PostgreTableBase) object);\n                if (((PostgreTableBase) object).isView()) {\n                    wizard.getSettings().setShowViews(true);\n                    exportViewsCheck.setSelection(true);\n                }\n            } else if (object.getDataSource() instanceof PostgreDataSource) {\n                dataBase = (PostgreDatabase) DBUtils.getObjectOwnerInstance(object);\n            }\n        }\n        if (dataBase != null) {\n            boolean tablesLoaded = false;\n            try {\n                for (PostgreSchema schema : dataBase.getSchemas(new VoidProgressMonitor())) {\n                    if (schema.isSystem() || schema.isUtility()) {\n                        continue;\n                    }\n                    TableItem item = new TableItem(schemasTable, SWT.NONE);\n                    item.setImage(DBeaverIcons.getImage(DBIcon.TREE_DATABASE));\n                    item.setText(0, schema.getName());\n                    item.setData(schema);\n                    if (activeCatalogs.contains(schema)) {\n                        item.setChecked(true);\n                        schemasTable.select(schemasTable.indexOf(item));\n                        if (!tablesLoaded) {\n                            loadTables(schema);\n                            tablesLoaded = true;\n                        }\n                    }\n                }\n            } catch (DBException e) {\n                log.error(e);\n            }\n        }\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"bb9fd77daf267eb315761d430c166d601b82971b","commitMessage":"@@@#7444 PG tasks. MySQL and PG settings load/save fixes\n\n\nFormer-commit-id: 2f064417fa6640e4d73ce0e459951eb23a60e6dd","date":"2019-12-22 02:01:10","modifiedFileCount":"22","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-25 22:05:08","codes":[{"authorDate":"2019-12-19 16:57:57","commitOrder":9,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","date":"2019-12-19 16:57:57","endLine":139,"groupId":"17004","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/86/31bb9b88a7ede1ebbbbb8b03c33ecf53675e65.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"},{"authorDate":"2019-12-25 22:05:08","commitOrder":9,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        setControl(composite);\n    }\n","date":"2019-12-25 22:05:08","endLine":142,"groupId":"10536","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7a/ef396868a579d01d75d38cffb817d732c8ce2f.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        updateState();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"}],"commitId":"781997fd376a3e0558fbc56798e74a22614b7036","commitMessage":"@@@Export wizards fix\n\n\nFormer-commit-id: f62663364b533d355143c0fe15e2c40a5ad98454","date":"2019-12-25 22:05:08","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-25 22:05:08","codes":[{"authorDate":"2021-09-07 17:54:44","commitOrder":10,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, MySQLUIMessages.tools_db_export_wizard_page_settings_group_show_views, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","date":"2021-09-07 17:54:44","endLine":141,"groupId":"10309","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/58/5fed78cbf777e849817013fb595ec455e7937f.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, MySQLUIMessages.tools_db_export_wizard_page_settings_group_objects, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            catalogTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            catalogTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                if (item != null) {\n                    MySQLCatalog catalog = (MySQLCatalog) item.getData();\n                    if (event.detail == SWT.CHECK) {\n                        catalogTable.select(catalogTable.indexOf(item));\n                        checkedObjects.remove(catalog);\n                    }\n                    loadTables(catalog);\n                    updateState();\n                }\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            catalogTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, catalogTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, \"Show views\", false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        loadSettings();\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2019-12-25 22:05:08","commitOrder":10,"curCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        setControl(composite);\n    }\n","date":"2019-12-25 22:05:08","endLine":142,"groupId":"10309","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"createControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7a/ef396868a579d01d75d38cffb817d732c8ce2f.src","preCode":"    public void createControl(Composite parent)\n    {\n        Composite composite = UIUtils.createPlaceholder(parent, 1);\n\n        Group objectsGroup = UIUtils.createControlGroup(composite, PostgreMessages.wizard_backup_page_object_group_object, 1, GridData.FILL_HORIZONTAL, 0);\n        objectsGroup.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        SashForm sash = new CustomSashForm(objectsGroup, SWT.VERTICAL);\n        sash.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite catPanel = UIUtils.createComposite(sash, 1);\n            catPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n            schemasTable = new Table(catPanel, SWT.BORDER | SWT.CHECK);\n            schemasTable.addListener(SWT.Selection, event -> {\n                TableItem item = (TableItem) event.item;\n                PostgreSchema catalog = (PostgreSchema) item.getData();\n                if (event.detail == SWT.CHECK) {\n                    schemasTable.select(schemasTable.indexOf(item));\n                    checkedObjects.remove(catalog);\n                }\n                loadTables(catalog);\n                updateState();\n            });\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            schemasTable.setLayoutData(gd);\n\n            Composite buttonsPanel = UIUtils.createComposite(catPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            new Label(buttonsPanel, SWT.NONE).setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, schemasTable);\n        }\n\n        {\n            Composite tablesPanel = UIUtils.createComposite(sash, 1);\n            tablesPanel.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n            tablesTable = new Table(tablesPanel, SWT.BORDER | SWT.CHECK);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 50;\n            tablesTable.setLayoutData(gd);\n            tablesTable.addListener(SWT.Selection, event -> {\n                if (event.detail == SWT.CHECK) {\n                    updateCheckedTables();\n                    updateState();\n                }\n            });\n\n            Composite buttonsPanel = UIUtils.createComposite(tablesPanel, 3);\n            buttonsPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            exportViewsCheck = UIUtils.createCheckbox(buttonsPanel, PostgreMessages.wizard_backup_page_object_checkbox_show_view, false);\n            exportViewsCheck.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    wizard.getSettings().setShowViews(exportViewsCheck.getSelection());\n                    loadTables(null);\n                }\n            });\n            exportViewsCheck.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL));\n            createCheckButtons(buttonsPanel, tablesTable);\n        }\n\n        setControl(composite);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"N"}],"commitId":"4972811679dbd4916f0d3fed5fb1eb67b57f6a8c","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-09-07 17:54:44","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"}]
