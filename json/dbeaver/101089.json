[{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2016-10-09 16:17:59","commitOrder":8,"curCode":"\t    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n\t    {\n\t        super.initialize(monitor);\n\n\t        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t            \r\n\t            this.activeSchemaName = determineActiveSchema(session);\n\n\t        } catch (SQLException e) {\n\t            LOG.warn(\"Error reading active schema\", e);\n\t        }\n\t        \n\t        try {\n\t        \tthis.dataTypeCache.getAllObjects(monitor, this);\n\t        } catch (DBException e) {\n\t        \tLOG.warn(\"Error reading types info\", e);\n\t        \tthis.dataTypeCache.setCache(Collections.<ExasolDataType> emptyList());\n\t        }\n\n\t    }\n","date":"2016-10-09 16:17:59","endLine":111,"groupId":"2120","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/1d3e3cb49738e04c48a4dd710b8898e2880628.src","preCode":"\t    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n\t    {\n\t        super.initialize(monitor);\n\n\t        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t            \r\n\t            this.activeSchemaName = determineActiveSchema(session);\n\n\t        } catch (SQLException e) {\n\t            LOG.warn(\"Error reading active schema\", e);\n\t        }\n\t        \n\t        try {\n\t        \tthis.dataTypeCache.getAllObjects(monitor, this);\n\t        } catch (DBException e) {\n\t        \tLOG.warn(\"Error reading types info\", e);\n\t        \tthis.dataTypeCache.setCache(Collections.<ExasolDataType> emptyList());\n\t        }\n\n\t    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2016-06-20 19:32:29","commitOrder":8,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"NB"}],"commitId":"798a6543e6606cd3222a863c7a920c25d68581a5","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: b86d35a342037e96faa44a359ac1ef183f5eeb77","date":"2016-10-09 16:17:59","modifiedFileCount":"0","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2016-10-15 00:04:53","commitOrder":9,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\tC_USERS);\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, C_CONNECTIONS);\n\t\t}\n\n\t}\n","date":"2016-10-15 00:04:53","endLine":149,"groupId":"14121","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4f/75b4a43bb2c5914c739a4d0c8faa0c2cc12dfd.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<ExasolDataType>emptyList());\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":9,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"4b3db38e4e430bcec21482b20c5066d4b9e0051e","commitMessage":"@@@Merge pull request #845 from Sargul/devel\n\nNew Database Object Connection and Privilege Checks added\n\nFormer-commit-id: db030be80ef9d4127dbfabefec640daf1d9e2eaa","date":"2016-10-15 00:04:53","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2016-10-23 06:30:17","commitOrder":10,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\tC_USERS);\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, C_ROLES);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, C_CONNECTIONS);\n\t\t}\n\n\t}\n","date":"2016-10-23 06:30:17","endLine":158,"groupId":"14121","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d8/5b78c14f5928a2fbb115bfc03035a84f27b733.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\tC_USERS);\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, C_CONNECTIONS);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":10,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"d7155e80bcb4a9d0d2c0ca935a3b57fbc34402e1","commitMessage":"@@@Merge pull request #877 from Sargul/devel\n\nReworked Exasol Security display config\n\nFormer-commit-id: d9feea2844ec9e1f9570e993636a9dda15b8e673","date":"2016-10-23 06:30:17","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2016-10-28 02:12:57","commitOrder":11,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select b.object_name,b.owner,b.created,b.object_comment from EXA_ALL_OBJECTS b  \"\n\t\t\t\t+ \"inner join EXA_SCHEMAS s on b.object_name = s.schema_name  where b.object_type = 'SCHEMA' \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" and not schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\tSCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\tSCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tOBJECT_COMMENT,\" + \n\t\t\t\t\t\"\tCREATED\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tEXA_ALL_OBJECTS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.OBJECT_NAME = s.SCHEMA_NAME AND\" + \n\t\t\t\t\t\"\t\to.OBJECT_TYPE = 'SCHEMA'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\" from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by b.object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\t\t\n\t\t\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from EXA_DBA_USERS ORDER BY USER_NAME\");\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM EXA_DBA_ROLES ORDER BY ROLE_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM EXA_DBA_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnectionPrivs())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForObjectPrivs())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForSystemPrivs())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRolePrivs())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2016-10-28 02:12:57","endLine":246,"groupId":"14121","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/37/3417d5bb4d21d6a8fec2dbce2d579e24590e11.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\tC_USERS);\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, C_ROLES);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, C_CONNECTIONS);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":11,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"42adcb073a18c80b32a518b1123dfa4abbb95908","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: e82f36e87193ef47efad74161ab84cd5ae1cfc73","date":"2016-10-28 02:12:57","modifiedFileCount":"41","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2017-01-13 06:00:44","commitOrder":12,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select b.object_name,b.owner,b.created,b.object_comment from EXA_ALL_OBJECTS b  \"\n\t\t\t\t+ \"inner join EXA_SCHEMAS s on b.object_name = s.schema_name  where b.object_type = 'SCHEMA' \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" and not schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\tSCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\tSCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tOBJECT_COMMENT,\" + \n\t\t\t\t\t\"\tCREATED\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tEXA_ALL_OBJECTS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.OBJECT_NAME = s.SCHEMA_NAME AND\" + \n\t\t\t\t\t\"\t\to.OBJECT_TYPE = 'SCHEMA'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\" from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by b.object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\t\t\n\t\t\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from EXA_DBA_USERS ORDER BY USER_NAME\");\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM EXA_DBA_ROLES ORDER BY ROLE_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM EXA_DBA_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnectionPrivs())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForObjectPrivs())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForSystemPrivs())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRolePrivs())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2017-01-13 06:00:44","endLine":257,"groupId":"14121","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/29/478ac8219c5d12a5d175e5da65141373baf691.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select b.object_name,b.owner,b.created,b.object_comment from EXA_ALL_OBJECTS b  \"\n\t\t\t\t+ \"inner join EXA_SCHEMAS s on b.object_name = s.schema_name  where b.object_type = 'SCHEMA' \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" and not schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\tSCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\tSCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tOBJECT_COMMENT,\" + \n\t\t\t\t\t\"\tCREATED\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tEXA_ALL_OBJECTS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.OBJECT_NAME = s.SCHEMA_NAME AND\" + \n\t\t\t\t\t\"\t\to.OBJECT_TYPE = 'SCHEMA'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\" from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by b.object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\t\t\n\t\t\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from EXA_DBA_USERS ORDER BY USER_NAME\");\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM EXA_DBA_ROLES ORDER BY ROLE_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM EXA_DBA_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnectionPrivs())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForObjectPrivs())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForSystemPrivs())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRolePrivs())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":131,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":12,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"30cf88af03e43ce189d6af77772710bb6504dae6","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 5d7cb22043593be41e72f35c1192d60a6adda800","date":"2017-01-13 06:00:44","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2017-06-24 02:51:45","commitOrder":13,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select b.object_name,b.owner,b.created,b.object_comment from EXA_ALL_OBJECTS b  \"\n\t\t\t\t+ \"inner join EXA_SCHEMAS s on b.object_name = s.schema_name  where b.object_type = 'SCHEMA' \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" and not schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\tSCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\tSCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tOBJECT_COMMENT,\" + \n\t\t\t\t\t\"\tCREATED\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tEXA_ALL_OBJECTS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.OBJECT_NAME = s.SCHEMA_NAME AND\" + \n\t\t\t\t\t\"\t\to.OBJECT_TYPE = 'SCHEMA'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\" from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by b.object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\t\t\n\t\t\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from EXA_DBA_USERS ORDER BY USER_NAME\");\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM EXA_DBA_ROLES ORDER BY ROLE_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.EXA_DBA_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t} else {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.EXA_SESSION_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnectionPrivs())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForObjectPrivs())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForSystemPrivs())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRolePrivs())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2017-06-24 02:51:45","endLine":238,"groupId":"5039","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/55/8a2553b9aa230a5f36d5b81d723f0882a6f86c.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select b.object_name,b.owner,b.created,b.object_comment from EXA_ALL_OBJECTS b  \"\n\t\t\t\t+ \"inner join EXA_SCHEMAS s on b.object_name = s.schema_name  where b.object_type = 'SCHEMA' \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" and not schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\tSCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\tSCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tOBJECT_COMMENT,\" + \n\t\t\t\t\t\"\tCREATED\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tEXA_ALL_OBJECTS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.OBJECT_NAME = s.SCHEMA_NAME AND\" + \n\t\t\t\t\t\"\t\to.OBJECT_TYPE = 'SCHEMA'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\" from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by b.object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\t\t\n\t\t\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from EXA_DBA_USERS ORDER BY USER_NAME\");\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM EXA_DBA_ROLES ORDER BY ROLE_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM EXA_DBA_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnectionPrivs())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForObjectPrivs())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForSystemPrivs())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRolePrivs())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":13,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"464f027c251add3d57546fc45bd11dab519cd2a5","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 6011a2805d6427951cde7f02cdf4820a501559ec","date":"2017-06-24 02:51:45","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2018-11-29 01:42:56","commitOrder":14,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2018-11-29 01:42:56","endLine":230,"groupId":"7682","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3a/1f52925b566831744f49fa237c9d5832a0e178.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select b.object_name,b.owner,b.created,b.object_comment from EXA_ALL_OBJECTS b  \"\n\t\t\t\t+ \"inner join EXA_SCHEMAS s on b.object_name = s.schema_name  where b.object_type = 'SCHEMA' \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" and not schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\tSCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\tSCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tOBJECT_COMMENT,\" + \n\t\t\t\t\t\"\tCREATED\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tEXA_ALL_OBJECTS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.OBJECT_NAME = s.SCHEMA_NAME AND\" + \n\t\t\t\t\t\"\t\to.OBJECT_TYPE = 'SCHEMA'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\" from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by b.object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForUsers()) {\n\t\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from EXA_DBA_USERS ORDER BY USER_NAME\");\n\t\t}\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRoles()) {\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM EXA_DBA_ROLES ORDER BY ROLE_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnections()) {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.EXA_DBA_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t} else {\n\t\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.EXA_SESSION_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForConnectionPrivs())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForObjectPrivs())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForSystemPrivs())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserIsAuthorizedForRolePrivs())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":113,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":14,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"1127ab1c44afb782192c03bc6cba8676bc58801a","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 0d5d7e725b9c5996adc0b7a93d63e797b23c71a8","date":"2018-11-29 01:42:56","modifiedFileCount":"10","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2019-01-05 21:14:01","commitOrder":15,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(DBRProgressMonitor monitor, ExasolDataSource owner, String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2019-01-05 21:14:01","endLine":321,"groupId":"7684","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/18a5d1177ece19e7926aff17159593ae017017.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\n\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT * FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":15,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"53a256b0083790f745567d007134d501869f2369","commitMessage":"@@@Merge pull request #4922 from Sargul/devel\n\nExasol V6.1 update part 1\n\nFormer-commit-id: 3b04f5eb137b4346d65111cbada26d4bbdf2c531","date":"2019-01-05 21:14:01","modifiedFileCount":"22","status":"M","submitter":"Charly"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2019-01-13 18:45:50","commitOrder":16,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(DBRProgressMonitor monitor, ExasolDataSource owner, String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2019-01-13 18:45:50","endLine":321,"groupId":"7684","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4b/2e877656f2763733d45a42f148f46d83a701ce.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.<ExasolDataType> emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(DBRProgressMonitor monitor, ExasolDataSource owner, String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":16,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"0e4326a0b3b9c29a7be9a37d3de42fdc95bad8b6","commitMessage":"@@@Execution context ids constants\n\n\nFormer-commit-id: 0e75875512ffd1d38c8582e31d62762538f6e3d1","date":"2019-01-13 18:45:50","modifiedFileCount":"3","status":"M","submitter":"serge-rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2019-10-11 21:14:29","commitOrder":17,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(DBRProgressMonitor monitor, ExasolDataSource owner, String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2019-10-11 21:14:29","endLine":308,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cf/8e678b373e5c851623d0feb03a240c4b86f87e.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(DBRProgressMonitor monitor, ExasolDataSource owner, String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":17,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"c2a08dad776e9a0001d5b6723b82701cfe7e94f9","commitMessage":"@@@#6885 Object rename - update name in container cache\n\n\nFormer-commit-id: 6e7cfd21b24414670305617ab51d32914108e21e","date":"2019-10-11 21:14:29","modifiedFileCount":"7","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-20 19:32:29","codes":[{"authorDate":"2019-10-30 17:24:08","commitOrder":18,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2019-10-30 17:24:08","endLine":308,"groupId":"8714","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/7e10f99d865d60198f1db27ce07771ec60b6fc.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(DBRProgressMonitor monitor, ExasolDataSource owner, String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"M"},{"authorDate":"2016-06-20 19:32:29","commitOrder":18,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":174,"groupId":"14121","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/a5b056635ecac2a571a79f3c6a452bdd7abe90.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType>emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"}],"commitId":"bff07064f7432bdb17429a95578c28a24eb08506","commitMessage":"@@@#6715 Extra variables in custom client app name (context.name and context.id)\n\n\nFormer-commit-id: c875f30f6f603b5bf51e8a75d9c398856b077827","date":"2019-10-30 17:24:08","modifiedFileCount":"21","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2019-10-30 17:24:08","commitOrder":19,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2019-10-30 17:24:08","endLine":308,"groupId":"8714","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/7e10f99d865d60198f1db27ce07771ec60b6fc.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"},{"authorDate":"2019-12-16 01:52:38","commitOrder":19,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"446","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            this.activeSchemaName = determineActiveSchema(session);\n            this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, activeSchemaName, this);\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"M"}],"commitId":"df682e53c17beee5b15e7a52d612281cada04bbc","commitMessage":"@@@#5172 DB2: default schema\n\n\nFormer-commit-id: 0397ce1b52dca474e04ff29677cb9ca2453f554f","date":"2019-12-16 01:52:38","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2019-12-16 02:03:27","commitOrder":20,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2019-12-16 02:03:27","endLine":293,"groupId":"8714","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/69/65791b1eae27fd9750e6cfe75de6206fd561eb.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this,\n\t\t\t\t\"Load data source meta info\")) {\n\t\t\t\n\t\t\t\r\n\t\t\t\r\n\t\t\tthis.activeSchemaName = determineActiveSchema(session);\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(\n\t\t\t\t\tmonitor, session, this);\n\t\t\t\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-12-16 01:52:38","commitOrder":20,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"446","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"25c243d880b1c5aeeb406a7d2f91e6292a9e7ade","commitMessage":"@@@#5172 Exasol: default schema\n\n\nFormer-commit-id: 55699eb23e6d5820ec29a6ba48f79c24ace1e363","date":"2019-12-16 02:03:27","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2020-03-21 19:00:11","commitOrder":21,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2020-03-21 19:00:11","endLine":293,"groupId":"8714","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d2/9093b672d966c6c314f6dca5768464cf16376c.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"},{"authorDate":"2019-12-16 01:52:38","commitOrder":21,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"446","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"e1705af613b93d0484d364f8d364bd40e4cbb912","commitMessage":"@@@Merge pull request #8237 from Sargul/devel\n\nEnhancement for issue in Exasol plugin #8216\n\nFormer-commit-id: 38b13fe9f3d90ecd67bba5f2eac7f9371d78150f","date":"2020-03-21 19:00:11","modifiedFileCount":"17","status":"M","submitter":"Charly"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2020-03-29 23:20:31","commitOrder":22,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_CONSUMER_GROUP AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\telse\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswortPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2020-03-29 23:20:31","endLine":336,"groupId":"9380","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/87/538d83dea762572369e62be6a0c9b46626edaf.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2019-12-16 01:52:38","commitOrder":22,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"446","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"6bbd33ca1f75eb83281d418b71626094fde67629","commitMessage":"@@@Merge pull request #8292 from Sargul/devel\n\nSupport for Consumer Groups and HASHTYPE data type in Exasol V7.0\n\nFormer-commit-id: 34c121a81a95dd5fc20d42971476054be5070695","date":"2020-03-29 23:20:31","modifiedFileCount":"15","status":"M","submitter":"Charly"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2020-04-02 00:18:17","commitOrder":23,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_CONSUMER_GROUP AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\telse\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswordPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2020-04-02 00:18:17","endLine":336,"groupId":"9380","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/23/6662f14f7909f96571aa1797e947f7d66d52da.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_CONSUMER_GROUP AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\telse\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswortPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"},{"authorDate":"2019-12-16 01:52:38","commitOrder":23,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"446","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"7e5acd2ba9ce70ffdc681adc1a1b52e1c35b666d","commitMessage":"@@@Merge pull request #8315 from Sargul/devel\n\n Fix #8314 visibility of Security tree for version 7.0\n\nFormer-commit-id: 4bf31cc382676eb186e4029d7e9dbd1d705661a1","date":"2020-04-02 00:18:17","modifiedFileCount":"2","status":"M","submitter":"Charly"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2020-11-20 23:18:45","commitOrder":24,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" +\n\t\t\t\t\t\" ORDER BY S.SCHEMA_NAME\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_CONSUMER_GROUP AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\telse\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswordPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2020-11-20 23:18:45","endLine":322,"groupId":"9380","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ea/542fbd6b425bb0b541bab4e4409be76b37687a.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" \n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_CONSUMER_GROUP AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\telse\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswordPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-12-16 01:52:38","commitOrder":24,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"446","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"d549473adb6d6c411e2c81a003704e4855a0a644","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: cdaec9e01c040231f5825a69b58d1d441d588f6a","date":"2020-11-20 23:18:45","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-16 01:52:38","codes":[{"authorDate":"2021-02-09 19:18:19","commitOrder":25,"curCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" +\n\t\t\t\t\t\" ORDER BY S.SCHEMA_NAME\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tString priorityColUser = \" USER_PRIORITY,\\n\";\n\t\tString priorityColRole = \" ROLE_PRIORITY AS USER_PRIORITY,\\n\";\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())  {\n\t\t\tpriorityColUser = \" USER_CONSUMER_GROUP as USER_PRIORITY,\\n\";\n\t\t\tpriorityColRole = \" ROLE_CONSUMER_GROUP AS USER_PRIORITY,\\n\";\n\t\t}\n\t\t\t\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\"/*snapshot execution*/ SELECT\\n\"\n\t\t\t\t+ \"\tUSER_NAME,\\n\"\n\t\t\t\t+ \"\tCREATED,\\n\"\n\t\t\t\t+ (this.exasolCurrentUserPrivileges.getUserHasDictionaryAccess() ? \"\tDISTINGUISHED_NAME,\\n\" : \"\")\n\t\t\t\t+ \"\tKERBEROS_PRINCIPAL,\\n\"\n\t\t\t\t+ \"\tPASSWORD,\\n\"\n\t\t\t\t+ priorityColUser\n\t\t\t\t+ \"\tPASSWORD_STATE,\\n\"\n\t\t\t\t+ \"\tPASSWORD_STATE_CHANGED,\\n\"\n\t\t\t\t+ \"\tPASSWORD_EXPIRY,\\n\"\n\t\t\t\t+ \"\tPASSWORD_EXPIRY_DAYS,\\n\"\n\t\t\t\t+ \"\tPASSWORD_GRACE_DAYS,\\n\"\n\t\t\t\t+ \"\tPASSWORD_EXPIRY_POLICY,\\n\"\n\t\t\t\t+ \"\tFAILED_LOGIN_ATTEMPTS,\\n\"\n\t\t\t\t+ \"\tUSER_COMMENT\\n\"\n\t\t\t\t+ \"FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\t\t\n\t\t\t\n\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,\"+ priorityColRole + \" ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswordPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","date":"2021-02-09 19:18:19","endLine":343,"groupId":"101089","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/05/c40823458e976565b9b00e15b87d17068cf2c5.src","preCode":"\tpublic void initialize(@NotNull DBRProgressMonitor monitor)\n\t\t\tthrows DBException\n\t{\n\t\tsuper.initialize(monitor);\n\t\t\n\t\ttry (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n\t\t\tthis.exasolCurrentUserPrivileges = new ExasolCurrentUserPrivileges(monitor, session, this);\n\n\t\t\tthis.driverMajorVersion = session.getMetaData().getDriverMajorVersion();\n\n\t\t} catch (SQLException e) {\n\t\t\tLOG.warn(\"Error reading active schema\", e);\n\t\t}\n\t\tString schemaSQL = \"/*snapshot execution*/ select schema_name as object_name,schema_owner as OWNER,CAST(NULL AS TIMESTAMP) AS created, schema_comment as OBJECT_COMMENT, SCHEMA_OBJECT_ID from SYS.EXA_SCHEMAS s  \";\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getatLeastV6()) {\n\t\t\t\n\t\t\t\r\n\t\t\tschemaSQL += \" where not  schema_is_virtual \";\n\t\t\t\n\t\t\t\r\n\t\t\tvirtualSchemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolVirtualSchema.class,\n\t\t\t\t\t\"/*snapshot execution*/ select\" + \n\t\t\t\t\t\"\ts.SCHEMA_NAME as OBJECT_NAME,\" + \n\t\t\t\t\t\"\ts.SCHEMA_OWNER AS OWNER,\" + \n\t\t\t\t\t\"CAST(NULL AS TIMESTAMP) AS created, \" +\n\t\t\t\t\t\"\tADAPTER_SCRIPT,\" + \n\t\t\t\t\t\"\tLAST_REFRESH,\" + \n\t\t\t\t\t\"\tLAST_REFRESH_BY,\" + \n\t\t\t\t\t\"\tADAPTER_NOTES,\" + \n\t\t\t\t\t\"\tSCHEMA_COMMENT AS OBJECT_COMMENT, s.SCHEMA_OBJECT_ID\" + \n\t\t\t\t\t\" from\" + \n\t\t\t\t\t\"\t\tEXA_VIRTUAL_SCHEMAS s\" + \n\t\t\t\t\t\"\tINNER JOIN\" + \n\t\t\t\t\t\"\t\tsys.EXA_SCHEMAS o\" + \n\t\t\t\t\t\"\tON\" + \n\t\t\t\t\t\"\t\to.schema_name = s.SCHEMA_NAME\" +\n\t\t\t\t\t\" ORDER BY S.SCHEMA_NAME\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tschemaSQL += \" union all select distinct SCHEMA_NAME as \\\"OBJECT_NAME\\\", 'SYS' as owner, cast(null as timestamp) as created, '' as \\\"OBJECT_COMMENT\\\", null as SCHEMA_OBJECT_ID from SYS.EXA_SYSCAT \"\n\t\t\t\t+ \"order by object_name\";\n\t\tschemaCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolSchema.class, schemaSQL);\n\n\t\ttry {\n\t\t\tthis.dataTypeCache.getAllObjects(monitor, this);\n\t\t} catch (DBException e) {\n\t\t\tLOG.warn(\"Error reading types info\", e);\n\t\t\tthis.dataTypeCache\n\t\t\t\t\t.setCache(Collections.emptyList());\n\t\t}\n\n\t\tthis.userCache = new JDBCObjectSimpleCache<>(ExasolUser.class,\n\t\t\t\t\t\"/*snapshot execution*/ select * from SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.USER)  +\"_USERS ORDER BY USER_NAME\");\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups())\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_CONSUMER_GROUP AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\telse\n\t\t\tthis.roleCache = new JDBCObjectSimpleCache<>(ExasolRole.class, \"SELECT ROLE_NAME,CREATED,ROLE_PRIORITY AS USER_PRIORITY,ROLE_COMMENT FROM SYS.\" + this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_ROLES ORDER BY ROLE_NAME\");\n\t\t\n\t\tthis.connectionCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolConnection.class, \"/*snapshot execution*/ SELECT * FROM SYS.\"+ this.exasolCurrentUserPrivileges.getTablePrefix(ExasolSysTablePrefix.SESSION)  +\"_CONNECTIONS ORDER BY CONNECTION_NAME\");\n\n\t\tif (exasolCurrentUserPrivileges.hasPasswordPolicy())\n\t\t{\n\t\t\tthis.securityPolicyCache = new JDBCObjectSimpleCache<>(ExasolSecurityPolicy.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT SYSTEM_VALUE FROM sys.EXA_PARAMETERS WHERE PARAMETER_NAME = 'PASSWORD_SECURITY_POLICY'\"\n\t\t\t\t\t);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasConsumerGroups()) {\n\t\t\tthis.consumerGroupCache = new JDBCObjectSimpleCache<>(ExasolConsumerGroup.class,\n\t\t\t\t\t\"/*snapshot execution*/ \" +\n\t\t\t\t\t\"SELECT\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_NAME,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_ID,\\n\" + \n\t\t\t\t\t\"PRECEDENCE,\\n\" + \n\t\t\t\t\t\"CPU_WEIGHT,\\n\" + \n\t\t\t\t\t\"GROUP_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"USER_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"SESSION_TEMP_DB_RAM_LIMIT,\\n\" + \n\t\t\t\t\t\"CREATED,\\n\" + \n\t\t\t\t\t\"CONSUMER_GROUP_COMMENT\\n\" + \n\t\t\t\t\t\"FROM\\n\" + \n\t\t\t\t\t\"sys.EXA_CONSUMER_GROUPS ecg\\n\"\n\t\t\t);\n\t\t\t\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.hasPriorityGroups()) {\n\t\t\tthis.priorityGroupCache = new JDBCObjectSimpleCache<>(\n\t\t\t\tExasolPriorityGroup.class, \"/*snapshot execution*/ SELECT * FROM SYS.EXA_PRIORITY_GROUPS ORDER BY PRIORITY_GROUP_NAME\"\n\t\t\t\t);\n\t\t\t\n\t\t} else {\n\t\t\tthis.priorityGroupCache = new DBSObjectCache<ExasolDataSource, ExasolPriorityGroup>() {\n\t\t\t\t\n\t\t\t\tList<ExasolPriorityGroup> groups;\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void setCache(List<ExasolPriorityGroup> objects) {\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void removeObject(@NotNull ExasolPriorityGroup object, boolean resetFullCache) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void renameObject(@NotNull ExasolPriorityGroup object, @NotNull String oldName, @NotNull String newName) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic boolean isFullyCached() {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getObject(@NotNull DBRProgressMonitor monitor, @NotNull ExasolDataSource owner, @NotNull String name) {\n\t\t\t\t\treturn getCachedObject(name);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic List<ExasolPriorityGroup> getCachedObjects() {\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic ExasolPriorityGroup getCachedObject(String name) {\n\t\t\t\t\tfor(ExasolPriorityGroup p: groups)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (p.getName().equals(name))\n\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic Collection<ExasolPriorityGroup> getAllObjects(DBRProgressMonitor monitor, ExasolDataSource owner)\n\t\t\t\t\t\tthrows DBException {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"HIGH\", \"Default High Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"MEDIUM\", \"Default Medium Group\", 900));\n\t\t\t\t\tgroups.add(new ExasolPriorityGroup(owner, \"LOW\", \"Default LOW Group\", 900));\n\t\t\t\t\treturn groups;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void clearCache() {\n\t\t\t\t\tgroups = new ArrayList<>();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void cacheObject(@NotNull ExasolPriorityGroup object) {\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t};\n\t\t\tthis.priorityGroupCache.getAllObjects(monitor, this);\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.connectionGrantCache =  new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolConnectionGrant.class,\"/*snapshot execution*/ SELECT c.*,P.ADMIN_OPTION,P.GRANTEE FROM SYS.EXA_DBA_CONNECTION_PRIVS P \"\n\t\t\t\t\t\t\t+ \"INNER JOIN SYS.EXA_DBA_CONNECTIONS C on P.GRANTED_CONNECTION = C.CONNECTION_NAME ORDER BY P.GRANTEE,C.CONNECTION_NAME \");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.baseTableGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolBaseObjectGrant.class,\"/*snapshot execution*/ SELECT \" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME,\" + \n\t\t\t\t\t\t\t\"\tGROUP_CONCAT(\" + \n\t\t\t\t\t\t\t\"\t\tDISTINCT PRIVILEGE\" + \n\t\t\t\t\t\t\t\"\tORDER BY\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\t\tOBJECT_NAME\" + \n\t\t\t\t\t\t\t\"\t\tSEPARATOR '|'\" + \n\t\t\t\t\t\t\t\"\t) as PRIVS \" + \n\t\t\t\t\t\t\t\" FROM\" + \n\t\t\t\t\t\t\t\"\tSYS.EXA_DBA_OBJ_PRIVS P\" + \n\t\t\t\t\t\t\t\" GROUP BY\" + \n\t\t\t\t\t\t\t\"\tOBJECT_SCHEMA,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_TYPE,\" + \n\t\t\t\t\t\t\t\"\tGRANTEE,\" + \n\t\t\t\t\t\t\t\"\tOBJECT_NAME ORDER BY GRANTEE,OBJECT_SCHEMA,OBJECT_TYPE,OBJECT_NAME\");\n\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.systemGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolSystemGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ SELECT GRANTEE,PRIVILEGE,ADMIN_OPTION FROM SYS.EXA_DBA_SYS_PRIVS ORDER BY GRANTEE,PRIVILEGE\");\n\t\t}\n\t\t\n\t\tif (exasolCurrentUserPrivileges.getUserHasDictionaryAccess())\n\t\t{\n\t\t\tthis.roleGrantCache = new JDBCObjectSimpleCache<>(\n\t\t\t\t\tExasolRoleGrant.class,\n\t\t\t\t\t\"/*snapshot execution*/ select r.*,p.ADMIN_OPTION,p.GRANTEE from EXA_DBA_ROLES r \"\n\t\t\t\t\t+ \"INNER JOIN  EXA_DBA_ROLE_PRIVS p ON p.GRANTED_ROLE = r.ROLE_NAME ORDER BY P.GRANTEE,R.ROLE_NAME\"\n\t\t\t\t\t);\n\t\t}\n\n\t}\n","realPath":"plugins/org.jkiss.dbeaver.ext.exasol/src/org/jkiss/dbeaver/ext/exasol/model/ExasolDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":111,"status":"M"},{"authorDate":"2019-12-16 01:52:38","commitOrder":25,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","date":"2019-12-16 01:52:38","endLine":186,"groupId":"101089","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/2772889e8bea930ca2543c9ce19e5ad125e8df.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor) throws DBException\n    {\n        super.initialize(monitor);\n\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n\n            \r\n            DB2Schema defaultSchema = getDefaultSchema();\n            if (defaultSchema != null) {\n                this.db2CurrentUserPrivileges = new DB2CurrentUserPrivileges(monitor, session, defaultSchema.getName(), this);\n            }\n\n        } catch (SQLException e) {\n            LOG.warn(\"Error reading active schema\", e);\n        }\n\n        try {\n            this.dataTypeCache.getAllObjects(monitor, this);\n        } catch (DBException e) {\n            LOG.warn(\"Error reading types info\", e);\n            this.dataTypeCache.setCache(Collections.<DB2DataType> emptyList());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2DataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":164,"status":"N"}],"commitId":"a058306632adf156d030150b097e2181b227421b","commitMessage":"@@@Merge pull request #11204 from Sargul/devel\n\n#11202 Fix refresh of grants\n\nFormer-commit-id: b9a899085fa5ca2ca0c93b7cb631b41ec32c7b41","date":"2021-02-09 19:18:19","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"}]
