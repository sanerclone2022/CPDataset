[{"authorTime":"2021-06-22 02:29:23","codes":[{"authorDate":"2021-06-02 03:52:29","commitOrder":10,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME AND iex.COLUMN_POSITION(+)=ic.COLUMN_POSITION\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2021-06-02 03:52:29","endLine":1103,"groupId":"6020","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/d88f2cc72bc6edfd2408fc149badd729113241.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME AND iex.COLUMN_POSITION(+)=ic.COLUMN_POSITION\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":1075,"status":"NB"},{"authorDate":"2021-06-22 02:29:23","commitOrder":10,"curCode":"    public JDBCStatement prepareTableTriggersLoadStatement(@NotNull JDBCSession session, @NotNull GenericStructContainer genericStructContainer, @Nullable GenericTableBase table) throws SQLException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"SELECT trigger_name, event_object_table as OWNER, event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n            \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n            \"WHERE \");\n        if (table == null) {\n            sql.append(\"trigger_schema=?\");\n        } else {\n            sql.append(\"event_object_schema=? AND event_object_table=?\");\n        }\n        JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n        if (table == null) {\n            dbStat.setString(1, genericStructContainer.getName());\n        } else {\n            dbStat.setString(1, table.getSchema().getName());\n            dbStat.setString(2, table.getName());\n        }\n        return dbStat;\n    }\n","date":"2021-06-22 02:29:23","endLine":164,"groupId":"6020","id":2,"instanceNumber":2,"isCurCommit":1,"methodName":"prepareTableTriggersLoadStatement","params":"(@NotNullJDBCSessionsession@@NotNullGenericStructContainergenericStructContainer@@NullableGenericTableBasetable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d8/a51bc36f05e790ab52758ed81a41fe11d1797f.src","preCode":"    public JDBCStatement prepareTableTriggersLoadStatement(@NotNull JDBCSession session, @NotNull GenericStructContainer genericStructContainer, @Nullable GenericTableBase table) throws SQLException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"SELECT trigger_name, event_object_table as OWNER, event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n            \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n            \"WHERE \");\n        if (table == null) {\n            sql.append(\"trigger_schema=?\");\n        } else {\n            sql.append(\"event_object_schema=? AND event_object_table=?\");\n        }\n        JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n        if (table == null) {\n            dbStat.setString(1, genericStructContainer.getName());\n        } else {\n            dbStat.setString(1, table.getSchema().getName());\n            dbStat.setString(2, table.getName());\n        }\n        return dbStat;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"B"}],"commitId":"2518e4a91e5c228d6bef4abbf3b21f772004d581","commitMessage":"@@@Merge pull request #12885 from dbeaver/genericTriggersCache#11013\n\n#11013 add support of trigger cache for generic triggers","date":"2021-06-22 02:29:23","modifiedFileCount":"19","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-06-22 02:29:23","codes":[{"authorDate":"2021-07-02 21:32:11","commitOrder":11,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic \" +\n                    \"ON i.owner = ic.index_owner AND i.index_name = ic.index_name\\n\" +\n                    \"LEFT JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"ON iex.index_owner = i.owner AND iex.INDEX_NAME = i.INDEX_NAME AND iex.COLUMN_POSITION = ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2021-07-02 21:32:11","endLine":1107,"groupId":"12986","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0a/23df0c81641001d167c0bd1d0e88d63beff7ce.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME AND iex.COLUMN_POSITION(+)=ic.COLUMN_POSITION\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":1079,"status":"M"},{"authorDate":"2021-06-22 02:29:23","commitOrder":11,"curCode":"    public JDBCStatement prepareTableTriggersLoadStatement(@NotNull JDBCSession session, @NotNull GenericStructContainer genericStructContainer, @Nullable GenericTableBase table) throws SQLException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"SELECT trigger_name, event_object_table as OWNER, event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n            \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n            \"WHERE \");\n        if (table == null) {\n            sql.append(\"trigger_schema=?\");\n        } else {\n            sql.append(\"event_object_schema=? AND event_object_table=?\");\n        }\n        JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n        if (table == null) {\n            dbStat.setString(1, genericStructContainer.getName());\n        } else {\n            dbStat.setString(1, table.getSchema().getName());\n            dbStat.setString(2, table.getName());\n        }\n        return dbStat;\n    }\n","date":"2021-06-22 02:29:23","endLine":164,"groupId":"12986","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"prepareTableTriggersLoadStatement","params":"(@NotNullJDBCSessionsession@@NotNullGenericStructContainergenericStructContainer@@NullableGenericTableBasetable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d8/a51bc36f05e790ab52758ed81a41fe11d1797f.src","preCode":"    public JDBCStatement prepareTableTriggersLoadStatement(@NotNull JDBCSession session, @NotNull GenericStructContainer genericStructContainer, @Nullable GenericTableBase table) throws SQLException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"SELECT trigger_name, event_object_table as OWNER, event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n            \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n            \"WHERE \");\n        if (table == null) {\n            sql.append(\"trigger_schema=?\");\n        } else {\n            sql.append(\"event_object_schema=? AND event_object_table=?\");\n        }\n        JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n        if (table == null) {\n            dbStat.setString(1, genericStructContainer.getName());\n        } else {\n            dbStat.setString(1, table.getSchema().getName());\n            dbStat.setString(2, table.getName());\n        }\n        return dbStat;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"bb262cd3976422726b85a206b6bcbb7a3b3b0cb3","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-07-02 21:32:11","modifiedFileCount":"7","status":"M","submitter":"Serge Rider"}]
