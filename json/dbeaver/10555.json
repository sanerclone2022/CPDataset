[{"authorTime":"2019-09-19 22:13:47","codes":[{"authorDate":"2019-08-25 03:44:34","commitOrder":12,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-08-25 03:44:34","endLine":250,"groupId":"4736","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/08c7b142e367c5b26d8be93ee9d502783e9a5e.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"NB"},{"authorDate":"2019-09-19 22:13:47","commitOrder":12,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(GeneralUtils.DEFAULT_TIMESTAMP_PATTERN, Locale.ENGLISH);\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskConfigurationImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getDescriptor().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.name(\"objects\");\n            jsonWriter.beginArray();\n            for (Map<String, Object> objectInfo : task.getSourceObjects()) {\n                JSONUtils.serializeMap(jsonWriter, objectInfo);\n            }\n            jsonWriter.endArray();\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-19 22:13:47","endLine":184,"groupId":"5931","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a4/b2d65bf95c93521ceb2bc780cda010be1f3522.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(GeneralUtils.DEFAULT_TIMESTAMP_PATTERN, Locale.ENGLISH);\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskConfigurationImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getDescriptor().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.name(\"objects\");\n            jsonWriter.beginArray();\n            for (Map<String, Object> objectInfo : task.getSourceObjects()) {\n                JSONUtils.serializeMap(jsonWriter, objectInfo);\n            }\n            jsonWriter.endArray();\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"B"}],"commitId":"941a0f9e3eefea1c0251172d87f3fee44698afed","commitMessage":"@@@#2372 Tasks serialization\n\n\nFormer-commit-id: a42d97288d041d5d53b41b8db6d7495b5f4783ae","date":"2019-09-19 22:13:47","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-20 18:53:19","codes":[{"authorDate":"2019-08-25 03:44:34","commitOrder":13,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-08-25 03:44:34","endLine":250,"groupId":"4736","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/08c7b142e367c5b26d8be93ee9d502783e9a5e.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2019-09-20 18:53:19","commitOrder":13,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskConfigurationImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getDescriptor().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-20 18:53:19","endLine":244,"groupId":"5931","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e2/6065564b24082c6bd4afb32dcd48e9f98f2573.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(GeneralUtils.DEFAULT_TIMESTAMP_PATTERN, Locale.ENGLISH);\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskConfigurationImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getDescriptor().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.name(\"objects\");\n            jsonWriter.beginArray();\n            for (Map<String, Object> objectInfo : task.getSourceObjects()) {\n                JSONUtils.serializeMap(jsonWriter, objectInfo);\n            }\n            jsonWriter.endArray();\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":229,"status":"M"}],"commitId":"738d1fa9038f5eab1c7f1314e7fd70b92c5858c5","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 2c9304ff32e5535f9b615ada24e5a739b29ce6db","date":"2019-09-20 18:53:19","modifiedFileCount":"28","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-21 03:35:09","codes":[{"authorDate":"2019-08-25 03:44:34","commitOrder":14,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-08-25 03:44:34","endLine":250,"groupId":"4736","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/08c7b142e367c5b26d8be93ee9d502783e9a5e.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2019-09-21 03:35:09","commitOrder":14,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 03:35:09","endLine":250,"groupId":"14148","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f4/2603eb226e44bddbe8b5f10e099ade0c7cc496.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskConfigurationImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getDescriptor().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"}],"commitId":"a04ad2b5deaa053ab11e94f890c55baceae74e67","commitMessage":"@@@#2372 Tasks model refactoring\n\n\nFormer-commit-id: fda192cbbf5187631772b9e0e76f16490528f894","date":"2019-09-21 03:35:09","modifiedFileCount":"21","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 04:41:12","codes":[{"authorDate":"2019-08-25 03:44:34","commitOrder":15,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-08-25 03:44:34","endLine":250,"groupId":"4736","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/08c7b142e367c5b26d8be93ee9d502783e9a5e.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2019-09-21 04:41:12","commitOrder":15,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 04:41:12","endLine":267,"groupId":"14148","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/f29768810dfad7bae1bbf747ad9776cfe36906.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", dateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", dateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"2fdb17a96275ec66279de4c5ad72e3cd8e221b5e","commitMessage":"@@@#2372 Tasks runs + task view\n\n\nFormer-commit-id: beedad6343ccc26999c39c4bdcc48e7c27bb55c7","date":"2019-09-21 04:41:12","modifiedFileCount":"10","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2019-08-25 03:44:34","commitOrder":16,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-08-25 03:44:34","endLine":250,"groupId":"4736","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/08c7b142e367c5b26d8be93ee9d502783e9a5e.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2019-09-21 17:04:11","commitOrder":16,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getLabel());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"437b054a87dd75af9f6c6f826f306839002a3349","commitMessage":"@@@#2372 Task config UI. Model fixes\n\n\nFormer-commit-id: 62c852050717ddf1fd8298fea27cfc52489e436d","date":"2019-09-21 17:04:11","modifiedFileCount":"14","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2019-11-10 19:24:00","commitOrder":17,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-11-10 19:24:00","endLine":244,"groupId":"4736","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/8d4571e7f2822fb7f14225131d927601030fef.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        InputStream ifs = new ByteArrayInputStream(dsConfigBuffer.toByteArray());\n        try {\n            if (!configFile.exists()) {\n                configFile.create(ifs, true, monitor.getNestedMonitor());\n                configFile.setHidden(true);\n            } else {\n                configFile.setContents(ifs, true, false, monitor.getNestedMonitor());\n            }\n        } catch (CoreException e) {\n            throw new IOException(\"Error saving configuration to a file \" + configFile.getFullPath(), e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":17,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"01dce9aa47a4d8ee511eeed0f93bc1849c617f67","commitMessage":"@@@#3066 Support encrypted projects\n\n\nFormer-commit-id: e2edb91935649887853c19d0ec487a00ac921371","date":"2019-11-10 19:24:00","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2019-11-14 13:38:01","commitOrder":18,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","date":"2019-11-14 13:38:01","endLine":244,"groupId":"4736","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DataSourceOriginorigin@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/56/2fc63e39d2cedbc08050c1905f810cd84f3192.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":18,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"3e263d641088c6d92687b3042592fcd23d4996d0","commitMessage":"@@@Project config files create/load fix\n\n\nFormer-commit-id: d3ca9a0d5bcfcce806398a5ee4b8f4b0eb0864fe","date":"2019-11-14 13:38:01","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-02-28 01:13:05","commitOrder":19,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-02-28 01:13:05","endLine":247,"groupId":"17188","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a3/77d4b41e2765e3910a721157622ca27116509d.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceOrigin origin,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (origin.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (origin.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                origin);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":19,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"f269696f9ce6e3a674283956d81f80b495d73fe5","commitMessage":"@@@Connection configuration storage model\n\n\nFormer-commit-id: 29735c53430f6fbf3ddf838252fa443af41961d4","date":"2020-02-28 01:13:05","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-04-23 22:58:12","commitOrder":20,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile np : authProfiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, \"providerId\", np.getDataSourceProviderId());\n                            JSONUtils.fieldNE(jsonWriter, \"driverId\", np.getDriverId());\n                            JSONUtils.fieldNE(jsonWriter, \"authModel\", np.getAuthModelId());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            \r\n                            \r\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-04-23 22:58:12","endLine":275,"groupId":"15891","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/eb68dd741f785a1a4fc4e93fcc18bff0d11393.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":20,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"d7e2ffb490919260e8bcadcb6c11ed183c88e3d4","commitMessage":"@@@#2092 Auth profiles model\n\n\nFormer-commit-id: edf59735380e12b61383044f7e514b87a435e8fe","date":"2020-04-23 22:58:12","modifiedFileCount":"7","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-05-09 04:24:42","commitOrder":21,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile np : authProfiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, \"name\", np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, \"providerId\", np.getDataSourceProviderId());\n                            JSONUtils.fieldNE(jsonWriter, \"driverId\", np.getDriverId());\n                            JSONUtils.fieldNE(jsonWriter, \"authModel\", np.getAuthModelId());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            \r\n                            \r\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-05-09 04:24:42","endLine":276,"groupId":"15891","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/a85c9fc9c45b2d69647d2ef285def9ccaa0d65.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile np : authProfiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, \"providerId\", np.getDataSourceProviderId());\n                            JSONUtils.fieldNE(jsonWriter, \"driverId\", np.getDriverId());\n                            JSONUtils.fieldNE(jsonWriter, \"authModel\", np.getAuthModelId());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            \r\n                            \r\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":21,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"403d863ed1ae6a887675c1e4cce572a7351d46ae","commitMessage":"@@@User profiles model refactoring\n\n\nFormer-commit-id: efaf7d60414ed530dbafa236eadf80c15eab5365","date":"2020-05-09 04:24:42","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-05-09 16:14:06","commitOrder":22,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, authProfile.getUserName(), authProfile.getUserPassword());\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-05-09 16:14:06","endLine":278,"groupId":"0","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/fb2c6ac000784efca889827faeef1fb9fdd3d0.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileName());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile np : authProfiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, \"name\", np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, \"providerId\", np.getDataSourceProviderId());\n                            JSONUtils.fieldNE(jsonWriter, \"driverId\", np.getDriverId());\n                            JSONUtils.fieldNE(jsonWriter, \"authModel\", np.getAuthModelId());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            \r\n                            \r\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":22,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"f40ba395c280ad201643724e44932667030d950a","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles save/load\n\n\nFormer-commit-id: 367bd191dfaeb8934393b93bff05669127ebe3c5","date":"2020-05-09 16:14:06","modifiedFileCount":"10","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-05-09 21:09:11","commitOrder":23,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":278,"groupId":"11891","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException, IOException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, authProfile.getUserName(), authProfile.getUserPassword());\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":23,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"143e3e26e71697948c95b12ae688d8001720ee92","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles in action. Secure credentials save/load redesign\n\n\nFormer-commit-id: d067f67cc5e19315598a3f81e52650781b0ba358","date":"2020-05-09 21:09:11","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-05-21 00:42:28","commitOrder":24,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-05-21 00:42:28","endLine":278,"groupId":"11891","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ca/502816893164b4e67553fc4b047008d5318c3a.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DriverDescriptor driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":24,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"ff59e73cc27e1ca332a4bd9c67fb7c378a456d8d","commitMessage":"@@@Driver model refactoring (use interface when possible)\n\n\nFormer-commit-id: ecd60ae84194c665e6be76ea94565680de6edd40","date":"2020-05-21 00:42:28","modifiedFileCount":"20","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-06-12 22:22:15","commitOrder":25,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","date":"2020-06-12 22:22:15","endLine":278,"groupId":"11891","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@IFileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/aacf27d13067dd7b2bbbb773de4c1f303cfc72.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isTemporary()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":25,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"f2eb69c53d22873f37b9674e682be5280d8e6f1c","commitMessage":"@@@CB-156 Detached datasources.\n\n\nFormer-commit-id: e19749e0dadcb3d75d48157a77f224bec84c79a9","date":"2020-06-12 22:22:15","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2020-10-02 23:54:48","commitOrder":26,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        File configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(configFile, jsonString, false, encryptProject);\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                configFile.getParentFile(),\n                configurationStorage);\n        }\n    }\n","date":"2020-10-02 23:54:48","endLine":269,"groupId":"11891","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@FileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/a409ddf7eb45631ba769aaa9df6f6c58284147.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        IFile configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(monitor.getNestedMonitor(), configFile, jsonString, false, encryptProject);\n        try {\n            configFile.setHidden(true);\n        } catch (CoreException e) {\n            log.debug(e);\n        }\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                (IFolder) configFile.getParent(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":26,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"ea034ccee4d4adf5781bdda7bf8cbc10b0361fbf","commitMessage":"@@@Project metadata refactoring (use plain file system instead of VFS)\n\n\nFormer-commit-id: 48363063710ed387cc7ad5ee1afa59df416403df","date":"2020-10-02 23:54:48","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-21 17:04:11","codes":[{"authorDate":"2021-03-17 19:55:27","commitOrder":27,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        File configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            JSONUtils.field(jsonWriter, \"auto-close-transactions\", ct.isAutoCloseTransactions());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(configFile, jsonString, false, encryptProject);\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                configFile.getParentFile(),\n                configurationStorage);\n        }\n    }\n","date":"2021-03-17 19:55:27","endLine":274,"groupId":"11891","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@FileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3e/65d4f120cceac29b562bb359edbdb570aa71c2.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        File configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(configFile, jsonString, false, encryptProject);\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                configFile.getParentFile(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2019-09-21 17:04:11","commitOrder":27,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2019-09-21 17:04:11","endLine":267,"groupId":"5931","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/9a0df52b55bdbccbe46d752e17f05c5d9a46b8.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"N"}],"commitId":"6e3cb12c7ad08750a577888b7bf1833ddbf208b5","commitMessage":"@@@#10158 Add default \"close txn\" property in connection type\n\n\nFormer-commit-id: 9f950e0c1f9ce3228fee26cb416958f05473e9c8","date":"2021-03-17 19:55:27","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-08-23 16:10:05","codes":[{"authorDate":"2021-03-17 19:55:27","commitOrder":28,"curCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        File configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            JSONUtils.field(jsonWriter, \"auto-close-transactions\", ct.isAutoCloseTransactions());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(configFile, jsonString, false, encryptProject);\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                configFile.getParentFile(),\n                configurationStorage);\n        }\n    }\n","date":"2021-03-17 19:55:27","endLine":274,"groupId":"10555","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSources","params":"(DBRProgressMonitormonitor@DBPDataSourceConfigurationStorageconfigurationStorage@List<DataSourceDescriptor>localDataSources@FileconfigFile)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3e/65d4f120cceac29b562bb359edbdb570aa71c2.src","preCode":"    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources,\n        File configFile) throws DBException\n    {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(\"\\t\");\n                jsonWriter.beginObject();\n\n                \r\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(\"folders\");\n                    jsonWriter.beginObject();\n                    \r\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        saveFolder(jsonWriter, folder);\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                {\n                    \r\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        \r\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(jsonWriter, dataSource);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            {\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        \r\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        jsonWriter.name(\"network-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBWNetworkProfile np : profiles) {\n                            jsonWriter.name(np.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n                            jsonWriter.name(\"handlers\");\n                            jsonWriter.beginObject();\n                            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                                if (configuration.hasValuableInfo()) {\n                                    saveNetworkHandlerConfiguration(\n                                        jsonWriter,\n                                        null,\n                                        np,\n                                        configuration);\n                                }\n                            }\n                            jsonWriter.endObject();\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        jsonWriter.name(\"auth-profiles\");\n                        jsonWriter.beginObject();\n                        for (DBAAuthProfile authProfile : authProfiles) {\n                            jsonWriter.name(authProfile.getProfileId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n                            if (authProfile.isSavePassword()) {\n                                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n                            }\n                            \r\n                            saveSecuredCredentials(null, authProfile, null, new SecureCredentials(authProfile));\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                    \r\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    \r\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            JSONUtils.field(jsonWriter, \"auto-close-transactions\", ct.isAutoCloseTransactions());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    \r\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                ((DriverDescriptor) driver).serialize(jsonWriter, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources json\", e);\n        }\n\n        String jsonString = new String(dsConfigBuffer.toByteArray(), StandardCharsets.UTF_8);\n        boolean encryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        saveConfigFile(configFile, jsonString, false, encryptProject);\n\n        {\n            saveSecureCredentialsFile(\n                monitor.getNestedMonitor(),\n                configFile.getParentFile(),\n                configurationStorage);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2021-08-23 16:10:05","commitOrder":28,"curCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        if (!CommonUtils.isEmpty(tasksFolders)) {\n            jsonWriter.name(TASKS_FOLDERS_TAG);\n            jsonWriter.beginObject();\n            for (TaskFolderImpl taskFolder : tasksFolders) {\n                jsonWriter.name(taskFolder.getName());\n                jsonWriter.beginObject();\n                jsonWriter.endObject();\n            }\n            jsonWriter.endObject();\n        }\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            DBTTaskFolder taskFolder = task.getTaskFolder();\n            if (taskFolder != null) {\n                JSONUtils.field(jsonWriter, \"taskFolder\", taskFolder.getName());\n            }\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","date":"2021-08-23 16:10:05","endLine":415,"groupId":"10555","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"serializeTasks","params":"(DBRProgressMonitormonitor@JsonWriterjsonWriter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/70/10a16582542953430d5caceeda4a4aec950ce4.src","preCode":"    private void serializeTasks(DBRProgressMonitor monitor, JsonWriter jsonWriter) throws IOException {\n        jsonWriter.setIndent(\"\\t\");\n        jsonWriter.beginObject();\n        for (TaskImpl task : tasks) {\n            jsonWriter.name(task.getId());\n            jsonWriter.beginObject();\n            JSONUtils.field(jsonWriter, \"task\", task.getType().getId());\n            JSONUtils.field(jsonWriter, \"label\", task.getName());\n            JSONUtils.field(jsonWriter, \"description\", task.getDescription());\n            JSONUtils.field(jsonWriter, \"createTime\", systemDateFormat.format(task.getCreateTime()));\n            JSONUtils.field(jsonWriter, \"updateTime\", systemDateFormat.format(task.getUpdateTime()));\n            JSONUtils.serializeProperties(jsonWriter, \"state\", task.getProperties());\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/task/TaskManagerImpl.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"M"}],"commitId":"845c46f8e268dfb2cdc60d2c276d66df44943297","commitMessage":"@@@Merge pull request #13288 from dbeaver/taskFolder#1040\n\ndbeaver/dbeaver-ee#1040 task folders implementation","date":"2021-08-23 16:10:05","modifiedFileCount":"17","status":"M","submitter":"Serge Rider"}]
