[{"authorTime":"2020-06-30 20:45:43","codes":[{"authorDate":"2020-09-17 23:43:28","commitOrder":4,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, SQLServerUIMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, SQLServerUIMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        return composite;\n    }\n","date":"2020-09-17 23:43:28","endLine":51,"groupId":"5763","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/34/fe18292f9780b99f46b43c7daee4c7d3325a93.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, SQLServerUIMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, SQLServerUIMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql.ui/src/org/jkiss/dbeaver/ext/mssql/ui/SQLServerCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"B"},{"authorDate":"2020-06-30 20:45:43","commitOrder":4,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2020-06-30 20:45:43","endLine":197,"groupId":"15905","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ee/93de194f2b80d48d6bbf398e13ec0f54bbba8b.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"NB"}],"commitId":"9782b45ee639b58a7527dfdad5b08dda39a36655","commitMessage":"@@@Merge pull request #9800 from dbeaver/mssql-actions#9362\n\n#9362 Add manager for SQLServerDatabase\n\nFormer-commit-id: ac94c6b8219d8d7df61aa1c25c442c503fc1aa38","date":"2020-09-17 23:43:28","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-10-22 03:34:12","codes":[{"authorDate":"2020-09-17 23:43:28","commitOrder":5,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, SQLServerUIMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, SQLServerUIMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        return composite;\n    }\n","date":"2020-09-17 23:43:28","endLine":51,"groupId":"5763","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/34/fe18292f9780b99f46b43c7daee4c7d3325a93.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, SQLServerUIMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, SQLServerUIMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql.ui/src/org/jkiss/dbeaver/ext/mssql/ui/SQLServerCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"},{"authorDate":"2020-10-22 03:34:12","commitOrder":5,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Create database\", 1);\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2020-10-22 03:34:12","endLine":200,"groupId":"5763","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d7/2fc3093319797b33797cfb1245b083a5475484.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"}],"commitId":"1531780e27a6f66e59dfdd2d191dc6ba30b4b732","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: c304b479046b8eb2fa1c446038eb335db35c1c89","date":"2020-10-22 03:34:12","modifiedFileCount":"9","status":"M","submitter":"serge-rider"},{"authorTime":"2021-01-17 00:41:37","codes":[{"authorDate":"2020-09-17 23:43:28","commitOrder":6,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, SQLServerUIMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, SQLServerUIMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        return composite;\n    }\n","date":"2020-09-17 23:43:28","endLine":51,"groupId":"101175","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/34/fe18292f9780b99f46b43c7daee4c7d3325a93.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, SQLServerUIMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, SQLServerUIMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql.ui/src/org/jkiss/dbeaver/ext/mssql/ui/SQLServerCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"N"},{"authorDate":"2021-01-17 00:41:37","commitOrder":6,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Create database\", 1);\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n                    allTemplates.addAll(dataSource.getDatabases().stream().map(PostgreDatabase::getName).collect(Collectors.toList()));\n                    allTemplates.sort(Comparator.naturalOrder());\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2021-01-17 00:41:37","endLine":204,"groupId":"101175","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/1abc078373ff05d3b76fead829d37fe9e93e04.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Create database\", 1);\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"810d072c59434e77c6826190a948656997981979","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 8f4b2ca24097722fcbe18fc0af3ace918a0035d6","date":"2021-01-17 00:41:37","modifiedFileCount":"11","status":"M","submitter":"serge-rider"}]
