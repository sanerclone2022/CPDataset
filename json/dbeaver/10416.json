[{"authorTime":"2020-07-05 17:55:54","codes":[{"authorDate":"2020-07-05 17:55:54","commitOrder":4,"curCode":"    private static void openResultsWith(IResultSetController resultSet, DataTransferProcessorDescriptor processor) {\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        List<DBDAttributeBinding> rsSelectedAttributes = rsSelection.getSelectedAttributes();\n        if (rsSelectedRows.size() > 1 || rsSelectedAttributes.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n            List<String> selectedAttributes = new ArrayList<>();\n            for (DBDAttributeBinding attributeBinding : rsSelectedAttributes) {\n                selectedAttributes.add(attributeBinding.getName());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(selectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open \" + processor.getAppName(), ModelMessages.error_not_connected_to_database);\n            return;\n        }\n\n        DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();\n        String prevActiveApp = preferenceStore.getString(PARAM_ACTIVE_APP);\n        if (!CommonUtils.equalObjects(prevActiveApp, processor.getFullId())) {\n            \r\n            \r\n            \r\n        }\n\n        AbstractJob exportJob = new AbstractJob(\"Open \" + processor.getAppName()) {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"data-files\");\n                    File tempFile = new File(tempDir, new SimpleDateFormat(\n                        \"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".\" + processor.getAppFileExtension());\n                    tempFile.deleteOnExit();\n\n                    IDataTransferProcessor processorInstance = processor.getInstance();\n                    if (!(processorInstance instanceof IStreamDataExporter)) {\n                        return Status.CANCEL_STATUS;\n                    }\n                    IStreamDataExporter exporter = (IStreamDataExporter) processorInstance;\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = new HashMap<>();\n                    \r\n                    IDialogSettings dtSettings = DataTransferWizard.getWizardDialogSettings();\n                    IDialogSettings procListSection = dtSettings.getSection(\"processors\");\n                    IDialogSettings procSettings = null;\n                    if (procListSection != null) {\n                        procSettings = procListSection.getSection(\"stream_consumer:\" + processor.getId());\n                    }\n\n                    for (DBPPropertyDescriptor prop : processor.getProperties()) {\n                        Object defValue = procSettings == null ? null : procSettings.get(CommonUtils.toString(prop.getId()));\n                        properties.put(prop.getId(), defValue != null ? defValue : prop.getDefaultValue());\n                    }\n                    \r\n                    properties.remove(StreamConsumerSettings.PROP_FILE_EXTENSION);\n\n                    consumer.initTransfer(\n                        dataContainer,\n                        settings,\n                        new IDataTransferConsumer.TransferParameters(processor.isBinaryFormat(), processor.isHTMLFormat()),\n                        exporter,\n                        properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    \r\n                    producerSettings.setOpenNewConnections(false);\n                    producerSettings.setSelectedRowsOnly(!CommonUtils.isEmpty(options.getSelectedRows()));\n                    producerSettings.setSelectedColumnsOnly(!CommonUtils.isEmpty(options.getSelectedColumns()));\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\n                                \"Open \" + processor.getAppName(),\n                                \"Can't open \" + processor.getAppFileExtension() + \" file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in \" + processor.getAppName(), null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n    }\n","date":"2020-07-05 17:55:54","endLine":234,"groupId":"4811","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"openResultsWith","params":"(IResultSetControllerresultSet@DataTransferProcessorDescriptorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3e/9ccda3f12429b8928499331e9f7190768aaf1c.src","preCode":"    private static void openResultsWith(IResultSetController resultSet, DataTransferProcessorDescriptor processor) {\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        List<DBDAttributeBinding> rsSelectedAttributes = rsSelection.getSelectedAttributes();\n        if (rsSelectedRows.size() > 1 || rsSelectedAttributes.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n            List<String> selectedAttributes = new ArrayList<>();\n            for (DBDAttributeBinding attributeBinding : rsSelectedAttributes) {\n                selectedAttributes.add(attributeBinding.getName());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(selectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open \" + processor.getAppName(), ModelMessages.error_not_connected_to_database);\n            return;\n        }\n\n        DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();\n        String prevActiveApp = preferenceStore.getString(PARAM_ACTIVE_APP);\n        if (!CommonUtils.equalObjects(prevActiveApp, processor.getFullId())) {\n            \r\n            \r\n            \r\n        }\n\n        AbstractJob exportJob = new AbstractJob(\"Open \" + processor.getAppName()) {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"data-files\");\n                    File tempFile = new File(tempDir, new SimpleDateFormat(\n                        \"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".\" + processor.getAppFileExtension());\n                    tempFile.deleteOnExit();\n\n                    IDataTransferProcessor processorInstance = processor.getInstance();\n                    if (!(processorInstance instanceof IStreamDataExporter)) {\n                        return Status.CANCEL_STATUS;\n                    }\n                    IStreamDataExporter exporter = (IStreamDataExporter) processorInstance;\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = new HashMap<>();\n                    \r\n                    IDialogSettings dtSettings = DataTransferWizard.getWizardDialogSettings();\n                    IDialogSettings procListSection = dtSettings.getSection(\"processors\");\n                    IDialogSettings procSettings = null;\n                    if (procListSection != null) {\n                        procSettings = procListSection.getSection(\"stream_consumer:\" + processor.getId());\n                    }\n\n                    for (DBPPropertyDescriptor prop : processor.getProperties()) {\n                        Object defValue = procSettings == null ? null : procSettings.get(CommonUtils.toString(prop.getId()));\n                        properties.put(prop.getId(), defValue != null ? defValue : prop.getDefaultValue());\n                    }\n                    \r\n                    properties.remove(StreamConsumerSettings.PROP_FILE_EXTENSION);\n\n                    consumer.initTransfer(\n                        dataContainer,\n                        settings,\n                        new IDataTransferConsumer.TransferParameters(processor.isBinaryFormat(), processor.isHTMLFormat()),\n                        exporter,\n                        properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    \r\n                    producerSettings.setOpenNewConnections(false);\n                    producerSettings.setSelectedRowsOnly(!CommonUtils.isEmpty(options.getSelectedRows()));\n                    producerSettings.setSelectedColumnsOnly(!CommonUtils.isEmpty(options.getSelectedColumns()));\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\n                                \"Open \" + processor.getAppName(),\n                                \"Can't open \" + processor.getAppFileExtension() + \" file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in \" + processor.getAppName(), null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/handler/ResultSetHandlerOpenWith.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"MB"},{"authorDate":"2020-07-05 17:55:54","commitOrder":4,"curCode":"    public Object execute(ExecutionEvent event) throws ExecutionException\n    {\n    \tIResultSetController resultSet = ResultSetHandlerMain.getActiveResultSet(HandlerUtil.getActivePart(event));\n        if (resultSet == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", \"No active results viewer\");\n            return null;\n        }\n\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        if (rsSelectedRows.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n            List<String> selectedAttributes = new ArrayList<>();\n            for (DBDAttributeBinding attributeBinding : rsSelection.getSelectedAttributes()) {\n                selectedAttributes.add(attributeBinding.getName());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(selectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", ModelMessages.error_not_connected_to_database);\n            return null;\n        }\n\n\n        AbstractJob exportJob = new AbstractJob(\"Open Excel\") {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"office-files\");\n                    File tempFile = new File(tempDir,\n                        CommonUtils.escapeFileName(CommonUtils.truncateString(dataContainer.getName(), 32)) +\n                            \".\" + new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".xlsx\");\n                    tempFile.deleteOnExit();\n\n                    StreamExporterAbstract exporter = new DataExporterXLSX();\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = DataExporterXLSX.getDefaultProperties();\n                    consumer.initTransfer(dataContainer, settings, new IDataTransferConsumer.TransferParameters(true, false), exporter, properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    producerSettings.setSelectedRowsOnly(true);\n                    producerSettings.setSelectedColumnsOnly(true);\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\"Open XLSX\", \"Can't open XLSX file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in Excel\", null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n\n        return null;\n    }\n","date":"2020-07-05 17:55:54","endLine":141,"groupId":"8188","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(ExecutionEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/f9c0a0120b3fa9c765eb95bf1c5051740d477f.src","preCode":"    public Object execute(ExecutionEvent event) throws ExecutionException\n    {\n    \tIResultSetController resultSet = ResultSetHandlerMain.getActiveResultSet(HandlerUtil.getActivePart(event));\n        if (resultSet == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", \"No active results viewer\");\n            return null;\n        }\n\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        if (rsSelectedRows.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n            List<String> selectedAttributes = new ArrayList<>();\n            for (DBDAttributeBinding attributeBinding : rsSelection.getSelectedAttributes()) {\n                selectedAttributes.add(attributeBinding.getName());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(selectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", ModelMessages.error_not_connected_to_database);\n            return null;\n        }\n\n\n        AbstractJob exportJob = new AbstractJob(\"Open Excel\") {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"office-files\");\n                    File tempFile = new File(tempDir,\n                        CommonUtils.escapeFileName(CommonUtils.truncateString(dataContainer.getName(), 32)) +\n                            \".\" + new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".xlsx\");\n                    tempFile.deleteOnExit();\n\n                    StreamExporterAbstract exporter = new DataExporterXLSX();\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = DataExporterXLSX.getDefaultProperties();\n                    consumer.initTransfer(dataContainer, settings, new IDataTransferConsumer.TransferParameters(true, false), exporter, properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    producerSettings.setSelectedRowsOnly(true);\n                    producerSettings.setSelectedColumnsOnly(true);\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\"Open XLSX\", \"Can't open XLSX file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in Excel\", null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.office.ui/src/org/jkiss/dbeaver/data/office/ui/handlers/OpenSpreadsheetHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"MB"}],"commitId":"a735616187ae38240f70bfebbd04711c5174962e","commitMessage":"@@@Properties model refactoring\n\n\nFormer-commit-id: 16ca7c8c54e6a5dfe239a57ba98edc8f1f273349","date":"2020-07-05 17:55:54","modifiedFileCount":"58","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-08-20 17:44:34","codes":[{"authorDate":"2021-08-20 17:44:34","commitOrder":5,"curCode":"    private static void openResultsWith(IResultSetController resultSet, DataTransferProcessorDescriptor processor) {\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        List<DBDAttributeBinding> rsSelectedAttributes = rsSelection.getSelectedAttributes();\n        if (rsSelectedRows.size() > 1 || rsSelectedAttributes.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(rsSelectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open \" + processor.getAppName(), ModelMessages.error_not_connected_to_database);\n            return;\n        }\n\n        DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();\n        String prevActiveApp = preferenceStore.getString(PARAM_ACTIVE_APP);\n        if (!CommonUtils.equalObjects(prevActiveApp, processor.getFullId())) {\n            \r\n            \r\n            \r\n        }\n\n        AbstractJob exportJob = new AbstractJob(\"Open \" + processor.getAppName()) {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"data-files\");\n                    File tempFile = new File(tempDir, new SimpleDateFormat(\n                        \"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".\" + processor.getAppFileExtension());\n                    tempFile.deleteOnExit();\n\n                    IDataTransferProcessor processorInstance = processor.getInstance();\n                    if (!(processorInstance instanceof IStreamDataExporter)) {\n                        return Status.CANCEL_STATUS;\n                    }\n                    IStreamDataExporter exporter = (IStreamDataExporter) processorInstance;\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = new HashMap<>();\n                    \r\n                    IDialogSettings dtSettings = DataTransferWizard.getWizardDialogSettings();\n                    IDialogSettings procListSection = dtSettings.getSection(\"processors\");\n                    IDialogSettings procSettings = null;\n                    if (procListSection != null) {\n                        procSettings = procListSection.getSection(\"stream_consumer:\" + processor.getId());\n                    }\n\n                    for (DBPPropertyDescriptor prop : processor.getProperties()) {\n                        Object defValue = procSettings == null ? null : procSettings.get(CommonUtils.toString(prop.getId()));\n                        properties.put(prop.getId(), defValue != null ? defValue : prop.getDefaultValue());\n                    }\n                    \r\n                    properties.remove(StreamConsumerSettings.PROP_FILE_EXTENSION);\n\n                    consumer.initTransfer(\n                        dataContainer,\n                        settings,\n                        new IDataTransferConsumer.TransferParameters(processor.isBinaryFormat(), processor.isHTMLFormat()),\n                        exporter,\n                        properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    \r\n                    producerSettings.setOpenNewConnections(false);\n                    producerSettings.setSelectedRowsOnly(!CommonUtils.isEmpty(options.getSelectedRows()));\n                    producerSettings.setSelectedColumnsOnly(!CommonUtils.isEmpty(options.getSelectedColumns()));\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\n                                \"Open \" + processor.getAppName(),\n                                \"Can't open \" + processor.getAppFileExtension() + \" file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in \" + processor.getAppName(), null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n    }\n","date":"2021-08-20 17:44:34","endLine":230,"groupId":"4811","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"openResultsWith","params":"(IResultSetControllerresultSet@DataTransferProcessorDescriptorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/70/788bf010a915026be00e3ab56ba01acb6f1aa8.src","preCode":"    private static void openResultsWith(IResultSetController resultSet, DataTransferProcessorDescriptor processor) {\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        List<DBDAttributeBinding> rsSelectedAttributes = rsSelection.getSelectedAttributes();\n        if (rsSelectedRows.size() > 1 || rsSelectedAttributes.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n            List<String> selectedAttributes = new ArrayList<>();\n            for (DBDAttributeBinding attributeBinding : rsSelectedAttributes) {\n                selectedAttributes.add(attributeBinding.getName());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(selectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open \" + processor.getAppName(), ModelMessages.error_not_connected_to_database);\n            return;\n        }\n\n        DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();\n        String prevActiveApp = preferenceStore.getString(PARAM_ACTIVE_APP);\n        if (!CommonUtils.equalObjects(prevActiveApp, processor.getFullId())) {\n            \r\n            \r\n            \r\n        }\n\n        AbstractJob exportJob = new AbstractJob(\"Open \" + processor.getAppName()) {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"data-files\");\n                    File tempFile = new File(tempDir, new SimpleDateFormat(\n                        \"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".\" + processor.getAppFileExtension());\n                    tempFile.deleteOnExit();\n\n                    IDataTransferProcessor processorInstance = processor.getInstance();\n                    if (!(processorInstance instanceof IStreamDataExporter)) {\n                        return Status.CANCEL_STATUS;\n                    }\n                    IStreamDataExporter exporter = (IStreamDataExporter) processorInstance;\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = new HashMap<>();\n                    \r\n                    IDialogSettings dtSettings = DataTransferWizard.getWizardDialogSettings();\n                    IDialogSettings procListSection = dtSettings.getSection(\"processors\");\n                    IDialogSettings procSettings = null;\n                    if (procListSection != null) {\n                        procSettings = procListSection.getSection(\"stream_consumer:\" + processor.getId());\n                    }\n\n                    for (DBPPropertyDescriptor prop : processor.getProperties()) {\n                        Object defValue = procSettings == null ? null : procSettings.get(CommonUtils.toString(prop.getId()));\n                        properties.put(prop.getId(), defValue != null ? defValue : prop.getDefaultValue());\n                    }\n                    \r\n                    properties.remove(StreamConsumerSettings.PROP_FILE_EXTENSION);\n\n                    consumer.initTransfer(\n                        dataContainer,\n                        settings,\n                        new IDataTransferConsumer.TransferParameters(processor.isBinaryFormat(), processor.isHTMLFormat()),\n                        exporter,\n                        properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    \r\n                    producerSettings.setOpenNewConnections(false);\n                    producerSettings.setSelectedRowsOnly(!CommonUtils.isEmpty(options.getSelectedRows()));\n                    producerSettings.setSelectedColumnsOnly(!CommonUtils.isEmpty(options.getSelectedColumns()));\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\n                                \"Open \" + processor.getAppName(),\n                                \"Can't open \" + processor.getAppFileExtension() + \" file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in \" + processor.getAppName(), null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/handler/ResultSetHandlerOpenWith.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2021-08-20 17:44:34","commitOrder":5,"curCode":"    public Object execute(ExecutionEvent event)\n    {\n    \tIResultSetController resultSet = ResultSetHandlerMain.getActiveResultSet(HandlerUtil.getActivePart(event));\n        if (resultSet == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", \"No active results viewer\");\n            return null;\n        }\n\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        if (rsSelectedRows.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(rsSelection.getSelectedAttributes());\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", ModelMessages.error_not_connected_to_database);\n            return null;\n        }\n\n\n        AbstractJob exportJob = new AbstractJob(\"Open Excel\") {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"office-files\");\n                    File tempFile = new File(tempDir,\n                        CommonUtils.escapeFileName(CommonUtils.truncateString(dataContainer.getName(), 32)) +\n                            \".\" + new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".xlsx\");\n                    tempFile.deleteOnExit();\n\n                    StreamExporterAbstract exporter = new DataExporterXLSX();\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = DataExporterXLSX.getDefaultProperties();\n                    consumer.initTransfer(dataContainer, settings, new IDataTransferConsumer.TransferParameters(true, false), exporter, properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    producerSettings.setSelectedRowsOnly(true);\n                    producerSettings.setSelectedColumnsOnly(true);\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\"Open XLSX\", \"Can't open XLSX file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in Excel\", null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n\n        return null;\n    }\n","date":"2021-08-20 17:44:34","endLine":135,"groupId":"8188","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"execute","params":"(ExecutionEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/7cfe01eb526848a8f6927a36377db9230b3ee2.src","preCode":"    public Object execute(ExecutionEvent event) throws ExecutionException\n    {\n    \tIResultSetController resultSet = ResultSetHandlerMain.getActiveResultSet(HandlerUtil.getActivePart(event));\n        if (resultSet == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", \"No active results viewer\");\n            return null;\n        }\n\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        if (rsSelectedRows.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n            List<String> selectedAttributes = new ArrayList<>();\n            for (DBDAttributeBinding attributeBinding : rsSelection.getSelectedAttributes()) {\n                selectedAttributes.add(attributeBinding.getName());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(selectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", ModelMessages.error_not_connected_to_database);\n            return null;\n        }\n\n\n        AbstractJob exportJob = new AbstractJob(\"Open Excel\") {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"office-files\");\n                    File tempFile = new File(tempDir,\n                        CommonUtils.escapeFileName(CommonUtils.truncateString(dataContainer.getName(), 32)) +\n                            \".\" + new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".xlsx\");\n                    tempFile.deleteOnExit();\n\n                    StreamExporterAbstract exporter = new DataExporterXLSX();\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = DataExporterXLSX.getDefaultProperties();\n                    consumer.initTransfer(dataContainer, settings, new IDataTransferConsumer.TransferParameters(true, false), exporter, properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    producerSettings.setSelectedRowsOnly(true);\n                    producerSettings.setSelectedColumnsOnly(true);\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\"Open XLSX\", \"Can't open XLSX file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in Excel\", null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.office.ui/src/org/jkiss/dbeaver/data/office/ui/handlers/OpenSpreadsheetHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"}],"commitId":"358b92b5931a3cb9379af683a65894348db851a5","commitMessage":"@@@Merge pull request #13588 from dbeaver/transferEqualNameColumns#12676\n\n#12676 change filtered transfer column list parameter","date":"2021-08-20 17:44:34","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-09-02 21:24:22","codes":[{"authorDate":"2021-09-02 21:24:22","commitOrder":6,"curCode":"    private static void openResultsWith(IResultSetController resultSet, DataTransferProcessorDescriptor processor) {\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        List<DBDAttributeBinding> rsSelectedAttributes = rsSelection.getSelectedAttributes();\n        if (rsSelectedRows.size() > 1 || rsSelectedAttributes.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(rsSelectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open \" + processor.getAppName(), ModelMessages.error_not_connected_to_database);\n            return;\n        }\n\n        DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();\n        String prevActiveApp = preferenceStore.getString(PARAM_ACTIVE_APP);\n        if (!CommonUtils.equalObjects(prevActiveApp, processor.getFullId())) {\n            \r\n            \r\n            \r\n        }\n\n        AbstractJob exportJob = new AbstractJob(\"Open \" + processor.getAppName()) {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"data-files\");\n                    File tempFile = new File(tempDir, new SimpleDateFormat(\n                        \"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".\" + processor.getAppFileExtension());\n                    tempFile.deleteOnExit();\n\n                    IDataTransferProcessor processorInstance = processor.getInstance();\n                    if (!(processorInstance instanceof IStreamDataExporter)) {\n                        return Status.CANCEL_STATUS;\n                    }\n                    IStreamDataExporter exporter = (IStreamDataExporter) processorInstance;\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = new HashMap<>();\n                    \r\n                    IDialogSettings dtSettings = DataTransferWizard.getWizardDialogSettings();\n                    IDialogSettings procListSection = dtSettings.getSection(\"processors\");\n                    IDialogSettings procSettings = null;\n                    if (procListSection != null) {\n                        procSettings = procListSection.getSection(\"stream_consumer:\" + processor.getId());\n                    }\n\n                    for (DBPPropertyDescriptor prop : processor.getProperties()) {\n                        Object defValue = procSettings == null ? null : procSettings.get(CommonUtils.toString(prop.getId()));\n                        properties.put(prop.getId(), defValue != null ? defValue : prop.getDefaultValue());\n                    }\n                    \r\n                    properties.remove(StreamConsumerSettings.PROP_FILE_EXTENSION);\n\n                    consumer.initTransfer(\n                        dataContainer,\n                        settings,\n                        new IDataTransferConsumer.TransferParameters(processor.isBinaryFormat(), processor.isHTMLFormat()),\n                        exporter,\n                        properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    \r\n                    producerSettings.setOpenNewConnections(false);\n                    producerSettings.setSelectedRowsOnly(!CommonUtils.isEmpty(options.getSelectedRows()));\n                    producerSettings.setSelectedColumnsOnly(!CommonUtils.isEmpty(options.getSelectedColumns()));\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!ShellUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\n                                \"Open \" + processor.getAppName(),\n                                \"Can't open \" + processor.getAppFileExtension() + \" file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in \" + processor.getAppName(), null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n    }\n","date":"2021-09-02 21:24:22","endLine":231,"groupId":"10416","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"openResultsWith","params":"(IResultSetControllerresultSet@DataTransferProcessorDescriptorprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1a/62ad89a3af9ed1b2fdb1f819c8c474e2d0e155.src","preCode":"    private static void openResultsWith(IResultSetController resultSet, DataTransferProcessorDescriptor processor) {\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        List<DBDAttributeBinding> rsSelectedAttributes = rsSelection.getSelectedAttributes();\n        if (rsSelectedRows.size() > 1 || rsSelectedAttributes.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(rsSelectedAttributes);\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open \" + processor.getAppName(), ModelMessages.error_not_connected_to_database);\n            return;\n        }\n\n        DBPPreferenceStore preferenceStore = DBWorkbench.getPlatform().getPreferenceStore();\n        String prevActiveApp = preferenceStore.getString(PARAM_ACTIVE_APP);\n        if (!CommonUtils.equalObjects(prevActiveApp, processor.getFullId())) {\n            \r\n            \r\n            \r\n        }\n\n        AbstractJob exportJob = new AbstractJob(\"Open \" + processor.getAppName()) {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"data-files\");\n                    File tempFile = new File(tempDir, new SimpleDateFormat(\n                        \"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".\" + processor.getAppFileExtension());\n                    tempFile.deleteOnExit();\n\n                    IDataTransferProcessor processorInstance = processor.getInstance();\n                    if (!(processorInstance instanceof IStreamDataExporter)) {\n                        return Status.CANCEL_STATUS;\n                    }\n                    IStreamDataExporter exporter = (IStreamDataExporter) processorInstance;\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = new HashMap<>();\n                    \r\n                    IDialogSettings dtSettings = DataTransferWizard.getWizardDialogSettings();\n                    IDialogSettings procListSection = dtSettings.getSection(\"processors\");\n                    IDialogSettings procSettings = null;\n                    if (procListSection != null) {\n                        procSettings = procListSection.getSection(\"stream_consumer:\" + processor.getId());\n                    }\n\n                    for (DBPPropertyDescriptor prop : processor.getProperties()) {\n                        Object defValue = procSettings == null ? null : procSettings.get(CommonUtils.toString(prop.getId()));\n                        properties.put(prop.getId(), defValue != null ? defValue : prop.getDefaultValue());\n                    }\n                    \r\n                    properties.remove(StreamConsumerSettings.PROP_FILE_EXTENSION);\n\n                    consumer.initTransfer(\n                        dataContainer,\n                        settings,\n                        new IDataTransferConsumer.TransferParameters(processor.isBinaryFormat(), processor.isHTMLFormat()),\n                        exporter,\n                        properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    \r\n                    producerSettings.setOpenNewConnections(false);\n                    producerSettings.setSelectedRowsOnly(!CommonUtils.isEmpty(options.getSelectedRows()));\n                    producerSettings.setSelectedColumnsOnly(!CommonUtils.isEmpty(options.getSelectedColumns()));\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\n                                \"Open \" + processor.getAppName(),\n                                \"Can't open \" + processor.getAppFileExtension() + \" file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in \" + processor.getAppName(), null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/handler/ResultSetHandlerOpenWith.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2021-09-02 21:24:22","commitOrder":6,"curCode":"    public Object execute(ExecutionEvent event)\n    {\n    \tIResultSetController resultSet = ResultSetHandlerMain.getActiveResultSet(HandlerUtil.getActivePart(event));\n        if (resultSet == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", \"No active results viewer\");\n            return null;\n        }\n\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        if (rsSelectedRows.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(rsSelection.getSelectedAttributes());\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", ModelMessages.error_not_connected_to_database);\n            return null;\n        }\n\n\n        AbstractJob exportJob = new AbstractJob(\"Open Excel\") {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"office-files\");\n                    File tempFile = new File(tempDir,\n                        CommonUtils.escapeFileName(CommonUtils.truncateString(dataContainer.getName(), 32)) +\n                            \".\" + new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".xlsx\");\n                    tempFile.deleteOnExit();\n\n                    StreamExporterAbstract exporter = new DataExporterXLSX();\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = DataExporterXLSX.getDefaultProperties();\n                    consumer.initTransfer(dataContainer, settings, new IDataTransferConsumer.TransferParameters(true, false), exporter, properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    producerSettings.setSelectedRowsOnly(true);\n                    producerSettings.setSelectedColumnsOnly(true);\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!ShellUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\"Open XLSX\", \"Can't open XLSX file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in Excel\", null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n\n        return null;\n    }\n","date":"2021-09-02 21:24:22","endLine":136,"groupId":"10416","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"execute","params":"(ExecutionEventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cc/bd2bb63099d454b5a72ca064b84fda2752ade2.src","preCode":"    public Object execute(ExecutionEvent event)\n    {\n    \tIResultSetController resultSet = ResultSetHandlerMain.getActiveResultSet(HandlerUtil.getActivePart(event));\n        if (resultSet == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", \"No active results viewer\");\n            return null;\n        }\n\n\n        ResultSetDataContainerOptions options = new ResultSetDataContainerOptions();\n\n        IResultSetSelection rsSelection = resultSet.getSelection();\n        List<ResultSetRow> rsSelectedRows = rsSelection.getSelectedRows();\n        if (rsSelectedRows.size() > 1) {\n            List<Long> selectedRows = new ArrayList<>();\n            for (ResultSetRow selectedRow : rsSelectedRows) {\n                selectedRows.add((long) selectedRow.getRowNumber());\n            }\n\n            options.setSelectedRows(selectedRows);\n            options.setSelectedColumns(rsSelection.getSelectedAttributes());\n        }\n        ResultSetDataContainer dataContainer = new ResultSetDataContainer(resultSet, options);\n        if (dataContainer.getDataSource() == null) {\n            DBWorkbench.getPlatformUI().showError(\"Open Excel\", ModelMessages.error_not_connected_to_database);\n            return null;\n        }\n\n\n        AbstractJob exportJob = new AbstractJob(\"Open Excel\") {\n\n            {\n                setUser(true);\n                setSystem(false);\n            }\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    File tempDir = DBWorkbench.getPlatform().getTempFolder(monitor, \"office-files\");\n                    File tempFile = new File(tempDir,\n                        CommonUtils.escapeFileName(CommonUtils.truncateString(dataContainer.getName(), 32)) +\n                            \".\" + new SimpleDateFormat(\"yyyyMMdd-HHmmss\").format(System.currentTimeMillis()) + \".xlsx\");\n                    tempFile.deleteOnExit();\n\n                    StreamExporterAbstract exporter = new DataExporterXLSX();\n\n                    StreamTransferConsumer consumer = new StreamTransferConsumer();\n                    StreamConsumerSettings settings = new StreamConsumerSettings();\n\n                    settings.setOutputEncodingBOM(false);\n                    settings.setOpenFolderOnFinish(false);\n                    settings.setOutputFolder(tempDir.getAbsolutePath());\n                    settings.setOutputFilePattern(tempFile.getName());\n\n                    Map<String, Object> properties = DataExporterXLSX.getDefaultProperties();\n                    consumer.initTransfer(dataContainer, settings, new IDataTransferConsumer.TransferParameters(true, false), exporter, properties);\n\n                    DBDDataFilter dataFilter = resultSet.getModel().getDataFilter();\n                    DatabaseTransferProducer producer = new DatabaseTransferProducer(dataContainer, dataFilter);\n                    DatabaseProducerSettings producerSettings = new DatabaseProducerSettings();\n                    producerSettings.setExtractType(DatabaseProducerSettings.ExtractType.SINGLE_QUERY);\n                    producerSettings.setQueryRowCount(false);\n                    producerSettings.setSelectedRowsOnly(true);\n                    producerSettings.setSelectedColumnsOnly(true);\n\n                    producer.transferData(monitor, consumer, null, producerSettings, null);\n\n                    consumer.finishTransfer(monitor, false);\n\n                    UIUtils.asyncExec(() -> {\n                        if (!UIUtils.launchProgram(tempFile.getAbsolutePath())) {\n                            DBWorkbench.getPlatformUI().showError(\"Open XLSX\", \"Can't open XLSX file '\" + tempFile.getAbsolutePath() + \"'\");\n                        }\n                    });\n                } catch (Exception e) {\n                    DBWorkbench.getPlatformUI().showError(\"Error opening in Excel\", null, e);\n                }\n                return Status.OK_STATUS;\n            }\n        };\n        exportJob.schedule();\n\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.office.ui/src/org/jkiss/dbeaver/data/office/ui/handlers/OpenSpreadsheetHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"3eedcbae5af5e0afa898feb4ddcfe176e749fa69","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-09-02 21:24:22","modifiedFileCount":"26","status":"M","submitter":"Serge Rider"}]
