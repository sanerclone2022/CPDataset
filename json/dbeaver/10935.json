[{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2019-03-05 21:10:55","commitOrder":5,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService() {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2019-03-05 21:10:55","endLine":229,"groupId":"14195","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ff/994ccc4273c3e94ec18fbd4c55baf9a424c2a3.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService() {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.acl/src/org/jkiss/dbeaver/ui/editors/acl/ObjectACLEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"NB"},{"authorDate":"2019-04-02 01:47:10","commitOrder":5,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2019-04-02 01:47:11","endLine":224,"groupId":"10459","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0a/3057bb19016cca4f4288c463d8efa61e4a18fe.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/editors/PostgresRolePrivilegesEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"B"}],"commitId":"7a2a046c695d937956bf3cfc4af587277855d06a","commitMessage":"@@@#10 Model/UI refactoring\n\n\nFormer-commit-id: 6acc10c1a419b15f7094be6e35e04b63145dae91","date":"2019-04-02 01:47:11","modifiedFileCount":"39","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2021-05-05 23:14:47","commitOrder":6,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService(boolean forUpdate) {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2021-05-05 23:14:47","endLine":229,"groupId":"14195","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/86fea64bcf49ab533a78d96c70ba215efebafc.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService() {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.acl/src/org/jkiss/dbeaver/ui/editors/acl/ObjectACLEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-04-02 01:47:10","commitOrder":6,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2019-04-02 01:47:11","endLine":224,"groupId":"10459","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0a/3057bb19016cca4f4288c463d8efa61e4a18fe.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/editors/PostgresRolePrivilegesEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"c31116ede2f3819b6713823f8afab2c390f8dfa4","commitMessage":"@@@#12361 Boolean editor UIX changed. Metadata editor now shows modified/added rows/columns.\n\n\nFormer-commit-id: 875fee6563a0dd47b3e4de275cb0f22561acf3e9","date":"2021-05-05 23:14:47","modifiedFileCount":"15","status":"M","submitter":"serge-rider"},{"authorTime":"2021-05-21 22:25:22","codes":[{"authorDate":"2021-05-05 23:14:47","commitOrder":7,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService(boolean forUpdate) {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2021-05-05 23:14:47","endLine":229,"groupId":"14195","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/86fea64bcf49ab533a78d96c70ba215efebafc.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService(boolean forUpdate) {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.acl/src/org/jkiss/dbeaver/ui/editors/acl/ObjectACLEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2021-05-21 22:25:22","commitOrder":7,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : getDatabaseObject().getDataSource().getSupportedPrivilegeTypes()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2021-05-21 22:25:22","endLine":223,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/13/bb8dbf21ab2757d55d072fc443197cc5762a3c.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/editors/PostgresRolePrivilegesEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"f2f7bb78e6641cab5685dd2c493ffa9665398d2e","commitMessage":"@@@Merge pull request #12543 from dbeaver/redshift-users-support#11912\n\n#11912 Redshift: Add support for users and permissions","date":"2021-05-21 22:25:22","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-05-27 16:34:59","codes":[{"authorDate":"2021-05-05 23:14:47","commitOrder":8,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService(boolean forUpdate) {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2021-05-05 23:14:47","endLine":229,"groupId":"10935","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/86fea64bcf49ab533a78d96c70ba215efebafc.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof DBSSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : privilegeMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return DBAPrivilegeOwner.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new ObjectListControl<DBAPrivilege>(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK, new ListContentProvider()) {\n                @Override\n                protected String getListConfigId(List<Class<?>> classList) {\n                    return ObjectACLEditor.this.getClass().getName();\n                }\n\n                @Override\n                protected LoadingJob<Collection<DBAPrivilege>> createLoadService(boolean forUpdate) {\n                    return null;\n                }\n            };\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, \"Grant All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, \"Revoke All\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.acl/src/org/jkiss/dbeaver/ui/editors/acl/ObjectACLEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2021-05-27 16:34:59","commitOrder":8,"curCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    final DBXTreeFolder meta = ((DBNDatabaseFolder) element).getMeta();\n                    final Class<?> childType = meta.getSource().getObjectClass(meta.getType());\n                    if (childType == null) {\n                        return false;\n                    }\n                    return PostgreTableReal.class.isAssignableFrom(childType) ||\n                        PostgreSequence.class.isAssignableFrom(childType) ||\n                        PostgreProcedure.class.isAssignableFrom(childType);\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : getDatabaseObject().getDataSource().getSupportedPrivilegeTypes()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","date":"2021-05-27 16:34:59","endLine":220,"groupId":"10935","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createPartControl","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a9/5fb75f167b4b3808bcf70b22ed3cdc8becab99.src","preCode":"    public void createPartControl(Composite parent) {\n        this.pageControl = new PageControl(parent);\n\n        SashForm composite = UIUtils.createPartDivider(getSite().getPart(), this.pageControl, SWT.HORIZONTAL);\n        composite.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        roleOrObjectTable = new DatabaseNavigatorTree(\n            composite,\n            DBWorkbench.getPlatform().getNavigatorModel().getRoot(),\n            SWT.MULTI | SWT.FULL_SELECTION,\n            false,\n            isRoleEditor() ? new DatabaseObjectFilter() : null);\n        roleOrObjectTable.setLayoutData(new GridData(GridData.FILL_BOTH));\n        final TreeViewer treeViewer = roleOrObjectTable.getViewer();\n        treeViewer.setLabelProvider(new DatabaseNavigatorLabelProvider(treeViewer) {\n            @Override\n            public Font getFont(Object element) {\n                if (element instanceof DBNDatabaseNode) {\n                    DBSObject object = ((DBNDatabaseNode) element).getObject();\n                    if (object instanceof PostgreSchema) {\n                        String schemaPrefix = DBUtils.getQuotedIdentifier(object) + \".\";\n                        for (String tableName : permissionMap.keySet()) {\n                            if (tableName.startsWith(schemaPrefix)) {\n                                return boldFont;\n                            }\n                        }\n                    } else if (getObjectPermissions(object) != null) {\n                        return boldFont;\n                    }\n                }\n                return null;\n            }\n        });\n        treeViewer.addSelectionChangedListener(event -> handleSelectionChange());\n        treeViewer.addFilter(new ViewerFilter() {\n            @Override\n            public boolean select(Viewer viewer, Object parentElement, Object element) {\n                if (element instanceof DBNNode && !(element instanceof DBNDatabaseNode)) {\n                    return false;\n                }\n                if (element instanceof DBNDatabaseFolder) {\n                    try {\n                        String elementTypeName = ((DBNDatabaseFolder) element).getMeta().getType();\n                        if (elementTypeName == null) {\n                            return false;\n                        }\n                        Class<?> childType = Class.forName(elementTypeName);\n                        return PostgreTableReal.class.isAssignableFrom(childType) ||\n                            PostgreSequence.class.isAssignableFrom(childType) ||\n                            PostgreProcedure.class.isAssignableFrom(childType);\n                    } catch (ClassNotFoundException e) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n        });\n\n        {\n            permEditPanel = new Composite(composite, SWT.NONE);\n            permEditPanel.setLayout(new GridLayout(1, true));\n\n            permissionTable = new Table(permEditPanel, SWT.FULL_SELECTION | SWT.CHECK);\n            permissionTable.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            permissionTable.setHeaderVisible(true);\n            permissionTable.setLinesVisible(true);\n            UIUtils.createTableColumn(permissionTable, SWT.LEFT, PostgreMessages.dialog_create_table_column_name_permission);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_garant);\n            UIUtils.createTableColumn(permissionTable, SWT.CENTER, PostgreMessages.dialog_create_table_column_name_with_hierarchy);\n            permissionTable.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (e.detail == SWT.CHECK) {\n                        updateCurrentPrivileges(((TableItem) e.item).getChecked(), (PostgrePrivilegeType) e.item.getData());\n                    }\n                }\n            });\n            permissionTable.addMouseListener(new MouseAdapter() {\n                @Override\n                public void mouseDown(MouseEvent e) {\n                    super.mouseDown(e);\n                }\n            });\n\n            if (!isRoleEditor()) {\n                for (PostgrePrivilegeType pt : getDatabaseObject().getDataSource().getSupportedPrivilegeTypes()) {\n                    if (!pt.isValid() || !pt.supportsType(getDatabaseObject().getClass())) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n            }\n\n            Composite buttonPanel = new Composite(permEditPanel, SWT.NONE);\n            buttonPanel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n            buttonPanel.setLayout(new RowLayout());\n\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_grant_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadNonChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (!item.getChecked()) hadNonChecked = true;\n                        item.setChecked(true);\n                    }\n                    if (hadNonChecked) updateCurrentPrivileges(true, null);\n                }\n            });\n            UIUtils.createPushButton(buttonPanel, PostgreMessages.dialog_create_push_button_revoke_all, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    boolean hadChecked = false;\n                    for (TableItem item : permissionTable.getItems()) {\n                        if (item.getChecked()) hadChecked = true;\n                        item.setChecked(false);\n                    }\n                    if (hadChecked) {\n                        updateCurrentPrivileges(false, null);\n                    }\n                }\n            });\n\n            objectDescriptionText = new Text(permEditPanel, SWT.READ_ONLY | SWT.MULTI | SWT.WRAP | SWT.V_SCROLL);\n            objectDescriptionText.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        }\n\n        pageControl.createOrSubstituteProgressPanel(getSite());\n        updateObjectPermissions(null);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/editors/PostgresRolePrivilegesEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"7a30457c02d4306e03de7a90046275f519bfba42","commitMessage":"@@@Merge pull request #12610 from dbeaver/redshift-user-editor-fix#11912\n\n#11912 Redshift user editor fix","date":"2021-05-27 16:34:59","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"}]
