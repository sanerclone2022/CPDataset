[{"authorTime":"2018-12-21 18:34:13","codes":[{"authorDate":"2018-12-21 18:34:13","commitOrder":2,"curCode":"    public void loadSettings(IRunnableContext runnableContext, DataTransferSettings dataTransferSettings, IDialogSettings dialogSettings) {\n        this.dialogSettings = dialogSettings;\n\n        containerNodePath = dialogSettings.get(\"container\");\n        if (dialogSettings.get(\"openNewConnections\") != null) {\n            openNewConnections = dialogSettings.getBoolean(\"openNewConnections\");\n        }\n        if (dialogSettings.get(\"useTransactions\") != null) {\n            useTransactions = dialogSettings.getBoolean(\"useTransactions\");\n        }\n        if (dialogSettings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = dialogSettings.getInt(\"commitAfterRows\");\n        }\n        if (dialogSettings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = dialogSettings.getBoolean(\"truncateBeforeLoad\");\n        }\n        if (dialogSettings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = dialogSettings.getBoolean(\"openTableOnFinish\");\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","date":"2018-12-21 18:34:13","endLine":211,"groupId":"4553","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(IRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@IDialogSettingsdialogSettings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/19/8db8591ecac9a11a521748cb594e33f1ca4786.src","preCode":"    public void loadSettings(IRunnableContext runnableContext, DataTransferSettings dataTransferSettings, IDialogSettings dialogSettings) {\n        this.dialogSettings = dialogSettings;\n\n        containerNodePath = dialogSettings.get(\"container\");\n        if (dialogSettings.get(\"openNewConnections\") != null) {\n            openNewConnections = dialogSettings.getBoolean(\"openNewConnections\");\n        }\n        if (dialogSettings.get(\"useTransactions\") != null) {\n            useTransactions = dialogSettings.getBoolean(\"useTransactions\");\n        }\n        if (dialogSettings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = dialogSettings.getInt(\"commitAfterRows\");\n        }\n        if (dialogSettings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = dialogSettings.getBoolean(\"truncateBeforeLoad\");\n        }\n        if (dialogSettings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = dialogSettings.getBoolean(\"openTableOnFinish\");\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"MB"},{"authorDate":"2018-12-21 18:34:13","commitOrder":2,"curCode":"    public void addDataMappings(IRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n            if (mappings != null) {\n                IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2018-12-21 18:34:13","endLine":299,"groupId":"4553","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(IRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/19/8db8591ecac9a11a521748cb594e33f1ca4786.src","preCode":"    public void addDataMappings(IRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n            if (mappings != null) {\n                IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"B"}],"commitId":"e6c1e5291f047875025dec9db3ca7c8e35af4566","commitMessage":"@@@#4529 Save/load transfer mappings\n\n\nFormer-commit-id: fe37494ba0d599dfc61017a45f6e8dac6914f5de","date":"2018-12-21 18:34:13","modifiedFileCount":"7","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-12-21 18:34:13","codes":[{"authorDate":"2019-07-25 18:18:03","commitOrder":3,"curCode":"    public void loadSettings(IRunnableContext runnableContext, DataTransferSettings dataTransferSettings, IDialogSettings dialogSettings) {\n        this.dialogSettings = dialogSettings;\n\n        containerNodePath = dialogSettings.get(\"container\");\n        if (dialogSettings.get(\"openNewConnections\") != null) {\n            openNewConnections = dialogSettings.getBoolean(\"openNewConnections\");\n        }\n        if (dialogSettings.get(\"useTransactions\") != null) {\n            useTransactions = dialogSettings.getBoolean(\"useTransactions\");\n        }\n        if (dialogSettings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = dialogSettings.getInt(\"commitAfterRows\");\n        }\n        if (dialogSettings.get(\"transferAutoGeneratedColumns\") != null) {\n            transferAutoGeneratedColumns = dialogSettings.getBoolean(\"transferAutoGeneratedColumns\");\n        }\n        if (dialogSettings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = dialogSettings.getBoolean(\"truncateBeforeLoad\");\n        }\n        if (dialogSettings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = dialogSettings.getBoolean(\"openTableOnFinish\");\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-07-25 18:18:03","endLine":224,"groupId":"4553","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(IRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@IDialogSettingsdialogSettings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/61/57627a08925f27ea209988c691ab93ef10ea7b.src","preCode":"    public void loadSettings(IRunnableContext runnableContext, DataTransferSettings dataTransferSettings, IDialogSettings dialogSettings) {\n        this.dialogSettings = dialogSettings;\n\n        containerNodePath = dialogSettings.get(\"container\");\n        if (dialogSettings.get(\"openNewConnections\") != null) {\n            openNewConnections = dialogSettings.getBoolean(\"openNewConnections\");\n        }\n        if (dialogSettings.get(\"useTransactions\") != null) {\n            useTransactions = dialogSettings.getBoolean(\"useTransactions\");\n        }\n        if (dialogSettings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = dialogSettings.getInt(\"commitAfterRows\");\n        }\n        if (dialogSettings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = dialogSettings.getBoolean(\"truncateBeforeLoad\");\n        }\n        if (dialogSettings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = dialogSettings.getBoolean(\"openTableOnFinish\");\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"},{"authorDate":"2018-12-21 18:34:13","commitOrder":3,"curCode":"    public void addDataMappings(IRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n            if (mappings != null) {\n                IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2018-12-21 18:34:13","endLine":299,"groupId":"4553","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(IRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/19/8db8591ecac9a11a521748cb594e33f1ca4786.src","preCode":"    public void addDataMappings(IRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n            if (mappings != null) {\n                IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":286,"status":"N"}],"commitId":"66c88194a591bae0ee036375cb162951ee249543","commitMessage":"@@@#2193 Data transfer: disable auto-increment/identity columns migration (configurable)\n\n\nFormer-commit-id: 56b9083315367830d41452a591229fcb965b8218","date":"2019-07-25 18:18:03","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-05 22:50:26","codes":[{"authorDate":"2019-09-05 22:50:26","commitOrder":4,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = (String) settings.get(\"container\");\n        if (settings.get(\"openNewConnections\") != null) {\n            openNewConnections = CommonUtils.toBoolean(settings.get(\"openNewConnections\"));\n        }\n        if (settings.get(\"useTransactions\") != null) {\n            useTransactions = CommonUtils.toBoolean(settings.get(\"useTransactions\"));\n        }\n        if (settings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"));\n        }\n        if (settings.get(\"transferAutoGeneratedColumns\") != null) {\n            transferAutoGeneratedColumns = CommonUtils.toBoolean(settings.get(\"transferAutoGeneratedColumns\"));\n        }\n        if (settings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = CommonUtils.toBoolean(settings.get(\"truncateBeforeLoad\"));\n        }\n        if (settings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = CommonUtils.toBoolean(settings.get(\"openTableOnFinish\"));\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-09-05 22:50:27","endLine":216,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/0657e09fca14435019cbae3478c9bf18f16a5a.src","preCode":"    public void loadSettings(IRunnableContext runnableContext, DataTransferSettings dataTransferSettings, IDialogSettings dialogSettings) {\n        this.dialogSettings = dialogSettings;\n\n        containerNodePath = dialogSettings.get(\"container\");\n        if (dialogSettings.get(\"openNewConnections\") != null) {\n            openNewConnections = dialogSettings.getBoolean(\"openNewConnections\");\n        }\n        if (dialogSettings.get(\"useTransactions\") != null) {\n            useTransactions = dialogSettings.getBoolean(\"useTransactions\");\n        }\n        if (dialogSettings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = dialogSettings.getInt(\"commitAfterRows\");\n        }\n        if (dialogSettings.get(\"transferAutoGeneratedColumns\") != null) {\n            transferAutoGeneratedColumns = dialogSettings.getBoolean(\"transferAutoGeneratedColumns\");\n        }\n        if (dialogSettings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = dialogSettings.getBoolean(\"truncateBeforeLoad\");\n        }\n        if (dialogSettings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = dialogSettings.getBoolean(\"openTableOnFinish\");\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-09-05 22:50:26","commitOrder":4,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2019-09-05 22:50:27","endLine":318,"groupId":"16108","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/0657e09fca14435019cbae3478c9bf18f16a5a.src","preCode":"    public void addDataMappings(IRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            IDialogSettings mappings = dialogSettings.getSection(\"mappings\");\n            if (mappings != null) {\n                IDialogSettings dmcSettings = mappings.getSection(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"}],"commitId":"83afbc9e5a1cdbd8c0636ddac4cbd4b769a38a8a","commitMessage":"@@@#2372 DT UI deps fixes\n\n\nFormer-commit-id: 1b89da3d0a4c5be7d56679c6cd6816f1ffee4e1a","date":"2019-09-05 22:50:27","modifiedFileCount":"7","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-05 22:50:26","codes":[{"authorDate":"2019-09-05 23:24:05","commitOrder":5,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-09-05 23:24:05","endLine":206,"groupId":"12605","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f6/c0e0587dd40ee440127427b7f4dd1fe54a4164.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = (String) settings.get(\"container\");\n        if (settings.get(\"openNewConnections\") != null) {\n            openNewConnections = CommonUtils.toBoolean(settings.get(\"openNewConnections\"));\n        }\n        if (settings.get(\"useTransactions\") != null) {\n            useTransactions = CommonUtils.toBoolean(settings.get(\"useTransactions\"));\n        }\n        if (settings.get(\"commitAfterRows\") != null) {\n            commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"));\n        }\n        if (settings.get(\"transferAutoGeneratedColumns\") != null) {\n            transferAutoGeneratedColumns = CommonUtils.toBoolean(settings.get(\"transferAutoGeneratedColumns\"));\n        }\n        if (settings.get(\"truncateBeforeLoad\") != null) {\n            truncateBeforeLoad = CommonUtils.toBoolean(settings.get(\"truncateBeforeLoad\"));\n        }\n        if (settings.get(\"openTableOnFinish\") != null) {\n            openTableOnFinish = CommonUtils.toBoolean(settings.get(\"openTableOnFinish\"));\n        }\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2019-09-05 22:50:26","commitOrder":5,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2019-09-05 22:50:27","endLine":318,"groupId":"16108","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/0657e09fca14435019cbae3478c9bf18f16a5a.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"}],"commitId":"b2917510c91988a2a166cbeaa45570fac967ac26","commitMessage":"@@@#2372 DT settings save/load redesign\n\n\nFormer-commit-id: 2b60ac3e5046c88096b6cc732ec85732a8965735","date":"2019-09-05 23:24:05","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-09-05 22:50:26","codes":[{"authorDate":"2019-10-03 20:32:10","commitOrder":6,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    DBSObject dbObject = producer.getDatabaseObject();\n                    if (dbObject instanceof DBSDataContainer) {\n                        DBSDataContainer sourceDC = (DBSDataContainer)dbObject;\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                        if (dmcSettings != null) {\n                            DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                            dataMappings.put(sourceDC, dmc);\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2019-10-03 20:32:10","endLine":225,"groupId":"3486","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/23/70b73ee90fc2b6d77ebc0df4a3c78da406c6cd.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        {\n            List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                DBSDataContainer sourceDatacontainer = dmc.getSource();\n                if (sourceDatacontainer != null) {\n                    Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                    if (dmcSettings != null) {\n                        dmc.loadSettings(runnableContext, dmcSettings);\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2019-09-05 22:50:26","commitOrder":6,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2019-09-05 22:50:27","endLine":318,"groupId":"16108","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/0657e09fca14435019cbae3478c9bf18f16a5a.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"}],"commitId":"b14420c4cfc8e313e0b4c0651abff504d00a2170","commitMessage":"@@@#6896 Data consumer settings loading fix\n\n\nFormer-commit-id: 5596b3fd10a1338073f4a48043b86492ec71da7a","date":"2019-10-03 20:32:10","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 00:00:35","codes":[{"authorDate":"2020-08-08 00:00:35","commitOrder":7,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":227,"groupId":"6244","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    DBSObject dbObject = producer.getDatabaseObject();\n                    if (dbObject instanceof DBSDataContainer) {\n                        DBSDataContainer sourceDC = (DBSDataContainer)dbObject;\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                        if (dmcSettings != null) {\n                            DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                            dataMappings.put(sourceDC, dmc);\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2020-08-08 00:00:35","commitOrder":7,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":337,"groupId":"16108","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"M"}],"commitId":"83cb41dafd0d1dcf825062aeeaa3d91dc5cf8d51","commitMessage":"@@@Merge pull request #9476 from dbeaver/data_transfer_import\n\nData transfer redesign\n\nFormer-commit-id: 6757b47eb1c6c5b26bb4388bf2492bfdc5f9f5df","date":"2020-08-08 00:00:35","modifiedFileCount":"55","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 00:00:35","codes":[{"authorDate":"2020-09-04 22:24:50","commitOrder":8,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2020-09-04 22:24:50","endLine":237,"groupId":"6244","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e2/51f720642dc6a0968f6ae2916b3112ec6f18f0.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":175,"status":"M"},{"authorDate":"2020-08-08 00:00:35","commitOrder":8,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":337,"groupId":"16108","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"55ab449f0628cfd04a25a917e95d8350c47e29da","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 6339b9a021804f8f25f26b564106e5e0d2433277","date":"2020-09-04 22:24:50","modifiedFileCount":"9","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 00:00:35","codes":[{"authorDate":"2020-12-11 01:30:48","commitOrder":9,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2020-12-11 01:30:48","endLine":246,"groupId":"6244","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/c96b50d9f9b3ac4ac6feedbd072e0754910e34.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":184,"status":"M"},{"authorDate":"2020-08-08 00:00:35","commitOrder":9,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":337,"groupId":"16108","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"3e4a3614d4d271e745d6ba7e1902e237be8684f6","commitMessage":"@@@Merge pull request #10634 from dbeaver/insertReplacesql#10533\n\nInsert replacesql#10533\n\nFormer-commit-id: e20cece06f3b2c7d5ed8104e0b664fc55fd99502","date":"2020-12-11 01:30:48","modifiedFileCount":"36","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 00:00:35","codes":[{"authorDate":"2021-03-10 17:33:12","commitOrder":10,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        disableReferentialIntegrity = CommonUtils.getBoolean(settings.get(\"disableReferentialIntegrity\"), disableReferentialIntegrity);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-03-10 17:33:12","endLine":248,"groupId":"6244","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b3/7bf81d670be4c88262d9cbd9290220d5818af8.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-08-08 00:00:35","commitOrder":10,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":337,"groupId":"16108","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"13df6378e1eee354df6c2940ad79f976a8cc0ab1","commitMessage":"@@@Merge pull request #11620 from dbeaver/referential-integrity#11047\n\n#11047 add disabling referential integrity in data import to oracle\n\nFormer-commit-id: dfcf87fb05456470aadf8eeea4207c9b715c1e4b","date":"2021-03-10 17:33:12","modifiedFileCount":"12","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 00:00:35","codes":[{"authorDate":"2021-07-20 14:49:29","commitOrder":11,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        useMultiRowInsert = CommonUtils.getBoolean(settings.get(\"useMultiRowInsert\"), useMultiRowInsert);\n        multiRowInsertBatch = CommonUtils.toInt(settings.get(\"multiRowInsertBatch\"), multiRowInsertBatch);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        disableReferentialIntegrity = CommonUtils.getBoolean(settings.get(\"disableReferentialIntegrity\"), disableReferentialIntegrity);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-07-20 14:49:29","endLine":268,"groupId":"6244","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4f/fd0107e859442a0ba303ea09d4942d83e9c757.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        disableReferentialIntegrity = CommonUtils.getBoolean(settings.get(\"disableReferentialIntegrity\"), disableReferentialIntegrity);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":203,"status":"M"},{"authorDate":"2020-08-08 00:00:35","commitOrder":11,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":337,"groupId":"16108","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"cb8eaf29cd0a4cb6417f30eca75262d1964f789f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-07-20 14:49:29","modifiedFileCount":"15","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 00:00:35","codes":[{"authorDate":"2021-08-20 17:46:52","commitOrder":12,"curCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        useMultiRowInsert = CommonUtils.getBoolean(settings.get(\"useMultiRowInsert\"), useMultiRowInsert);\n        multiRowInsertBatch = CommonUtils.toInt(settings.get(\"multiRowInsertBatch\"), multiRowInsertBatch);\n        skipBindValues = CommonUtils.getBoolean(settings.get(\"skipBindValues\"), skipBindValues);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        disableReferentialIntegrity = CommonUtils.getBoolean(settings.get(\"disableReferentialIntegrity\"), disableReferentialIntegrity);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","date":"2021-08-20 17:46:52","endLine":278,"groupId":"10668","id":21,"instanceNumber":1,"isCurCommit":1,"methodName":"loadSettings","params":"(DBRRunnableContextrunnableContext@DataTransferSettingsdataTransferSettings@Map<String@Object>settings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cb/68b098e05f59560491b48ad253e16a73bf95d8.src","preCode":"    public void loadSettings(DBRRunnableContext runnableContext, DataTransferSettings dataTransferSettings, Map<String, Object> settings) {\n        this.dialogSettings = settings;\n\n        containerNodePath = CommonUtils.toString(settings.get(\"container\"), containerNodePath);\n        openNewConnections = CommonUtils.getBoolean(settings.get(\"openNewConnections\"), openNewConnections);\n        useTransactions = CommonUtils.getBoolean(settings.get(\"useTransactions\"), useTransactions);\n        onDuplicateKeyInsertMethodId = CommonUtils.toString(settings.get(\"onDuplicateKeyMethod\"), onDuplicateKeyInsertMethodId);\n        commitAfterRows = CommonUtils.toInt(settings.get(\"commitAfterRows\"), commitAfterRows);\n        useMultiRowInsert = CommonUtils.getBoolean(settings.get(\"useMultiRowInsert\"), useMultiRowInsert);\n        multiRowInsertBatch = CommonUtils.toInt(settings.get(\"multiRowInsertBatch\"), multiRowInsertBatch);\n        disableUsingBatches = CommonUtils.getBoolean(settings.get(\"disableUsingBatches\"), disableUsingBatches);\n        transferAutoGeneratedColumns = CommonUtils.getBoolean(settings.get(\"transferAutoGeneratedColumns\"), transferAutoGeneratedColumns);\n        disableReferentialIntegrity = CommonUtils.getBoolean(settings.get(\"disableReferentialIntegrity\"), disableReferentialIntegrity);\n        truncateBeforeLoad = CommonUtils.getBoolean(settings.get(\"truncateBeforeLoad\"), truncateBeforeLoad);\n        openTableOnFinish = CommonUtils.getBoolean(settings.get(\"openTableOnFinish\"), openTableOnFinish);\n\n        List<DataTransferPipe> dataPipes = dataTransferSettings.getDataPipes();\n        {\n            if (!dataPipes.isEmpty()) {\n                IDataTransferConsumer consumer = dataPipes.get(0).getConsumer();\n                if (consumer instanceof DatabaseTransferConsumer) {\n                    final DBSDataManipulator targetObject = ((DatabaseTransferConsumer) consumer).getTargetObject();\n                    if (targetObject != null) {\n                        containerNode = DBWorkbench.getPlatform().getNavigatorModel().findNode(\n                            targetObject.getParentObject()\n                        );\n                    }\n                }\n            }\n            checkContainerConnection(runnableContext);\n        }\n\n        loadNode(runnableContext, dataTransferSettings, null);\n\n        \r\n        Map<String, Object> mappings = (Map<String, Object>) settings.get(\"mappings\");\n        if (mappings != null) {\n            if (!dataMappings.isEmpty()) {\n                for (DatabaseMappingContainer dmc : dataMappings.values()) {\n                    DBSDataContainer sourceDatacontainer = dmc.getSource();\n                    if (sourceDatacontainer != null) {\n                        Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(sourceDatacontainer));\n                        if (dmcSettings != null) {\n                            dmc.loadSettings(runnableContext, dmcSettings);\n                        }\n                    }\n                }\n            } else if (!dataPipes.isEmpty()) {\n                for (DataTransferPipe pipe : dataPipes) {\n                    IDataTransferProducer producer = pipe.getProducer();\n                    if (producer != null) {\n                        DBSObject dbObject = producer.getDatabaseObject();\n                        if (dbObject instanceof DBSDataContainer) {\n                            DBSDataContainer sourceDC = (DBSDataContainer) dbObject;\n                            Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dbObject));\n                            if (dmcSettings != null) {\n                                DatabaseMappingContainer dmc = new DatabaseMappingContainer(this, sourceDC);\n                                dmc.loadSettings(runnableContext, dmcSettings);\n                                dataMappings.put(sourceDC, dmc);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":212,"status":"M"},{"authorDate":"2020-08-08 00:00:35","commitOrder":12,"curCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","date":"2020-08-08 00:00:35","endLine":337,"groupId":"10668","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"addDataMappings","params":"(DBRRunnableContextcontext@DBSDataContainerdataContainer@DatabaseMappingContainermappingContainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/b204f123ad6b852df6abecba240b532684bf61.src","preCode":"    public void addDataMappings(DBRRunnableContext context, DBSDataContainer dataContainer, DatabaseMappingContainer mappingContainer) {\n        dataMappings.put(dataContainer, mappingContainer);\n\n        if (mappingContainer.getTarget() == null && dialogSettings != null) {\n            \r\n            Map<String, Object> mappings = (Map<String, Object>) dialogSettings.get(\"mappings\");\n            if (mappings != null) {\n                Map<String, Object> dmcSettings = (Map<String, Object>) mappings.get(DBUtils.getObjectFullId(dataContainer));\n                if (dmcSettings != null) {\n                    mappingContainer.loadSettings(context, dmcSettings);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseConsumerSettings.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":324,"status":"N"}],"commitId":"384a2e536c3d3ca6922069acf71ea1615dc6ada9","commitMessage":"@@@Merge pull request #13535 from deepaksenthilkumar/multirow_insert_skip_bind_values\n\nAdded option to skip bind values during multi-row insert","date":"2021-08-20 17:46:52","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"}]
