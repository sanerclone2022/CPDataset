[{"authorTime":"2019-07-11 17:43:37","codes":[{"authorDate":"2019-07-11 17:43:37","commitOrder":1,"curCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_ID, dataSource.getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(RegistryConstants.TAG_CONNECTION);\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginArray();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, eventType.name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginArray();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ID, CommonUtils.notEmpty(configuration.getId()));\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    serializeList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-11 17:43:37","endLine":312,"groupId":"127","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(JsonWriterjson@DataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e9/8e84fac21d5f0bbd68761442ebdb94e9ec02b1.src","preCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_ID, dataSource.getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(RegistryConstants.TAG_CONNECTION);\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginArray();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, eventType.name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginArray();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ID, CommonUtils.notEmpty(configuration.getId()));\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    serializeList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"B"},{"authorDate":"2019-07-11 17:43:37","commitOrder":1,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        if (typeName != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TYPE, typeName);\n        }\n        if (objectID != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ID, objectID);\n        }\n        if (!CommonUtils.isEmpty(filter.getName())) {\n            JSONUtils.field(json, RegistryConstants.ATTR_NAME, filter.getName());\n        }\n        if (!CommonUtils.isEmpty(filter.getDescription())) {\n            JSONUtils.field(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        }\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        serializeList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        serializeList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 17:43:37","endLine":346,"groupId":"1245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e9/8e84fac21d5f0bbd68761442ebdb94e9ec02b1.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        if (typeName != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TYPE, typeName);\n        }\n        if (objectID != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ID, objectID);\n        }\n        if (!CommonUtils.isEmpty(filter.getName())) {\n            JSONUtils.field(json, RegistryConstants.ATTR_NAME, filter.getName());\n        }\n        if (!CommonUtils.isEmpty(filter.getDescription())) {\n            JSONUtils.field(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        }\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        serializeList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        serializeList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"}],"commitId":"452238e83fda715e2d9c775ba7164f4153d5379f","commitMessage":"@@@Datasources load/save update. Project migrate procedure.\n\n\nFormer-commit-id: 26cbe305e1730c669b2a15489c86a703ada75d3a","date":"2019-07-11 17:43:37","modifiedFileCount":"5","status":"B","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-11 20:54:42","codes":[{"authorDate":"2019-07-11 20:54:42","commitOrder":2,"curCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginArray();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, eventType.name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.name(CommonUtils.notEmpty(configuration.getId()));\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":328,"groupId":"13982","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(JsonWriterjson@DataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_ID, dataSource.getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(RegistryConstants.TAG_CONNECTION);\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginArray();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, eventType.name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginArray();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ID, CommonUtils.notEmpty(configuration.getId()));\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    serializeList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2019-07-11 20:54:42","commitOrder":2,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":344,"groupId":"1245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        if (typeName != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TYPE, typeName);\n        }\n        if (objectID != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ID, objectID);\n        }\n        if (!CommonUtils.isEmpty(filter.getName())) {\n            JSONUtils.field(json, RegistryConstants.ATTR_NAME, filter.getName());\n        }\n        if (!CommonUtils.isEmpty(filter.getDescription())) {\n            JSONUtils.field(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        }\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        serializeList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        serializeList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"M"}],"commitId":"5ee0e1a8796cec5b4c15597678c88372a08b8ec0","commitMessage":"@@@Datasources and virtual models serialization\n\n\nFormer-commit-id: 02997c609854608662ec75e7f237208bc1a09a0b","date":"2019-07-11 20:54:42","modifiedFileCount":"5","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-11 20:54:42","codes":[{"authorDate":"2019-07-13 06:01:52","commitOrder":3,"curCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.name(CommonUtils.notEmpty(configuration.getId()));\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-13 06:01:52","endLine":646,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(JsonWriterjson@DataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0f/bb00b915830fe1a015127e79160a682746c0f8.src","preCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginArray();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, eventType.name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endArray();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.name(CommonUtils.notEmpty(configuration.getId()));\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":477,"status":"M"},{"authorDate":"2019-07-11 20:54:42","commitOrder":3,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":344,"groupId":"1245","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"6669b61a925bc1a61d435f2003f1820df2714982","commitMessage":"@@@Merge branch 'project-meta' of https://github.com/dbeaver/dbeaver into project-meta\n\n\nFormer-commit-id: ad3c5230066fc35e4465f48c141ec7a2019c292f","date":"2019-07-13 06:01:52","modifiedFileCount":"41","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-11 20:54:42","codes":[{"authorDate":"2019-07-14 14:30:28","commitOrder":4,"curCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-14 14:30:28","endLine":654,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(JsonWriterjson@DataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cd/b13b2fc5d1433a46b2cfa9a01b1f1678192510.src","preCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    json.name(CommonUtils.notEmpty(configuration.getId()));\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n                    if (!CommonUtils.isEmpty(configuration.getUserName())) {\n                        saveSecuredCredentials(\n                            json,\n                            dataSource,\n                            \"network/\" + configuration.getId(),\n                            configuration.getUserName(),\n                            configuration.isSavePassword() ? configuration.getPassword() : null);\n                    }\n                    JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":499,"status":"M"},{"authorDate":"2019-07-11 20:54:42","commitOrder":4,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":344,"groupId":"1245","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"c350a68ca62827ad4720797e3e8277662c58c221","commitMessage":"@@@Network profiles editor page\n\n\nFormer-commit-id: 5d58e3d6302ad1c13e04a0235990a957516f3d56","date":"2019-07-14 14:30:28","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-11 20:54:42","codes":[{"authorDate":"2019-07-15 05:58:14","commitOrder":5,"curCode":"    static void saveDataSource(JsonWriter json, @NotNull DBPProject project, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                project,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    saveNetworkHandlerConfiguration(json, project, dataSource, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-15 05:58:14","endLine":681,"groupId":"458","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(JsonWriterjson@@NotNullDBPProjectproject@DataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/12f3f38535ab3efb0abb9937149dad9e334808.src","preCode":"    static void saveDataSource(JsonWriter json, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":525,"status":"M"},{"authorDate":"2019-07-11 20:54:42","commitOrder":5,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":344,"groupId":"1245","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"fbf6dede27b56dc3bd764b6d375fd903215f34d4","commitMessage":"@@@Network profiles save/load.  secured credentials saver\n\n\nFormer-commit-id: ab7922c1e1cb91ea146ad540f498629e662bcea1","date":"2019-07-15 05:58:14","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-11 20:54:42","codes":[{"authorDate":"2019-07-15 21:01:26","commitOrder":6,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-15 21:01:26","endLine":738,"groupId":"1244","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    static void saveDataSource(JsonWriter json, @NotNull DBPProject project, DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(json,\n                project,\n                dataSource,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    saveNetworkHandlerConfiguration(json, project, dataSource, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":582,"status":"M"},{"authorDate":"2019-07-11 20:54:42","commitOrder":6,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":344,"groupId":"1245","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"01b1505d325378ca3bb2a2546b09825b9dabb74e","commitMessage":"@@@Datasource config: separate connections config and user credentials\n\n\nFormer-commit-id: 57cec8ddfdbbf311261ebd0c7f957fdcd80a085f","date":"2019-07-15 21:01:26","modifiedFileCount":"9","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-11 20:54:42","codes":[{"authorDate":"2019-07-16 22:12:59","commitOrder":7,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-16 22:12:59","endLine":739,"groupId":"16329","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/edd5190cf31b44f59bed07242b6f87b8c1ecb3.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getDeclaredHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getDeclaredHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"},{"authorDate":"2019-07-11 20:54:42","commitOrder":7,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-07-11 20:54:42","endLine":344,"groupId":"1245","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c6/3dc1c14138aee9f0456b81918a204ed16553e5.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":330,"status":"N"}],"commitId":"577d8d23e7985255f1d36e9cf579356bbd22cf73","commitMessage":"@@@Network profiles management fixes\n\n\nFormer-commit-id: 834c84379513d302d86dc17c37a4cc5ee7aa83a2","date":"2019-07-16 22:12:59","modifiedFileCount":"18","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2019-07-16 22:12:59","commitOrder":8,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-07-16 22:12:59","endLine":739,"groupId":"16329","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/edd5190cf31b44f59bed07242b6f87b8c1ecb3.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"N"},{"authorDate":"2019-08-03 01:32:00","commitOrder":8,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n\n        if (!filter.isEnabled()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, false);\n        }\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"M"}],"commitId":"b759b3265c9aa742cfec709105427e8ecc0fd02e","commitMessage":"@@@#6414 Datasource filters save/load fix\n\n\nFormer-commit-id: 404e747167ed9eb457913d87793ea2a8dee4d949","date":"2019-08-03 01:32:00","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2019-08-09 21:47:57","commitOrder":9,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            List<DBPDataSourcePermission> permissions = dataSource.getModifyPermission();\n            if (!CommonUtils.isEmpty(permissions)) {\n                json.name(\"security\");\n                json.beginObject();\n                List<String> permIds = new ArrayList<>(permissions.size());\n                for (DBPDataSourcePermission perm : permissions) permIds.add(perm.getId());\n                JSONUtils.serializeStringList(json, \"permission-restrictions\", permIds);\n                json.endObject();\n            }\n        }\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-08-09 21:47:57","endLine":785,"groupId":"16329","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/fd53b3581ce309854912b49457794f683b70d2.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":9,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"fa2ef5d46d608a3a36b952a44e9f93aa77a0eb92","commitMessage":"@@@#6397 Connection permissions editor UI & model\n\n\nFormer-commit-id: 935b4f06e97ce1a71fdef8a508cd29a3788dd9cc","date":"2019-08-09 21:47:57","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2019-08-13 22:19:05","commitOrder":10,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            List<DBPDataSourcePermission> permissions = dataSource.getModifyPermission();\n            if (!CommonUtils.isEmpty(permissions)) {\n                json.name(\"security\");\n                json.beginObject();\n                List<String> permIds = new ArrayList<>(permissions.size());\n                for (DBPDataSourcePermission perm : permissions) permIds.add(perm.getId());\n                JSONUtils.serializeStringList(json, \"permission-restrictions\", permIds);\n                json.endObject();\n            }\n        }\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-08-13 22:19:05","endLine":787,"groupId":"6169","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/26/320ba6eb7b008e482a2475b9670827ada40f1a.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            List<DBPDataSourcePermission> permissions = dataSource.getModifyPermission();\n            if (!CommonUtils.isEmpty(permissions)) {\n                json.name(\"security\");\n                json.beginObject();\n                List<String> permIds = new ArrayList<>(permissions.size());\n                for (DBPDataSourcePermission perm : permissions) permIds.add(perm.getId());\n                JSONUtils.serializeStringList(json, \"permission-restrictions\", permIds);\n                json.endObject();\n            }\n        }\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":10,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"0a5509de72b60073ee228dbe44232715badaf473","commitMessage":"@@@DS save: do not save disabled network handlers configs\n\n\nFormer-commit-id: d00750f5f93f65ae6d5debe80777397565c87214","date":"2019-08-13 22:19:05","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2019-08-18 01:01:15","commitOrder":11,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-08-18 01:01:15","endLine":786,"groupId":"6169","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/8cd1f5472a0e47adea650911a0081a79407de6.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        {\n            \r\n            List<DBPDataSourcePermission> permissions = dataSource.getModifyPermission();\n            if (!CommonUtils.isEmpty(permissions)) {\n                json.name(\"security\");\n                json.beginObject();\n                List<String> permIds = new ArrayList<>(permissions.size());\n                for (DBPDataSourcePermission perm : permissions) permIds.add(perm.getId());\n                JSONUtils.serializeStringList(json, \"permission-restrictions\", permIds);\n                json.endObject();\n            }\n        }\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":11,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"726a7f1b731cb6ae742c770defc544a30e42cd99","commitMessage":"@@@#6542 Modify permissions per connection type: UI\n\n\nFormer-commit-id: 5d88bfed6a0ab1cbcc768b49d8a5b44e0176c265","date":"2019-08-18 01:01:15","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2019-08-23 23:15:16","commitOrder":12,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-08-23 23:15:16","endLine":805,"groupId":"12697","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7e/9466a92664058992db84a7d38b1f8bc45b75cb.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":639,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":12,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"6c4eb887fe9fddd1583cbb196c311556ee833289","commitMessage":"@@@#6570 ERD save (for entities and containers). EntityEditor save prompt fix (show sub-editor names)\n\n\nFormer-commit-id: 4fdebd342d2039f4870bdc072a14ac5f717c8e21","date":"2019-08-23 23:15:16","modifiedFileCount":"11","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2019-12-26 20:26:53","commitOrder":13,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2019-12-26 20:26:53","endLine":840,"groupId":"12697","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/f222b9076282289c5800e34f054b73280e0593.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_OBJECT, bootstrap.getDefaultObjectName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":673,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":13,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"43a75dd36801a7e6c770908d36d54029dc133ebd","commitMessage":"@@@#7472 Default catalog/schema. Model + PG impl\n\n\nFormer-commit-id: 1543bdd49fbac7fad7d84de656f98cac91ede59d","date":"2019-12-26 20:26:53","modifiedFileCount":"24","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-03-04 22:37:30","commitOrder":14,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, \"auth-model\", connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-03-04 22:37:30","endLine":843,"groupId":"15276","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/28/3a3a5ed1689f45e02485f3d1f3e37edb8d2dd1.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.fieldNE(json, \"user-profile\", connectionInfo.getUserProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":675,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":14,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"0107c9b807cd65023dbff2d332a1f2fead07ebed","commitMessage":"@@@Auth model refactoring\n\n\nFormer-commit-id: 14c821c22ff196b0c8151bc008beac1336cc08d2","date":"2020-03-04 22:37:30","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-04-01 20:18:25","commitOrder":15,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, navSettings.isShowSystemObjects());\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, navSettings.isShowUtilityObjects());\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, navSettings.isShowOnlyEntities());\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, navSettings.isHideFolders());\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, navSettings.isHideSchemas());\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, navSettings.isMergeEntities());\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, \"auth-model\", connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-04-01 20:18:25","endLine":860,"groupId":"15276","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/33/c53d457655ddbea4e2b628b707c09733e1811c.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        if (dataSource.isShowSystemObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS, dataSource.isShowSystemObjects());\n        }\n        if (dataSource.isShowUtilityObjects()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS, dataSource.isShowUtilityObjects());\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, \"auth-model\", connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":690,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":15,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"da66a43ee53396b638068373319488cbe0411a15","commitMessage":"@@@#7387 Connection view settings model\n\n\nFormer-commit-id: 53f90cff702ec87128ceddb77376d909237edf15","date":"2020-04-01 20:18:25","modifiedFileCount":"16","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-04-02 03:55:46","commitOrder":16,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, \"auth-model\", connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-04-02 03:55:46","endLine":863,"groupId":"15276","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/af/1ee28a43450a098f817037aeb0201a8a1a496a.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, navSettings.isShowSystemObjects());\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, navSettings.isShowUtilityObjects());\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, navSettings.isShowOnlyEntities());\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, navSettings.isHideFolders());\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, navSettings.isHideSchemas());\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, navSettings.isMergeEntities());\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, \"auth-model\", connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":692,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":16,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"5d4c49ae1791dcbfcc42713ebb2e3d911ea8f643","commitMessage":"@@@#7387 Navigator view: show folders in entity editor. Hide virtual model.\n\n\nFormer-commit-id: c9af99abe8505d0966b813408e919afab2aee614","date":"2020-04-02 03:55:46","modifiedFileCount":"8","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-05-09 16:14:06","commitOrder":17,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-05-09 16:14:06","endLine":905,"groupId":"0","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/fb2c6ac000784efca889827faeef1fb9fdd3d0.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, \"auth-model\", connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":17,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"f40ba395c280ad201643724e44932667030d950a","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles save/load\n\n\nFormer-commit-id: 367bd191dfaeb8934393b93bff05669127ebe3c5","date":"2020-05-09 16:14:06","modifiedFileCount":"10","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-05-09 21:09:11","commitOrder":18,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-05-09 21:09:11","endLine":904,"groupId":"3080","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                connectionInfo.getUserName(),\n                dataSource.isSavePassword() ? connectionInfo.getUserPassword() : null);\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":18,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"143e3e26e71697948c95b12ae688d8001720ee92","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles in action. Secure credentials save/load redesign\n\n\nFormer-commit-id: d067f67cc5e19315598a3f81e52650781b0ba358","date":"2020-05-09 21:09:11","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-07-05 23:41:50","commitOrder":19,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-07-05 23:41:50","endLine":908,"groupId":"3080","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0d/bdbbbed8f33f87c4533e8b5e41d7193c7bd588.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":735,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":19,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"65d7cb9560460fe94891f1077fed59283fa98629","commitMessage":"@@@Template datasources model and implementation\n\n\nFormer-commit-id: 9466f5f8fe22441c463e634068e07230c907a3ec","date":"2020-07-05 23:41:50","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-10-26 00:33:10","commitOrder":20,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOrigin();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_ID, origin.getId());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-10-26 00:33:10","endLine":914,"groupId":"3080","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9e/f39402584459ddb382a16226f739a8043f742d.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":20,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"1dadf5513e1c10c1a1a3fe57f0444fc43694b82f","commitMessage":"@@@Datasource origins model\n\n\nFormer-commit-id: 8a4daf43b373f67b0d20107b854b8f357c04845f","date":"2020-10-26 00:33:10","modifiedFileCount":"11","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2020-10-30 22:42:30","commitOrder":21,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOrigin();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2020-10-30 22:42:30","endLine":914,"groupId":"3080","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b2/8dc604bba849ad5458982262127df55882008b.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOrigin();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_ID, origin.getId());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":734,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":21,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"50821ba65de15f8f5c3637ebf859668941c33801","commitMessage":"@@@CB-348 Connection origin model refactoring (subType)\n\n\nFormer-commit-id: fccf69c6934c91996ee0a17dab85f0650e4eb04f","date":"2020-10-30 22:42:30","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2021-05-28 02:43:02","commitOrder":22,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOriginSource();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2021-05-28 02:43:02","endLine":924,"groupId":"3080","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ac/b1a0607b092b83957e0a501e78fb5e1b57a31a.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOrigin();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":22,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"f60cf331ad05353b9e3b8ab40c27b179c3ae8959","commitMessage":"@@@Keep source origin info in datasource\n","date":"2021-05-28 02:43:02","modifiedFileCount":"3","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2021-07-19 23:38:43","commitOrder":23,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOriginSource();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isMergeSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2021-07-19 23:38:43","endLine":924,"groupId":"3080","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ae/5695e26cf37ff50cfe070e19b729822e4096dd.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOriginSource();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":23,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"12699","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"60dc2fa544af125acaf872ddb8e8a6849b590701","commitMessage":"@@@dbeaver/dbeaver-ee#954 Merge schemas model\n","date":"2021-07-19 23:38:43","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-03 01:32:00","codes":[{"authorDate":"2021-07-21 21:48:20","commitOrder":24,"curCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOriginSource();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","date":"2021-07-21 21:48:20","endLine":924,"groupId":"10557","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"saveDataSource","params":"(@NotNullJsonWriterjson@@NotNullDataSourceDescriptordataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5a/d644b771a645c05dcfdf14fa8e42e8dcc36145.src","preCode":"    private void saveDataSource(@NotNull JsonWriter json, @NotNull DataSourceDescriptor dataSource)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        DBPDataSourceOrigin origin = dataSource.getOriginSource();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            originProps.putAll(origin.getConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, dataSource.isSavePassword());\n        if (dataSource.isTemplate()) {\n            JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, dataSource.isTemplate());\n        }\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isMergeSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, dataSource.isConnectionReadOnly());\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            \r\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n\n            saveSecuredCredentials(\n                dataSource,\n                null,\n                null,\n                new SecureCredentials(dataSource));\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            \r\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n            JSONUtils.serializeProperties(json, \"auth-properties\", connectionInfo.getAuthProperties());\n\n            \r\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            \r\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            \r\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        \r\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            \r\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        \r\n        {\n            \r\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props);\n            }\n        }\n\n\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":744,"status":"M"},{"authorDate":"2019-08-03 01:32:00","commitOrder":24,"curCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","date":"2019-08-03 01:32:00","endLine":781,"groupId":"10557","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"saveObjectFiler","params":"(JsonWriterjson@StringtypeName@StringobjectID@DBSObjectFilterfilter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/9154d1db73871befb707de7b238f5710368818.src","preCode":"    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":770,"status":"N"}],"commitId":"b4de39768ee22af9466ae11b6bdd72685e71c961","commitMessage":"@@@dbeaver/dbeaver-ee#954 Merge schemas model\n","date":"2021-07-21 21:48:20","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"}]
