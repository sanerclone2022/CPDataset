[{"authorTime":"2020-03-19 18:53:14","codes":[{"authorDate":"2019-06-03 04:24:48","commitOrder":2,"curCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n        serializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n            @Override\n            public String version() {\n                return plan instanceof MySQLPlanClassic ? \"classic\" : \"json\";\n            }\n\n            @Override\n            public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n                JsonObject attributes = new JsonObject();\n                if (node instanceof MySQLPlanNodePlain) {\n                    MySQLPlanNodePlain plainNode = (MySQLPlanNodePlain) node;\n                    attributes.add(\"id\", new JsonPrimitive(plainNode.getId()));\n                    attributes.add(\"select_type\", new JsonPrimitive(plainNode.getSelectType()));\n                    attributes.add(\"table\", new JsonPrimitive(plainNode.getTable()));\n                    attributes.add(\"type\", new JsonPrimitive(plainNode.getNodeType()));\n                    attributes.add(\"possible_keys\", new JsonPrimitive(plainNode.getPossibleKeys()));\n                    attributes.add(\"key\", new JsonPrimitive(plainNode.getKey()));\n                    attributes.add(\"key_len\", new JsonPrimitive(plainNode.getKeyLength()));\n                    attributes.add(\"ref\", new JsonPrimitive(plainNode.getRef()));\n                    attributes.add(\"rows\", new JsonPrimitive(plainNode.getRowCount()));\n                    attributes.add(\"filtered\", new JsonPrimitive(plainNode.getFiltered()));\n                    attributes.add(\"extra\", new JsonPrimitive(plainNode.getExtra()));\n                } else if (node instanceof MySQLPlanNodeJSON) {\n                    MySQLPlanNodeJSON jsNode = (MySQLPlanNodeJSON) node;\n                    for(Map.Entry<String, String>  e : jsNode.getNodeProps().entrySet()) {\n                        attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n                    }\n                }\n                nodeJson.add(PROP_ATTRIBUTES, attributes);\n            }\n        });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n","date":"2019-06-03 04:24:48","endLine":131,"groupId":"13009","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"serialize","params":"(@NotNullWriterwriter@@NotNullDBCPlanplan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/52766df10455a13fc8c09b39ead16996f13b24.src","preCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n        serializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n            @Override\n            public String version() {\n                return plan instanceof MySQLPlanClassic ? \"classic\" : \"json\";\n            }\n\n            @Override\n            public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n                JsonObject attributes = new JsonObject();\n                if (node instanceof MySQLPlanNodePlain) {\n                    MySQLPlanNodePlain plainNode = (MySQLPlanNodePlain) node;\n                    attributes.add(\"id\", new JsonPrimitive(plainNode.getId()));\n                    attributes.add(\"select_type\", new JsonPrimitive(plainNode.getSelectType()));\n                    attributes.add(\"table\", new JsonPrimitive(plainNode.getTable()));\n                    attributes.add(\"type\", new JsonPrimitive(plainNode.getNodeType()));\n                    attributes.add(\"possible_keys\", new JsonPrimitive(plainNode.getPossibleKeys()));\n                    attributes.add(\"key\", new JsonPrimitive(plainNode.getKey()));\n                    attributes.add(\"key_len\", new JsonPrimitive(plainNode.getKeyLength()));\n                    attributes.add(\"ref\", new JsonPrimitive(plainNode.getRef()));\n                    attributes.add(\"rows\", new JsonPrimitive(plainNode.getRowCount()));\n                    attributes.add(\"filtered\", new JsonPrimitive(plainNode.getFiltered()));\n                    attributes.add(\"extra\", new JsonPrimitive(plainNode.getExtra()));\n                } else if (node instanceof MySQLPlanNodeJSON) {\n                    MySQLPlanNodeJSON jsNode = (MySQLPlanNodeJSON) node;\n                    for(Map.Entry<String, String>  e : jsNode.getNodeProps().entrySet()) {\n                        attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n                    }\n                }\n                nodeJson.add(PROP_ATTRIBUTES, attributes);\n            }\n        });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanAnalyser.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2020-03-19 18:53:14","commitOrder":2,"curCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n\tserializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n\t    @Override\n\t    public String version() {\n\t\treturn \"json\";\n\t    }\n\n\t    @Override\n\t    public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n\t\tJsonObject attributes = new JsonObject();\n\t\tOcientPlanNodeJson jsNode = (OcientPlanNodeJson) node;\n\t\tfor (Map.Entry<String, String> e : jsNode.getNodeProps().entrySet()) {\n\t\t    attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n\t\t}\n\t\tnodeJson.add(PROP_ATTRIBUTES, attributes);\n\t    }\n\t});\n    }\n","date":"2020-03-19 18:53:14","endLine":95,"groupId":"11314","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"serialize","params":"(@NotNullWriterwriter@@NotNullDBCPlanplan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/98/821ecc8a210611163abcf55b6e97b9346a6b1e.src","preCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n\tserializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n\t    @Override\n\t    public String version() {\n\t\treturn \"json\";\n\t    }\n\n\t    @Override\n\t    public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n\t\tJsonObject attributes = new JsonObject();\n\t\tOcientPlanNodeJson jsNode = (OcientPlanNodeJson) node;\n\t\tfor (Map.Entry<String, String> e : jsNode.getNodeProps().entrySet()) {\n\t\t    attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n\t\t}\n\t\tnodeJson.add(PROP_ATTRIBUTES, attributes);\n\t    }\n\t});\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.ocient/src/org/jkiss/dbeaver/ext/ocient/model/plan/OcientQueryPlaner.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"5044206e4c3187e8858846016c7c1471968be807","commitMessage":"@@@Merge pull request #8186 from Xeograph/devel\n\nMerge of Ocient driver support.\n\nFormer-commit-id: 0d7d95af2fbd2c8134d5f29e945e95c79d08f870","date":"2020-03-19 18:53:14","modifiedFileCount":"0","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-03-19 18:53:14","codes":[{"authorDate":"2021-07-16 23:17:29","commitOrder":3,"curCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n        serializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n            @Override\n            public String version() {\n                return plan instanceof MySQLPlanClassic ? \"classic\" : \"json\";\n            }\n\n            @Override\n            public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n                JsonObject attributes = new JsonObject();\n                if (node instanceof MySQLPlanNodePlain) {\n                    MySQLPlanNodePlain plainNode = (MySQLPlanNodePlain) node;\n                    attributes.add(\"id\", new JsonPrimitive(plainNode.getId()));\n                    attributes.add(\"select_type\", new JsonPrimitive(CommonUtils.notEmpty((plainNode.getSelectType()))));\n                    attributes.add(\"table\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getTable())));\n                    attributes.add(\"type\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getNodeType())));\n                    attributes.add(\"possible_keys\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getPossibleKeys())));\n                    attributes.add(\"key\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getKey())));\n                    attributes.add(\"key_len\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getKeyLength())));\n                    attributes.add(\"ref\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getRef())));\n                    attributes.add(\"rows\", new JsonPrimitive(plainNode.getRowCount()));\n                    attributes.add(\"filtered\", new JsonPrimitive(plainNode.getFiltered()));\n                    attributes.add(\"extra\", new JsonPrimitive(CommonUtils.notEmpty(plainNode.getExtra())));\n                } else if (node instanceof MySQLPlanNodeJSON) {\n                    MySQLPlanNodeJSON jsNode = (MySQLPlanNodeJSON) node;\n                    for(Map.Entry<String, String>  e : jsNode.getNodeProps().entrySet()) {\n                        attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n                    }\n                }\n                nodeJson.add(PROP_ATTRIBUTES, attributes);\n            }\n        });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n","date":"2021-07-16 23:17:29","endLine":139,"groupId":"10177","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"serialize","params":"(@NotNullWriterwriter@@NotNullDBCPlanplan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c3/773a91579be58ee392a2a17c05d308abacb6f2.src","preCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n        serializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n            @Override\n            public String version() {\n                return plan instanceof MySQLPlanClassic ? \"classic\" : \"json\";\n            }\n\n            @Override\n            public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n                JsonObject attributes = new JsonObject();\n                if (node instanceof MySQLPlanNodePlain) {\n                    MySQLPlanNodePlain plainNode = (MySQLPlanNodePlain) node;\n                    attributes.add(\"id\", new JsonPrimitive(plainNode.getId()));\n                    attributes.add(\"select_type\", new JsonPrimitive(plainNode.getSelectType()));\n                    attributes.add(\"table\", new JsonPrimitive(plainNode.getTable()));\n                    attributes.add(\"type\", new JsonPrimitive(plainNode.getNodeType()));\n                    attributes.add(\"possible_keys\", new JsonPrimitive(plainNode.getPossibleKeys()));\n                    attributes.add(\"key\", new JsonPrimitive(plainNode.getKey()));\n                    attributes.add(\"key_len\", new JsonPrimitive(plainNode.getKeyLength()));\n                    attributes.add(\"ref\", new JsonPrimitive(plainNode.getRef()));\n                    attributes.add(\"rows\", new JsonPrimitive(plainNode.getRowCount()));\n                    attributes.add(\"filtered\", new JsonPrimitive(plainNode.getFiltered()));\n                    attributes.add(\"extra\", new JsonPrimitive(plainNode.getExtra()));\n                } else if (node instanceof MySQLPlanNodeJSON) {\n                    MySQLPlanNodeJSON jsNode = (MySQLPlanNodeJSON) node;\n                    for(Map.Entry<String, String>  e : jsNode.getNodeProps().entrySet()) {\n                        attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n                    }\n                }\n                nodeJson.add(PROP_ATTRIBUTES, attributes);\n            }\n        });\n\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanAnalyser.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"},{"authorDate":"2020-03-19 18:53:14","commitOrder":3,"curCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n\tserializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n\t    @Override\n\t    public String version() {\n\t\treturn \"json\";\n\t    }\n\n\t    @Override\n\t    public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n\t\tJsonObject attributes = new JsonObject();\n\t\tOcientPlanNodeJson jsNode = (OcientPlanNodeJson) node;\n\t\tfor (Map.Entry<String, String> e : jsNode.getNodeProps().entrySet()) {\n\t\t    attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n\t\t}\n\t\tnodeJson.add(PROP_ATTRIBUTES, attributes);\n\t    }\n\t});\n    }\n","date":"2020-03-19 18:53:14","endLine":95,"groupId":"10177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"serialize","params":"(@NotNullWriterwriter@@NotNullDBCPlanplan)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/98/821ecc8a210611163abcf55b6e97b9346a6b1e.src","preCode":"    public void serialize(@NotNull Writer writer, @NotNull DBCPlan plan) throws IOException, InvocationTargetException {\n\n\tserializeJson(writer, plan, dataSource.getInfo().getDriverName(), new DBCQueryPlannerSerialInfo() {\n\n\t    @Override\n\t    public String version() {\n\t\treturn \"json\";\n\t    }\n\n\t    @Override\n\t    public void addNodeProperties(DBCPlanNode node, JsonObject nodeJson) {\n\n\t\tJsonObject attributes = new JsonObject();\n\t\tOcientPlanNodeJson jsNode = (OcientPlanNodeJson) node;\n\t\tfor (Map.Entry<String, String> e : jsNode.getNodeProps().entrySet()) {\n\t\t    attributes.add(e.getKey(), new JsonPrimitive(CommonUtils.notEmpty(e.getValue())));\n\t\t}\n\t\tnodeJson.add(PROP_ATTRIBUTES, attributes);\n\t    }\n\t});\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.ocient/src/org/jkiss/dbeaver/ext/ocient/model/plan/OcientQueryPlaner.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"N"}],"commitId":"7b66e6e2f648efbce74d93a449464759769c910a","commitMessage":"@@@Merge pull request #13219 from dbeaver/executionPlanNPE#12680\n\n#12680 avoid MySQL execution plan saving NPE","date":"2021-07-16 23:17:29","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"}]
