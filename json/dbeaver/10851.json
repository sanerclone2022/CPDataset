[{"authorTime":"2021-04-01 16:44:41","codes":[{"authorDate":"2021-04-01 16:44:41","commitOrder":9,"curCode":"    private int formatKeyword(List<FormatterToken> argList, String tokenString, int index) {\n        int result = index;\n        if (statementDelimiters.contains(tokenString)) { \r\n            indent = 0;\n            if (index > 0) {\n                result += insertReturnAndIndent(argList, index - 1, indent);\n            }\n            result += insertReturnAndIndent(argList, index + 1, indent);\n        } else {\n            if (blockHeaderStrings != null && ArrayUtils.contains(blockHeaderStrings, tokenString) || (SQLUtils.isBlockStartKeyword(dialect, tokenString) &&\n                            !SQLConstants.KEYWORD_SELECT.equalsIgnoreCase(getPrevSpecialKeyword(argList, index, false)))) { \r\n                if (index > 0) {\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                }\n                indent++;\n                result += insertReturnAndIndent(argList, index + 1, indent);\n            } else if (SQLUtils.isBlockEndKeyword(dialect, tokenString)) {\n                indent--;\n                result += insertReturnAndIndent(argList, index, indent);\n            } else switch (tokenString) {\n                case \"CREATE\":\n                    if (!isCompact) {\n                        int nextIndex = getNextKeywordIndex(argList, index);\n                        if (nextIndex > 0 && \"OR\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                            nextIndex = getNextKeywordIndex(argList, nextIndex);\n                            if (nextIndex > 0 && \"REPLACE\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                                insertReturnAndIndent(argList, nextIndex + 1, indent);\n                                break;\n                            }\n                        }\n                    }\n                case \"DROP\": \r\n                case \"ALTER\": \r\n                    break;\n                case \"DELETE\": \r\n                case \"SELECT\": \r\n                case \"UPDATE\": \r\n                case \"INSERT\": \r\n                case \"INTO\": \r\n                case \"TRUNCATE\": \r\n                case \"TABLE\": \r\n                    if (!isCompact) {\n                        if (!\"TABLE\".equals(tokenString)) {\n                            if (bracketsDepth > 0) {\n                                result += insertReturnAndIndent(argList, index, indent);\n                            } else if (index > 0) {\n                                \r\n                                indent = 0;\n                                result += insertReturnAndIndent(argList, index - 1, indent);\n                            }\n                            indent++;\n                            result += insertReturnAndIndent(argList, result + 1, indent);\n                        }\n                    }\n                    break;\n                case \"CASE\":  \r\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index - 1, indent);\n                        if (\"WHEN\".equalsIgnoreCase(getNextKeyword(argList, index))) {\n                            indent++;\n                            result += insertReturnAndIndent(argList, index + 1, indent);\n                        }\n                    }\n                    break;\n                case \"END\": \r\n                    if (!isCompact) {\n\t                    indent--;\n\t                    result += insertReturnAndIndent(argList, index, indent);\n                    }\n                \tbreak;\n                case \"FROM\":\n                case \"WHERE\":\n                case \"START WITH\":\n                case \"CONNECT BY\":\n                case \"ORDER BY\":\n                case \"GROUP BY\":\n                case \"HAVING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index + 1, indent);\n                    }\n                    break;\n                case \"LEFT\":\n                case \"RIGHT\":\n                case \"INNER\":\n                case \"OUTER\":\n                case \"FULL\":\n                case \"CROSS\":\n                case \"JOIN\":\n                    if (isJoinStart(argList, index)) {\n                        result += insertReturnAndIndent(argList, index, indent - 1);\n                    }\n                    if (tokenString.equals(\"JOIN\")) {\n                        \r\n                    }\n                    break;\n                case \"VALUES\":  \r\n                case \"LIMIT\":  \r\n                    indent--;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"OR\":\n                    if (\"CREATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                    if (isFirstConditionInBrackets) {\n                        result = checkConditionDepth(result, argList, index);\n                    }\n                case \"WHEN\":\n                    if (\"CASE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                case \"ELSE\":  \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"SET\": {\n                    if (index > 1) {\n                        if (\"UPDATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                            \r\n                            result += insertReturnAndIndent(argList, index, indent - 1);\n                        }\n                    }\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"ON\": {\n                    \r\n                    \r\n                    \r\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"USING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent + 1);\n                    break;\n                case \"TOP\":  \r\n                    \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    if (argList.size() < index + 3) {\n                        result += insertReturnAndIndent(argList, index + 3, indent);\n                    }\n                    break;\n                case \"UNION\":\n                case \"INTERSECT\":\n                case \"EXCEPT\": \r\n                    indent -= 2;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    \r\n                    indent++;\n                    break;\n                case \"BETWEEN\":  \r\n                    encounterBetween = true;\n                    break;\n                case \"AND\":  \r\n                    if (!encounterBetween) {\n                        \r\n                        result += insertReturnAndIndent(argList, index, indent);\n                        if (isFirstConditionInBrackets) {\n                            result = checkConditionDepth(result, argList, index);\n                        }\n                    }\n                    encounterBetween = false;\n                    break;\n            }\n        }\n        return result;\n    }\n","date":"2021-04-01 16:44:41","endLine":286,"groupId":"11977","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"formatKeyword","params":"(List<FormatterToken>argList@StringtokenString@intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/4d251fd8a4b2f8b81533c8cb632484472e5909.src","preCode":"    private int formatKeyword(List<FormatterToken> argList, String tokenString, int index) {\n        int result = index;\n        if (statementDelimiters.contains(tokenString)) { \r\n            indent = 0;\n            if (index > 0) {\n                result += insertReturnAndIndent(argList, index - 1, indent);\n            }\n            result += insertReturnAndIndent(argList, index + 1, indent);\n        } else {\n            if (blockHeaderStrings != null && ArrayUtils.contains(blockHeaderStrings, tokenString) || (SQLUtils.isBlockStartKeyword(dialect, tokenString) &&\n                            !SQLConstants.KEYWORD_SELECT.equalsIgnoreCase(getPrevSpecialKeyword(argList, index, false)))) { \r\n                if (index > 0) {\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                }\n                indent++;\n                result += insertReturnAndIndent(argList, index + 1, indent);\n            } else if (SQLUtils.isBlockEndKeyword(dialect, tokenString)) {\n                indent--;\n                result += insertReturnAndIndent(argList, index, indent);\n            } else switch (tokenString) {\n                case \"CREATE\":\n                    if (!isCompact) {\n                        int nextIndex = getNextKeywordIndex(argList, index);\n                        if (nextIndex > 0 && \"OR\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                            nextIndex = getNextKeywordIndex(argList, nextIndex);\n                            if (nextIndex > 0 && \"REPLACE\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                                insertReturnAndIndent(argList, nextIndex + 1, indent);\n                                break;\n                            }\n                        }\n                    }\n                case \"DROP\": \r\n                case \"ALTER\": \r\n                    break;\n                case \"DELETE\": \r\n                case \"SELECT\": \r\n                case \"UPDATE\": \r\n                case \"INSERT\": \r\n                case \"INTO\": \r\n                case \"TRUNCATE\": \r\n                case \"TABLE\": \r\n                    if (!isCompact) {\n                        if (!\"TABLE\".equals(tokenString)) {\n                            if (bracketsDepth > 0) {\n                                result += insertReturnAndIndent(argList, index, indent);\n                            } else if (index > 0) {\n                                \r\n                                indent = 0;\n                                result += insertReturnAndIndent(argList, index - 1, indent);\n                            }\n                            indent++;\n                            result += insertReturnAndIndent(argList, result + 1, indent);\n                        }\n                    }\n                    break;\n                case \"CASE\":  \r\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index - 1, indent);\n                        if (\"WHEN\".equalsIgnoreCase(getNextKeyword(argList, index))) {\n                            indent++;\n                            result += insertReturnAndIndent(argList, index + 1, indent);\n                        }\n                    }\n                    break;\n                case \"END\": \r\n                    if (!isCompact) {\n\t                    indent--;\n\t                    result += insertReturnAndIndent(argList, index, indent);\n                    }\n                \tbreak;\n                case \"FROM\":\n                case \"WHERE\":\n                case \"START WITH\":\n                case \"CONNECT BY\":\n                case \"ORDER BY\":\n                case \"GROUP BY\":\n                case \"HAVING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index + 1, indent);\n                    }\n                    break;\n                case \"LEFT\":\n                case \"RIGHT\":\n                case \"INNER\":\n                case \"OUTER\":\n                case \"FULL\":\n                case \"CROSS\":\n                case \"JOIN\":\n                    if (isJoinStart(argList, index)) {\n                        result += insertReturnAndIndent(argList, index, indent - 1);\n                    }\n                    if (tokenString.equals(\"JOIN\")) {\n                        \r\n                    }\n                    break;\n                case \"VALUES\":  \r\n                case \"LIMIT\":  \r\n                    indent--;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"OR\":\n                    if (\"CREATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                    if (isFirstConditionInBrackets) {\n                        result = checkConditionDepth(result, argList, index);\n                    }\n                case \"WHEN\":\n                    if (\"CASE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                case \"ELSE\":  \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"SET\": {\n                    if (index > 1) {\n                        if (\"UPDATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                            \r\n                            result += insertReturnAndIndent(argList, index, indent - 1);\n                        }\n                    }\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"ON\": {\n                    \r\n                    \r\n                    \r\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"USING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent + 1);\n                    break;\n                case \"TOP\":  \r\n                    \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    if (argList.size() < index + 3) {\n                        result += insertReturnAndIndent(argList, index + 3, indent);\n                    }\n                    break;\n                case \"UNION\":\n                case \"INTERSECT\":\n                case \"EXCEPT\": \r\n                    indent -= 2;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    \r\n                    indent++;\n                    break;\n                case \"BETWEEN\":  \r\n                    encounterBetween = true;\n                    break;\n                case \"AND\":  \r\n                    if (!encounterBetween) {\n                        \r\n                        result += insertReturnAndIndent(argList, index, indent);\n                        if (isFirstConditionInBrackets) {\n                            result = checkConditionDepth(result, argList, index);\n                        }\n                    }\n                    encounterBetween = false;\n                    break;\n            }\n        }\n        return result;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/format/tokenized/IndentFormatter.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"MB"},{"authorDate":"2021-04-01 16:44:41","commitOrder":9,"curCode":"    private int checkConditionDepth(int result, List<FormatterToken> argList, int index) {\n        if (conditionBracket.size() != 0 && conditionBracket.get(conditionBracket.size() - 1).equals(Boolean.TRUE)) {\n            \r\n            indent++;\n            result += insertReturnAndIndent(argList, index, indent);\n            isFirstConditionInBrackets = false;\n            return result;\n        }\n        return result;\n    }\n","date":"2021-04-01 16:44:41","endLine":509,"groupId":"9179","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkConditionDepth","params":"(intresult@List<FormatterToken>argList@intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/4d251fd8a4b2f8b81533c8cb632484472e5909.src","preCode":"    private int checkConditionDepth(int result, List<FormatterToken> argList, int index) {\n        if (conditionBracket.size() != 0 && conditionBracket.get(conditionBracket.size() - 1).equals(Boolean.TRUE)) {\n            \r\n            indent++;\n            result += insertReturnAndIndent(argList, index, indent);\n            isFirstConditionInBrackets = false;\n            return result;\n        }\n        return result;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/format/tokenized/IndentFormatter.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"B"}],"commitId":"484e4ed13488fef5c4921382e5a30200f4a58912","commitMessage":"@@@Merge pull request #11943 from dbeaver/conditionsIndent11063\n\n#11063 add indent for condition expressions\n\nFormer-commit-id: 71192e8b1ce57949cebb5dc955c319ffaa83c194","date":"2021-04-01 16:44:41","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-04-01 16:44:41","codes":[{"authorDate":"2021-04-01 18:46:11","commitOrder":10,"curCode":"    private int formatKeyword(List<FormatterToken> argList, String tokenString, int index) {\n        int result = index;\n        if (statementDelimiters.contains(tokenString)) { \r\n            indent = 0;\n            if (index > 0) {\n                result += insertReturnAndIndent(argList, index - 1, indent);\n            }\n            result += insertReturnAndIndent(argList, index + 1, indent);\n        } else {\n            if (blockHeaderStrings != null && ArrayUtils.contains(blockHeaderStrings, tokenString) || (SQLUtils.isBlockStartKeyword(dialect, tokenString) &&\n                            !SQLConstants.KEYWORD_SELECT.equalsIgnoreCase(getPrevSpecialKeyword(argList, index, false)))) { \r\n                if (index > 0) {\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                }\n                indent++;\n                result += insertReturnAndIndent(argList, index + 1, indent);\n            } else if (SQLUtils.isBlockEndKeyword(dialect, tokenString)) {\n                indent--;\n                result += insertReturnAndIndent(argList, index, indent);\n            } else switch (tokenString) {\n                case \"CREATE\":\n                    if (!isCompact) {\n                        int nextIndex = getNextKeywordIndex(argList, index);\n                        if (nextIndex > 0 && \"OR\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                            nextIndex = getNextKeywordIndex(argList, nextIndex);\n                            if (nextIndex > 0 && \"REPLACE\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                                insertReturnAndIndent(argList, nextIndex + 1, indent);\n                                break;\n                            }\n                        }\n                    }\n                case \"DROP\": \r\n                case \"ALTER\": \r\n                    break;\n                case \"DELETE\": \r\n                case \"SELECT\": \r\n                case \"UPDATE\": \r\n                case \"INSERT\": \r\n                case \"INTO\": \r\n                case \"TRUNCATE\": \r\n                case \"TABLE\": \r\n                    if (!isCompact) {\n                        if (!\"TABLE\".equals(tokenString)) {\n                            if (bracketsDepth > 0) {\n                                result += insertReturnAndIndent(argList, index, indent);\n                            } else if (index > 0) {\n                                \r\n                                indent = 0;\n                                result += insertReturnAndIndent(argList, index - 1, indent);\n                            }\n                            indent++;\n                            result += insertReturnAndIndent(argList, result + 1, indent);\n                        }\n                    }\n                    break;\n                case \"CASE\":  \r\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index - 1, indent);\n                        if (\"WHEN\".equalsIgnoreCase(getNextKeyword(argList, index))) {\n                            indent++;\n                            result += insertReturnAndIndent(argList, index + 1, indent);\n                        }\n                    }\n                    break;\n                case \"END\": \r\n                    if (!isCompact) {\n\t                    indent--;\n\t                    result += insertReturnAndIndent(argList, index, indent);\n                    }\n                \tbreak;\n                case \"FROM\":\n                case \"WHERE\":\n                case \"START WITH\":\n                case \"CONNECT BY\":\n                case \"ORDER BY\":\n                case \"GROUP BY\":\n                case \"HAVING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index + 1, indent);\n                    }\n                    isFirstConditionInBrackets = false;\n                    break;\n                case \"LEFT\":\n                case \"RIGHT\":\n                case \"INNER\":\n                case \"OUTER\":\n                case \"FULL\":\n                case \"CROSS\":\n                case \"JOIN\":\n                    if (isJoinStart(argList, index)) {\n                        result += insertReturnAndIndent(argList, index, indent - 1);\n                    }\n                    if (tokenString.equals(\"JOIN\")) {\n                        \r\n                    }\n                    break;\n                case \"VALUES\":  \r\n                case \"LIMIT\":  \r\n                    indent--;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"OR\":\n                    if (\"CREATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                    if (isFirstConditionInBrackets) {\n                        result = checkConditionDepth(result, argList, index);\n                    }\n                case \"WHEN\":\n                    if (\"CASE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                case \"ELSE\":  \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"SET\": {\n                    if (index > 1) {\n                        if (\"UPDATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                            \r\n                            result += insertReturnAndIndent(argList, index, indent - 1);\n                        }\n                    }\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"ON\": {\n                    \r\n                    \r\n                    \r\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"USING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent + 1);\n                    break;\n                case \"TOP\":  \r\n                    \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    if (argList.size() < index + 3) {\n                        result += insertReturnAndIndent(argList, index + 3, indent);\n                    }\n                    break;\n                case \"UNION\":\n                case \"INTERSECT\":\n                case \"EXCEPT\": \r\n                    indent -= 2;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    \r\n                    indent++;\n                    break;\n                case \"BETWEEN\":  \r\n                    encounterBetween = true;\n                    break;\n                case \"AND\":  \r\n                    if (!encounterBetween) {\n                        \r\n                        result += insertReturnAndIndent(argList, index, indent);\n                        if (isFirstConditionInBrackets) {\n                            result = checkConditionDepth(result, argList, index);\n                        }\n                    }\n                    encounterBetween = false;\n                    break;\n            }\n        }\n        return result;\n    }\n","date":"2021-04-01 18:46:11","endLine":287,"groupId":"10851","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"formatKeyword","params":"(List<FormatterToken>argList@StringtokenString@intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/f46b8514590ba033033e8b77479315dc2244ab.src","preCode":"    private int formatKeyword(List<FormatterToken> argList, String tokenString, int index) {\n        int result = index;\n        if (statementDelimiters.contains(tokenString)) { \r\n            indent = 0;\n            if (index > 0) {\n                result += insertReturnAndIndent(argList, index - 1, indent);\n            }\n            result += insertReturnAndIndent(argList, index + 1, indent);\n        } else {\n            if (blockHeaderStrings != null && ArrayUtils.contains(blockHeaderStrings, tokenString) || (SQLUtils.isBlockStartKeyword(dialect, tokenString) &&\n                            !SQLConstants.KEYWORD_SELECT.equalsIgnoreCase(getPrevSpecialKeyword(argList, index, false)))) { \r\n                if (index > 0) {\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                }\n                indent++;\n                result += insertReturnAndIndent(argList, index + 1, indent);\n            } else if (SQLUtils.isBlockEndKeyword(dialect, tokenString)) {\n                indent--;\n                result += insertReturnAndIndent(argList, index, indent);\n            } else switch (tokenString) {\n                case \"CREATE\":\n                    if (!isCompact) {\n                        int nextIndex = getNextKeywordIndex(argList, index);\n                        if (nextIndex > 0 && \"OR\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                            nextIndex = getNextKeywordIndex(argList, nextIndex);\n                            if (nextIndex > 0 && \"REPLACE\".equals(argList.get(nextIndex).getString().toUpperCase(Locale.ENGLISH))) {\n                                insertReturnAndIndent(argList, nextIndex + 1, indent);\n                                break;\n                            }\n                        }\n                    }\n                case \"DROP\": \r\n                case \"ALTER\": \r\n                    break;\n                case \"DELETE\": \r\n                case \"SELECT\": \r\n                case \"UPDATE\": \r\n                case \"INSERT\": \r\n                case \"INTO\": \r\n                case \"TRUNCATE\": \r\n                case \"TABLE\": \r\n                    if (!isCompact) {\n                        if (!\"TABLE\".equals(tokenString)) {\n                            if (bracketsDepth > 0) {\n                                result += insertReturnAndIndent(argList, index, indent);\n                            } else if (index > 0) {\n                                \r\n                                indent = 0;\n                                result += insertReturnAndIndent(argList, index - 1, indent);\n                            }\n                            indent++;\n                            result += insertReturnAndIndent(argList, result + 1, indent);\n                        }\n                    }\n                    break;\n                case \"CASE\":  \r\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index - 1, indent);\n                        if (\"WHEN\".equalsIgnoreCase(getNextKeyword(argList, index))) {\n                            indent++;\n                            result += insertReturnAndIndent(argList, index + 1, indent);\n                        }\n                    }\n                    break;\n                case \"END\": \r\n                    if (!isCompact) {\n\t                    indent--;\n\t                    result += insertReturnAndIndent(argList, index, indent);\n                    }\n                \tbreak;\n                case \"FROM\":\n                case \"WHERE\":\n                case \"START WITH\":\n                case \"CONNECT BY\":\n                case \"ORDER BY\":\n                case \"GROUP BY\":\n                case \"HAVING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent - 1);\n                    if (!isCompact) {\n                        result += insertReturnAndIndent(argList, index + 1, indent);\n                    }\n                    break;\n                case \"LEFT\":\n                case \"RIGHT\":\n                case \"INNER\":\n                case \"OUTER\":\n                case \"FULL\":\n                case \"CROSS\":\n                case \"JOIN\":\n                    if (isJoinStart(argList, index)) {\n                        result += insertReturnAndIndent(argList, index, indent - 1);\n                    }\n                    if (tokenString.equals(\"JOIN\")) {\n                        \r\n                    }\n                    break;\n                case \"VALUES\":  \r\n                case \"LIMIT\":  \r\n                    indent--;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"OR\":\n                    if (\"CREATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                    if (isFirstConditionInBrackets) {\n                        result = checkConditionDepth(result, argList, index);\n                    }\n                case \"WHEN\":\n                    if (\"CASE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                        break;\n                    }\n                case \"ELSE\":  \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    break;\n                case \"SET\": {\n                    if (index > 1) {\n                        if (\"UPDATE\".equalsIgnoreCase(getPrevKeyword(argList, index))) {\n                            \r\n                            result += insertReturnAndIndent(argList, index, indent - 1);\n                        }\n                    }\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"ON\": {\n                    \r\n                    \r\n                    \r\n                    result += insertReturnAndIndent(argList, index + 1, indent);\n                    break;\n                }\n                case \"USING\":  \r\n                    result += insertReturnAndIndent(argList, index, indent + 1);\n                    break;\n                case \"TOP\":  \r\n                    \r\n                    result += insertReturnAndIndent(argList, index, indent);\n                    if (argList.size() < index + 3) {\n                        result += insertReturnAndIndent(argList, index + 3, indent);\n                    }\n                    break;\n                case \"UNION\":\n                case \"INTERSECT\":\n                case \"EXCEPT\": \r\n                    indent -= 2;\n                    result += insertReturnAndIndent(argList, index, indent);\n                    \r\n                    indent++;\n                    break;\n                case \"BETWEEN\":  \r\n                    encounterBetween = true;\n                    break;\n                case \"AND\":  \r\n                    if (!encounterBetween) {\n                        \r\n                        result += insertReturnAndIndent(argList, index, indent);\n                        if (isFirstConditionInBrackets) {\n                            result = checkConditionDepth(result, argList, index);\n                        }\n                    }\n                    encounterBetween = false;\n                    break;\n            }\n        }\n        return result;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/format/tokenized/IndentFormatter.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2021-04-01 16:44:41","commitOrder":10,"curCode":"    private int checkConditionDepth(int result, List<FormatterToken> argList, int index) {\n        if (conditionBracket.size() != 0 && conditionBracket.get(conditionBracket.size() - 1).equals(Boolean.TRUE)) {\n            \r\n            indent++;\n            result += insertReturnAndIndent(argList, index, indent);\n            isFirstConditionInBrackets = false;\n            return result;\n        }\n        return result;\n    }\n","date":"2021-04-01 16:44:41","endLine":509,"groupId":"10851","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkConditionDepth","params":"(intresult@List<FormatterToken>argList@intindex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/4d251fd8a4b2f8b81533c8cb632484472e5909.src","preCode":"    private int checkConditionDepth(int result, List<FormatterToken> argList, int index) {\n        if (conditionBracket.size() != 0 && conditionBracket.get(conditionBracket.size() - 1).equals(Boolean.TRUE)) {\n            \r\n            indent++;\n            result += insertReturnAndIndent(argList, index, indent);\n            isFirstConditionInBrackets = false;\n            return result;\n        }\n        return result;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/format/tokenized/IndentFormatter.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"N"}],"commitId":"8164a85213bed96ec05ae93b2e6bd7ed08681304","commitMessage":"@@@Merge pull request #11955 from dbeaver/indentCase#11063\n\n#11063 add condition for subqueries\n\nFormer-commit-id: 78ff6a7a7d5b8f49be4fb6bbe57cd05ec369bdde","date":"2021-04-01 18:46:11","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"}]
