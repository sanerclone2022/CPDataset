[{"authorTime":"2015-07-01 22:08:05","codes":[{"authorDate":"2015-07-01 22:08:05","commitOrder":1,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<MySQLEngine>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<MySQLCharset>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<String, MySQLCollation>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","date":"2015-07-01 22:08:05","endLine":220,"groupId":"10878","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4f/1b2e3cbdd4aef3367d5abb61e0acb251547eaf.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<MySQLEngine>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<MySQLCharset>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<String, MySQLCollation>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"B"},{"authorDate":"2015-07-01 22:08:05","commitOrder":1,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<String>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<String>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-07-01 22:08:05","endLine":143,"groupId":"1821","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8e/ff11536630c97f2c441592da9e2ecb2d3ad331.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<String>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<String>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"B"}],"commitId":"90ac579a64c970ba65c348aefb5b6d42d6063cc7","commitMessage":"@@@Plugins directories renamed (ext)\n\nFormer-commit-id: 88615645e80b32fba90eb0a74130657937e5c811","date":"2015-07-01 22:08:05","modifiedFileCount":"0","status":"B","submitter":"jurgen"},{"authorTime":"2015-07-01 22:08:05","codes":[{"authorDate":"2015-07-28 17:14:04","commitOrder":2,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<MySQLEngine>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<MySQLCharset>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<String, MySQLCollation>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","date":"2015-07-28 17:14:04","endLine":220,"groupId":"10878","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3f/1a9beac2de011fd4f06f2d4254fd6f5b6f667c.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<MySQLEngine>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<MySQLCharset>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<String, MySQLCollation>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2015-07-01 22:08:05","commitOrder":2,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<String>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<String>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-07-01 22:08:05","endLine":143,"groupId":"1821","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8e/ff11536630c97f2c441592da9e2ecb2d3ad331.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<String>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<String>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"6c4831d23b582b3c78addee5dd919d9162ef873b","commitMessage":"@@@Objects cache refactoring\n\nFormer-commit-id: 39520b449063ba22fae3d038f58cc5b78892c805","date":"2015-07-28 17:14:04","modifiedFileCount":"38","status":"M","submitter":"jurgen"},{"authorTime":"2015-10-03 06:14:38","codes":[{"authorDate":"2015-10-03 06:14:38","commitOrder":3,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","date":"2015-10-03 06:14:38","endLine":227,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d2/a1af29f799544e3118a601217568feccb68bae.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<MySQLEngine>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<MySQLCharset>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<String, MySQLCollation>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2015-10-03 06:14:38","commitOrder":3,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:14:38","endLine":143,"groupId":"0","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/32716a09bea47a87f5fdab05286901aedd9edf.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<String>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<String>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"c62247f9d578736606d522548c599ecff7e8f5ce","commitMessage":"@@@Java 1.7 -> fix diamonds\n\nFormer-commit-id: 21bb8fa7ed63cab668bc3a73e2b8f6b66bc1c67f","date":"2015-10-03 06:14:38","modifiedFileCount":"373","status":"M","submitter":"jurgen"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2015-10-03 06:58:22","commitOrder":4,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\")) {\n                        try (JDBCResultSet resultSet = dbStat.executeQuery()) {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n    }\n","date":"2015-10-03 06:58:22","endLine":205,"groupId":"0","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/896b037e460d8aa8b85cd53c23de7f669e5a76.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\");\n        try {\n            \r\n            {\n                engines = new ArrayList<>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    JDBCResultSet dbResult = dbStat.executeQuery();\n                    try {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    } finally {\n                        dbResult.close();\n                    }\n                } catch (SQLException ex ) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\");\n                    try {\n                        JDBCResultSet resultSet = dbStat.executeQuery();\n                        try {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        } finally {\n                            resultSet.close();\n                        }\n                    } finally {\n                        dbStat.close();\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n        finally {\n            session.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":4,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:58:22","endLine":137,"groupId":"6952","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/550de7945b43c31f33aa45b3963075a9502a2b.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                JDBCResultSet dbResult = dbStat.executeQuery();\n                try {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                } finally {\n                    dbResult.close();\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            } finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"7d8e925311844771cefc37311309cb62b064a6ec","commitMessage":"@@@Java 1.7 -> fix auto-close\n\nFormer-commit-id: 6d25c7bb871b38b224ca2771a7148a371cf306bf","date":"2015-10-03 06:58:22","modifiedFileCount":"78","status":"M","submitter":"jurgen"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2015-10-03 07:06:59","commitOrder":5,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\")) {\n                        try (JDBCResultSet resultSet = dbStat.executeQuery()) {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n        }\n    }\n","date":"2015-10-03 07:06:59","endLine":196,"groupId":"11161","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/ab7cc0f069cf8857189ef2fe6f8ce4afdb896d.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\");\n                try {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                dbStat = session.prepareStatement(\"SHOW COLLATION\");\n                try {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                } finally {\n                    dbStat.close();\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\")) {\n                        try (JDBCResultSet resultSet = dbStat.executeQuery()) {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n\n        } catch (SQLException ex) {\n            throw new DBException(\"Error reading metadata\", ex, this);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":5,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:58:22","endLine":137,"groupId":"6952","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/550de7945b43c31f33aa45b3963075a9502a2b.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"9b1ce41e9794d85fb4fb17c70bc23f39826a93e8","commitMessage":"@@@Java 1.7 -> fix auto-close\n\nFormer-commit-id: 62a0ae93e45ae238e1e31de380a90e072fc0c203","date":"2015-10-03 07:06:59","modifiedFileCount":"8","status":"M","submitter":"jurgen"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2015-10-28 00:54:57","commitOrder":6,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\")) {\n                        try (JDBCResultSet resultSet = dbStat.executeQuery()) {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n        }\n    }\n","date":"2015-10-28 00:54:57","endLine":196,"groupId":"11161","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9e/8d2fc79bbfcb2f7f11dd78634ede0a00f91994.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = getDefaultContext(true).openSession(monitor, DBCExecutionPurpose.META, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\")) {\n                        try (JDBCResultSet resultSet = dbStat.executeQuery()) {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":6,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:58:22","endLine":137,"groupId":"6952","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/550de7945b43c31f33aa45b3963075a9502a2b.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"930aa0d097bb729beb779516f7d40b703ac3bc1a","commitMessage":"@@@Meta/util session obtain refactoring\n\n\nFormer-commit-id: 1eed6858437e4b49cf51ff53c65233bf1e49fe2f","date":"2015-10-28 00:54:57","modifiedFileCount":"43","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2016-06-20 19:32:29","commitOrder":7,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","date":"2016-06-20 19:32:29","endLine":253,"groupId":"11161","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/80/0de0cf2a66efb9342fad8dc5d77ebe4af5b08d.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n\n            {\n                \r\n                try {\n                    try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT DATABASE()\")) {\n                        try (JDBCResultSet resultSet = dbStat.executeQuery()) {\n                            resultSet.next();\n                            activeCatalogName = resultSet.getString(1);\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.error(e);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":7,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:58:22","endLine":137,"groupId":"6952","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/550de7945b43c31f33aa45b3963075a9502a2b.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"a1da0b1ad9c298c762c53643f95f6c6330affa01","commitMessage":"@@@#531 Refresh default object on SQL execute\n\n\nFormer-commit-id: 9c8fda0455f6b32c148d332baabdc34346985037","date":"2016-06-20 19:32:29","modifiedFileCount":"20","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2016-07-09 23:28:12","commitOrder":8,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            final DatabaseMetaData metaData = session.getMetaData();\n            databaseMajorVersion = metaData.getDatabaseMajorVersion();\n            databaseMinorVersion = metaData.getDatabaseMinorVersion();\n\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        } catch (SQLException e) {\n            log.error(\"Error initializing data source\");\n        }\n    }\n","date":"2016-07-09 23:28:12","endLine":262,"groupId":"11161","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cc/aee0f821eacfce5bb3c4dc3ddda786cedac975.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":8,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:58:22","endLine":137,"groupId":"6952","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/550de7945b43c31f33aa45b3963075a9502a2b.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"40e38b9390f39d11aad8b312c03c063dd027f378","commitMessage":"@@@#577 MySQL alter user  support (MySQL 5.7+)\n\n\nFormer-commit-id: 8595b24ac29aef29c51e95453e618a5ad8d6d86f","date":"2016-07-09 23:28:12","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2016-07-09 23:36:52","commitOrder":9,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","date":"2016-07-09 23:36:52","endLine":253,"groupId":"11161","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c4/fa319e96086770af23d278da0b3eec07512b24.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            final DatabaseMetaData metaData = session.getMetaData();\n            databaseMajorVersion = metaData.getDatabaseMajorVersion();\n            databaseMinorVersion = metaData.getDatabaseMinorVersion();\n\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        } catch (SQLException e) {\n            log.error(\"Error initializing data source\");\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":9,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2015-10-03 06:58:22","endLine":137,"groupId":"6952","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/550de7945b43c31f33aa45b3963075a9502a2b.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"3e51b8cf1fb60170c89ef49a3cc53fdcc8a9e5ef","commitMessage":"@@@Server version determine refactoring\n\n\nFormer-commit-id: 5983fcc10380211183ed77348ec3ea40cee4546f","date":"2016-07-09 23:36:52","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2016-07-09 23:36:52","commitOrder":10,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","date":"2016-07-09 23:36:52","endLine":253,"groupId":"11161","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c4/fa319e96086770af23d278da0b3eec07512b24.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":191,"status":"N"},{"authorDate":"2016-10-23 07:02:34","commitOrder":10,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"8528","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n\n        JDBCPreparedStatement dbStat;\n\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            dbStat = session.prepareStatement(SEL_AUTHORITIES);\n            try {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            } finally {\n                dbStat.close();\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        dbStat = session.prepareStatement(SEL_OBJECTS);\n        try {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        } finally {\n            dbStat.close();\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"1dd3f1ac11ca22f77703e8bbacab24c8ea825add","commitMessage":"@@@DB2 code cleanup (Java7)\n\n\nFormer-commit-id: d4787a84622287c371a88322704508b42e482ebd","date":"2016-10-23 07:02:34","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2017-06-20 01:52:58","commitOrder":11,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","date":"2017-06-20 01:52:58","endLine":260,"groupId":"11161","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9a/07fc1390952f5a91d1d757b393d63c2137876f.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"},{"authorDate":"2016-10-23 07:02:34","commitOrder":11,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"8528","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"fd6fe3d6fbe85f5ed47483803920beaf038ff411","commitMessage":"@@@#1382 MySQL: JSON value edit for custom queries.\n\n\nFormer-commit-id: 56674ca062096163fccd916b8b1d2caf2c43090b","date":"2017-06-20 01:52:58","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2019-04-04 00:27:19","commitOrder":12,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","date":"2019-04-04 00:27:19","endLine":294,"groupId":"11161","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8f/3de8d23aa9ccab887b125f74038923e3bd4030.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                Collections.sort(charsets, DBUtils.<MySQLCharset>nameComparator());\n\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":219,"status":"M"},{"authorDate":"2016-10-23 07:02:34","commitOrder":12,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"8528","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"2c1951aa1f662910e1a41b388c43aad3ea3bd576","commitMessage":"@@@#5547 MySQL create database: use server default charset and collation\n\n\nFormer-commit-id: f9505a10825ea58ea121bcc7d30e6e2d31c0809e","date":"2019-04-04 00:27:19","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2020-02-13 17:48:00","commitOrder":13,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n        }\n    }\n","date":"2020-02-13 17:48:00","endLine":320,"groupId":"11161","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/10/ba0aa96660fec8c62e52e3379848c9b88dbeb9.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            activeCatalogName = MySQLUtils.determineCurrentDatabase(session);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":235,"status":"M"},{"authorDate":"2016-10-23 07:02:34","commitOrder":13,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"8528","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"e9c7578f360874e6b3c6057d65eab2db0f5091f6","commitMessage":"@@@#7895 MySQL identifiers quote fix\n\n\nFormer-commit-id: de13b82cec2dc6a9d3687e750b59dc0b5eb2ee14","date":"2020-02-13 17:48:00","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2020-08-05 22:57:08","commitOrder":14,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n\n            \r\n            try {\n                String resultSet = JDBCUtils.queryString(session, \"SELECT * FROM information_schema.TABLES t\\n\" +\n                        \"WHERE\\n\" +\n                        \"\\tt.TABLE_SCHEMA = 'information_schema'\\n\" +\n                        \"\\tAND t.TABLE_NAME = 'CHECK_CONSTRAINTS'\");\n                containsCheckConstraintTable = (resultSet != null);\n            } catch (SQLException e) {\n                log.debug(\"Error reading information schema\", e);\n            }\n        }\n    }\n","date":"2020-08-05 22:57:08","endLine":341,"groupId":"11161","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/fd2d0690c0adcf7e4a63aaf0d55ad14d9385cc.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-10-23 07:02:34","commitOrder":14,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"8528","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"820f2f20998875652aa22008ec5843c69db4241d","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 2161415b1597c6f3b7ddd979005202cb8bfd2806","date":"2020-08-05 22:57:08","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2020-09-17 21:26:15","commitOrder":15,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n\n            if (getDataSource().supportsInformationSchema()) {\n                \r\n                try {\n                    String resultSet = JDBCUtils.queryString(session, \"SELECT * FROM information_schema.TABLES t\\n\" +\n                            \"WHERE\\n\" +\n                            \"\\tt.TABLE_SCHEMA = 'information_schema'\\n\" +\n                            \"\\tAND t.TABLE_NAME = 'CHECK_CONSTRAINTS'\");\n                    containsCheckConstraintTable = (resultSet != null);\n                } catch (SQLException e) {\n                    log.debug(\"Error reading information schema\", e);\n                }\n            }\n        }\n    }\n","date":"2020-09-17 21:26:15","endLine":344,"groupId":"11161","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/4533e3b13c20a92fcb07c8771f7a4247844dc0.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n\n            \r\n            try {\n                String resultSet = JDBCUtils.queryString(session, \"SELECT * FROM information_schema.TABLES t\\n\" +\n                        \"WHERE\\n\" +\n                        \"\\tt.TABLE_SCHEMA = 'information_schema'\\n\" +\n                        \"\\tAND t.TABLE_NAME = 'CHECK_CONSTRAINTS'\");\n                containsCheckConstraintTable = (resultSet != null);\n            } catch (SQLException e) {\n                log.debug(\"Error reading information schema\", e);\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"},{"authorDate":"2016-10-23 07:02:34","commitOrder":15,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"8528","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"84c2bb62e419bf1b3642f6b0d028471a12a39ca6","commitMessage":"@@@Merge pull request #9802 from dbeaver/legacy-mysql#9554\n\nLegacy mysql#9554\n\nFormer-commit-id: 0601f1d36b29554259d4596130243b4d2eb6e8bc","date":"2020-09-17 21:26:15","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-23 07:02:34","codes":[{"authorDate":"2021-07-20 14:49:29","commitOrder":16,"curCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            \r\n            {\n                plugins = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW PLUGINS\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            plugins.add(new MySQLPlugin(this, dbResult));\n                        }\n                    }\n                } catch (SQLException e) {\n                    log.debug(\"Error reading plugins information\", e);\n                }\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n\n            if (getDataSource().supportsInformationSchema()) {\n                \r\n                try {\n                    String resultSet = JDBCUtils.queryString(session, \"SELECT * FROM information_schema.TABLES t\\n\" +\n                            \"WHERE\\n\" +\n                            \"\\tt.TABLE_SCHEMA = 'information_schema'\\n\" +\n                            \"\\tAND t.TABLE_NAME = 'CHECK_CONSTRAINTS'\");\n                    containsCheckConstraintTable = (resultSet != null);\n                } catch (SQLException e) {\n                    log.debug(\"Error reading information schema\", e);\n                }\n            }\n        }\n    }\n","date":"2021-07-20 14:49:29","endLine":380,"groupId":"101180","id":31,"instanceNumber":1,"isCurCommit":1,"methodName":"initialize","params":"(@NotNullDBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/516e19940e7dbb4e8357f00b34a86c4056be22.src","preCode":"    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        dataTypeCache.getAllObjects(monitor, this);\n        if (isServerVersionAtLeast(5, 7) && dataTypeCache.getCachedObject(MySQLConstants.TYPE_JSON) == null) {\n            dataTypeCache.cacheObject(new JDBCDataType<>(this, java.sql.Types.OTHER, MySQLConstants.TYPE_JSON, MySQLConstants.TYPE_JSON, false, true, 0, 0, 0));\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load basic datasource metadata\")) {\n            \r\n            {\n                engines = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW ENGINES\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLEngine engine = new MySQLEngine(this, dbResult);\n                            engines.add(engine);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n            }\n\n            \r\n            {\n                charsets = new ArrayList<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW CHARSET\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            MySQLCharset charset = new MySQLCharset(this, dbResult);\n                            charsets.add(charset);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n                charsets.sort(DBUtils.<MySQLCharset>nameComparator());\n\n                collations = new LinkedHashMap<>();\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW COLLATION\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        while (dbResult.next()) {\n                            String charsetName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_CHARSET);\n                            MySQLCharset charset = getCharset(charsetName);\n                            if (charset == null) {\n                                log.warn(\"Charset '\" + charsetName + \"' not found.\");\n                                continue;\n                            }\n                            MySQLCollation collation = new MySQLCollation(charset, dbResult);\n                            collations.put(collation.getName(), collation);\n                            charset.addCollation(collation);\n                        }\n                    }\n                } catch (SQLException ex) {\n                    \r\n                }\n\n                try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT @@GLOBAL.character_set_server,@@GLOBAL.collation_server\")) {\n                    try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                        if (dbResult.next()) {\n                            defaultCharset = JDBCUtils.safeGetString(dbResult, 1);\n                            defaultCollation = JDBCUtils.safeGetString(dbResult, 2);\n                        }\n                    }\n                } catch (Throwable ex) {\n                    log.debug(\"Error reading default server charset/collation\", ex);\n                }\n\n            }\n\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SHOW VARIABLES LIKE 'lower_case_table_names'\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    if (dbResult.next()) {\n                        lowerCaseTableNames = JDBCUtils.safeGetInt(dbResult, 2);\n                    }\n                }\n            } catch (Throwable ex) {\n                log.debug(\"Error reading default server charset/collation\", ex);\n            }\n\n            \r\n            catalogCache.getAllObjects(monitor, this);\n            \r\n\n            if (getDataSource().supportsInformationSchema()) {\n                \r\n                try {\n                    String resultSet = JDBCUtils.queryString(session, \"SELECT * FROM information_schema.TABLES t\\n\" +\n                            \"WHERE\\n\" +\n                            \"\\tt.TABLE_SCHEMA = 'information_schema'\\n\" +\n                            \"\\tAND t.TABLE_NAME = 'CHECK_CONSTRAINTS'\");\n                    containsCheckConstraintTable = (resultSet != null);\n                } catch (SQLException e) {\n                    log.debug(\"Error reading information schema\", e);\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLDataSource.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"M"},{"authorDate":"2016-10-23 07:02:34","commitOrder":16,"curCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","date":"2016-10-23 07:02:34","endLine":128,"groupId":"101180","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"DB2CurrentUserPrivileges","params":"(DBRProgressMonitormonitor@JDBCSessionsession@StringcurrentAuthId@DB2DataSourcedb2DataSource)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/d152c0c17274a3d805fe6f71c9c95fa4da17b5.src","preCode":"    public DB2CurrentUserPrivileges(DBRProgressMonitor monitor, JDBCSession session, String currentAuthId,\n        DB2DataSource db2DataSource) throws SQLException\n    {\n        \r\n        \r\n        listAuthorities = new ArrayList<>();\n        if (db2DataSource.isAtLeastV9_5()) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_AUTHORITIES)) {\n                dbStat.setString(1, currentAuthId);\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        listAuthorities.add(dbResult.getString(1));\n                    }\n                }\n            }\n        }\n\n        listObjectPrivileges = new ArrayList<>();\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(SEL_OBJECTS)) {\n            dbStat.setString(1, currentAuthId);\n            dbStat.setString(2, currentAuthId);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (dbResult.next()) {\n                    listObjectPrivileges.add(dbResult.getString(1));\n                }\n            }\n        }\n\n        \r\n        userIsAuthorisedForApplications = computeUserIsAuthorisedForApplications();\n        userIsAuthorisedForDBCFG = computeUserIsAuthorisedForDBCFG();\n        userIsAuthorisedForAdminister = userIsAuthorisedForApplications || userIsAuthorisedForDBCFG;\n\n        userIsAuthorisedForContainers = computeUserIsAuthorisedForContainers();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.db2/src/org/jkiss/dbeaver/ext/db2/model/DB2CurrentUserPrivileges.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"N"}],"commitId":"cb8eaf29cd0a4cb6417f30eca75262d1964f789f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-07-20 14:49:29","modifiedFileCount":"15","status":"M","submitter":"Serge Rider"}]
