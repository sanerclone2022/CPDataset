[{"authorTime":"2019-02-08 06:45:33","codes":[{"authorDate":"2019-02-08 06:45:33","commitOrder":1,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-08 06:45:33","endLine":152,"groupId":"9642","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/42/bb5102de97c139d9bd573f887897e577c45f5f.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"B"},{"authorDate":"2019-02-08 06:45:33","commitOrder":1,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-08 06:45:33","endLine":182,"groupId":"9642","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/42/bb5102de97c139d9bd573f887897e577c45f5f.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"}],"commitId":"bf41d8d2becbb84278cc95301a059f5fe3281487","commitMessage":"@@@#4209 Dashboard view configuration\n\n\nFormer-commit-id: eafbd2a1458a1a0d4349add4b5c68fae2bb08d2c","date":"2019-02-08 06:45:33","modifiedFileCount":"10","status":"B","submitter":"serge-rider"},{"authorTime":"2019-02-09 06:38:35","codes":[{"authorDate":"2019-02-09 06:38:35","commitOrder":2,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-09 06:38:35","endLine":151,"groupId":"9642","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/c4a541bed0757e718bd084fc704cee5177e9a8.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":120,"status":"M"},{"authorDate":"2019-02-09 06:38:35","commitOrder":2,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-09 06:38:35","endLine":182,"groupId":"9642","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/c4a541bed0757e718bd084fc704cee5177e9a8.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":153,"status":"M"}],"commitId":"4a5f45b3947101e3e322696bae9d7ceb5e2d176e","commitMessage":"@@@#4209 Dashboard: charts value type\n\n\nFormer-commit-id: ca5ef40b24e4a15e25bd97f2c6dd1694f0b15ff2","date":"2019-02-09 06:38:35","modifiedFileCount":"6","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-10 18:53:16","codes":[{"authorDate":"2019-02-10 18:53:16","commitOrder":3,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-10 18:53:16","endLine":153,"groupId":"9642","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c9/7a351e910aa4e0a96f177771259baba64d2bad.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2019-02-10 18:53:16","commitOrder":3,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-10 18:53:16","endLine":185,"groupId":"9642","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c9/7a351e910aa4e0a96f177771259baba64d2bad.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.type = registry.getDashboardType(config.getAttribute(\"type\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":155,"status":"M"}],"commitId":"811856740f9653c81e40ca51445b494b1083403e","commitMessage":"@@@#4209 Dashboards: model refactoring (view type)\n\n\nFormer-commit-id: bf84b518fbbfdab8014dbbe47983ea7981725f08","date":"2019-02-10 18:53:16","modifiedFileCount":"7","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-11 02:34:14","codes":[{"authorDate":"2019-02-11 02:34:14","commitOrder":4,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-11 02:34:14","endLine":163,"groupId":"9642","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/db/df64373e799b4f4c55e53f74628b48caa827a3.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2019-02-11 02:34:14","commitOrder":4,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-11 02:34:14","endLine":198,"groupId":"9642","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/db/df64373e799b4f4c55e53f74628b48caa827a3.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"}],"commitId":"36cabb8139cc1055012405be5d9ca8300bd5c7f1","commitMessage":"@@@#4209 Dashboards: edit.  create.  delete.  copy\n\n\nFormer-commit-id: ff3475160fae6aec9d50a93df9834319050009e6","date":"2019-02-11 02:34:14","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-14 04:17:47","codes":[{"authorDate":"2019-02-14 04:17:47","commitOrder":5,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKey = config.getAttribute(\"mapKey\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-14 04:17:47","endLine":202,"groupId":"9642","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/b6db267d2bbb5d48e3d58632f12136de3a00d3.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-02-14 04:17:47","commitOrder":5,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-14 04:17:47","endLine":238,"groupId":"9642","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/b6db267d2bbb5d48e3d58632f12136de3a00d3.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"d6c83986a6c5a3d75ed0faab813644eca69aaad0","commitMessage":"@@@#4209 Dashboards: map queries model\n\n\nFormer-commit-id: c3e83bad899c3c9705c48a9e18981ce5ce28f3e9","date":"2019-02-14 04:17:47","modifiedFileCount":"3","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-14 04:17:47","codes":[{"authorDate":"2019-02-14 06:14:40","commitOrder":6,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.notEmpty(config.getAttribute(\"mapKeys\")).split(\",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-14 06:14:40","endLine":202,"groupId":"9642","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3a/f3a28a8365df9c6fb145910417285b038f4c96.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKey = config.getAttribute(\"mapKey\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2019-02-14 04:17:47","commitOrder":6,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-14 04:17:47","endLine":238,"groupId":"9642","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/b6db267d2bbb5d48e3d58632f12136de3a00d3.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"}],"commitId":"508ad0b524f3cdc770b147bafa42798f3d0af43e","commitMessage":"@@@#4209 Dashboards: map queries model + MySQL server status dashboards\n\n\nFormer-commit-id: 7f67e730c021b5d2699d3ceb44ed7346fe332682","date":"2019-02-14 06:14:40","modifiedFileCount":"6","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-14 04:17:47","codes":[{"authorDate":"2019-02-15 03:20:15","commitOrder":7,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.notEmpty(config.getAttribute(\"mapKeys\")).split(\",\");\n                    this.mapLabels = CommonUtils.notEmpty(config.getAttribute(\"mapLabels\")).split(\",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-15 03:20:15","endLine":204,"groupId":"9642","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/55/388037cd8f8f4397a1cab48c48724c65667151.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.notEmpty(config.getAttribute(\"mapKeys\")).split(\",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-02-14 04:17:47","commitOrder":7,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-14 04:17:47","endLine":238,"groupId":"9642","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/b6db267d2bbb5d48e3d58632f12136de3a00d3.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"}],"commitId":"bfd694856ba06130b0e2956996e3f5de6e2226aa","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n# Conflicts:\n#\tplugins/org.jkiss.dbeaver.ext.mysql/plugin.xml\n\n\nFormer-commit-id: af9bbc2d2d7c8cdbfd2563312b4aaae0a12ada05","date":"2019-02-15 03:20:15","modifiedFileCount":"11","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-15 04:44:53","codes":[{"authorDate":"2019-02-15 04:44:53","commitOrder":8,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.split(config.getAttribute(\"tags\"), \",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.split(config.getAttribute(\"mapKeys\"), \",\");\n                    this.mapLabels = CommonUtils.split(config.getAttribute(\"mapLabels\"), \",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-02-15 04:44:53","endLine":204,"groupId":"9642","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d7/edf73f1b535ce09a9a6540e27c6782ac70344f.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.notEmpty(config.getAttribute(\"mapKeys\")).split(\",\");\n                    this.mapLabels = CommonUtils.notEmpty(config.getAttribute(\"mapLabels\")).split(\",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-02-15 04:44:53","commitOrder":8,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.split(config.getAttribute(\"tags\"), \",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-02-15 04:44:53","endLine":240,"groupId":"9642","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d7/edf73f1b535ce09a9a6540e27c6782ac70344f.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.notEmpty(config.getAttribute(\"tags\")).split(\",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"c9425a7a02274a1ad6088a437dc32dbbc75b316c","commitMessage":"@@@Config parsers fix\n\n\nFormer-commit-id: cd4a671d7fcbdade1820e45f8f880c0e6f50ed82","date":"2019-02-15 04:44:53","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2019-04-05 02:17:59","codes":[{"authorDate":"2019-04-05 02:17:59","commitOrder":9,"curCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.split(config.getAttribute(\"tags\"), \",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.interval = CommonUtils.valueOf(DashboardInterval.class, config.getAttribute(\"interval\"), DashboardConstants.DEF_DASHBOARD_INTERVAL);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.split(config.getAttribute(\"mapKeys\"), \",\");\n                    this.mapLabels = CommonUtils.split(config.getAttribute(\"mapLabels\"), \",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","date":"2019-04-05 02:17:59","endLine":206,"groupId":"11117","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6e/00b478632a42b14ce7944b19b8b25ba931e315.src","preCode":"    DashboardDescriptor(\n        DashboardRegistry registry,\n        IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n        this.tags = CommonUtils.split(config.getAttribute(\"tags\"), \",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO); \r\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        {\n            String mapQueryId = config.getAttribute(\"mapQuery\");\n            if (!CommonUtils.isEmpty(mapQueryId)) {\n                this.mapQuery = registry.getMapQuery(mapQueryId);\n                if (this.mapQuery != null) {\n                    this.mapKeys = CommonUtils.split(config.getAttribute(\"mapKeys\"), \",\");\n                    this.mapLabels = CommonUtils.split(config.getAttribute(\"mapLabels\"), \",\");\n                    this.mapFormula = config.getAttribute(\"mapFormula\");\n                    if (!CommonUtils.isEmpty(this.mapFormula)) {\n                        try {\n                            this.mapFormulaExpr = AbstractDescriptor.parseExpression(this.mapFormula);\n                        } catch (DBException e) {\n                            log.warn(e);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (IConfigurationElement ds : config.getChildren(\"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = false;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"M"},{"authorDate":"2019-04-05 02:17:59","commitOrder":9,"curCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.split(config.getAttribute(\"tags\"), \",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.interval = CommonUtils.valueOf(DashboardInterval.class, config.getAttribute(\"interval\"), DashboardConstants.DEF_DASHBOARD_INTERVAL);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","date":"2019-04-05 02:17:59","endLine":243,"groupId":"11117","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"DashboardDescriptor","params":"(DashboardRegistryregistry@Elementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6e/00b478632a42b14ce7944b19b8b25ba931e315.src","preCode":"    DashboardDescriptor(DashboardRegistry registry, Element config) {\n        super(UIDashboardActivator.PLUGIN_ID);\n\n        this.id = config.getAttribute(\"id\");\n        this.name = config.getAttribute(\"label\");\n        this.description = config.getAttribute(\"description\");\n        this.group = config.getAttribute(\"group\");\n        this.measure = config.getAttribute(\"measure\");\n\n        this.tags = CommonUtils.split(config.getAttribute(\"tags\"), \",\");\n        this.showByDefault = CommonUtils.toBoolean(config.getAttribute(\"showByDefault\"));\n\n        this.dataType = CommonUtils.valueOf(DashboardDataType.class, config.getAttribute(\"dataType\"), DashboardConstants.DEF_DASHBOARD_DATA_TYPE);\n        this.defaultViewType = registry.getViewType(config.getAttribute(\"defaultView\"));\n        if (this.defaultViewType == null) {\n            this.defaultViewType = registry.getViewType(DashboardConstants.DEF_DASHBOARD_VIEW_TYPE);\n        }\n        this.widthRatio = (float) CommonUtils.toDouble(config.getAttribute(\"ratio\"), DashboardConstants.DEF_DASHBOARD_WIDTH_RATIO);\n        this.calcType = CommonUtils.valueOf(DashboardCalcType.class, config.getAttribute(\"calc\"), DashboardConstants.DEF_DASHBOARD_CALC_TYPE);\n        this.valueType = CommonUtils.valueOf(DashboardValueType.class, config.getAttribute(\"value\"), DashboardConstants.DEF_DASHBOARD_VALUE_TYPE);\n        this.fetchType = CommonUtils.valueOf(DashboardFetchType.class, config.getAttribute(\"fetch\"), DashboardConstants.DEF_DASHBOARD_FETCH_TYPE);\n        this.updatePeriod = CommonUtils.toLong(config.getAttribute(\"updatePeriod\"), DashboardConstants.DEF_DASHBOARD_UPDATE_PERIOD); \r\n        this.maxItems = CommonUtils.toInt(config.getAttribute(\"maxItems\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_ITEM_COUNT);\n        this.maxAge = CommonUtils.toLong(config.getAttribute(\"maxAge\"), DashboardConstants.DEF_DASHBOARD_MAXIMUM_AGE);\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"datasource\")) {\n            dataSourceMappings.add(new DataSourceMapping(ds));\n        }\n\n        for (Element ds : XMLUtils.getChildElementList(config, \"query\")) {\n            queries.add(new QueryMapping(ds));\n        }\n\n        this.isCustom = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/registry/DashboardDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"M"}],"commitId":"7a72928c1b9296d2a8b420c156535bcac6dfafe9","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 267a18d637bacb39dcd1f330babdea4054141ada","date":"2019-04-05 02:17:59","modifiedFileCount":"36","status":"M","submitter":"serge-rider"}]
