[{"authorTime":"2020-02-07 05:09:38","codes":[{"authorDate":"2019-07-31 17:57:07","commitOrder":2,"curCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Transforms\");\n\n        for (DBDAttributeBinding attr : viewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);;\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n            updateTransformItem(attrItem);\n\n            if (this.currentAttribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n        }\n\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","date":"2019-07-31 17:57:07","endLine":141,"groupId":"121","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createAttributeSelectorArea","params":"(Compositecomposite)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/9384bd7d020cc30329f26b678f682d5fbd0767.src","preCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Transforms\");\n\n        for (DBDAttributeBinding attr : viewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);;\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n            updateTransformItem(attrItem);\n\n            if (this.currentAttribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n        }\n\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/TransformerSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"NB"},{"authorDate":"2020-02-07 05:09:38","commitOrder":2,"curCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Colors\");\n\n        for (DBDAttributeBinding attr : resultSetViewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n\n            if (this.attribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n            \r\n        }\n\n        attributeTable.addListener(SWT.PaintItem, event -> {\n            if (event.index == 1) {\n\n                int x = event.x + 4;\n                DBDAttributeBinding attr = (DBDAttributeBinding) event.item.getData();\n                List<DBVColorOverride> coList = vEntity.getColorOverrides(attr.getName());\n                if (!coList.isEmpty()) {\n                    for (DBVColorOverride co : coList) {\n                        List<String> coStrings = new ArrayList<>();\n                        if (co.getAttributeValues() != null) {\n                            for (Object value : co.getAttributeValues()) {\n                                coStrings.add(CommonUtils.toString(value));\n                            }\n                        }\n                        \r\n                        \r\n                        int boxSize = attributeTable.getItemHeight() - 4;\n                        Point textSize = new Point(boxSize, boxSize);\n                        Color fg = attributeTable.getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\r\n                        Color bg = getColorTableBackground(co);\n                        if (fg != null) event.gc.setForeground(fg);\n                        if (bg != null) event.gc.setBackground(bg);\n\n                        event.gc.fillRectangle(x, event.y + 2, textSize.x, textSize.y);\n                        event.gc.drawRectangle(x, event.y + 2, textSize.x - 1, textSize.y - 1);\n                        \r\n                        x += textSize.x + 4;\n                    }\n                }\n            }\n        });\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","date":"2020-02-07 05:09:38","endLine":202,"groupId":"121","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createAttributeSelectorArea","params":"(Compositecomposite)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d0/16e71d41a8f8128e13265ea58aea5c5ca4e443.src","preCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Colors\");\n\n        for (DBDAttributeBinding attr : resultSetViewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n\n            if (this.attribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n            \r\n        }\n\n        attributeTable.addListener(SWT.PaintItem, event -> {\n            if (event.index == 1) {\n\n                int x = event.x + 4;\n                DBDAttributeBinding attr = (DBDAttributeBinding) event.item.getData();\n                List<DBVColorOverride> coList = vEntity.getColorOverrides(attr.getName());\n                if (!coList.isEmpty()) {\n                    for (DBVColorOverride co : coList) {\n                        List<String> coStrings = new ArrayList<>();\n                        if (co.getAttributeValues() != null) {\n                            for (Object value : co.getAttributeValues()) {\n                                coStrings.add(CommonUtils.toString(value));\n                            }\n                        }\n                        \r\n                        \r\n                        int boxSize = attributeTable.getItemHeight() - 4;\n                        Point textSize = new Point(boxSize, boxSize);\n                        Color fg = attributeTable.getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\r\n                        Color bg = getColorTableBackground(co);\n                        if (fg != null) event.gc.setForeground(fg);\n                        if (bg != null) event.gc.setBackground(bg);\n\n                        event.gc.fillRectangle(x, event.y + 2, textSize.x, textSize.y);\n                        event.gc.drawRectangle(x, event.y + 2, textSize.x - 1, textSize.y - 1);\n                        \r\n                        x += textSize.x + 4;\n                    }\n                }\n            }\n        });\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/colors/ColorSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":140,"status":"B"}],"commitId":"c282a0aa621f4b2d6d045ebb49386f32398f9580","commitMessage":"@@@RSV refactoring (extract nested classes)\n\n\nFormer-commit-id: f6d83ab47904d7db23e3700c1154a1aa10063696","date":"2020-02-07 05:09:38","modifiedFileCount":"12","status":"M","submitter":"serge-rider"},{"authorTime":"2021-06-16 23:14:03","codes":[{"authorDate":"2019-07-31 17:57:07","commitOrder":3,"curCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Transforms\");\n\n        for (DBDAttributeBinding attr : viewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);;\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n            updateTransformItem(attrItem);\n\n            if (this.currentAttribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n        }\n\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","date":"2019-07-31 17:57:07","endLine":141,"groupId":"10404","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createAttributeSelectorArea","params":"(Compositecomposite)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/9384bd7d020cc30329f26b678f682d5fbd0767.src","preCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Transforms\");\n\n        for (DBDAttributeBinding attr : viewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);;\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n            updateTransformItem(attrItem);\n\n            if (this.currentAttribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n        }\n\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/TransformerSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"N"},{"authorDate":"2021-06-16 23:14:03","commitOrder":3,"curCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, ResultSetMessages.dialog_row_colors_table_attributes_name);\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, ResultSetMessages.dialog_row_colors_table_attributes_color);\n\n        for (DBDAttributeBinding attr : resultSetViewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n\n            if (this.attribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n            \r\n        }\n\n        attributeTable.addListener(SWT.PaintItem, event -> {\n            if (event.index == 1) {\n\n                int x = event.x + 4;\n                DBDAttributeBinding attr = (DBDAttributeBinding) event.item.getData();\n                List<DBVColorOverride> coList = vEntity.getColorOverrides(attr.getName());\n                if (!coList.isEmpty()) {\n                    for (DBVColorOverride co : coList) {\n                        List<String> coStrings = new ArrayList<>();\n                        if (co.getAttributeValues() != null) {\n                            for (Object value : co.getAttributeValues()) {\n                                coStrings.add(CommonUtils.toString(value));\n                            }\n                        }\n                        \r\n                        \r\n                        int boxSize = attributeTable.getItemHeight() - 4;\n                        Point textSize = new Point(boxSize, boxSize);\n                        Color fg = attributeTable.getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\r\n                        Color bg = getColorTableBackground(co);\n                        if (fg != null) event.gc.setForeground(fg);\n                        if (bg != null) event.gc.setBackground(bg);\n\n                        event.gc.fillRectangle(x, event.y + 2, textSize.x, textSize.y);\n                        event.gc.drawRectangle(x, event.y + 2, textSize.x - 1, textSize.y - 1);\n                        \r\n                        x += textSize.x + 4;\n                    }\n                }\n            }\n        });\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","date":"2021-06-16 23:14:03","endLine":219,"groupId":"10404","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createAttributeSelectorArea","params":"(Compositecomposite)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/70de1fe9da4b87f8a4411d4f29c3855fb3f3b6.src","preCode":"    private void createAttributeSelectorArea(Composite composite) {\n        Composite panel = UIUtils.createComposite(composite, 1);\n\n        attributeTable = new Table(panel, SWT.FULL_SELECTION | SWT.BORDER);\n        attributeTable.setHeaderVisible(true);\n        GridData gd = new GridData(GridData.FILL_BOTH);\n        gd.widthHint = 400;\n        attributeTable.setLayoutData(gd);\n        UIUtils.executeOnResize(attributeTable, () -> UIUtils.packColumns(attributeTable, true));\n\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Name\");\n        UIUtils.createTableColumn(attributeTable, SWT.LEFT, \"Colors\");\n\n        for (DBDAttributeBinding attr : resultSetViewer.getModel().getVisibleAttributes()) {\n            TableItem attrItem = new TableItem(attributeTable, SWT.NONE);\n            attrItem.setData(attr);\n            attrItem.setText(0, attr.getName());\n            attrItem.setImage(0, DBeaverIcons.getImage(DBValueFormatting.getObjectImage(attr, true)));\n\n            if (this.attribute == attr) {\n                attributeTable.setSelection(attrItem);\n            }\n            \r\n        }\n\n        attributeTable.addListener(SWT.PaintItem, event -> {\n            if (event.index == 1) {\n\n                int x = event.x + 4;\n                DBDAttributeBinding attr = (DBDAttributeBinding) event.item.getData();\n                List<DBVColorOverride> coList = vEntity.getColorOverrides(attr.getName());\n                if (!coList.isEmpty()) {\n                    for (DBVColorOverride co : coList) {\n                        List<String> coStrings = new ArrayList<>();\n                        if (co.getAttributeValues() != null) {\n                            for (Object value : co.getAttributeValues()) {\n                                coStrings.add(CommonUtils.toString(value));\n                            }\n                        }\n                        \r\n                        \r\n                        int boxSize = attributeTable.getItemHeight() - 4;\n                        Point textSize = new Point(boxSize, boxSize);\n                        Color fg = attributeTable.getDisplay().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\r\n                        Color bg = getColorTableBackground(co);\n                        if (fg != null) event.gc.setForeground(fg);\n                        if (bg != null) event.gc.setBackground(bg);\n\n                        event.gc.fillRectangle(x, event.y + 2, textSize.x, textSize.y);\n                        event.gc.drawRectangle(x, event.y + 2, textSize.x - 1, textSize.y - 1);\n                        \r\n                        x += textSize.x + 4;\n                    }\n                }\n            }\n        });\n        attributeTable.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                updateAttributeSelection();\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/colors/ColorSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"f5b98b998efbbba1843914ce35945e8aca3837aa","commitMessage":"@@@Merge pull request #12863 from dbeaver/row-coloring-operator-choose#11486\n\n#11486 Allow choosing operator for row coloring condition","date":"2021-06-16 23:14:03","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"}]
