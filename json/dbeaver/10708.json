[{"authorTime":"2020-07-30 00:33:56","codes":[{"authorDate":"2020-07-30 00:33:56","commitOrder":2,"curCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        int treeWidth = getTreeWidth(tree);\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > treeWidth - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","date":"2020-07-30 00:33:56","endLine":183,"groupId":"13451","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getActionButtonFor","params":"(DBNNodeelement@Treetree@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/19541a6d332a15bf49bd9d7c67ecaccdee4c97.src","preCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        int treeWidth = getTreeWidth(tree);\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > treeWidth - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2020-07-30 00:33:56","commitOrder":2,"curCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                \r\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","date":"2020-07-30 00:33:56","endLine":285,"groupId":"3932","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"renderDataSourceNodeActions","params":"(DBNDatabaseNodeelement@Treetree@GCgc@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/19541a6d332a15bf49bd9d7c67ecaccdee4c97.src","preCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                \r\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"MB"}],"commitId":"e87f161d3f8034097a3d27d3fe7a781a88086ac2","commitMessage":"@@@#9384 Navigator tooltips redesigned. Action buttons tooltips.  host name tooltip\n\n\nFormer-commit-id: 8ed6a3207db14f60d3ca1fa3bc9de2c9db3e8c50","date":"2020-07-30 00:33:56","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-09-21 16:58:56","codes":[{"authorDate":"2020-07-30 00:33:56","commitOrder":3,"curCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        int treeWidth = getTreeWidth(tree);\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > treeWidth - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","date":"2020-07-30 00:33:56","endLine":183,"groupId":"13451","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getActionButtonFor","params":"(DBNNodeelement@Treetree@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/19541a6d332a15bf49bd9d7c67ecaccdee4c97.src","preCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        int treeWidth = getTreeWidth(tree);\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > treeWidth - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"N"},{"authorDate":"2020-09-21 16:58:56","commitOrder":3,"curCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                Point mousePos = tree.getDisplay().getCursorLocation();\n                Point itemPos = tree.toDisplay(xPos, event.y + (event.height - imageSize) / 2);\n\n                if (PAINT_ACTION_HOVER) {\n                    if (mousePos.x >= itemPos.x - 1 && mousePos.x <= itemPos.x + imageBounds.width + 2 &&\n                        mousePos.y > itemPos.y - 1 && mousePos.y < itemPos.y + imageBounds.height + 2) {\n                        Color oldBackground = gc.getBackground();\n                        Color overBG = UIUtils.getSharedColor(new RGB(200, 200, 255));\n                        gc.setBackground(overBG);\n                        gc.fillRoundRectangle(xPos - 1, event.y + (event.height - imageSize) / 2 - 1, imageBounds.width + 2, imageBounds.height + 2, 2, 2);\n                        gc.setBackground(oldBackground);\n                    }\n                }\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","date":"2020-09-21 16:58:56","endLine":326,"groupId":"3932","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"renderDataSourceNodeActions","params":"(DBNDatabaseNodeelement@Treetree@GCgc@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ce/21e7c3f4b64b49b01f78a70fbf08f24a1334d9.src","preCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                \r\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"}],"commitId":"84f81b613b889387436e13e23d76af1b9e4b606f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 26b08ebd9e0bfe9e1a8e15be426901ce80c7f1a5","date":"2020-09-21 16:58:56","modifiedFileCount":"31","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-09-21 16:58:56","codes":[{"authorDate":"2020-11-24 23:14:04","commitOrder":4,"curCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        ScrollBar horizontalScrollBar = tree.getHorizontalBar();\n        if (horizontalScrollBar != null && horizontalScrollBar.isVisible()) {\n            return null;\n        }\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > tree.getClientArea().width - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","date":"2020-11-24 23:14:04","endLine":225,"groupId":"13451","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getActionButtonFor","params":"(DBNNodeelement@Treetree@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/aa/a815812dc6212ff8fb42ad2f60eb7078e485c9.src","preCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        int treeWidth = getTreeWidth(tree);\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > treeWidth - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":193,"status":"M"},{"authorDate":"2020-09-21 16:58:56","commitOrder":4,"curCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                Point mousePos = tree.getDisplay().getCursorLocation();\n                Point itemPos = tree.toDisplay(xPos, event.y + (event.height - imageSize) / 2);\n\n                if (PAINT_ACTION_HOVER) {\n                    if (mousePos.x >= itemPos.x - 1 && mousePos.x <= itemPos.x + imageBounds.width + 2 &&\n                        mousePos.y > itemPos.y - 1 && mousePos.y < itemPos.y + imageBounds.height + 2) {\n                        Color oldBackground = gc.getBackground();\n                        Color overBG = UIUtils.getSharedColor(new RGB(200, 200, 255));\n                        gc.setBackground(overBG);\n                        gc.fillRoundRectangle(xPos - 1, event.y + (event.height - imageSize) / 2 - 1, imageBounds.width + 2, imageBounds.height + 2, 2, 2);\n                        gc.setBackground(oldBackground);\n                    }\n                }\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","date":"2020-09-21 16:58:56","endLine":326,"groupId":"3932","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"renderDataSourceNodeActions","params":"(DBNDatabaseNodeelement@Treetree@GCgc@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ce/21e7c3f4b64b49b01f78a70fbf08f24a1334d9.src","preCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                Point mousePos = tree.getDisplay().getCursorLocation();\n                Point itemPos = tree.toDisplay(xPos, event.y + (event.height - imageSize) / 2);\n\n                if (PAINT_ACTION_HOVER) {\n                    if (mousePos.x >= itemPos.x - 1 && mousePos.x <= itemPos.x + imageBounds.width + 2 &&\n                        mousePos.y > itemPos.y - 1 && mousePos.y < itemPos.y + imageBounds.height + 2) {\n                        Color oldBackground = gc.getBackground();\n                        Color overBG = UIUtils.getSharedColor(new RGB(200, 200, 255));\n                        gc.setBackground(overBG);\n                        gc.fillRoundRectangle(xPos - 1, event.y + (event.height - imageSize) / 2 - 1, imageBounds.width + 2, imageBounds.height + 2, 2, 2);\n                        gc.setBackground(oldBackground);\n                    }\n                }\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"N"}],"commitId":"5a821bc9274f3cccc8c71b8f3d7a2d522e9ca90c","commitMessage":"@@@Merge pull request #10476 from dbeaver/icons#10086\n\n#10086 assume no action button is active when scrollbar is visible\n\nFormer-commit-id: da02dc6c21146ab26f2a458a5830a2e1fe46b857","date":"2020-11-24 23:14:04","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-09-21 16:58:56","codes":[{"authorDate":"2021-02-18 22:58:38","commitOrder":5,"curCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        if (isHorizontalScrollbarEnabled(tree)) {\n            return null;\n        }\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > tree.getClientArea().width - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","date":"2021-02-18 22:58:38","endLine":218,"groupId":"10708","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getActionButtonFor","params":"(DBNNodeelement@Treetree@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/af/877ca63bd83b267e74f3586515d69b2e5d4774.src","preCode":"    private INavigatorNodeActionHandler getActionButtonFor(DBNNode element, Tree tree, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n        ScrollBar horizontalScrollBar = tree.getHorizontalBar();\n        if (horizontalScrollBar != null && horizontalScrollBar.isVisible()) {\n            return null;\n        }\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return null;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                widthOccupied += imageSize;\n\n                if (event.x > tree.getClientArea().width - widthOccupied) {\n                    return nah;\n                }\n            }\n        }\n        return null;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2020-09-21 16:58:56","commitOrder":5,"curCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                Point mousePos = tree.getDisplay().getCursorLocation();\n                Point itemPos = tree.toDisplay(xPos, event.y + (event.height - imageSize) / 2);\n\n                if (PAINT_ACTION_HOVER) {\n                    if (mousePos.x >= itemPos.x - 1 && mousePos.x <= itemPos.x + imageBounds.width + 2 &&\n                        mousePos.y > itemPos.y - 1 && mousePos.y < itemPos.y + imageBounds.height + 2) {\n                        Color oldBackground = gc.getBackground();\n                        Color overBG = UIUtils.getSharedColor(new RGB(200, 200, 255));\n                        gc.setBackground(overBG);\n                        gc.fillRoundRectangle(xPos - 1, event.y + (event.height - imageSize) / 2 - 1, imageBounds.width + 2, imageBounds.height + 2, 2, 2);\n                        gc.setBackground(oldBackground);\n                    }\n                }\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","date":"2020-09-21 16:58:56","endLine":326,"groupId":"10708","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"renderDataSourceNodeActions","params":"(DBNDatabaseNodeelement@Treetree@GCgc@Eventevent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ce/21e7c3f4b64b49b01f78a70fbf08f24a1334d9.src","preCode":"    private int renderDataSourceNodeActions(DBNDatabaseNode element, Tree tree, GC gc, Event event) {\n        List<INavigatorNodeActionHandler> nodeActions = NavigatorExtensionsRegistry.getInstance().getNodeActions(getView(), element);\n\n        int xWidth = getTreeWidth(tree);\n        int xPos = xWidth;\n        int widthOccupied = 0;\n        for (INavigatorNodeActionHandler nah : nodeActions) {\n            if (!nah.isSticky(view, element)) {\n                \r\n                boolean isSelected = (event.stateMask & SWT.SELECTED) != 0;\n                boolean isHover = false;\n                if (!isSelected && !isHover) {\n                    return widthOccupied;\n                }\n            }\n            widthOccupied += 2; \r\n\n            DBPImage icon = nah.getNodeActionIcon(getView(), element);\n            if (icon != null) {\n                Image image = DBeaverIcons.getImage(icon);\n\n                Rectangle imageBounds = image.getBounds();\n                int imageSize = imageBounds.height;\n                    \r\n                xPos -= imageSize;\n                widthOccupied += imageSize;\n                Point mousePos = tree.getDisplay().getCursorLocation();\n                Point itemPos = tree.toDisplay(xPos, event.y + (event.height - imageSize) / 2);\n\n                if (PAINT_ACTION_HOVER) {\n                    if (mousePos.x >= itemPos.x - 1 && mousePos.x <= itemPos.x + imageBounds.width + 2 &&\n                        mousePos.y > itemPos.y - 1 && mousePos.y < itemPos.y + imageBounds.height + 2) {\n                        Color oldBackground = gc.getBackground();\n                        Color overBG = UIUtils.getSharedColor(new RGB(200, 200, 255));\n                        gc.setBackground(overBG);\n                        gc.fillRoundRectangle(xPos - 1, event.y + (event.height - imageSize) / 2 - 1, imageBounds.width + 2, imageBounds.height + 2, 2, 2);\n                        gc.setBackground(oldBackground);\n                    }\n                }\n                gc.drawImage(image, xPos, event.y + (event.height - imageSize) / 2);\n\n\r\n\r\n\r\n            }\n\r\n\r\n\r\n\n        }\n        \r\n        return widthOccupied;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/database/StatisticsNavigatorNodeRenderer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"N"}],"commitId":"e9805e2720c7bd6803c51e4156682303b99e3b34","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: ca45e2dc6dafc52d6054bd632a85f5a4b6d23f09","date":"2021-02-18 22:58:38","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"}]
