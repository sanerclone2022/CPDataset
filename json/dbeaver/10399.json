[{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2018-12-29 05:36:45","commitOrder":1,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            columnsViewer = new CheckboxTreeViewer(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK);\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            \r\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree()));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2018-12-29 05:36:49","endLine":302,"groupId":"308","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/28198a1298ae4a921a172900c549d51d349f5f.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            columnsViewer = new CheckboxTreeViewer(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK);\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            \r\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree()));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"B"},{"authorDate":"2018-12-29 05:36:45","commitOrder":1,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","date":"2018-12-29 05:36:49","endLine":467,"groupId":"4663","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/28198a1298ae4a921a172900c549d51d349f5f.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"B"}],"commitId":"3752e74ff31a5aee8616c9e37d50626de690a976","commitMessage":"@@@#10 RSV implementation extraction\n\n\nFormer-commit-id: aa7c026a3e9871fad79ded3afbf21c0e1684c7dd","date":"2018-12-29 05:36:49","modifiedFileCount":"16","status":"B","submitter":"serge-rider"},{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2019-02-02 23:14:03","commitOrder":2,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new PatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(columnsGroup, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            \r\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2019-02-02 23:14:03","endLine":311,"groupId":"308","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1b/fb66571a2bbbfafc08528128d419694f8dbcdc.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            columnsViewer = new CheckboxTreeViewer(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK);\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            \r\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree()));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2018-12-29 05:36:45","commitOrder":2,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","date":"2018-12-29 05:36:49","endLine":467,"groupId":"4663","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/28198a1298ae4a921a172900c549d51d349f5f.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"N"}],"commitId":"a800d420a19fd69906f8bc328e2947fd0fa0aaad","commitMessage":"@@@#4011 Data viewer filters settings dialog: column search\n\n\nFormer-commit-id: ff66b7d7c144f72c45844cdfd0f72479527ab865","date":"2019-02-02 23:14:03","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2019-02-03 05:53:19","commitOrder":3,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new PatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2019-02-03 05:53:19","endLine":310,"groupId":"308","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ac/4b21f1dedf9a8d4143f6765507446ca6007cb4.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new PatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(columnsGroup, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            \r\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2018-12-29 05:36:45","commitOrder":3,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","date":"2018-12-29 05:36:49","endLine":467,"groupId":"4663","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/28198a1298ae4a921a172900c549d51d349f5f.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"N"}],"commitId":"25c645e5154b9e7e1150fddc423658ee46f7a4cc","commitMessage":"@@@#4011 Filter field rendering fix\n\n\nFormer-commit-id: d1ff0a5fbfc799c3165c216e258fe6d7d6320014","date":"2019-02-03 05:53:19","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2019-02-16 01:30:55","commitOrder":4,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2019-02-16 01:30:55","endLine":311,"groupId":"308","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/99/f44c7627b2fd019bc3e56c6511a52214073289.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new PatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2018-12-29 05:36:45","commitOrder":4,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","date":"2018-12-29 05:36:49","endLine":467,"groupId":"4663","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/28198a1298ae4a921a172900c549d51d349f5f.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"N"}],"commitId":"d0ff70176460ecd0ce5a6acaa8bc474ab060bb6c","commitMessage":"@@@Filter settings dialog enhancement\n\n\nFormer-commit-id: d01a3603bade71fad3652e93d2ed1d6d840c8510","date":"2019-02-16 01:30:55","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2019-03-13 17:09:59","commitOrder":5,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2019-03-13 17:09:59","endLine":311,"groupId":"14331","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/5f699044724e13986ebd7d4b7526b5134865ca.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, \"Move to top\", UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, \"Move up\", UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, \"Move down\", UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, \"Move to bottom\", UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, \"Sort\", UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, \"Show All\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, \"Show None\", null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, \"Reset\", UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2018-12-29 05:36:45","commitOrder":5,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","date":"2018-12-29 05:36:49","endLine":467,"groupId":"4663","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/28198a1298ae4a921a172900c549d51d349f5f.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":453,"status":"N"}],"commitId":"1609ca4a661468bf07e2e512cb83887f86802a21","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: f6dcf4a75f897fe7d43c1b28fb446cf6acf8066a","date":"2019-03-13 17:09:59","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-24 01:19:50","codes":[{"authorDate":"2019-03-13 17:09:59","commitOrder":6,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2019-03-13 17:09:59","endLine":311,"groupId":"14331","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/5f699044724e13986ebd7d4b7526b5134865ca.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"N"},{"authorDate":"2020-04-24 01:19:50","commitOrder":6,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","date":"2020-04-24 01:19:50","endLine":475,"groupId":"4663","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/06d8240316d30cb33f937788f24d4e345b13cc.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_DECREASE : UIIcon.SORT_INCREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"M"}],"commitId":"f1e992964905945730c14bed8489855aea479095","commitMessage":"@@@#7137 Filters dialog: ordering icons swap\n\n\nFormer-commit-id: 746390e3dfdb3e4bf7a2279f9db45e9d430f71f1","date":"2020-04-24 01:19:50","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-04-24 01:19:50","codes":[{"authorDate":"2020-11-26 00:09:51","commitOrder":7,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2020-11-26 00:09:51","endLine":258,"groupId":"14331","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ec/ab26836690b7f596a058032ee6014cf611d880.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            new CustomTreeEditor(columnsTree) {\n                {\n                    firstTraverseIndex = 3;\n                    lastTraverseIndex = 3;\n                }\n                @Override\n                protected Control createEditor(Tree table, int index, TreeItem item) {\n                    if (index == 2) {\n                        toggleColumnOrder(item);\n                        return null;\n                    } else if (index == 3 && resultSetViewer.supportsDataFilter()) {\n                        Text text = new Text(columnsTree, SWT.BORDER);\n                        text.setText(item.getText(index));\n                        text.selectAll();\n                        return text;\n                    }\n                    return null;\n                }\n                @Override\n                protected void saveEditorValue(Control control, int index, TreeItem item) {\n                    Text text = (Text) control;\n                    String criteria = text.getText().trim();\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (CommonUtils.isEmpty(criteria)) {\n                        constraint.setCriteria(null);\n                    } else {\n                        constraint.setCriteria(criteria);\n                    }\n                    item.setText(3, criteria);\n                }\n                private void toggleColumnOrder(TreeItem item)\n                {\n                    DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) item.getData());\n                    if (constraint.getOrderPosition() == 0) {\n                        \r\n                        constraint.setOrderPosition(dataFilter.getMaxOrderingPosition() + 1);\n                        constraint.setOrderDescending(false);\n                    } else if (!constraint.isOrderDescending()) {\n                        constraint.setOrderDescending(true);\n                    } else {\n                        \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                        constraint.setOrderPosition(0);\n                        constraint.setOrderDescending(false);\n                    }\n                    columnsViewer.refresh();\n                }\n            };\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"M"},{"authorDate":"2020-04-24 01:19:50","commitOrder":7,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","date":"2020-04-24 01:19:50","endLine":475,"groupId":"4663","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/06d8240316d30cb33f937788f24d4e345b13cc.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"0b0566e2fd0d6c6aa398422b5f946e18d280e6cb","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 596e24f95d818d4e46588a367abc47a0c549621b","date":"2020-11-26 00:09:51","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-24 01:19:50","codes":[{"authorDate":"2021-08-05 16:53:15","commitOrder":8,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION, new NamedObjectPatternFilter(), true, false) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new TreeViewer(parent, style);\n                    columnsController = new ViewerColumnController<>(getClass().getSimpleName(), columnsViewer);\n                    return columnsViewer;\n                }\n            };\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_name, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(constraint.getAttribute().getName());\n                    cell.setImage(DBeaverIcons.getImage(DBValueFormatting.getObjectImage(binding.getMetaAttribute())));\n                }\n            });\n\n            columnsController.addColumn(\"#\", null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(String.valueOf(constraint.getOriginalVisualPosition() + 1));\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_visible, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.isVisible();\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    return true;\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.isVisible();\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    constraint.setVisible((Boolean) value);\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_pinned, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                if (binding.getTopParent() != binding) {\n                    return null;\n                }\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    return binding == binding.getTopParent();\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (CommonUtils.getBoolean(value, false)) {\n                        constraint.setOption(SpreadsheetPresentation.ATTR_OPTION_PINNED, SpreadsheetPresentation.getMaxPinIndex(dataFilter) + 1);\n                    } else {\n                        constraint.removeOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_order, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (constraint.getOrderPosition() > 0) {\n                        cell.setText(\" \" + constraint.getOrderPosition());\n                        cell.setImage(DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE));\n                    } else {\n                        cell.setText(null);\n                        cell.setImage(null);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_criteria, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    final DBCExecutionContext executionContext = resultSetViewer.getExecutionContext();\n                    if (executionContext != null) {\n                        cell.setText(SQLUtils.getConstraintCondition(executionContext.getDataSource(), constraint, null, true));\n                    } else {\n                        cell.setText(null);\n                    }\n                }\n            });\n\n            columnsController.createColumns(false);\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    refreshData();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    refreshData();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    refreshData();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { 0.45f, 0.05f, 0.05f, 0.05f, 0.05f, 0.35f}));\n        \r\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2021-08-05 16:53:15","endLine":359,"groupId":"6197","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/3addb67a109984bb611d3d60db607014cd7f95.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        TreeColumn criteriaColumn;\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            FilteredTree filteredTree = new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION | SWT.CHECK, new NamedObjectPatternFilter(), true) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new CheckboxTreeViewer(parent, style);\n                    return columnsViewer;\n                }\n            };\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final java.util.List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n            columnsViewer.setLabelProvider(new ColumnLabelProvider());\n            columnsViewer.setCheckStateProvider(new CheckStateProvider());\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_name);\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, \"#\");\n            UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_order);\n            criteriaColumn = UIUtils.createTreeColumn(columnsTree, SWT.LEFT, ResultSetMessages.controls_resultset_filter_column_criteria);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            columnsViewer.addCheckStateListener(event -> {\n                DBDAttributeConstraint constraint = getBindingConstraint((DBDAttributeBinding) event.getElement());\n                constraint.setVisible(event.getChecked());\n            });\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    columnsViewer.refresh();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    columnsViewer.refresh();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    columnsViewer.refresh();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { .45f, .05f, .05f, .45f}));\n        \r\n\n        if (criteriaColumn.getWidth() < 200) {\n            criteriaColumn.setWidth(200);\n        }\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-04-24 01:19:50","commitOrder":8,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","date":"2020-04-24 01:19:50","endLine":475,"groupId":"4663","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/06d8240316d30cb33f937788f24d4e345b13cc.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"c5c16ab80e87b736e299edf0123c8a8773f9f6da","commitMessage":"@@@Merge pull request #13421 from dbeaver/rsv-filter-configure-pin-state#10984\n\n#10984 Display pin state in filter settings dialog","date":"2021-08-05 16:53:15","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-24 01:19:50","codes":[{"authorDate":"2021-08-09 15:34:33","commitOrder":9,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION, new NamedObjectPatternFilter(), true, false) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new TreeViewer(parent, style);\n                    columnsController = new ViewerColumnController<>(getClass().getSimpleName(), columnsViewer);\n                    return columnsViewer;\n                }\n            };\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_name, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(constraint.getAttribute().getName());\n                    cell.setImage(DBeaverIcons.getImage(DBValueFormatting.getObjectImage(binding.getMetaAttribute())));\n                }\n            });\n\n            columnsController.addColumn(\"#\", null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(String.valueOf(constraint.getOriginalVisualPosition() + 1));\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_visible, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.isVisible();\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    return true;\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.isVisible();\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    constraint.setVisible((Boolean) value);\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_pinned, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                if (binding.getTopParent() != binding) {\n                    return null;\n                }\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    return binding == binding.getTopParent();\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (CommonUtils.getBoolean(value, false)) {\n                        constraint.setOption(SpreadsheetPresentation.ATTR_OPTION_PINNED, SpreadsheetPresentation.getNextPinIndex(dataFilter));\n                    } else {\n                        constraint.removeOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_order, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (constraint.getOrderPosition() > 0) {\n                        cell.setText(\" \" + constraint.getOrderPosition());\n                        cell.setImage(DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE));\n                    } else {\n                        cell.setText(null);\n                        cell.setImage(null);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_criteria, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    final DBCExecutionContext executionContext = resultSetViewer.getExecutionContext();\n                    if (executionContext != null) {\n                        cell.setText(SQLUtils.getConstraintCondition(executionContext.getDataSource(), constraint, null, true));\n                    } else {\n                        cell.setText(null);\n                    }\n                }\n            });\n\n            columnsController.createColumns(false);\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    refreshData();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    refreshData();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    refreshData();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { 0.45f, 0.05f, 0.05f, 0.05f, 0.05f, 0.35f}));\n        \r\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2021-08-09 15:34:33","endLine":359,"groupId":"6197","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8f/1dc352e193fcbaceb4ccaa65646b045d21ccb3.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION, new NamedObjectPatternFilter(), true, false) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new TreeViewer(parent, style);\n                    columnsController = new ViewerColumnController<>(getClass().getSimpleName(), columnsViewer);\n                    return columnsViewer;\n                }\n            };\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_name, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(constraint.getAttribute().getName());\n                    cell.setImage(DBeaverIcons.getImage(DBValueFormatting.getObjectImage(binding.getMetaAttribute())));\n                }\n            });\n\n            columnsController.addColumn(\"#\", null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(String.valueOf(constraint.getOriginalVisualPosition() + 1));\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_visible, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.isVisible();\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    return true;\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.isVisible();\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    constraint.setVisible((Boolean) value);\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_pinned, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                if (binding.getTopParent() != binding) {\n                    return null;\n                }\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    return binding == binding.getTopParent();\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (CommonUtils.getBoolean(value, false)) {\n                        constraint.setOption(SpreadsheetPresentation.ATTR_OPTION_PINNED, SpreadsheetPresentation.getMaxPinIndex(dataFilter) + 1);\n                    } else {\n                        constraint.removeOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_order, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (constraint.getOrderPosition() > 0) {\n                        cell.setText(\" \" + constraint.getOrderPosition());\n                        cell.setImage(DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE));\n                    } else {\n                        cell.setText(null);\n                        cell.setImage(null);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_criteria, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    final DBCExecutionContext executionContext = resultSetViewer.getExecutionContext();\n                    if (executionContext != null) {\n                        cell.setText(SQLUtils.getConstraintCondition(executionContext.getDataSource(), constraint, null, true));\n                    } else {\n                        cell.setText(null);\n                    }\n                }\n            });\n\n            columnsController.createColumns(false);\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    refreshData();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    refreshData();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    refreshData();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { 0.45f, 0.05f, 0.05f, 0.05f, 0.05f, 0.35f}));\n        \r\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-04-24 01:19:50","commitOrder":9,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","date":"2020-04-24 01:19:50","endLine":475,"groupId":"4663","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/06d8240316d30cb33f937788f24d4e345b13cc.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"223752ddb5731ca3c0c32c1108f28e7667647b48","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-08-09 15:34:33","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-24 01:19:50","codes":[{"authorDate":"2021-09-15 23:45:43","commitOrder":10,"curCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION, new NamedObjectPatternFilter(), true, false) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new TreeViewer(parent, style);\n                    columnsController = new ViewerColumnController<>(getClass().getSimpleName(), columnsViewer);\n                    return columnsViewer;\n                }\n            };\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_name, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(constraint.getAttribute().getName());\n                    cell.setImage(DBeaverIcons.getImage(DBValueFormatting.getObjectImage(binding.getMetaAttribute())));\n                }\n            });\n\n            columnsController.addColumn(\"#\", null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(String.valueOf(constraint.getOriginalVisualPosition() + 1));\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_visible, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.isVisible();\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree());\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    return true;\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.isVisible();\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    constraint.setVisible((Boolean) value);\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_pinned, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                if (binding.getTopParent() != binding) {\n                    return null;\n                }\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree());\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    return binding == binding.getTopParent();\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (CommonUtils.getBoolean(value, false)) {\n                        constraint.setOption(SpreadsheetPresentation.ATTR_OPTION_PINNED, SpreadsheetPresentation.getNextPinIndex(dataFilter));\n                    } else {\n                        constraint.removeOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_order, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (constraint.getOrderPosition() > 0) {\n                        cell.setText(\" \" + constraint.getOrderPosition());\n                        cell.setImage(DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE));\n                    } else {\n                        cell.setText(null);\n                        cell.setImage(null);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_criteria, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    final DBCExecutionContext executionContext = resultSetViewer.getExecutionContext();\n                    if (executionContext != null) {\n                        cell.setText(SQLUtils.getConstraintCondition(executionContext.getDataSource(), constraint, null, true));\n                    } else {\n                        cell.setText(null);\n                    }\n                }\n            });\n\n            columnsController.createColumns(false);\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    refreshData();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    refreshData();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    refreshData();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { 0.45f, 0.05f, 0.05f, 0.05f, 0.05f, 0.35f}));\n        \r\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","date":"2021-09-15 23:45:43","endLine":359,"groupId":"10399","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/41/f7e192574a60d98ed435c7c0da8ad0bb0c2a34.src","preCode":"    protected Control createDialogArea(Composite parent)\n    {\n        getShell().setText(ResultSetMessages.controls_resultset_filter_title);\n        getShell().setImage(DBeaverIcons.getImage(UIIcon.FILTER));\n\n        Composite composite = (Composite) super.createDialogArea(parent);\n\n        TabFolder tabFolder = new TabFolder(composite, SWT.NONE);\n        tabFolder.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            Composite columnsGroup = UIUtils.createPlaceholder(tabFolder, 1);\n\n            new FilteredTree(columnsGroup, SWT.SINGLE | SWT.FULL_SELECTION, new NamedObjectPatternFilter(), true, false) {\n                @Override\n                protected TreeViewer doCreateTreeViewer(Composite parent, int style) {\n                    columnsViewer = new TreeViewer(parent, style);\n                    columnsController = new ViewerColumnController<>(getClass().getSimpleName(), columnsViewer);\n                    return columnsViewer;\n                }\n            };\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_name, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(constraint.getAttribute().getName());\n                    cell.setImage(DBeaverIcons.getImage(DBValueFormatting.getObjectImage(binding.getMetaAttribute())));\n                }\n            });\n\n            columnsController.addColumn(\"#\", null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    cell.setText(String.valueOf(constraint.getOriginalVisualPosition() + 1));\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_visible, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.isVisible();\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    return true;\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.isVisible();\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    constraint.setVisible((Boolean) value);\n                }\n            });\n\n            columnsController.addBooleanColumn(ResultSetMessages.controls_resultset_filter_column_pinned, null, SWT.LEFT, true, false, item -> {\n                final DBDAttributeBinding binding = (DBDAttributeBinding) item;\n                if (binding.getTopParent() != binding) {\n                    return null;\n                }\n                final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n            }, new EditingSupport(columnsViewer) {\n                @Override\n                protected CellEditor getCellEditor(Object element) {\n                    return new CustomCheckboxCellEditor(((TreeViewer) getViewer()).getTree(), SWT.NONE);\n                }\n\n                @Override\n                protected boolean canEdit(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    return binding == binding.getTopParent();\n                }\n\n                @Override\n                protected Object getValue(Object element) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    return constraint.hasOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                }\n\n                @Override\n                protected void setValue(Object element, Object value) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (CommonUtils.getBoolean(value, false)) {\n                        constraint.setOption(SpreadsheetPresentation.ATTR_OPTION_PINNED, SpreadsheetPresentation.getNextPinIndex(dataFilter));\n                    } else {\n                        constraint.removeOption(SpreadsheetPresentation.ATTR_OPTION_PINNED);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_order, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    if (constraint.getOrderPosition() > 0) {\n                        cell.setText(\" \" + constraint.getOrderPosition());\n                        cell.setImage(DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE));\n                    } else {\n                        cell.setText(null);\n                        cell.setImage(null);\n                    }\n                }\n            });\n\n            columnsController.addColumn(ResultSetMessages.controls_resultset_filter_column_criteria, null, SWT.LEFT, true, false, new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    final DBDAttributeBinding binding = (DBDAttributeBinding) cell.getElement();\n                    final DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                    final DBCExecutionContext executionContext = resultSetViewer.getExecutionContext();\n                    if (executionContext != null) {\n                        cell.setText(SQLUtils.getConstraintCondition(executionContext.getDataSource(), constraint, null, true));\n                    } else {\n                        cell.setText(null);\n                    }\n                }\n            });\n\n            columnsController.createColumns(false);\n\n            columnsViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) parentElement).getNestedBindings();\n                    if (nestedBindings == null || nestedBindings.isEmpty()) {\n                        return null;\n                    }\n                    final DBDAttributeBinding[] res = nestedBindings.toArray(new DBDAttributeBinding[0]);\n                    Arrays.sort(res, activeSorter);\n                    return res;\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    final List<DBDAttributeBinding> nestedBindings = ((DBDAttributeBinding) element).getNestedBindings();\n                    return nestedBindings != null && !nestedBindings.isEmpty();\n                }\n            });\n\n            final Tree columnsTree = columnsViewer.getTree();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            columnsTree.setLayoutData(gd);\n            columnsTree.setHeaderVisible(true);\n            columnsTree.setLinesVisible(true);\n\n            treeEditor = new FilterSettingsTreeEditor(columnsTree);\n\n            {\n                ToolBar toolbar = new ToolBar(columnsGroup, SWT.HORIZONTAL | SWT.RIGHT);\n                gd = new GridData(GridData.FILL_HORIZONTAL);\n                gd.verticalIndent = 3;\n                toolbar.setLayoutData(gd);\n                toolbar.setLayout(new FillLayout());\n                moveTopButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_top, UIIcon.ARROW_TOP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, 0);\n                });\n                moveTopButton.setEnabled(false);\n                moveUpButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_up, UIIcon.ARROW_UP, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex - 1);\n                });\n                moveUpButton.setEnabled(false);\n                moveDownButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_down, UIIcon.ARROW_DOWN, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    swapColumns(selectionIndex, selectionIndex + 1);\n                });\n                moveDownButton.setEnabled(false);\n                moveBottomButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_move_to_bottom, UIIcon.ARROW_BOTTOM, () -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveColumns(selectionIndex, getItemsCount() - 1);\n                });\n                moveBottomButton.setEnabled(false);\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_sort, UIIcon.SORT, () -> {\n                    attributes.sort(ALPHA_SORTER);\n                    for (int i = 0; i < attributes.size(); i++) {\n                        final DBDAttributeConstraint constraint = getBindingConstraint(attributes.get(i));\n                        constraint.setVisualPosition(i);\n                    }\n                    refreshData();\n                });\n                UIUtils.createToolBarSeparator(toolbar, SWT.VERTICAL);\n                ToolItem showAllButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_all, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(true);\n                    }\n                    refreshData();\n                });\n                showAllButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ETOOL_DEF_PERSPECTIVE));\n                ToolItem showNoneButton = createToolItem(toolbar, ResultSetMessages.dialog_toolbar_show_none, null, () -> {\n                    for (DBDAttributeConstraint constraint : constraints) {\n                        constraint.setVisible(false);\n                    }\n                    refreshData();\n                });\n                showNoneButton.setImage(UIUtils.getShardImage(ISharedImages.IMG_ELCL_REMOVEALL));\n                createToolItem(toolbar, ResultSetMessages.dialog_toolbar_reset, UIIcon.REFRESH, () -> {\n                    dataFilter.reset();\n                    constraints = new ArrayList<>(dataFilter.getConstraints());\n                    refreshData();\n                    \r\n                    orderText.setText(\"\"); \r\n                    whereText.setText(\"\"); \r\n                });\n\n                columnsViewer.addSelectionChangedListener(event -> {\n                    int selectionIndex = getSelectionIndex(columnsViewer.getTree());\n                    moveTopButton.setEnabled(selectionIndex > 0);\n                    moveUpButton.setEnabled(selectionIndex > 0);\n                    moveDownButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                    moveBottomButton.setEnabled(selectionIndex >= 0 && selectionIndex < getItemsCount() - 1);\n                });\n\n            }\n            TabItem libsTab = new TabItem(tabFolder, SWT.NONE);\n            libsTab.setText(ResultSetMessages.controls_resultset_filter_group_columns);\n            libsTab.setToolTipText(\"Set criteria and order for individual column(s)\");\n            libsTab.setControl(columnsGroup);\n        }\n\n        createCustomFilters(tabFolder);\n\n        \r\n        columnsViewer.setInput(attributes);\n        refreshData();\n\n        \r\n        UIUtils.asyncExec(() -> UIUtils.packColumns(columnsViewer.getTree(), true, new float[] { 0.45f, 0.05f, 0.05f, 0.05f, 0.05f, 0.35f}));\n        \r\n\n        if (!resultSetViewer.supportsDataFilter()) {\n            Label warnLabel = new Label(composite, SWT.NONE);\n            warnLabel.setText(ResultSetMessages.controls_resultset_filter_warning_custom_order_disabled);\n            warnLabel.setForeground(parent.getDisplay().getSystemColor(SWT.COLOR_RED));\n        }\n\n\n        return parent;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2020-04-24 01:19:50","commitOrder":10,"curCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","date":"2020-04-24 01:19:50","endLine":475,"groupId":"10399","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getColumnImage","params":"(Objectelement@intcolumnIndex)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/06d8240316d30cb33f937788f24d4e345b13cc.src","preCode":"        public Image getColumnImage(Object element, int columnIndex)\n        {\n            DBDAttributeBinding binding = (DBDAttributeBinding) element;\n            if (columnIndex == 0) {\n                return DBeaverIcons.getImage(\n                    DBValueFormatting.getObjectImage(binding.getMetaAttribute()));\n            }\n            if (columnIndex == 2) {\n                DBDAttributeConstraint constraint = getBindingConstraint(binding);\n                if (constraint.getOrderPosition() > 0) {\n                    return DBeaverIcons.getImage(constraint.isOrderDescending() ? UIIcon.SORT_INCREASE : UIIcon.SORT_DECREASE);\n                }\n            }\n            return null;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/FilterSettingsDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":461,"status":"N"}],"commitId":"9fada26d0055656c57faffdcb65ece43411353d2","commitMessage":"@@@Merge pull request #13903 from dbeaver/boolen-text-display-configuration#11345\n\n#11345 Boolean text presentation configurator","date":"2021-09-15 23:45:43","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"}]
