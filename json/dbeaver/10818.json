[{"authorTime":"2016-02-13 23:32:30","codes":[{"authorDate":"2019-01-18 00:05:12","commitOrder":2,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select *,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-18 00:05:12","endLine":73,"groupId":"765","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ca/3eca6c999d91281d81a1860a7e03c7dbf5421e.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select *,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2016-02-13 23:32:30","commitOrder":2,"curCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2016-02-13 23:32:30","endLine":71,"groupId":"765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/6d32561b09fb62011941888c35e5b1dc6943c8.src","preCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/session/PostgreSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"NB"}],"commitId":"a73654ea3472249c666e9cf00246677dd8c2ed8b","commitMessage":"@@@#5004 SQL Server: session manager\n\n\nFormer-commit-id: 82e6222711c84c1b1d9f39daa973f545d1c46027","date":"2019-01-18 00:05:12","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-02-13 23:32:30","codes":[{"authorDate":"2019-01-18 00:17:16","commitOrder":3,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select s.*,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-18 00:17:16","endLine":73,"groupId":"765","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/2b/5ce923df19fb992d0b7a59ae13908cb491a9d1.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select *,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2016-02-13 23:32:30","commitOrder":3,"curCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2016-02-13 23:32:30","endLine":71,"groupId":"765","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/6d32561b09fb62011941888c35e5b1dc6943c8.src","preCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/session/PostgreSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"77d08449d8e3f2544bfeaa694c1d560ede4e3860","commitMessage":"@@@#5004 SQL Server: session manager\n\n\nFormer-commit-id: 3d7f3643f14d5bef2d1fc2aa8f422474e9ced229","date":"2019-01-18 00:17:16","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-02-13 23:32:30","codes":[{"authorDate":"2019-01-18 03:36:02","commitOrder":4,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"SELECT s.*,db.name as database_name,c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\" +\n                    \"FROM sys.dm_exec_sessions s\\n\" +\n                    (onlyConnections ? \"\" : \"LEFT OUTER \") + \"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\" +\n                    \"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"ORDER BY s.session_id DESC\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-18 03:36:02","endLine":78,"groupId":"765","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7c/558dcdfe83d1e87435ac0ca058f3829b28a262.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select s.*,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2016-02-13 23:32:30","commitOrder":4,"curCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2016-02-13 23:32:30","endLine":71,"groupId":"765","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/6d32561b09fb62011941888c35e5b1dc6943c8.src","preCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/session/PostgreSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"2097cd99026dc9d48134575ecf2db54d4d188687","commitMessage":"@@@SQL Server session manager additions\n\n\nFormer-commit-id: 3e0c0c774c8591bd03906c64bd265c392ac295df","date":"2019-01-18 03:36:02","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2016-02-13 23:32:30","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":5,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"SELECT s.*,db.name as database_name,c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\" +\n                    \"FROM sys.dm_exec_sessions s\\n\" +\n                    (onlyConnections ? \"\" : \"LEFT OUTER \") + \"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\" +\n                    \"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"ORDER BY s.session_id DESC\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2016-02-13 23:32:30","commitOrder":5,"curCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2016-02-13 23:32:30","endLine":71,"groupId":"765","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/6d32561b09fb62011941888c35e5b1dc6943c8.src","preCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/session/PostgreSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"17f2fffb52446bb5f2afc4cc288b9d2bc14d4f4e","commitMessage":"@@@#5069 SQL Server sessions: support server earlier than 11.x (2012)\n\n\nFormer-commit-id: 50e5abe5584cb8d21def52d5378a343f4acd5ada","date":"2019-01-25 01:00:43","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-05-08 23:01:57","codes":[{"authorDate":"2021-05-08 23:01:57","commitOrder":6,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(generateSessionReadQuery(options))) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2021-05-08 23:01:57","endLine":74,"groupId":"10818","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d0/385f2df85339c7ed02a4d6c21465c6e8913fb8.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-05-08 23:01:57","commitOrder":6,"curCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(generateSessionReadQuery(options))) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2021-05-08 23:01:57","endLine":72,"groupId":"10818","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b8/2f249fe67ff437fb879b789586d73a33bff068.src","preCode":"    public Collection<PostgreSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\"SELECT sa.* FROM pg_catalog.pg_stat_activity sa\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<PostgreSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new PostgreSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/session/PostgreSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"2ea9007e44ecefc87573a789d3f6f10299837b50","commitMessage":"@@@dbeaver/dbeaver#11314 Session manager - show and run session read SQL query\n\n\nFormer-commit-id: fe19e9e2de1eecdee0dd43fc350aee5276c19f20","date":"2021-05-08 23:01:57","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"}]
