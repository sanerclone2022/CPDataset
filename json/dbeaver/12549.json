[{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-02-27 23:08:37","commitOrder":5,"curCode":"    public DataSourceConfigurationStorageDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","date":"2020-02-27 23:08:37","endLine":57,"groupId":"14589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceConfigurationStorageDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/28/95370e3e00ac80af64362de4d0f3088d425c14.src","preCode":"    public DataSourceConfigurationStorageDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceConfigurationStorageDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"B"},{"authorDate":"2019-12-31 02:25:32","commitOrder":5,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"}],"commitId":"5370b056b84bd70e798415b500917d75cb2539f0","commitMessage":"@@@DS configuration storage model\n\n\nFormer-commit-id: d71ed99f2d83f262ae74da0f4035c1c50ecb6f7a","date":"2020-02-27 23:08:37","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-01-30 22:18:10","codes":[{"authorDate":"2020-02-27 23:08:37","commitOrder":6,"curCode":"    public DataSourceConfigurationStorageDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","date":"2020-02-27 23:08:37","endLine":57,"groupId":"14589","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceConfigurationStorageDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/28/95370e3e00ac80af64362de4d0f3088d425c14.src","preCode":"    public DataSourceConfigurationStorageDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceConfigurationStorageDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2021-01-30 22:18:10","commitOrder":6,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2021-01-30 22:18:10","endLine":183,"groupId":"14589","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8d/a8fa77b15e81fa692515ef97c3a2ac760e70cb.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"ec99c7252ddc2744fd09edaf1555682c1542785f","commitMessage":"@@@CB-690 Driver additional properties model + PG props\n\n\nFormer-commit-id: 394ad1c2b4ac3243ccaa7680787e15569f012925","date":"2021-01-30 22:18:10","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-07-22 16:51:47","codes":[{"authorDate":"2020-02-27 23:08:37","commitOrder":7,"curCode":"    public DataSourceConfigurationStorageDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","date":"2020-02-27 23:08:37","endLine":57,"groupId":"12549","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceConfigurationStorageDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/28/95370e3e00ac80af64362de4d0f3088d425c14.src","preCode":"    public DataSourceConfigurationStorageDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceConfigurationStorageDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":45,"status":"N"},{"authorDate":"2021-07-22 16:51:47","commitOrder":7,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeDescriptor(this, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2021-07-22 16:51:47","endLine":183,"groupId":"12549","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d6/c6a417d6fa9c0ee35e45a5bc0a7208f09d571b.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"931f7cd045826395a1d779f21d26cc3c46eb9e4e","commitMessage":"@@@dbeaver/dbeaver-ee#954 Merge entities support check\n","date":"2021-07-22 16:51:47","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"}]
