[{"authorTime":"2016-02-13 05:14:23","codes":[{"authorDate":"2015-10-28 00:54:57","commitOrder":4,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2015-10-28 00:54:57","endLine":87,"groupId":"3403","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b1/11e996d42380f412cc7ba77d001cd0faaa21fa.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"NB"},{"authorDate":"2016-02-13 05:14:23","commitOrder":4,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema catalog = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, catalog, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-02-13 05:14:23","endLine":103,"groupId":"8447","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/00ee558536f3eac7feed01b20a292f70a92c3b.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema catalog = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, catalog, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"B"}],"commitId":"38dc8440dc9b3f545f5104f61075f6f081ad952d","commitMessage":"@@@#12 PostgreSQL structure assistant.\nSkip lazy properties in completion proposal\n\n\nFormer-commit-id: c64290165e8c992f32f6e3053915df4ead34f250","date":"2016-02-13 05:14:23","modifiedFileCount":"17","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-02-23 03:59:23","codes":[{"authorDate":"2015-10-28 00:54:57","commitOrder":5,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2015-10-28 00:54:57","endLine":87,"groupId":"3403","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b1/11e996d42380f412cc7ba77d001cd0faaa21fa.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2016-02-23 03:59:23","commitOrder":5,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else {\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-02-23 03:59:23","endLine":118,"groupId":"9515","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6a/dd8ca578fc75c96554c6fdf96f082e48c7649b.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema catalog = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, catalog, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, catalog, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"7172ef4e41817922c8651ea41b73d90791351ecf","commitMessage":"@@@#214 Use just accessible schemas in structure assistant\n\n\nFormer-commit-id: babc5f2a08249e12f0fcede90a5a314bae5e2496","date":"2016-02-23 03:59:23","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-04-18 23:25:24","codes":[{"authorDate":"2015-10-28 00:54:57","commitOrder":6,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2015-10-28 00:54:57","endLine":87,"groupId":"3403","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b1/11e996d42380f412cc7ba77d001cd0faaa21fa.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2016-04-18 23:25:24","commitOrder":6,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-04-18 23:25:24","endLine":121,"groupId":"15409","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ed/8d9640f17385b6b8463b2c80f254bd2fba1ee8.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else {\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"1e5e38ec07107783b9149bf4e58c26e8364582d9","commitMessage":"@@@#382 PG structure assistant fix\n\n\nFormer-commit-id: eb870fa45e791ef1f598761fa106dcb637a0c51e","date":"2016-04-18 23:25:24","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2016-05-13 20:49:18","codes":[{"authorDate":"2016-05-13 20:49:18","commitOrder":7,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2016-05-13 20:49:18","endLine":88,"groupId":"3403","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/39/d208bd4c63c7bb5f4a3ac2127a55d503a98925.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2016-05-13 20:49:18","commitOrder":7,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-05-13 20:49:18","endLine":120,"groupId":"0","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/89/bd78d0f58e294959cf6fea9f58b38da303c368.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else {\n            \r\n            \r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"e0e167cd97759d69f4fe50589df9fc6db594a298","commitMessage":"@@@#214 PG: completion processor fix (respect active schema).\nStructure assistant model refactoring.\n\n\nFormer-commit-id: 20c01a1a3cca92d8a3c4e86c966a35545c6cf254","date":"2016-05-13 20:49:18","modifiedFileCount":"12","status":"M","submitter":"serge-rider"},{"authorTime":"2016-07-17 00:12:55","codes":[{"authorDate":"2016-05-13 20:49:18","commitOrder":8,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2016-05-13 20:49:18","endLine":88,"groupId":"3403","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/39/d208bd4c63c7bb5f4a3ac2127a55d503a98925.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2016-07-17 00:12:55","commitOrder":8,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-07-17 00:12:55","endLine":123,"groupId":"4826","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0e/a35eae7d5a004d4f9005c0fd589cd2c53c46f5.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"860c3775c6c2db07b9b03b0abed67a62ba8c1eb8","commitMessage":"@@@#594 Quoted object names fix (+PG content assistant)\n\n\nFormer-commit-id: a3a95580d1d3f80c37747270a6dbea08fc785a9a","date":"2016-07-17 00:12:55","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-08-17 05:10:57","codes":[{"authorDate":"2016-05-13 20:49:18","commitOrder":9,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2016-05-13 20:49:18","endLine":88,"groupId":"3403","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/39/d208bd4c63c7bb5f4a3ac2127a55d503a98925.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2016-08-17 05:10:57","commitOrder":9,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-08-17 05:10:57","endLine":134,"groupId":"8656","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/98/81cd401d6bde2ac395bfcd0a21111a4a76f597.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"0153c7db600afb53dd87a77049f3b292419143c5","commitMessage":"@@@#648 Use container filters in GoTo object dialog\n\n\nFormer-commit-id: eb2e85e76e87fe3de964d0a25bb7dff5b7c102e4","date":"2016-08-17 05:10:57","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-08-19 03:18:18","codes":[{"authorDate":"2016-05-13 20:49:18","commitOrder":10,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2016-05-13 20:49:18","endLine":88,"groupId":"3403","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/39/d208bd4c63c7bb5f4a3ac2127a55d503a98925.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2016-08-19 03:18:18","commitOrder":10,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getSchema(session.getProgressMonitor(), PostgreConstants.CATALOG_SCHEMA_NAME);\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-08-19 03:18:18","endLine":140,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/56/06e4e36c2220b4f5197473aab0515d4c9776dd.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":94,"status":"M"}],"commitId":"a1465afcab1f669eafc88c04b4b61ef4d51831ab","commitMessage":"@@@PG content assistant fix (search in multiple schemas)\n\n\nFormer-commit-id: c708e056dd5e62dc98a47e64d4e1a68a5bff9aeb","date":"2016-08-19 03:18:18","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-09-04 18:30:13","codes":[{"authorDate":"2016-05-13 20:49:18","commitOrder":11,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2016-05-13 20:49:18","endLine":88,"groupId":"3403","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/39/d208bd4c63c7bb5f4a3ac2127a55d503a98925.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2016-09-04 18:30:13","commitOrder":11,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","date":"2016-09-04 18:30:13","endLine":139,"groupId":"10246","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/70/c00b997399a23f6d533e01cc8a90441dbffa6f.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getSchema(session.getProgressMonitor(), PostgreConstants.CATALOG_SCHEMA_NAME);\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"ebc7efb8e4345189fa8ab65e10808f72db04820d","commitMessage":"@@@#680 PG data type aliases\n\n\nFormer-commit-id: 6c8d8ea53d08d46d41274e2bfad345df47baba6a","date":"2016-09-04 18:30:13","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2017-02-05 17:33:33","codes":[{"authorDate":"2016-05-13 20:49:18","commitOrder":12,"curCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2016-05-13 20:49:18","endLine":88,"groupId":"3403","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/39/d208bd4c63c7bb5f4a3ac2127a55d503a98925.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2017-02-05 17:33:33","commitOrder":12,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2017-02-05 17:33:33","endLine":135,"groupId":"16920","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3a/4cdaad9ebe5097c8673c613eaa8d506e7b7ee1.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n        if (!caseSensitive) {\n            objectNameMask = objectNameMask.toLowerCase(Locale.ENGLISH);\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"4a02eef38059dc6a515120d34b33f2b91293d0dc","commitMessage":"@@@#1232 PG: use case insensitive pg_catalog search\n\n\nFormer-commit-id: 85cfc510c80571a5c2a152ba570a7ff4a1797844","date":"2017-02-05 17:33:33","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2017-02-05 17:33:33","codes":[{"authorDate":"2017-02-07 18:09:33","commitOrder":13,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2017-02-07 18:09:33","endLine":88,"groupId":"3403","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/71875a5d2338c6b2416b28656d4da2b5c2f116.src","preCode":"    public Collection<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"},{"authorDate":"2017-02-05 17:33:33","commitOrder":13,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2017-02-05 17:33:33","endLine":135,"groupId":"16920","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3a/4cdaad9ebe5097c8673c613eaa8d506e7b7ee1.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"}],"commitId":"b40e1c3d1ec468392eca1c77c227d6c41f6f3114","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 430652e14ade2fe7df9babe5b715f1052dc2b510","date":"2017-02-07 18:09:33","modifiedFileCount":"20","status":"M","submitter":"serge-rider"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2017-02-07 18:09:33","commitOrder":14,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2017-02-07 18:09:33","endLine":88,"groupId":"3403","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/71875a5d2338c6b2416b28656d4da2b5c2f116.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2018-07-23 15:41:36","commitOrder":14,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":134,"groupId":"16920","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9a/cf4c0ab6069bb2835085579b9e360d7dbe706a.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : dataSource.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"f5dacff54df650fa052fcc6e82dac15c414085c3","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: f856da844bdb094ac789a5c775045caea0c36124","date":"2018-07-23 15:41:36","modifiedFileCount":"524","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-28 16:22:49","codes":[{"authorDate":"2017-02-07 18:09:33","commitOrder":15,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2017-02-07 18:09:33","endLine":88,"groupId":"3403","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/71875a5d2338c6b2416b28656d4da2b5c2f116.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2019-07-28 16:22:49","commitOrder":15,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() : dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2019-07-28 16:22:49","endLine":136,"groupId":"16920","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/37/f82d518cc13069e9e5654f660b83939c210521.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        final PostgreDatabase database = dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(session.getProgressMonitor(), sn);\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"020ddfd49deb85efd3418674f30954962dabd9a9","commitMessage":"@@@PG: autocomplete fix\n\nFormer-commit-id: 0f9b365a59218023e0746f859607f5d9ea134af0","date":"2019-07-28 16:22:49","modifiedFileCount":"2","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-12-14 04:16:41","codes":[{"authorDate":"2017-02-07 18:09:33","commitOrder":16,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2017-02-07 18:09:33","endLine":88,"groupId":"3403","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(DBRProgressMonitormonitor@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/71875a5d2338c6b2416b28656d4da2b5c2f116.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"N"},{"authorDate":"2019-12-14 04:16:41","commitOrder":16,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() : dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getDefaultContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2019-12-14 04:16:41","endLine":136,"groupId":"16920","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/95/c0fceb2304e0722ca59541f6d39e3f7360c348.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() : dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"2446357b30f61f8b3821bf08ac65523ad2380604","commitMessage":"@@@#5172 PG: context-specific active schema. Model refactoring\n\n\nFormer-commit-id: 1cf3f785bf31e6b5b7db0e47d1c2340e57149a67","date":"2019-12-14 04:16:41","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-14 04:16:41","codes":[{"authorDate":"2020-01-06 19:18:34","commitOrder":17,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBCExecutionContext executionContext, DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = ((JDBCExecutionContext)executionContext).openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2020-01-06 19:18:34","endLine":94,"groupId":"3403","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBCExecutionContextexecutionContext@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/d8d6d210453d7eafc47f38b77662ef64785168.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        DBRProgressMonitor monitor,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, getDataSource(), ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2019-12-14 04:16:41","commitOrder":17,"curCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() : dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getDefaultContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2019-12-14 04:16:41","endLine":136,"groupId":"16920","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/95/c0fceb2304e0722ca59541f6d39e3f7360c348.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() : dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getDefaultContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"N"}],"commitId":"8ea0f0564e109158906407037e34c58729eea503","commitMessage":"@@@#7494 SQL editor refactoring (context informer). Struct assistant refactoring (pass execution context)\n\n\nFormer-commit-id: 5befae881a09b7d733d4c1f46e172a2748f8b55b","date":"2020-01-06 19:18:34","modifiedFileCount":"17","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-06 19:40:09","codes":[{"authorDate":"2020-01-06 19:40:09","commitOrder":18,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2020-01-06 19:40:09","endLine":94,"groupId":"12934","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullCONTEXTexecutionContext@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/35/a392be227d8f6edf90f2fcccdab096ec18d090.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBCExecutionContext executionContext, DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = ((JDBCExecutionContext)executionContext).openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-01-06 19:40:09","commitOrder":18,"curCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getDefaultContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2020-01-06 19:40:09","endLine":141,"groupId":"16920","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(PostgreExecutionContextexecutionContext@JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/54/a3f929f739591f0af6e04a10cb4171ed972d44.src","preCode":"    protected void findObjectsByMask(JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() : dataSource.getDefaultInstance();\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getDefaultContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"09994c9f70fecd75744b21eb3da74f567b5ff362","commitMessage":"@@@#7537 Struct assistant refactoring (use active execution context)\n\n\nFormer-commit-id: 8a466bce9902babcdff43582b25dbb0b391cb626","date":"2020-01-06 19:40:09","modifiedFileCount":"15","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-25 01:16:43","codes":[{"authorDate":"2020-01-06 19:40:09","commitOrder":19,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2020-01-06 19:40:09","endLine":94,"groupId":"12934","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullCONTEXTexecutionContext@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/35/a392be227d8f6edf90f2fcccdab096ec18d090.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2020-01-25 01:16:43","commitOrder":19,"curCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getMetaContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2020-01-25 01:16:43","endLine":141,"groupId":"16920","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(PostgreExecutionContextexecutionContext@JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/92/71c715cdf12abf8302b5a8969bdf3a841953f2.src","preCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getDefaultContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"26add5daa09e7d7878b1e087249aa4d7bb0a413b","commitMessage":"@@@#7706 PG: database refresh fix\n\n\nFormer-commit-id: 70e9e9e7fc3ed4d440ff6292b855b0d80d236f69","date":"2020-01-25 01:16:43","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-11 03:54:05","codes":[{"authorDate":"2020-01-06 19:40:09","commitOrder":20,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2020-01-06 19:40:09","endLine":94,"groupId":"12934","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullCONTEXTexecutionContext@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/35/a392be227d8f6edf90f2fcccdab096ec18d090.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2020-02-11 03:54:05","commitOrder":20,"curCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getMetaContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2020-02-11 03:54:05","endLine":141,"groupId":"16920","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(PostgreExecutionContextexecutionContext@JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/42def0d2e7d8f5992df6075e22b40858cc44d2.src","preCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getMetaContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"52cacdac826ba6f08df452248f05e0eaa7bf114c","commitMessage":"@@@#7871 PG structure assistant: use current database instead of default\n\n\nFormer-commit-id: eb55eff7859e16b3cbdefa6119ee6c2433e950ee","date":"2020-02-11 03:54:05","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-04-28 00:55:45","codes":[{"authorDate":"2020-01-06 19:40:09","commitOrder":21,"curCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2020-01-06 19:40:09","endLine":94,"groupId":"12934","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullCONTEXTexecutionContext@DBSObjectparentObject@DBSObjectType[]objectTypes@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/35/a392be227d8f6edf90f2fcccdab096ec18d090.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2020-04-28 00:55:45","commitOrder":21,"curCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : executionContext.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","date":"2020-04-28 00:55:45","endLine":141,"groupId":"16920","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(PostgreExecutionContextexecutionContext@JDBCSessionsession@DBSObjectTypeobjectType@DBSObjectparentObject@StringobjectNameMask@booleancaseSensitive@booleanglobalSearch@intmaxResults@List<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/58/913aa202bfa0b1d56bb6d671f8eac578e06aa3.src","preCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : database.getMetaContext().getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"c7daf94b36352d8690844db5f604d805fc1ea376","commitMessage":"@@@PG: object navigation/hyperlinks fix (when editor schema differs from default one)\n\nFormer-commit-id: 4bf034b3d1a4552c9dbd099c005e2675b12e6b96","date":"2020-04-28 00:55:45","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2021-04-06 20:35:15","codes":[{"authorDate":"2021-04-06 20:35:15","commitOrder":22,"curCode":"    public List<DBSObjectReference> findObjectsByMask(@NotNull DBRProgressMonitor monitor, @NotNull CONTEXT executionContext,\n                                                      @NotNull ObjectsSearchParams params) throws DBException {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : params.getObjectTypes()) {\n                findObjectsByMask(executionContext, session, type, params, references);\n                if (references.size() >= params.getMaxResults()) {\n                    break;\n                }\n            }\n        } catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2021-04-06 20:35:15","endLine":80,"groupId":"12380","id":37,"instanceNumber":1,"isCurCommit":1,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullCONTEXTexecutionContext@@NotNullObjectsSearchParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/00/cd41e6b461484dfdbacb5da8b876cd48feb035.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull CONTEXT executionContext,\n        DBSObject parentObject,\n        DBSObjectType[] objectTypes,\n        String objectNameMask,\n        boolean caseSensitive,\n        boolean globalSearch,\n        int maxResults)\n        throws DBException\n    {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : objectTypes) {\n                findObjectsByMask(executionContext, session, type, parentObject, objectNameMask, caseSensitive, globalSearch, maxResults - references.size(), references);\n                if (references.size() >= maxResults) {\n                    break;\n                }\n            }\n        }\n        catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2021-04-06 20:35:15","commitOrder":22,"curCode":"    protected void findObjectsByMask(@NotNull PostgreExecutionContext executionContext, @NotNull JDBCSession session,\n                                     @NotNull DBSObjectType objectType, @NotNull ObjectsSearchParams params,\n                                     @NotNull List<DBSObjectReference> references) throws DBException, SQLException {\n        DBSObject parentObject = params.getParentObject();\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ?\n                ((PostgreObject) parentObject).getDatabase() : executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!params.isGlobalSearch()) {\n            \r\n            for (String sn : executionContext.getSearchPath()) {\n                PostgreSchema schema = database.getSchema(session.getProgressMonitor(), PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, database, nsList, params, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, database, nsList, params, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, database, nsList, params, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, database, nsList, params, references);\n        }\n    }\n","date":"2021-04-06 20:35:15","endLine":137,"groupId":"16920","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"findObjectsByMask","params":"(@NotNullPostgreExecutionContextexecutionContext@@NotNullJDBCSessionsession@@NotNullDBSObjectTypeobjectType@@NotNullObjectsSearchParamsparams@@NotNullList<DBSObjectReference>references)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/07/98328a6436bb4e74538a5d3a0353d5df567816.src","preCode":"    protected void findObjectsByMask(PostgreExecutionContext executionContext, JDBCSession session, DBSObjectType objectType, DBSObject parentObject, String objectNameMask, boolean caseSensitive, boolean globalSearch, int maxResults, List<DBSObjectReference> references) throws DBException, SQLException\n    {\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ? ((PostgreObject) parentObject).getDatabase() :\n            executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!globalSearch) {\n            \r\n            for (String sn : executionContext.getSearchPath()) {\n                final PostgreSchema schema = database.getSchema(\n                    session.getProgressMonitor(),\n                    PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        } else if (objectType == RelationalObjectType.TYPE_DATA_TYPE) {\n            findDataTypesByMask(session, database, nsList, objectNameMask, caseSensitive, maxResults, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"}],"commitId":"57f75a36c097e247a0603d2a31c929d0e76c304a","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 5f91104468cde36ac982db80d67194f17242a12d","date":"2021-04-06 20:35:15","modifiedFileCount":"22","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-09-09 17:55:10","codes":[{"authorDate":"2021-04-06 20:35:15","commitOrder":23,"curCode":"    public List<DBSObjectReference> findObjectsByMask(@NotNull DBRProgressMonitor monitor, @NotNull CONTEXT executionContext,\n                                                      @NotNull ObjectsSearchParams params) throws DBException {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : params.getObjectTypes()) {\n                findObjectsByMask(executionContext, session, type, params, references);\n                if (references.size() >= params.getMaxResults()) {\n                    break;\n                }\n            }\n        } catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2021-04-06 20:35:15","endLine":80,"groupId":"10915","id":39,"instanceNumber":1,"isCurCommit":1,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullCONTEXTexecutionContext@@NotNullObjectsSearchParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/00/cd41e6b461484dfdbacb5da8b876cd48feb035.src","preCode":"    public List<DBSObjectReference> findObjectsByMask(@NotNull DBRProgressMonitor monitor, @NotNull CONTEXT executionContext,\n                                                      @NotNull ObjectsSearchParams params) throws DBException {\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : params.getObjectTypes()) {\n                findObjectsByMask(executionContext, session, type, params, references);\n                if (references.size() >= params.getMaxResults()) {\n                    break;\n                }\n            }\n        } catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"N"},{"authorDate":"2021-09-09 17:55:10","commitOrder":23,"curCode":"    public List<DBSObjectReference> findObjectsByMask(@NotNull DBRProgressMonitor monitor, @NotNull PostgreExecutionContext executionContext,\n                                                      @NotNull ObjectsSearchParams params) throws DBException {\n        DBSObject parentObject = params.getParentObject();\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        PostgreDataSource dataSource = executionContext.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ?\n            ((PostgreObject) parentObject).getDatabase() : executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!params.isGlobalSearch()) {\n            \r\n            for (String sn : executionContext.getSearchPath()) {\n                PostgreSchema schema = database.getSchema(monitor, PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(monitor);\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(monitor)) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (executionContext.getDefaultCatalog() != database) {\n            executionContext = database.getMetaContext();\n        }\n\n        List<DBSObjectReference> references = new ArrayList<>();\n        try (JDBCSession session = executionContext.openSession(monitor, DBCExecutionPurpose.META, ModelMessages.model_jdbc_find_objects_by_name)) {\n            for (DBSObjectType type : params.getObjectTypes()) {\n                if (type == RelationalObjectType.TYPE_TABLE) {\n                    findTablesByMask(session, database, nsList, params, references);\n                } else if (type == RelationalObjectType.TYPE_CONSTRAINT) {\n                    findConstraintsByMask(session, database, nsList, params, references);\n                } else if (type == RelationalObjectType.TYPE_PROCEDURE) {\n                    findProceduresByMask(session, database, nsList, params, references);\n                } else if (type == RelationalObjectType.TYPE_TABLE_COLUMN) {\n                    findTableColumnsByMask(session, database, nsList, params, references);\n                }\n                if (references.size() >= params.getMaxResults()) {\n                    break;\n                }\n            }\n        } catch (SQLException ex) {\n            throw new DBException(ex, getDataSource());\n        }\n        return references;\n    }\n","date":"2021-09-09 17:55:10","endLine":172,"groupId":"10915","id":40,"instanceNumber":2,"isCurCommit":1,"methodName":"findObjectsByMask","params":"(@NotNullDBRProgressMonitormonitor@@NotNullPostgreExecutionContextexecutionContext@@NotNullObjectsSearchParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d3/3f7ff160bf24c54931c6e4537dfcb0a521e240.src","preCode":"    protected void findObjectsByMask(@NotNull PostgreExecutionContext executionContext, @NotNull JDBCSession session,\n                                     @NotNull DBSObjectType objectType, @NotNull ObjectsSearchParams params,\n                                     @NotNull List<DBSObjectReference> references) throws DBException, SQLException {\n        DBSObject parentObject = params.getParentObject();\n        PostgreSchema ownerSchema = parentObject instanceof PostgreSchema ? (PostgreSchema) parentObject : null;\n        final PostgreDataSource dataSource = (PostgreDataSource) session.getDataSource();\n\n        PostgreDatabase database = parentObject instanceof PostgreObject ?\n                ((PostgreObject) parentObject).getDatabase() : executionContext.getDefaultCatalog();\n        if (database == null) {\n            database = dataSource.getDefaultInstance();\n        }\n        List<PostgreSchema> nsList = new ArrayList<>();\n        if (ownerSchema != null) {\n            nsList.add(0, ownerSchema);\n        } else if (!params.isGlobalSearch()) {\n            \r\n            for (String sn : executionContext.getSearchPath()) {\n                PostgreSchema schema = database.getSchema(session.getProgressMonitor(), PostgreUtils.getRealSchemaName(database, sn));\n                if (schema != null) {\n                    nsList.add(schema);\n                }\n            }\n            PostgreSchema pgCatalog = database.getCatalogSchema(session.getProgressMonitor());\n            if (pgCatalog != null) {\n                nsList.add(pgCatalog);\n            }\n        } else {\n            \r\n            DBSObjectFilter schemaFilter = dataSource.getContainer().getObjectFilter(PostgreSchema.class, database, true);\n            if (schemaFilter != null && schemaFilter.isEnabled()) {\n                for (PostgreSchema schema : database.getSchemas(session.getProgressMonitor())) {\n                    if (schemaFilter.matches(schema.getName())) {\n                        nsList.add(schema);\n                    }\n                }\n            }\n        }\n\n        if (objectType == RelationalObjectType.TYPE_TABLE) {\n            findTablesByMask(session, database, nsList, params, references);\n        } else if (objectType == RelationalObjectType.TYPE_CONSTRAINT) {\n            findConstraintsByMask(session, database, nsList, params, references);\n        } else if (objectType == RelationalObjectType.TYPE_PROCEDURE) {\n            findProceduresByMask(session, database, nsList, params, references);\n        } else if (objectType == RelationalObjectType.TYPE_TABLE_COLUMN) {\n            findTableColumnsByMask(session, database, nsList, params, references);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"}],"commitId":"024e5d3cc540833331d1fc6bd64c66b447969311","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-09-09 17:55:10","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"}]
