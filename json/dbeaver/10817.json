[{"authorTime":"2018-10-13 20:06:58","codes":[{"authorDate":"2019-01-18 00:05:12","commitOrder":7,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select *,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-18 00:05:12","endLine":73,"groupId":"765","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ca/3eca6c999d91281d81a1860a7e03c7dbf5421e.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select *,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2018-10-13 20:06:58","commitOrder":7,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2018-10-13 20:06:58","endLine":92,"groupId":"765","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/9b9678e2e475fc1f92af578bc6703579bb5a58.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"NB"}],"commitId":"a73654ea3472249c666e9cf00246677dd8c2ed8b","commitMessage":"@@@#5004 SQL Server: session manager\n\n\nFormer-commit-id: 82e6222711c84c1b1d9f39daa973f545d1c46027","date":"2019-01-18 00:05:12","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-10-13 20:06:58","codes":[{"authorDate":"2019-01-18 00:17:16","commitOrder":8,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select s.*,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-18 00:17:16","endLine":73,"groupId":"765","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/2b/5ce923df19fb992d0b7a59ae13908cb491a9d1.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select *,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2018-10-13 20:06:58","commitOrder":8,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2018-10-13 20:06:58","endLine":92,"groupId":"765","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/9b9678e2e475fc1f92af578bc6703579bb5a58.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"77d08449d8e3f2544bfeaa694c1d560ede4e3860","commitMessage":"@@@#5004 SQL Server: session manager\n\n\nFormer-commit-id: 3d7f3643f14d5bef2d1fc2aa8f422474e9ced229","date":"2019-01-18 00:17:16","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-10-13 20:06:58","codes":[{"authorDate":"2019-01-18 03:36:02","commitOrder":9,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"SELECT s.*,db.name as database_name,c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\" +\n                    \"FROM sys.dm_exec_sessions s\\n\" +\n                    (onlyConnections ? \"\" : \"LEFT OUTER \") + \"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\" +\n                    \"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"ORDER BY s.session_id DESC\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-18 03:36:02","endLine":78,"groupId":"765","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7c/558dcdfe83d1e87435ac0ca058f3829b28a262.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"select s.*,db.name as database_name,r.sql_handle,(select text from sys.dm_exec_sql_text(r.sql_handle)) as sql_text\\n\" +\n                    \"from sys.dm_exec_sessions s\\n\" +\n                    \"left outer join sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"left outer join sys.dm_exec_requests r on r.session_id=s.session_id\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"},{"authorDate":"2018-10-13 20:06:58","commitOrder":9,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2018-10-13 20:06:58","endLine":92,"groupId":"765","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/9b9678e2e475fc1f92af578bc6703579bb5a58.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"2097cd99026dc9d48134575ecf2db54d4d188687","commitMessage":"@@@SQL Server session manager additions\n\n\nFormer-commit-id: 3e0c0c774c8591bd03906c64bd265c392ac295df","date":"2019-01-18 03:36:02","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2018-10-13 20:06:58","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":10,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                \"SELECT s.*,db.name as database_name,c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\" +\n                    \"FROM sys.dm_exec_sessions s\\n\" +\n                    (onlyConnections ? \"\" : \"LEFT OUTER \") + \"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\" +\n                    \"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\" +\n                    \"ORDER BY s.session_id DESC\")) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2018-10-13 20:06:58","commitOrder":10,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2018-10-13 20:06:58","endLine":92,"groupId":"765","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/9b9678e2e475fc1f92af578bc6703579bb5a58.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"N"}],"commitId":"17f2fffb52446bb5f2afc4cc288b9d2bc14d4f4e","commitMessage":"@@@#5069 SQL Server sessions: support server earlier than 11.x (2012)\n\n\nFormer-commit-id: 50e5abe5584cb8d21def52d5378a343f4acd5ada","date":"2019-01-25 01:00:43","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-03-14 04:17:21","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":11,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2019-03-14 04:17:21","commitOrder":11,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM GV$SESSION s \\n\" +\n                \"LEFT JOIN gv$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN gv$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-03-14 04:17:21","endLine":92,"groupId":"765","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/ea25c979ec0ddbd9985198af30bf68681b598f.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM V$SESSION s \\n\" +\n                \"LEFT JOIN v$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN v$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"60b5f5c21409c7274a9bc207716d0220e134a968","commitMessage":"@@@#5313 Oracle session manager - monitor global sessions (RAC)\n\n\nFormer-commit-id: 12431c9cf3a8bc5b377d6eb601219e3f82b35e9d","date":"2019-03-14 04:17:21","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2019-04-07 20:23:13","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":12,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2019-04-07 20:23:13","commitOrder":12,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM GV$SESSION s \\n\" +\n                \"LEFT JOIN gv$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN gv$sess_io io ON ( s.sid = io.sid AND s.inst_id = io.inst_id )\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-04-07 20:23:13","endLine":92,"groupId":"765","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c5/179ff93ed032e405cdf94f721b801a7d31f36c.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM GV$SESSION s \\n\" +\n                \"LEFT JOIN gv$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN gv$sess_io io ON ( s.sid = io.sid)\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"a7883120d5952a06cc1b23352f8473f8e2736884","commitMessage":"@@@Merge pull request #5669 from p91paul/devel\n\n#5313.  #5346: Oracle session browser bugfixes\n\nFormer-commit-id: 694b4d56b1bef2dedc75389fe84a3d418effbe56","date":"2019-04-07 20:23:13","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-10-29 16:43:32","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":13,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2020-10-29 16:43:32","commitOrder":13,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        boolean atLeastV9 = dataSource.isAtLeastV9();\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, \");\n            if (atLeastV9) {\n               sql.append(\"sq.SQL_FULLTEXT, \");\n            } else {\n               sql.append(\"sq.SQL_TEXT AS SQL_FULLTEXT, \");\n            }\n            sql.append(\"io.*\\n\" +\n                \"FROM GV$SESSION s, gv$sql sq, gv$sess_io io\\n\" +\n                \"WHERE s.sql_address = sq.address(+)\\n\" +\n                \" AND s.sql_hash_value = sq.hash_value(+)\" +\n                \" AND s.sid = io.sid(+)\" +\n                \" AND s.inst_id = io.inst_id(+)\");\n                \r\n                \r\n                \r\n            if(atLeastV9) {\n                sql.append(\" AND s.sql_child_number = sq.child_number\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2020-10-29 16:43:32","endLine":104,"groupId":"765","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/f720cacf2417d9bea8b1fd55129d61ea6ed77b.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, sq.SQL_FULLTEXT, io.* \\n\" +\n                \"FROM GV$SESSION s \\n\" +\n                \"LEFT JOIN gv$sql sq ON (s.sql_address = sq.address AND s.sql_hash_value = sq.hash_value AND s.sql_child_number = sq.child_number)\\n\" +\n                \"LEFT JOIN gv$sess_io io ON ( s.sid = io.sid AND s.inst_id = io.inst_id )\\n\" +\n                \r\n                \r\n                \"WHERE 1=1\");\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"1cad76253207a96fcc9e519e1add16d6fd6cf688","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: ea776e68dbd8c4a1aafcf8f0cf5b5b3752fbcc26","date":"2020-10-29 16:43:32","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-11-18 18:20:01","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":14,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2020-11-18 18:20:01","commitOrder":14,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        boolean atLeastV9 = dataSource.isAtLeastV9();\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, \");\n            if (atLeastV9) {\n               sql.append(\"sq.SQL_FULLTEXT, \");\n            } else {\n               sql.append(\"sq.SQL_TEXT AS SQL_FULLTEXT, \");\n            }\n            sql.append(\"io.*\\n\" +\n                \"FROM GV$SESSION s, gv$sql sq, gv$sess_io io\\n\" +\n                \"WHERE s.sql_address = sq.address(+)\\n\" +\n                \" AND s.sql_hash_value = sq.hash_value(+)\" +\n                \" AND s.sid = io.sid(+)\" +\n                \" AND s.inst_id = io.inst_id(+)\");\n                \r\n                \r\n                \r\n            if(atLeastV9) {\n                sql.append(\" AND s.sql_child_number = sq.child_number (+)\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2020-11-18 18:20:01","endLine":104,"groupId":"765","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/a15df41fa95eb1ed9bb168fab570cace03d4a2.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        boolean atLeastV9 = dataSource.isAtLeastV9();\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, \");\n            if (atLeastV9) {\n               sql.append(\"sq.SQL_FULLTEXT, \");\n            } else {\n               sql.append(\"sq.SQL_TEXT AS SQL_FULLTEXT, \");\n            }\n            sql.append(\"io.*\\n\" +\n                \"FROM GV$SESSION s, gv$sql sq, gv$sess_io io\\n\" +\n                \"WHERE s.sql_address = sq.address(+)\\n\" +\n                \" AND s.sql_hash_value = sq.hash_value(+)\" +\n                \" AND s.sid = io.sid(+)\" +\n                \" AND s.inst_id = io.inst_id(+)\");\n                \r\n                \r\n                \r\n            if(atLeastV9) {\n                sql.append(\" AND s.sql_child_number = sq.child_number\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"3560efebd380b69d68c8ac39cfb8e62921ccd69a","commitMessage":"@@@Merge pull request #10414 from simasch/devel\n\n#10413 Oracle: Only Sessions that execute SQL are shown fixed. \n\nFormer-commit-id: 66f36f3f6788459af76d7154a7fbfea8a6a8f01d","date":"2020-11-18 18:20:01","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-11-28 23:54:13","codes":[{"authorDate":"2019-01-25 01:00:43","commitOrder":15,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2019-01-25 01:00:43","endLine":95,"groupId":"765","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/36/4366f957b4177786c514e9b57d42c2b38d6dab.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"N"},{"authorDate":"2020-11-28 23:54:13","commitOrder":15,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        boolean atLeastV11 = dataSource.isAtLeastV11();\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, \");\n            if (atLeastV11) {\n               sql.append(\"sq.SQL_FULLTEXT, \");\n            } else {\n               sql.append(\"sq.SQL_TEXT AS SQL_FULLTEXT, \");\n            }\n            sql.append(\"io.*\\n\" +\n                \"FROM GV$SESSION s, gv$sql sq, gv$sess_io io\\n\" +\n                \"WHERE s.sql_address = sq.address(+)\\n\" +\n                \" AND s.sql_hash_value = sq.hash_value(+)\" +\n                \" AND s.sid = io.sid(+)\" +\n                \" AND s.inst_id = io.inst_id(+)\");\n                \r\n                \r\n                \r\n            if (atLeastV11) {\n                sql.append(\" AND s.sql_child_number = sq.child_number (+)\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2020-11-28 23:54:13","endLine":104,"groupId":"765","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a4/aedc7f85574c1dbb2d929512e10b242338b12b.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        boolean atLeastV9 = dataSource.isAtLeastV9();\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, \");\n            if (atLeastV9) {\n               sql.append(\"sq.SQL_FULLTEXT, \");\n            } else {\n               sql.append(\"sq.SQL_TEXT AS SQL_FULLTEXT, \");\n            }\n            sql.append(\"io.*\\n\" +\n                \"FROM GV$SESSION s, gv$sql sq, gv$sess_io io\\n\" +\n                \"WHERE s.sql_address = sq.address(+)\\n\" +\n                \" AND s.sql_hash_value = sq.hash_value(+)\" +\n                \" AND s.sid = io.sid(+)\" +\n                \" AND s.inst_id = io.inst_id(+)\");\n                \r\n                \r\n                \r\n            if(atLeastV9) {\n                sql.append(\" AND s.sql_child_number = sq.child_number (+)\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"b6ddb9ba2412f799a0ca996ff34d6f5ee8375669","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 9065fe4a9c4ab9736c30a54575598e3eec3b837f","date":"2020-11-28 23:54:13","modifiedFileCount":"7","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-05-08 23:01:57","codes":[{"authorDate":"2021-05-08 23:01:57","commitOrder":16,"curCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(generateSessionReadQuery(options))) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2021-05-08 23:01:57","endLine":74,"groupId":"10817","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d0/385f2df85339c7ed02a4d6c21465c6e8913fb8.src","preCode":"    public Collection<SQLServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        try {\n            boolean onlyConnections = CommonUtils.getOption(options, OPTION_SHOW_ONLY_CONNECTIONS);\n            boolean supportsDatabaseInfo = ((SQLServerDataSource) session.getDataSource()).isServerVersionAtLeast(SQLServerConstants.SQL_SERVER_2012_VERSION_MAJOR, 0);\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT s.*,\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"db.name as database_name,\");\n            } else {\n                sql.append(\"NULL as database_name,\");\n            }\n            sql.append(\"c.connection_id,(select text from sys.dm_exec_sql_text(c.most_recent_sql_handle)) as sql_text\\n\")\n                .append(\"FROM sys.dm_exec_sessions s\\n\");\n            if (onlyConnections) {\n                sql.append(\"LEFT OUTER \");\n            }\n            sql.append(\"JOIN sys.dm_exec_connections c ON c.session_id=s.session_id\\n\");\n            if (supportsDatabaseInfo) {\n                sql.append(\"LEFT OUTER JOIN sys.sysdatabases db on db.dbid=s.database_id\\n\");\n            }\n            sql.append(\"ORDER BY s.session_id DESC\");\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(\n                sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<SQLServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new SQLServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/session/SQLServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"},{"authorDate":"2021-05-08 23:01:57","commitOrder":16,"curCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException {\n        try {\n\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(generateSessionReadQuery(options))) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","date":"2021-05-08 23:01:57","endLine":77,"groupId":"10817","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"getSessions","params":"(DBCSessionsession@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/8e51a3a9c401be436b82128799c7b37f9fd8c0.src","preCode":"    public Collection<OracleServerSession> getSessions(DBCSession session, Map<String, Object> options) throws DBException\n    {\n        boolean atLeastV11 = dataSource.isAtLeastV11();\n        try {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT s.*, \");\n            if (atLeastV11) {\n               sql.append(\"sq.SQL_FULLTEXT, \");\n            } else {\n               sql.append(\"sq.SQL_TEXT AS SQL_FULLTEXT, \");\n            }\n            sql.append(\"io.*\\n\" +\n                \"FROM GV$SESSION s, gv$sql sq, gv$sess_io io\\n\" +\n                \"WHERE s.sql_address = sq.address(+)\\n\" +\n                \" AND s.sql_hash_value = sq.hash_value(+)\" +\n                \" AND s.sid = io.sid(+)\" +\n                \" AND s.inst_id = io.inst_id(+)\");\n                \r\n                \r\n                \r\n            if (atLeastV11) {\n                sql.append(\" AND s.sql_child_number = sq.child_number (+)\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_BACKGROUND)) {\n                sql.append(\" AND s.TYPE = 'USER'\");\n            }\n            if (!CommonUtils.getOption(options, OPTION_SHOW_INACTIVE)) {\n                sql.append(\" AND s.STATUS <> 'INACTIVE'\");\n            }\n            try (JDBCPreparedStatement dbStat = ((JDBCSession) session).prepareStatement(sql.toString())) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    List<OracleServerSession> sessions = new ArrayList<>();\n                    while (dbResult.next()) {\n                        sessions.add(new OracleServerSession(dbResult));\n                    }\n                    return sessions;\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/session/OracleServerSessionManager.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"2ea9007e44ecefc87573a789d3f6f10299837b50","commitMessage":"@@@dbeaver/dbeaver#11314 Session manager - show and run session read SQL query\n\n\nFormer-commit-id: fe19e9e2de1eecdee0dd43fc350aee5276c19f20","date":"2021-05-08 23:01:57","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"}]
