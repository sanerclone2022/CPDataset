[{"authorTime":"2019-07-15 05:58:14","codes":[{"authorDate":"2019-07-15 05:58:14","commitOrder":4,"curCode":"    public void parseDataSources(DataSourceRegistry registry, InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, handlerObject);\n                        dataSource.getConnectionConfiguration().addHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-07-15 05:58:14","endLine":443,"groupId":"451","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(DataSourceRegistryregistry@InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/12f3f38535ab3efb0abb9937149dad9e334808.src","preCode":"    public void parseDataSources(DataSourceRegistry registry, InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, handlerObject);\n                        dataSource.getConnectionConfiguration().addHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"MB"},{"authorDate":"2019-07-15 05:58:14","commitOrder":4,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(@Nullable DataSourceDescriptor dataSource, @NotNull Map.Entry<String, Map<String, Object>> handlerObject) {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 05:58:14","endLine":467,"groupId":"4902","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/12f3f38535ab3efb0abb9937149dad9e334808.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(@Nullable DataSourceDescriptor dataSource, @NotNull Map.Entry<String, Map<String, Object>> handlerObject) {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":445,"status":"B"}],"commitId":"fbf6dede27b56dc3bd764b6d375fd903215f34d4","commitMessage":"@@@Network profiles save/load.  secured credentials saver\n\n\nFormer-commit-id: ab7922c1e1cb91ea146ad540f498629e662bcea1","date":"2019-07-15 05:58:14","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-15 21:01:26","codes":[{"authorDate":"2019-07-15 21:01:26","commitOrder":5,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().addHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-07-15 21:01:26","endLine":528,"groupId":"1241","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    public void parseDataSources(DataSourceRegistry registry, InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, handlerObject);\n                        dataSource.getConnectionConfiguration().addHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":273,"status":"M"},{"authorDate":"2019-07-15 21:01:26","commitOrder":5,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 21:01:26","endLine":556,"groupId":"4902","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(@Nullable DataSourceDescriptor dataSource, @NotNull Map.Entry<String, Map<String, Object>> handlerObject) {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"M"}],"commitId":"01b1505d325378ca3bb2a2546b09825b9dabb74e","commitMessage":"@@@Datasource config: separate connections config and user credentials\n\n\nFormer-commit-id: 57cec8ddfdbbf311261ebd0c7f957fdcd80a085f","date":"2019-07-15 21:01:26","modifiedFileCount":"9","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-15 21:01:26","codes":[{"authorDate":"2019-07-16 17:41:02","commitOrder":6,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().updateHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-07-16 17:41:02","endLine":526,"groupId":"1241","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a9/77b50b5a7ef1027fb1ecc9be90670c6938f828.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().addHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"},{"authorDate":"2019-07-15 21:01:26","commitOrder":6,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 21:01:26","endLine":556,"groupId":"4902","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"N"}],"commitId":"44e2844d6f8db0d20a7dc970596a3bb0643a347b","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 602bb6b78a727f72befc639bad116a21912f135a","date":"2019-07-16 17:41:02","modifiedFileCount":"27","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-15 21:01:26","codes":[{"authorDate":"2019-07-16 22:12:59","commitOrder":7,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().updateHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-07-16 22:12:59","endLine":527,"groupId":"13221","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/edd5190cf31b44f59bed07242b6f87b8c1ecb3.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().updateHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2019-07-15 21:01:26","commitOrder":7,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 21:01:26","endLine":556,"groupId":"4902","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"N"}],"commitId":"577d8d23e7985255f1d36e9cf579356bbd22cf73","commitMessage":"@@@Network profiles management fixes\n\n\nFormer-commit-id: 834c84379513d302d86dc17c37a4cc5ee7aa83a2","date":"2019-07-16 22:12:59","modifiedFileCount":"18","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-15 21:01:26","codes":[{"authorDate":"2019-07-16 22:19:39","commitOrder":8,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().updateHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-07-16 22:19:39","endLine":526,"groupId":"6565","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e0/9a4e31cbdf2823940ba76f276fdc5b82ca0f8e.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProfileName(JSONUtils.getString(profileMap, \"name\"));\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().updateHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":270,"status":"M"},{"authorDate":"2019-07-15 21:01:26","commitOrder":8,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 21:01:26","endLine":556,"groupId":"4902","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"N"}],"commitId":"cf0233cf6c473f7ce134e2bf3810fe1bbbc89247","commitMessage":"@@@Network profiles management fixes\n\n\nFormer-commit-id: 34c447a5fbef88481c47ad9a7592d54c424dc07f","date":"2019-07-16 22:19:39","modifiedFileCount":"2","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-15 21:01:26","codes":[{"authorDate":"2019-07-29 20:33:44","commitOrder":9,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-07-29 20:33:44","endLine":532,"groupId":"6565","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/eb/5ea6ecbdcb435ac651563d9c8528e307e82c8a.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        dataSource.getConnectionConfiguration().updateHandler(configuration);\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-07-15 21:01:26","commitOrder":9,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 21:01:26","endLine":556,"groupId":"4902","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"N"}],"commitId":"5cf3543ce856a4b14555689d8b7ad7a131a0ae49","commitMessage":"@@@Network handlers parser fix\n\n\nFormer-commit-id: 35d12bf0105d5b030108ba83a7aa200580cfb669","date":"2019-07-29 20:33:44","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-15 21:01:26","codes":[{"authorDate":"2019-08-05 19:27:50","commitOrder":10,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-05 19:27:50","endLine":532,"groupId":"6565","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/42/b52860dc7de1d2ce525a04d16631120b7d128b.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(conObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-07-15 21:01:26","commitOrder":10,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-07-15 21:01:26","endLine":556,"groupId":"4902","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8b/90a3466a33db18eecce64df35ff85fe9d9c72a.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":530,"status":"N"}],"commitId":"1a836d55c024b0839e2e3766415c0d5f563c7f07","commitMessage":"@@@#6356 Connection bootstrap configuration loading fix\n\n\nFormer-commit-id: ea6292428a959f52021caa86607f692760aa5f25","date":"2019-08-05 19:27:50","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-09 17:21:27","codes":[{"authorDate":"2019-08-09 17:21:27","commitOrder":11,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-09 17:21:27","endLine":532,"groupId":"6565","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/7d21b31c87470332da9beef76e7fb196ac6df1.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeProperties(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeProperties(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeProperties(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"M"},{"authorDate":"2019-08-09 17:21:27","commitOrder":11,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeStringMap(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-09 17:21:27","endLine":561,"groupId":"4902","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/7d21b31c87470332da9beef76e7fb196ac6df1.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"}],"commitId":"7b55315e0e25647a76abce1785cc4df2176b321e","commitMessage":"@@@Configuration save/load improvements\n\n\nFormer-commit-id: 864de4f4b5a431d97e2567870a0a0548926c5696","date":"2019-08-09 17:21:27","modifiedFileCount":"23","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-09 18:44:45","codes":[{"authorDate":"2019-08-09 17:21:27","commitOrder":12,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-09 17:21:27","endLine":532,"groupId":"6565","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/7d21b31c87470332da9beef76e7fb196ac6df1.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":274,"status":"N"},{"authorDate":"2019-08-09 18:44:45","commitOrder":12,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-09 18:44:45","endLine":564,"groupId":"4902","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e8/369da81a581fadfc34697b8631ac92fb751feb.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            curNetworkHandler.setProperties(JSONUtils.deserializeStringMap(handlerCfg, RegistryConstants.TAG_PROPERTIES));\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"}],"commitId":"014b51d7f99e844860c86af6cbcfc6cf19ad06b3","commitMessage":"@@@Network handlers properties management refactored\n\n\nFormer-commit-id: 80e41a6a59430570ef286052b6add7aa4fae942a","date":"2019-08-09 18:44:45","modifiedFileCount":"23","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-09 18:44:45","codes":[{"authorDate":"2019-08-09 21:47:57","commitOrder":13,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    Map<String, Object> securityCfg = JSONUtils.getObject(conObject, \"security\");\n                    if (!CommonUtils.isEmpty(securityCfg)) {\n                        List<String> permissionRestrictions = JSONUtils.deserializeStringList(securityCfg, \"permission-restrictions\");\n                        if (!CommonUtils.isEmpty(permissionRestrictions)) {\n                            List<DBPDataSourcePermission> permissions = new ArrayList<>();\n                            for (String perm : permissionRestrictions) {\n                                try {\n                                    DBPDataSourcePermission permission = DBPDataSourcePermission.getById(perm);\n                                    if (permission != null) {\n                                        permissions.add(permission);\n                                    }\n                                } catch (IllegalArgumentException e) {\n                                    log.debug(e);\n                                }\n                            }\n                            if (!permissions.isEmpty()) {\n                                dataSource.setModifyPermissions(permissions);\n                            }\n                        }\n                    }\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-09 21:47:57","endLine":557,"groupId":"6565","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/fd53b3581ce309854912b49457794f683b70d2.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":275,"status":"M"},{"authorDate":"2019-08-09 18:44:45","commitOrder":13,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-09 18:44:45","endLine":564,"groupId":"4902","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e8/369da81a581fadfc34697b8631ac92fb751feb.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"N"}],"commitId":"fa2ef5d46d608a3a36b952a44e9f93aa77a0eb92","commitMessage":"@@@#6397 Connection permissions editor UI & model\n\n\nFormer-commit-id: 935b4f06e97ce1a71fdef8a508cd29a3788dd9cc","date":"2019-08-09 21:47:57","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-09 18:44:45","codes":[{"authorDate":"2019-08-18 01:01:15","commitOrder":14,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-18 01:01:15","endLine":542,"groupId":"4442","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/8cd1f5472a0e47adea650911a0081a79407de6.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                String name = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctMap.getValue(), RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctMap.getValue(), \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctMap.getValue(), \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    Map<String, Object> securityCfg = JSONUtils.getObject(conObject, \"security\");\n                    if (!CommonUtils.isEmpty(securityCfg)) {\n                        List<String> permissionRestrictions = JSONUtils.deserializeStringList(securityCfg, \"permission-restrictions\");\n                        if (!CommonUtils.isEmpty(permissionRestrictions)) {\n                            List<DBPDataSourcePermission> permissions = new ArrayList<>();\n                            for (String perm : permissionRestrictions) {\n                                try {\n                                    DBPDataSourcePermission permission = DBPDataSourcePermission.getById(perm);\n                                    if (permission != null) {\n                                        permissions.add(permission);\n                                    }\n                                } catch (IllegalArgumentException e) {\n                                    log.debug(e);\n                                }\n                            }\n                            if (!permissions.isEmpty()) {\n                                dataSource.setModifyPermissions(permissions);\n                            }\n                        }\n                    }\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2019-08-09 18:44:45","commitOrder":14,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-09 18:44:45","endLine":564,"groupId":"4902","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e8/369da81a581fadfc34697b8631ac92fb751feb.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"N"}],"commitId":"726a7f1b731cb6ae742c770defc544a30e42cd99","commitMessage":"@@@#6542 Modify permissions per connection type: UI\n\n\nFormer-commit-id: 5d88bfed6a0ab1cbcc768b49d8a5b44e0176c265","date":"2019-08-18 01:01:15","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-22 23:07:33","codes":[{"authorDate":"2019-08-22 23:07:33","commitOrder":15,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-22 23:07:33","endLine":550,"groupId":"4442","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8a/b3a8366b1a9b16d88a4ce5c393d228ca6a3609.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"M"},{"authorDate":"2019-08-22 23:07:33","commitOrder":15,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-22 23:07:33","endLine":613,"groupId":"4902","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8a/b3a8366b1a9b16d88a4ce5c393d228ca6a3609.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"M"}],"commitId":"e8335067ec181d7944296ae0dfe8ab0ccb285b5e","commitMessage":"@@@#6564 Support loading user credentials from datasource config file\n\n\nFormer-commit-id: 68576f6321dc1fbbf69123bf57c5af66c35e4b56","date":"2019-08-22 23:07:33","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-22 23:07:33","codes":[{"authorDate":"2019-08-25 03:44:34","commitOrder":16,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-08-25 03:44:34","endLine":556,"groupId":"4442","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7d/08c7b142e367c5b26d8be93ee9d502783e9a5e.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_NAME);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2019-08-22 23:07:33","commitOrder":16,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-22 23:07:33","endLine":613,"groupId":"4902","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8a/b3a8366b1a9b16d88a4ce5c393d228ca6a3609.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"N"}],"commitId":"076a2f926d53e25289ccab95f643e027fc6e1420","commitMessage":"@@@#6599 Multiple secured credentials support\n\n\nFormer-commit-id: be7a12a3bf2c3dfd3122a9bdfcbd41d06b878900","date":"2019-08-25 03:44:34","modifiedFileCount":"7","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-22 23:07:33","codes":[{"authorDate":"2019-11-10 04:14:04","commitOrder":17,"curCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getProject().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-11-10 04:14:04","endLine":552,"groupId":"4442","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(InputStreamis@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/11/bde3a49970229f10da70edb543969dd4c5d5d9.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getPlatform().getApplication().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2019-08-22 23:07:33","commitOrder":17,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-22 23:07:33","endLine":613,"groupId":"4902","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8a/b3a8366b1a9b16d88a4ce5c393d228ca6a3609.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"N"}],"commitId":"2cdd3325216ff4a6a283d976476df0bb243d57ac","commitMessage":"@@@dbeaver/dbeaver#3066 Project security storage + refactoring\n\n\nFormer-commit-id: d31fa372a3847fa77547470ac0491f62f909e4f0","date":"2019-11-10 04:14:04","modifiedFileCount":"10","status":"M","submitter":"serge-rider"},{"authorTime":"2019-08-22 23:07:33","codes":[{"authorDate":"2019-11-10 19:24:00","commitOrder":18,"curCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-11-10 19:24:00","endLine":571,"groupId":"4442","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/8d4571e7f2822fb7f14225131d927601030fef.src","preCode":"    public void parseDataSources(InputStream is, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n                try (InputStream crdStream = credFile.getContents()) {\n                    IOUtils.copyStream(crdStream, credBuffer);\n                } catch (Exception e) {\n                    log.error(\"Error reading secure credentials file\", e);\n                }\n                ContentEncrypter encrypter = new ContentEncrypter(registry.getProject().getSecureStorage().getLocalSecretKey());\n                try {\n                    String credJson = encrypter.decrypt(credBuffer.toByteArray());\n                    Map<String, Map<String, Map<String, String>>> res =\n                        CONFIG_GSON.fromJson(\n                            credJson,\n                            new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        try (Reader configReader = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, configReader);\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"M"},{"authorDate":"2019-08-22 23:07:33","commitOrder":18,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-08-22 23:07:33","endLine":613,"groupId":"4902","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8a/b3a8366b1a9b16d88a4ce5c393d228ca6a3609.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":576,"status":"N"}],"commitId":"01dce9aa47a4d8ee511eeed0f93bc1849c617f67","commitMessage":"@@@#3066 Support encrypted projects\n\n\nFormer-commit-id: e2edb91935649887853c19d0ec487a00ac921371","date":"2019-11-10 19:24:00","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-11-27 07:14:02","codes":[{"authorDate":"2019-11-10 19:24:00","commitOrder":19,"curCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-11-10 19:24:00","endLine":571,"groupId":"4442","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/8d4571e7f2822fb7f14225131d927601030fef.src","preCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":305,"status":"N"},{"authorDate":"2019-11-27 07:14:02","commitOrder":19,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-11-27 07:14:02","endLine":640,"groupId":"4902","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/9104370abb35f102a20d9dec607f0f1dee409b.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile, \"network/\" + handlerId);\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"M"}],"commitId":"279611955932c8a0840e559f7c629289a5134583","commitMessage":"@@@Network profiles secure credentials save/load fix\n\n\nFormer-commit-id: 1b9b36acc9e1d99726ac28f665a0e5de1d92f69c","date":"2019-11-27 07:14:02","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2019-11-27 07:14:02","codes":[{"authorDate":"2019-12-26 20:26:53","commitOrder":20,"curCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-12-26 20:26:53","endLine":583,"groupId":"4442","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/f222b9076282289c5800e34f054b73280e0593.src","preCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        config.getBootstrap().setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        config.getBootstrap().setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    config.getBootstrap().setDefaultObjectName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT));\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        config.getBootstrap().setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    config.getBootstrap().setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"M"},{"authorDate":"2019-11-27 07:14:02","commitOrder":20,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2019-11-27 07:14:02","endLine":640,"groupId":"4902","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/9104370abb35f102a20d9dec607f0f1dee409b.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":602,"status":"N"}],"commitId":"43a75dd36801a7e6c770908d36d54029dc133ebd","commitMessage":"@@@#7472 Default catalog/schema. Model + PG impl\n\n\nFormer-commit-id: 1543bdd49fbac7fad7d84de656f98cac91ede59d","date":"2019-12-26 20:26:53","modifiedFileCount":"24","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2019-12-26 20:26:53","commitOrder":21,"curCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2019-12-26 20:26:53","endLine":583,"groupId":"4442","id":35,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DataSourceOriginorigin@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e7/f222b9076282289c5800e34f054b73280e0593.src","preCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":310,"status":"N"},{"authorDate":"2020-01-19 03:52:39","commitOrder":21,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":36,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource == null ? null : dataSource.getDriver());\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"}],"commitId":"449cd9bd0b0bcd54c99a961a62efbe17781896ff","commitMessage":"@@@#7681 Variables dialog UI redesign\n\n\nFormer-commit-id: c4952d46eee8df8bc67b7433b70d34957cc11983","date":"2020-01-19 03:52:39","modifiedFileCount":"17","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2020-02-28 01:13:05","commitOrder":22,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-02-28 01:13:05","endLine":584,"groupId":"1816","id":37,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a3/77d4b41e2765e3910a721157622ca27116509d.src","preCode":"    public void parseDataSources(IFile configFile, DataSourceOrigin origin, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + origin.getConfigSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2020-01-19 03:52:39","commitOrder":22,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":38,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"f269696f9ce6e3a674283956d81f80b495d73fe5","commitMessage":"@@@Connection configuration storage model\n\n\nFormer-commit-id: 29735c53430f6fbf3ddf838252fa443af41961d4","date":"2020-02-28 01:13:05","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2020-03-04 22:37:30","commitOrder":23,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-03-04 22:37:30","endLine":585,"groupId":"4442","id":39,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/28/3a3a5ed1689f45e02485f3d1f3e37edb8d2dd1.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setUserProfileName(JSONUtils.getString(cfgObject, \"user-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"M"},{"authorDate":"2020-01-19 03:52:39","commitOrder":23,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":40,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"0107c9b807cd65023dbff2d332a1f2fead07ebed","commitMessage":"@@@Auth model refactoring\n\n\nFormer-commit-id: 14c821c22ff196b0c8151bc008beac1336cc08d2","date":"2020-03-04 22:37:30","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2020-04-01 20:18:25","commitOrder":24,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-04-01 20:18:25","endLine":600,"groupId":"0","id":41,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/33/c53d457655ddbea4e2b628b707c09733e1811c.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setShowSystemObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_SYSTEM_OBJECTS));\n                dataSource.setShowUtilityObjects(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SHOW_UTIL_OBJECTS));\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":319,"status":"M"},{"authorDate":"2020-01-19 03:52:39","commitOrder":24,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":42,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"da66a43ee53396b638068373319488cbe0411a15","commitMessage":"@@@#7387 Connection view settings model\n\n\nFormer-commit-id: 53f90cff702ec87128ceddb77376d909237edf15","date":"2020-04-01 20:18:25","modifiedFileCount":"16","status":"M","submitter":"serge-rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2020-04-02 03:55:46","commitOrder":25,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-04-02 03:55:46","endLine":602,"groupId":"0","id":43,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/af/1ee28a43450a098f817037aeb0201a8a1a496a.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2020-01-19 03:52:39","commitOrder":25,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":44,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"5d4c49ae1791dcbfcc42713ebb2e3d911ea8f643","commitMessage":"@@@#7387 Navigator view: show folders in entity editor. Hide virtual model.\n\n\nFormer-commit-id: c9af99abe8505d0966b813408e919afab2aee614","date":"2020-04-02 03:55:46","modifiedFileCount":"8","status":"M","submitter":"serge-rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2020-04-06 02:10:09","commitOrder":26,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n\t\tdataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-04-06 02:10:09","endLine":603,"groupId":"15273","id":45,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/16/badfa3a27d4b8776dac9753b595f4e5144adc1.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2020-01-19 03:52:39","commitOrder":26,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":46,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"050a8effa95cf93b4f053f1523b3f07df2c55154","commitMessage":"@@@Merge pull request #8341 from rangzee/devel1\n\nfix datasource description\n\nFormer-commit-id: 640dc523eeb86204c6fcc0466172f1af8fc9422d","date":"2020-04-06 02:10:09","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-19 03:52:39","codes":[{"authorDate":"2020-05-09 16:14:06","commitOrder":27,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n                String[] authCreds = readSecuredCredentials(profileMap, null, profile, null);\n                if (!ArrayUtils.isEmpty(authCreds) && authCreds.length == 2) {\n                    profile.setUserName(authCreds[0]);\n                    profile.setUserPassword(authCreds[1]);\n                }\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-05-09 16:14:06","endLine":644,"groupId":"15273","id":47,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/fb2c6ac000784efca889827faeef1fb9fdd3d0.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileName = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileName);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, \"auth-model\"));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-01-19 03:52:39","commitOrder":27,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-01-19 03:52:39","endLine":647,"groupId":"4902","id":48,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/29a3fc116fa5dd1c3fefdf922ff60a4d47c963.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"N"}],"commitId":"f40ba395c280ad201643724e44932667030d950a","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles save/load\n\n\nFormer-commit-id: 367bd191dfaeb8934393b93bff05669127ebe3c5","date":"2020-05-09 16:14:06","modifiedFileCount":"10","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-05-09 21:09:11","commitOrder":28,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-05-09 21:09:11","endLine":644,"groupId":"11896","id":49,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n                String[] authCreds = readSecuredCredentials(profileMap, null, profile, null);\n                if (!ArrayUtils.isEmpty(authCreds) && authCreds.length == 2) {\n                    profile.setUserName(authCreds[0]);\n                    profile.setUserPassword(authCreds[1]);\n                }\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final String[] creds = readSecuredCredentials(cfgObject, dataSource, null, null);\n                        config.setUserName(creds[0]);\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds[1]);\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":28,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":50,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final String[] creds = readSecuredCredentials(handlerCfg, dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds[0]);\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds[1]);\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"M"}],"commitId":"143e3e26e71697948c95b12ae688d8001720ee92","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles in action. Secure credentials save/load redesign\n\n\nFormer-commit-id: d067f67cc5e19315598a3f81e52650781b0ba358","date":"2020-05-09 21:09:11","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-05-20 02:33:56","commitOrder":29,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + \"-\" + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-05-20 02:33:56","endLine":644,"groupId":"11896","id":51,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ec/657c9cf46ea2841147851e85d3cdf1ddffaf04.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":29,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":52,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"2c9788998ace74ea4268750ccdd15cc03620e7c5","commitMessage":"@@@Provided credentials read fix\n\n\nFormer-commit-id: 1cc85568509f0622f8aaac79b9f103aad6767b73","date":"2020-05-20 02:33:56","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-05-20 14:20:39","commitOrder":30,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-05-20 14:20:39","endLine":644,"groupId":"11896","id":53,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + \"-\" + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":30,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":54,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"0853d5be036c84bfda9738b8f91a0b281db2a3f8","commitMessage":"@@@Provided credentials read fix\n\n\nFormer-commit-id: fb3966848e15d82bb2b78e465bb20eed6a598d6a","date":"2020-05-20 14:20:39","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-07-05 23:41:50","commitOrder":31,"curCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-07-05 23:41:50","endLine":645,"groupId":"11896","id":55,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(IFileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0d/bdbbbed8f33f87c4533e8b5e41d7193c7bd588.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":342,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":31,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":56,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"65d7cb9560460fe94891f1077fed59283fa98629","commitMessage":"@@@Template datasources model and implementation\n\n\nFormer-commit-id: 9466f5f8fe22441c463e634068e07230c907a3ec","date":"2020-07-05 23:41:50","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-10-02 23:54:48","commitOrder":32,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-10-02 23:54:48","endLine":631,"groupId":"11896","id":57,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/a409ddf7eb45631ba769aaa9df6f6c58284147.src","preCode":"    public void parseDataSources(IFile configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        IFolder mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            IFile credFile = mdFolder.getFile(DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":328,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":32,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":58,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"ea034ccee4d4adf5781bdda7bf8cbc10b0361fbf","commitMessage":"@@@Project metadata refactoring (use plain file system instead of VFS)\n\n\nFormer-commit-id: 48363063710ed387cc7ad5ee1afa59df416403df","date":"2020-10-02 23:54:48","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-10-26 00:33:10","commitOrder":33,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_ID)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_ID));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-10-26 00:33:10","endLine":644,"groupId":"6563","id":59,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9e/f39402584459ddb382a16226f739a8043f742d.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":33,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":60,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"1dadf5513e1c10c1a1a3fe57f0444fc43694b82f","commitMessage":"@@@Datasource origins model\n\n\nFormer-commit-id: 8a4daf43b373f67b0d20107b854b8f357c04845f","date":"2020-10-26 00:33:10","modifiedFileCount":"11","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2020-10-30 22:42:30","commitOrder":34,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2020-10-30 22:42:30","endLine":644,"groupId":"6563","id":61,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b2/8dc604bba849ad5458982262127df55882008b.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_ID)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_ID));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":332,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":34,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":62,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"50821ba65de15f8f5c3637ebf859668941c33801","commitMessage":"@@@CB-348 Connection origin model refactoring (subType)\n\n\nFormer-commit-id: fccf69c6934c91996ee0a17dab85f0650e4eb04f","date":"2020-10-30 22:42:30","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2021-03-17 19:55:27","commitOrder":35,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2021-03-17 19:55:27","endLine":654,"groupId":"6563","id":63,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3e/65d4f120cceac29b562bb359edbdb570aa71c2.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(id, name, color, description, CommonUtils.toBoolean(autoCommit), CommonUtils.toBoolean(confirmExecute), CommonUtils.toBoolean(confirmDataChange));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":35,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":64,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"6e3cb12c7ad08750a577888b7bf1833ddbf208b5","commitMessage":"@@@#10158 Add default \"close txn\" property in connection type\n\n\nFormer-commit-id: 9f950e0c1f9ce3228fee26cb416958f05473e9c8","date":"2021-03-17 19:55:27","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2021-05-06 03:49:16","commitOrder":36,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2021-05-06 03:49:16","endLine":654,"groupId":"13398","id":65,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/98/9f9e45199d035e1b32d4434468499237bba08c.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.warn(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.warn(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.warn(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":36,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":66,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"b6b4da1c523df41aa7b0b47175bd59176c6a6dff","commitMessage":"@@@Redundant logging removed\n\n\nFormer-commit-id: f064e38cd9bc9ac4b550414a8e6792c1232f4d34","date":"2021-05-06 03:49:16","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2021-07-19 23:38:43","commitOrder":37,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setMergeSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2021-07-19 23:38:43","endLine":654,"groupId":"13398","id":67,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ae/5695e26cf37ff50cfe070e19b729822e4096dd.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":37,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":68,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"60dc2fa544af125acaf872ddb8e8a6849b590701","commitMessage":"@@@dbeaver/dbeaver-ee#954 Merge schemas model\n","date":"2021-07-19 23:38:43","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-09 21:09:11","codes":[{"authorDate":"2021-07-21 21:48:20","commitOrder":38,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2021-07-21 21:48:20","endLine":654,"groupId":"13398","id":69,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5a/d644b771a645c05dcfdf14fa8e42e8dcc36145.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setMergeSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"M"},{"authorDate":"2020-05-09 21:09:11","commitOrder":38,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2020-05-09 21:09:11","endLine":708,"groupId":"11898","id":70,"instanceNumber":2,"isCurCommit":0,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f2/f6f295c47b4b7d7f24ea8e722a63b774d116ed.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":670,"status":"N"}],"commitId":"b4de39768ee22af9466ae11b6bdd72685e71c961","commitMessage":"@@@dbeaver/dbeaver-ee#954 Merge schemas model\n","date":"2021-07-21 21:48:20","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-08-25 15:41:19","codes":[{"authorDate":"2021-07-21 21:48:20","commitOrder":39,"curCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","date":"2021-07-21 21:48:20","endLine":654,"groupId":"10556","id":71,"instanceNumber":1,"isCurCommit":0,"methodName":"parseDataSources","params":"(FileconfigFile@DBPDataSourceConfigurationStorageconfigurationStorage@booleanrefresh@DataSourceRegistry.ParseResultsparseResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5a/d644b771a645c05dcfdf14fa8e42e8dcc36145.src","preCode":"    public void parseDataSources(File configFile, DBPDataSourceConfigurationStorage configurationStorage, boolean refresh, DataSourceRegistry.ParseResults parseResults) throws IOException {\n        \r\n        File mdFolder = registry.getProject().getMetadataFolder(false);\n        if (mdFolder.exists()) {\n            File credFile = new File(mdFolder, DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + configurationStorage.getConfigurationFileSuffix() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT);\n            if (credFile.exists()) {\n                try {\n                    String credJson = loadConfigFile(credFile, true);\n                    Map<String, Map<String, Map<String, String>>> res = CONFIG_GSON.fromJson(\n                        credJson,\n                        new TypeToken<Map<String, Map<String, Map<String, String>>>>(){}.getType());\n                    secureProperties.putAll(res);\n                } catch (Exception e) {\n                    log.error(\"Error decrypting secure credentials\", e);\n                }\n            }\n        }\n\n        boolean decryptProject = CommonUtils.toBoolean(registry.getProject().getProjectProperty(DBPProject.PROP_SECURE_PROJECT));\n        String configJson = loadConfigFile(configFile, decryptProject);\n        {\n            Map<String, Object> jsonMap = JSONUtils.parseMap(CONFIG_GSON, new StringReader(configJson));\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(jsonMap, \"folders\")) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    registry.addDataSourceFolder(folder);\n                } else {\n                    folder.setDescription(description);\n                }\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(jsonMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(autoCloseTransactions));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            \r\n            \r\n\n            \r\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile();\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(jsonMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile();\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n\n                registry.updateAuthProfile(profile);\n            }\n\n            \r\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(jsonMap, \"connections\")) {\n                Map<String, Object> conObject = conMap.getValue();\n\n                \r\n                String id = conMap.getKey();\n                String dsProviderID = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                if (CommonUtils.isEmpty(dsProviderID)) {\n                    log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n                    continue;\n                }\n                DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(\n                    dsProviderID);\n                if (provider == null) {\n                    log.debug(\"Can't find datasource provider \" + dsProviderID + \" for datasource '\" + id + \"'\");\n                    provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(dsProviderID);\n                }\n                String driverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n                DriverDescriptor driver = provider.getDriver(driverId);\n                if (driver == null) {\n                    log.debug(\"Can't find driver \" + driverId + \" in datasource provider \" + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                    driver = provider.createDriver(driverId);\n                    driver.setName(driverId);\n                    driver.setDescription(\"Missing driver \" + driverId);\n                    driver.setDriverClassName(\"java.sql.Driver\");\n                    driver.setTemporary(true);\n                    provider.addDriver(driver);\n                }\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        origin = new DataSourceOriginLazy(originID, originProperties);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage,\n                        origin,\n                        id,\n                        driver,\n                        new DBPConnectionConfiguration());\n                } else {\n                    \r\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                if (folderPath != null) {\n                    dataSource.setFolder(registry.findFolderByPath(folderPath, true));\n                }\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                \r\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword()) {\n                            config.setUserPassword(creds.getUserPassword());\n                        }\n                    }\n                    {\n                        \r\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, \"auth-properties\"));\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    \r\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    \r\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n                }\n\n                \r\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                \r\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                \r\n                dataSource.getPreferenceStore().getProperties().putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                \r\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                \r\n                if (newDataSource) {\n                    registry.addDataSourceToList(dataSource);\n                    parseResults.addedDataSources.add(dataSource);\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                }\n            }\n\n            \r\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(jsonMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":333,"status":"N"},{"authorDate":"2021-08-25 15:41:19","commitOrder":39,"curCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n                if (creds.getProperties() != null) {\n                    curNetworkHandler.setSecureProperties(creds.getProperties());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","date":"2021-08-25 15:41:19","endLine":721,"groupId":"10556","id":72,"instanceNumber":2,"isCurCommit":1,"methodName":"parseNetworkHandlerConfig","params":"(@NullableDataSourceDescriptordataSource@@NullableDBWNetworkProfileprofile@@NotNullMap.Entry<String@Map<String@Object>>handlerObject)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/60/64e07fd2b9989d96205be81722d0c1c1478ded.src","preCode":"    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n            }\n            {\n                \r\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"M"}],"commitId":"4a11df887fc03d749ac7e29e6e1bebb2927bb482","commitMessage":"@@@Merge pull request #13308 from dbeaver/ssh-jump-server-support#11473\n\n#11473 SSH jump server support","date":"2021-08-25 15:41:19","modifiedFileCount":"12","status":"M","submitter":"Serge Rider"}]
