[{"authorTime":"2015-11-19 06:35:03","codes":[{"authorDate":"2015-07-17 20:46:56","commitOrder":4,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT /*+RULE*/ \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2015-07-17 20:46:56","endLine":589,"groupId":"6020","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f9/b54f410d6e7f722278d480d2f5acebf9fdf259.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT /*+RULE*/ \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"NB"},{"authorDate":"2015-11-19 06:35:03","commitOrder":4,"curCode":"    public List<PostgreTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-11-19 06:35:03","endLine":194,"groupId":"5117","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3b/5ca4b482fa3a8b33b51452660cefeaff146a5a.src","preCode":"    public List<PostgreTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"MB"}],"commitId":"f00adddb4764d8dcf7c94429349f4879b874a246","commitMessage":"@@@#67 PostgreSQL triggers. Generic model refactoring.\n\n\nFormer-commit-id: e191d635e29c47cbb6364155e2545a5d292cd24c","date":"2015-11-19 06:35:03","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-12-24 00:41:43","codes":[{"authorDate":"2015-07-17 20:46:56","commitOrder":5,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT /*+RULE*/ \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2015-07-17 20:46:56","endLine":589,"groupId":"6020","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f9/b54f410d6e7f722278d480d2f5acebf9fdf259.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT /*+RULE*/ \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":563,"status":"N"},{"authorDate":"2015-12-24 00:41:43","commitOrder":5,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-12-24 00:41:43","endLine":194,"groupId":"5117","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/73/b65be42fe74fde6565988f320eb7ea5078ae20.src","preCode":"    public List<PostgreTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"M"}],"commitId":"bc4f79eac9a9b5cb0afcb210ec2a975a3e9f78bc","commitMessage":"@@@#12 PostgreSQL model\n\n\nFormer-commit-id: 5b34b4beebd9b7d35dc0909f877a7ab31e3fcf44","date":"2015-12-24 00:41:43","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-12-24 00:41:43","codes":[{"authorDate":"2016-06-03 20:06:50","commitOrder":6,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2016-06-03 20:06:50","endLine":625,"groupId":"6020","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/2a/9af04ea6dbd275b07bd54069b344bed2a2287b.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT /*+RULE*/ \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":599,"status":"M"},{"authorDate":"2015-12-24 00:41:43","commitOrder":6,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-12-24 00:41:43","endLine":194,"groupId":"5117","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/73/b65be42fe74fde6565988f320eb7ea5078ae20.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"e9ee8b732217a44782cae3bb573cf2d4bc83a4bb","commitMessage":"@@@#360 RULE hint configuration\n\n\nFormer-commit-id: 280802587cb2c853329fb4acd63f08e7741fe02a","date":"2016-06-03 20:06:50","modifiedFileCount":"6","status":"M","submitter":"serge-rider"},{"authorTime":"2015-12-24 00:41:43","codes":[{"authorDate":"2017-03-19 19:41:06","commitOrder":7,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i, SYS.ALL_IND_COLUMNS ic\\n\" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2017-03-19 19:41:06","endLine":625,"groupId":"6020","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/65/772fe4f881e9bf5df04302bab3a05eea76555a.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i \\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\" i.OWNER=?\");\n            } else {\n                sql.append(\" i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":600,"status":"M"},{"authorDate":"2015-12-24 00:41:43","commitOrder":7,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-12-24 00:41:43","endLine":194,"groupId":"5117","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/73/b65be42fe74fde6565988f320eb7ea5078ae20.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"c994ba8f165c1f75288f6cfeefb9095b5cb04914","commitMessage":"@@@Merge branch 'devel' of https://github.com/serge-rider/dbeaver\n\n\nFormer-commit-id: cdb84c55a71481c781e9366599848ef81d4cb10f","date":"2017-03-19 19:41:06","modifiedFileCount":"145","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-12-24 00:41:43","codes":[{"authorDate":"2017-03-27 04:54:21","commitOrder":8,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i, SYS.ALL_IND_COLUMNS ic\\n\" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2017-03-27 04:54:21","endLine":639,"groupId":"6020","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/46/8b2a15a5b37101f026752b638b0c619211a250.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i, SYS.ALL_IND_COLUMNS ic\\n\" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":615,"status":"M"},{"authorDate":"2015-12-24 00:41:43","commitOrder":8,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-12-24 00:41:43","endLine":194,"groupId":"5117","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/73/b65be42fe74fde6565988f320eb7ea5078ae20.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"ebb9a308a189030b718241967e1636484f004124","commitMessage":"@@@#1165 Scheduled programs model\n\n\nFormer-commit-id: e74da101b3f626a023aec588791a5b97c5bd896b","date":"2017-03-27 04:54:21","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2015-12-24 00:41:43","codes":[{"authorDate":"2017-11-26 15:58:42","commitOrder":9,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM SYS.ALL_INDEXES i\\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN SYS.ALL_IND_EXPRESSIONS iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2017-11-26 15:58:42","endLine":661,"groupId":"6020","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/ca103705f1bc78be2836f722de4549b0a34a9e.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND\\n\" +\n                    \"FROM SYS.ALL_INDEXES i, SYS.ALL_IND_COLUMNS ic\\n\" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":635,"status":"M"},{"authorDate":"2015-12-24 00:41:43","commitOrder":9,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-12-24 00:41:43","endLine":194,"groupId":"5117","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/73/b65be42fe74fde6565988f320eb7ea5078ae20.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":143,"status":"N"}],"commitId":"da3aeff9ccc07b51824f31df5bd11292bee9b83c","commitMessage":"@@@#2573 Oracle: show index column expression\n\n\nFormer-commit-id: 4b1b63dfe3cf352fcb9da5a74ccab24ed85bd185","date":"2017-11-26 15:58:42","modifiedFileCount":"3","status":"M","submitter":"serge-rider"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2017-11-26 15:58:42","commitOrder":10,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM SYS.ALL_INDEXES i\\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN SYS.ALL_IND_EXPRESSIONS iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2017-11-26 15:58:42","endLine":661,"groupId":"6020","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/ca103705f1bc78be2836f722de4549b0a34a9e.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM SYS.ALL_INDEXES i\\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN SYS.ALL_IND_EXPRESSIONS iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":635,"status":"N"},{"authorDate":"2018-07-23 15:41:36","commitOrder":10,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":197,"groupId":"5117","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b1/28ee723df8f62bf9e8e14e7a4ee0200f6f5a06.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"}],"commitId":"f5dacff54df650fa052fcc6e82dac15c414085c3","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: f856da844bdb094ac789a5c775045caea0c36124","date":"2018-07-23 15:41:36","modifiedFileCount":"524","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2019-02-13 20:44:26","commitOrder":11,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2019-02-13 20:44:26","endLine":673,"groupId":"6020","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/18/059668aa36081757b3349d4402c409f1c5438d.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM SYS.ALL_INDEXES i\\n\" +\n                    \"JOIN SYS.ALL_IND_COLUMNS ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN SYS.ALL_IND_EXPRESSIONS iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"M"},{"authorDate":"2018-07-23 15:41:36","commitOrder":11,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":197,"groupId":"5117","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTabletable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b1/28ee723df8f62bf9e8e14e7a4ee0200f6f5a06.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"}],"commitId":"4c39b019d50e455d4a90fbba9b5f259f64426b17","commitMessage":"@@@#5179 Oracle: use DBA viewes when possible\n\n\nFormer-commit-id: 1e08c675ad2c0a51080f2ad213dc1a37740a139a","date":"2019-02-13 20:44:26","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-02 19:55:19","codes":[{"authorDate":"2019-02-13 20:44:26","commitOrder":12,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2019-02-13 20:44:26","endLine":673,"groupId":"6020","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/18/059668aa36081757b3349d4402c409f1c5438d.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"N"},{"authorDate":"2019-07-02 19:55:19","commitOrder":12,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2019-07-02 19:55:19","endLine":196,"groupId":"5117","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTableBasetable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/f7e2ff382752fee002b6826f9398b0f3f594bb.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTable table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"}],"commitId":"35c8a5c86f34a9accca540a7ad7f1e5420630e9b","commitMessage":"@@@Generic model refactoring (split tables and views)\n\n\nFormer-commit-id: f967aa59fa19129394816550531b85ccb2ea7b73","date":"2019-07-02 19:55:19","modifiedFileCount":"53","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2019-07-02 19:55:19","codes":[{"authorDate":"2020-10-29 16:43:32","commitOrder":13,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2020-10-29 16:43:32","endLine":1025,"groupId":"6020","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5b/f2e1a2bb242676261c271b9e5a9d7a04994d35.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic ON ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"LEFT OUTER JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex ON iex.INDEX_OWNER=i.OWNER AND iex.INDEX_NAME=i.INDEX_NAME AND iex.COLUMN_POSITION=ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"M"},{"authorDate":"2019-07-02 19:55:19","commitOrder":13,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2019-07-02 19:55:19","endLine":196,"groupId":"5117","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTableBasetable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/f7e2ff382752fee002b6826f9398b0f3f594bb.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"1cad76253207a96fcc9e519e1add16d6fd6cf688","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: ea776e68dbd8c4a1aafcf8f0cf5b5b3752fbcc26","date":"2020-10-29 16:43:32","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-02 19:55:19","codes":[{"authorDate":"2021-06-02 03:52:29","commitOrder":14,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME AND iex.COLUMN_POSITION(+)=ic.COLUMN_POSITION\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2021-06-02 03:52:29","endLine":1103,"groupId":"6020","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/32/d88f2cc72bc6edfd2408fc149badd729113241.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":1075,"status":"M"},{"authorDate":"2019-07-02 19:55:19","commitOrder":14,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2019-07-02 19:55:19","endLine":196,"groupId":"5117","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTableBasetable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/f7e2ff382752fee002b6826f9398b0f3f594bb.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"e118661e24f6415d78bba3aebdcc703a71af4082","commitMessage":"@@@Merge branch 'devel' of https://github.com/dbeaver/dbeaver into devel\n","date":"2021-06-02 03:52:29","modifiedFileCount":"15","status":"M","submitter":"serge-rider"},{"authorTime":"2019-07-02 19:55:19","codes":[{"authorDate":"2021-07-02 21:32:11","commitOrder":15,"curCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic \" +\n                    \"ON i.owner = ic.index_owner AND i.index_name = ic.index_name\\n\" +\n                    \"LEFT JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"ON iex.index_owner = i.owner AND iex.INDEX_NAME = i.INDEX_NAME AND iex.COLUMN_POSITION = ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","date":"2021-07-02 21:32:11","endLine":1107,"groupId":"12987","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"prepareObjectsStatement","params":"(JDBCSessionsession@OracleSchemaowner@OracleTablePhysicalforTable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0a/23df0c81641001d167c0bd1d0e88d63beff7ce.src","preCode":"        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTablePhysical forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic, \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"WHERE ic.INDEX_OWNER=i.OWNER AND ic.INDEX_NAME=i.INDEX_NAME \\n\" +\n                    \"AND iex.INDEX_OWNER(+)=i.OWNER AND iex.INDEX_NAME(+)=i.INDEX_NAME AND iex.COLUMN_POSITION(+)=ic.COLUMN_POSITION\\n\" +\n                    \"AND \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":1079,"status":"M"},{"authorDate":"2019-07-02 19:55:19","commitOrder":15,"curCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2019-07-02 19:55:19","endLine":196,"groupId":"12987","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTriggers","params":"(DBRProgressMonitormonitor@@NotNullGenericStructContainercontainer@@NullableGenericTableBasetable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/f7e2ff382752fee002b6826f9398b0f3f594bb.src","preCode":"    public List<PostgreGenericTrigger> loadTriggers(DBRProgressMonitor monitor, @NotNull GenericStructContainer container, @Nullable GenericTableBase table) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read triggers\")) {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT trigger_name,event_manipulation,action_order,action_condition,action_statement,action_orientation,action_timing\\n\" +\n                \"FROM INFORMATION_SCHEMA.TRIGGERS\\n\" +\n                \"WHERE \");\n            if (table == null) {\n                sql.append(\"trigger_schema=? AND event_object_table IS NULL\");\n            } else {\n                sql.append(\"event_object_schema=? AND event_object_table=?\");\n            }\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString())) {\n                if (table == null) {\n                    dbStat.setString(1, container.getSchema().getName());\n                } else {\n                    dbStat.setString(1, table.getSchema().getName());\n                    dbStat.setString(2, table.getName());\n                }\n                Map<String, PostgreGenericTrigger> result = new LinkedHashMap<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"trigger_name\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String manipulation = JDBCUtils.safeGetString(dbResult, \"event_manipulation\");\n                        PostgreGenericTrigger trigger = result.get(name);\n                        if (trigger != null) {\n                            trigger.addManipulation(manipulation);\n                            continue;\n                        }\n                        String description = \"\";\n                        trigger = new PostgreGenericTrigger(\n                            container,\n                            table,\n                            name,\n                            description,\n                            manipulation,\n                            JDBCUtils.safeGetString(dbResult, \"action_orientation\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_timing\"),\n                            JDBCUtils.safeGetString(dbResult, \"action_statement\"));\n                        result.put(name, trigger);\n                    }\n                }\n                return new ArrayList<>(result.values());\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/generic/PostgreMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"}],"commitId":"bb262cd3976422726b85a206b6bcbb7a3b3b0cb3","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-07-02 21:32:11","modifiedFileCount":"7","status":"M","submitter":"Serge Rider"}]
