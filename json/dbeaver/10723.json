[{"authorTime":"2020-04-28 17:26:37","codes":[{"authorDate":"2021-03-25 14:18:58","commitOrder":4,"curCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n        \r\n        autoIncrement = JDBCUtils.safeGetBoolean(dbResult, \"is_identity\");\n        return new VerticaTableColumn(table,\n            columnName,\n            typeName, valueType, sourceType, ordinalPos,\n            columnSize,\n            charLength, scale, precision, radix, notNull,\n            remarks, defaultValue, autoIncrement, autoGenerated\n        );\n    }\n","date":"2021-03-25 14:18:58","endLine":126,"groupId":"1717","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableColumnImpl","params":"(@NotNullDBRProgressMonitormonitor@JDBCResultSetdbResult@@NotNullGenericTableBasetable@StringcolumnName@StringtypeName@intvalueType@intsourceType@intordinalPos@longcolumnSize@longcharLength@Integerscale@Integerprecision@intradix@booleannotNull@Stringremarks@StringdefaultValue@booleanautoIncrement@booleanautoGenerated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/ce91d1f00c91bf07aad76d3f31f7b2ebc2032a.src","preCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n        \r\n        autoIncrement = JDBCUtils.safeGetBoolean(dbResult, \"is_identity\");\n        return new VerticaTableColumn(table,\n            columnName,\n            typeName, valueType, sourceType, ordinalPos,\n            columnSize,\n            charLength, scale, precision, radix, notNull,\n            remarks, defaultValue, autoIncrement, autoGenerated\n        );\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.vertica/src/org/jkiss/dbeaver/ext/vertica/model/VerticaMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"B"},{"authorDate":"2020-04-28 17:26:37","commitOrder":4,"curCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n\n        if(table.getSchema().getName().equals(\"SYS\") && table.isView()) {\n            ((HANADataSource)table.getDataSource()).initializeSysViewColumnUnits(monitor);\n            return new HANASysViewColumn(table,\n                    columnName,\n                    typeName, valueType, sourceType, ordinalPos,\n                    columnSize,\n                    charLength, scale, precision, radix, notNull,\n                    remarks, defaultValue, autoIncrement, autoGenerated\n                );\n        } else {\n            return new HANATableColumn(table,\n                columnName,\n                typeName, valueType, sourceType, ordinalPos,\n                columnSize,\n                charLength, scale, precision, radix, notNull,\n                remarks, defaultValue, autoIncrement, autoGenerated\n            );\n        }\n    }\n","date":"2020-04-28 17:26:37","endLine":338,"groupId":"1717","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableColumnImpl","params":"(@NotNullDBRProgressMonitormonitor@JDBCResultSetdbResult@@NotNullGenericTableBasetable@StringcolumnName@StringtypeName@intvalueType@intsourceType@intordinalPos@longcolumnSize@longcharLength@Integerscale@Integerprecision@intradix@booleannotNull@Stringremarks@StringdefaultValue@booleanautoIncrement@booleanautoGenerated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/df/630129aea708e35617c15dcc5db47c3237affc.src","preCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n\n        if(table.getSchema().getName().equals(\"SYS\") && table.isView()) {\n            ((HANADataSource)table.getDataSource()).initializeSysViewColumnUnits(monitor);\n            return new HANASysViewColumn(table,\n                    columnName,\n                    typeName, valueType, sourceType, ordinalPos,\n                    columnSize,\n                    charLength, scale, precision, radix, notNull,\n                    remarks, defaultValue, autoIncrement, autoGenerated\n                );\n        } else {\n            return new HANATableColumn(table,\n                columnName,\n                typeName, valueType, sourceType, ordinalPos,\n                columnSize,\n                charLength, scale, precision, radix, notNull,\n                remarks, defaultValue, autoIncrement, autoGenerated\n            );\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.hana/src/org/jkiss/dbeaver/ext/hana/model/HANAMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"NB"}],"commitId":"e7e015d004c6aa3f31a3cd6dedfdf9b2e6993f29","commitMessage":"@@@Merge pull request #11868 from dbeaver/vericaColumnCom#9760\n\n#9760 column read statement added with join on comments\n\nFormer-commit-id: 2028bc56cef2df1ac1a02c4d47bc86bbfc3dd4dc","date":"2021-03-25 14:18:58","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-28 17:26:37","codes":[{"authorDate":"2021-04-22 02:57:09","commitOrder":5,"curCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n        \r\n        if (dbResult != null) {\n            autoIncrement = JDBCUtils.safeGetBoolean(dbResult, \"is_identity\");\n        }\n        return new VerticaTableColumn(table,\n            columnName,\n            typeName, valueType, sourceType, ordinalPos,\n            columnSize,\n            charLength, scale, precision, radix, notNull,\n            remarks, defaultValue, autoIncrement, autoGenerated\n        );\n    }\n","date":"2021-04-22 02:57:09","endLine":130,"groupId":"10723","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createTableColumnImpl","params":"(@NotNullDBRProgressMonitormonitor@JDBCResultSetdbResult@@NotNullGenericTableBasetable@StringcolumnName@StringtypeName@intvalueType@intsourceType@intordinalPos@longcolumnSize@longcharLength@Integerscale@Integerprecision@intradix@booleannotNull@Stringremarks@StringdefaultValue@booleanautoIncrement@booleanautoGenerated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/0434b9916c934a79b7f2612cb37098a32ecca6.src","preCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n        \r\n        autoIncrement = JDBCUtils.safeGetBoolean(dbResult, \"is_identity\");\n        return new VerticaTableColumn(table,\n            columnName,\n            typeName, valueType, sourceType, ordinalPos,\n            columnSize,\n            charLength, scale, precision, radix, notNull,\n            remarks, defaultValue, autoIncrement, autoGenerated\n        );\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.vertica/src/org/jkiss/dbeaver/ext/vertica/model/VerticaMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":118,"status":"M"},{"authorDate":"2020-04-28 17:26:37","commitOrder":5,"curCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n\n        if(table.getSchema().getName().equals(\"SYS\") && table.isView()) {\n            ((HANADataSource)table.getDataSource()).initializeSysViewColumnUnits(monitor);\n            return new HANASysViewColumn(table,\n                    columnName,\n                    typeName, valueType, sourceType, ordinalPos,\n                    columnSize,\n                    charLength, scale, precision, radix, notNull,\n                    remarks, defaultValue, autoIncrement, autoGenerated\n                );\n        } else {\n            return new HANATableColumn(table,\n                columnName,\n                typeName, valueType, sourceType, ordinalPos,\n                columnSize,\n                charLength, scale, precision, radix, notNull,\n                remarks, defaultValue, autoIncrement, autoGenerated\n            );\n        }\n    }\n","date":"2020-04-28 17:26:37","endLine":338,"groupId":"10723","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTableColumnImpl","params":"(@NotNullDBRProgressMonitormonitor@JDBCResultSetdbResult@@NotNullGenericTableBasetable@StringcolumnName@StringtypeName@intvalueType@intsourceType@intordinalPos@longcolumnSize@longcharLength@Integerscale@Integerprecision@intradix@booleannotNull@Stringremarks@StringdefaultValue@booleanautoIncrement@booleanautoGenerated)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/df/630129aea708e35617c15dcc5db47c3237affc.src","preCode":"    public GenericTableColumn createTableColumnImpl(@NotNull DBRProgressMonitor monitor, JDBCResultSet dbResult, @NotNull GenericTableBase table, String columnName, String typeName, int valueType, int sourceType, int ordinalPos, long columnSize, long charLength, Integer scale, Integer precision, int radix, boolean notNull, String remarks, String defaultValue, boolean autoIncrement, boolean autoGenerated) throws DBException {\n\n        if(table.getSchema().getName().equals(\"SYS\") && table.isView()) {\n            ((HANADataSource)table.getDataSource()).initializeSysViewColumnUnits(monitor);\n            return new HANASysViewColumn(table,\n                    columnName,\n                    typeName, valueType, sourceType, ordinalPos,\n                    columnSize,\n                    charLength, scale, precision, radix, notNull,\n                    remarks, defaultValue, autoIncrement, autoGenerated\n                );\n        } else {\n            return new HANATableColumn(table,\n                columnName,\n                typeName, valueType, sourceType, ordinalPos,\n                columnSize,\n                charLength, scale, precision, radix, notNull,\n                remarks, defaultValue, autoIncrement, autoGenerated\n            );\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.hana/src/org/jkiss/dbeaver/ext/hana/model/HANAMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"N"}],"commitId":"9a48f77481b63155d737448879fbcb494e7a9fbe","commitMessage":"@@@Merge pull request #12146 from dbeaver/verticaNPE#12144\n\n#12144 avoid NPE in Vertica in create column method\n\nFormer-commit-id: 76711432150da5849fc394bc31ba0ce10d681301","date":"2021-04-22 02:57:09","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"}]
