[{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2019-04-02 01:47:10","commitOrder":1,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex());\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2019-04-02 01:47:11","endLine":197,"groupId":"15905","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4f/e015ebed0f4633073b94c28ac17e43142afcae.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex());\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2019-04-02 01:47:10","commitOrder":1,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> {\n            password = passwordText.getText();\n        });\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","date":"2019-04-02 01:47:11","endLine":76,"groupId":"14674","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e4/4063a52716b98f64ffed8b3e317a9dd8688c4e.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> {\n            password = passwordText.getText();\n        });\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateRoleDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"B"}],"commitId":"7a2a046c695d937956bf3cfc4af587277855d06a","commitMessage":"@@@#10 Model/UI refactoring\n\n\nFormer-commit-id: 6acc10c1a419b15f7094be6e35e04b63145dae91","date":"2019-04-02 01:47:11","modifiedFileCount":"39","status":"B","submitter":"Serge Rider"},{"authorTime":"2019-07-03 02:48:02","codes":[{"authorDate":"2019-04-02 01:47:10","commitOrder":2,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex());\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2019-04-02 01:47:11","endLine":197,"groupId":"15905","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4f/e015ebed0f4633073b94c28ac17e43142afcae.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex());\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"N"},{"authorDate":"2019-07-03 02:48:02","commitOrder":2,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","date":"2019-07-03 02:48:02","endLine":74,"groupId":"5763","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/af/b18f35dc916bc335f6f6eb69802e44486e2bc1.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> {\n            password = passwordText.getText();\n        });\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateRoleDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"3a2a09443c442987b4b707a1bd5bbb350ac4a7c4","commitMessage":"@@@UI configurator API refactoring\n\n\nFormer-commit-id: 351c30ba148c4536a158074308bcea13284c496b","date":"2019-07-03 02:48:02","modifiedFileCount":"56","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-07-03 02:48:02","codes":[{"authorDate":"2020-01-11 02:24:24","commitOrder":3,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2020-01-11 02:24:24","endLine":197,"groupId":"15905","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/88/554ed80381febedeacec40e16280c641a8833e.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex());\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-07-03 02:48:02","commitOrder":3,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","date":"2019-07-03 02:48:02","endLine":74,"groupId":"5763","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/af/b18f35dc916bc335f6f6eb69802e44486e2bc1.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateRoleDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"7b7841c4ef446bf77e8921f93a4607bf20bf77c0","commitMessage":"@@@Merge pull request #7601 from pekhterev/devel\n\nFixed tablespace option selection in the PostgreSQL database creation?\n\nFormer-commit-id: 65835025b7ad82f3140f79d93ce3e6e2ad8cb864","date":"2020-01-11 02:24:24","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-06-30 20:45:43","codes":[{"authorDate":"2020-06-30 20:45:43","commitOrder":4,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2020-06-30 20:45:43","endLine":197,"groupId":"15905","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ee/93de194f2b80d48d6bbf398e13ec0f54bbba8b.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-06-30 20:45:43","commitOrder":4,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","date":"2020-06-30 20:45:43","endLine":74,"groupId":"5763","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a0/00972cdf284af6b5ea56fceaf309416ea98a6e.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateRoleDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"M"}],"commitId":"b228000f249777e7b255451e8947181fd0fef636","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 8cdb7802545c47944701e95235b93054c67313d4","date":"2020-06-30 20:45:43","modifiedFileCount":"19","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-06-30 20:45:43","codes":[{"authorDate":"2020-10-22 03:34:12","commitOrder":5,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Create database\", 1);\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2020-10-22 03:34:12","endLine":200,"groupId":"5763","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d7/2fc3093319797b33797cfb1245b083a5475484.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2020-06-30 20:45:43","commitOrder":5,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","date":"2020-06-30 20:45:43","endLine":74,"groupId":"5763","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a0/00972cdf284af6b5ea56fceaf309416ea98a6e.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateRoleDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"1531780e27a6f66e59dfdd2d191dc6ba30b4b732","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: c304b479046b8eb2fa1c446038eb335db35c1c89","date":"2020-10-22 03:34:12","modifiedFileCount":"9","status":"M","submitter":"serge-rider"},{"authorTime":"2020-06-30 20:45:43","codes":[{"authorDate":"2021-01-17 00:41:37","commitOrder":6,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Create database\", 1);\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n                    allTemplates.addAll(dataSource.getDatabases().stream().map(PostgreDatabase::getName).collect(Collectors.toList()));\n                    allTemplates.sort(Comparator.naturalOrder());\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","date":"2021-01-17 00:41:37","endLine":204,"groupId":"101177","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/1abc078373ff05d3b76fead829d37fe9e93e04.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        boolean supportsRoles = dataSource.isServerVersionAtLeast(8, 1);\n        boolean supportsEncodings = dataSource.getServerType().supportsEncodings();\n        boolean supportsTablespaces = dataSource.getServerType().supportsTablespaces();\n        boolean supportsTemplates = dataSource.getServerType().supportsTemplates();\n\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_db_label_db_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        if (supportsRoles) {\n            userCombo = UIUtils.createLabelCombo(groupGeneral, PostgreMessages.dialog_create_db_label_owner, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            userCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    owner = allUsers.get(userCombo.getSelectionIndex());\n                }\n            });\n        }\n\n        final Composite groupDefinition = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_db_group_definition, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n        if (supportsTemplates) {\n            templateCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_template_db, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            templateCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    dbTemplate = templateCombo.getText();\n                }\n            });\n        }\n\n        if (supportsEncodings) {\n            encodingCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_encoding, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            encodingCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    encoding = allEncodings.get(encodingCombo.getSelectionIndex());\n                }\n            });\n        }\n        if (supportsTablespaces) {\n            tablespaceCombo = UIUtils.createLabelCombo(groupDefinition, PostgreMessages.dialog_create_db_label_tablesapce, SWT.BORDER | SWT.DROP_DOWN | SWT.READ_ONLY);\n            tablespaceCombo.addSelectionListener(new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    if (tablespaceCombo.getSelectionIndex() == 0) {\n                        tablespace = null;\n                    } else {\n                        tablespace = allTablespaces.get(tablespaceCombo.getSelectionIndex() - 1);\n                    }\n                }\n            });\n        }\n\n\n        new AbstractJob(\"Load users\") {\n\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Create database\", 1);\n                try {\n                    PostgreDatabase database = dataSource.getDefaultInstance();\n                    allUsers = supportsRoles ? new ArrayList<>(database.getUsers(monitor)) : null;\n                    allEncodings = supportsEncodings ? new ArrayList<>(database.getEncodings(monitor)) : null;\n                    allTablespaces = supportsTablespaces ? new ArrayList<>(database.getTablespaces(monitor)) : null;\n                    allTemplates = new ArrayList<>(dataSource.getTemplateDatabases(monitor));\n\n                    final PostgreRole dba = supportsRoles ? database.getDBA(monitor) : null;\n                    final String defUserName = dba == null ? \"\" : dba.getName();\n                    final PostgreCharset defCharset = supportsEncodings ? database.getDefaultEncoding(monitor) : null;\n                    final PostgreTablespace defTablespace = supportsTablespaces ? database.getDefaultTablespace(monitor) : null;\n\n                    UIUtils.syncExec(() -> {\n                        if (userCombo != null) {\n                            for (PostgreRole authId : allUsers) {\n                                String name = authId.getName();\n                                userCombo.add(name);\n                                if (name.equals(defUserName)) {\n                                    owner = authId;\n                                }\n                            }\n                            userCombo.setText(defUserName);\n                        }\n\n                        if (templateCombo != null) {\n                            templateCombo.add(\"\");\n                            for (String tpl : allTemplates) {\n                                templateCombo.add(tpl);\n                            }\n                        }\n\n                        if (encodingCombo != null) {\n                            for (PostgreCharset charset : allEncodings) {\n                                encodingCombo.add(charset.getName());\n                                if (charset == defCharset) {\n                                    encoding = defCharset;\n                                }\n                            }\n                            if (defCharset != null) {\n                                encodingCombo.setText(defCharset.getName());\n                            }\n                        }\n\n                        if (tablespaceCombo != null) {\n                            tablespaceCombo.add(PostgreMessages.dialog_create_db_tablespace_default);\n                            for (PostgreTablespace ts : allTablespaces) {\n                                tablespaceCombo.add(ts.getName());\n                                if (ts == defTablespace) {\n                                    tablespace = ts;\n                                }\n                            }\n                            tablespaceCombo.setText(defTablespace.getName());\n                        }\n                    });\n                } catch (DBException e) {\n                    return GeneralUtils.makeExceptionStatus(e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateDatabaseDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-06-30 20:45:43","commitOrder":6,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","date":"2020-06-30 20:45:43","endLine":74,"groupId":"101177","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a0/00972cdf284af6b5ea56fceaf309416ea98a6e.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        final Composite composite = super.createDialogArea(parent);\n\n        final Composite groupGeneral = UIUtils.createControlGroup(composite, PostgreMessages.dialog_create_role_group_general, 2, GridData.FILL_HORIZONTAL, SWT.NONE);\n\n        final Text nameText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_role_name, \"\"); \r\n        nameText.addModifyListener(e -> {\n            name = nameText.getText().trim();\n            getButton(IDialogConstants.OK_ID).setEnabled(!name.isEmpty());\n        });\n\n        final Text passwordText = UIUtils.createLabelText(groupGeneral, PostgreMessages.dialog_create_role_label_user_password, \"\", SWT.BORDER | SWT.PASSWORD); \r\n        passwordText.addModifyListener(e -> password = passwordText.getText());\n\n        Button isUserCheck = UIUtils.createCheckbox(groupGeneral, PostgreMessages.dialog_create_role_label_user_role, null, true, 2);\n        isUserCheck.addSelectionListener(new SelectionAdapter() {\n            @Override\n            public void widgetSelected(SelectionEvent e) {\n                isUser = isUserCheck.getSelection();\n                passwordText.setEnabled(isUser);\n            }\n        });\n\n        return composite;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreCreateRoleDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":50,"status":"N"}],"commitId":"810d072c59434e77c6826190a948656997981979","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 8f4b2ca24097722fcbe18fc0af3ace918a0035d6","date":"2021-01-17 00:41:37","modifiedFileCount":"11","status":"M","submitter":"serge-rider"}]
