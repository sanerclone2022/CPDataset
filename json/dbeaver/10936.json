[{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2019-03-05 21:10:55","commitOrder":4,"curCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof DBAPrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(\"<no objects>\");\n\n            this.currentPrivileges = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPrivileges = new DBAPrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPrivileges[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n    }\n","date":"2019-03-05 21:10:55","endLine":380,"groupId":"12210","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"updateObjectPermissions","params":"(List<DBSObject>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ff/994ccc4273c3e94ec18fbd4c55baf9a424c2a3.src","preCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof DBAPrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(\"<no objects>\");\n\n            this.currentPrivileges = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPrivileges = new DBAPrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPrivileges[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.acl/src/org/jkiss/dbeaver/ui/editors/acl/ObjectACLEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"NB"},{"authorDate":"2019-04-02 01:47:10","commitOrder":4,"curCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n        if (isRoleEditor()) {\n            \r\n            permissionTable.removeAll();\n\n            if (!CommonUtils.isEmpty(objects)) {\n                Class<?> objectType = objects.get(0).getClass();\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(objectType)) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n                permissionTable.getParent().layout(true);\n                UIUtils.packColumns(permissionTable, false);\n            }\n        }\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof PostgrePrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(PostgreMessages.dialog_object_description_text_no_objects);\n\n            this.currentPermissions = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPermissions = new PostgrePrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPermissions[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n        if (ArrayUtils.isEmpty(currentPermissions)) {\n            \r\n            for (TableItem item : permissionTable.getItems()) {\n                item.setChecked(false);\n                item.setText(1, \"\");\n                item.setText(2, \"\");\n            }\n        } else {\n            for (TableItem item : permissionTable.getItems()) {\n                PostgrePrivilegeType privType = (PostgrePrivilegeType) item.getData();\n                short perm = currentPermissions[0] == null ? PostgrePrivilege.NONE : currentPermissions[0].getPermission(privType);\n                item.setChecked((perm & PostgrePrivilege.GRANTED) != 0);\n                if ((perm & PostgrePrivilege.WITH_GRANT_OPTION) != 0) {\n                    item.setText(1, \"X\");\n                } else {\n                    item.setText(1, \"\");\n                }\n                if ((perm & PostgrePrivilege.WITH_HIERARCHY) != 0) {\n                    item.setText(2, \"X\");\n                } else {\n                    item.setText(2, \"\");\n                }\n            }\n        }\n    }\n","date":"2019-04-02 01:47:11","endLine":413,"groupId":"1144","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"updateObjectPermissions","params":"(List<DBSObject>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0a/3057bb19016cca4f4288c463d8efa61e4a18fe.src","preCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n        if (isRoleEditor()) {\n            \r\n            permissionTable.removeAll();\n\n            if (!CommonUtils.isEmpty(objects)) {\n                Class<?> objectType = objects.get(0).getClass();\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(objectType)) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n                permissionTable.getParent().layout(true);\n                UIUtils.packColumns(permissionTable, false);\n            }\n        }\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof PostgrePrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(PostgreMessages.dialog_object_description_text_no_objects);\n\n            this.currentPermissions = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPermissions = new PostgrePrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPermissions[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n        if (ArrayUtils.isEmpty(currentPermissions)) {\n            \r\n            for (TableItem item : permissionTable.getItems()) {\n                item.setChecked(false);\n                item.setText(1, \"\");\n                item.setText(2, \"\");\n            }\n        } else {\n            for (TableItem item : permissionTable.getItems()) {\n                PostgrePrivilegeType privType = (PostgrePrivilegeType) item.getData();\n                short perm = currentPermissions[0] == null ? PostgrePrivilege.NONE : currentPermissions[0].getPermission(privType);\n                item.setChecked((perm & PostgrePrivilege.GRANTED) != 0);\n                if ((perm & PostgrePrivilege.WITH_GRANT_OPTION) != 0) {\n                    item.setText(1, \"X\");\n                } else {\n                    item.setText(1, \"\");\n                }\n                if ((perm & PostgrePrivilege.WITH_HIERARCHY) != 0) {\n                    item.setText(2, \"X\");\n                } else {\n                    item.setText(2, \"\");\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/editors/PostgresRolePrivilegesEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":325,"status":"B"}],"commitId":"7a2a046c695d937956bf3cfc4af587277855d06a","commitMessage":"@@@#10 Model/UI refactoring\n\n\nFormer-commit-id: 6acc10c1a419b15f7094be6e35e04b63145dae91","date":"2019-04-02 01:47:11","modifiedFileCount":"39","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-05-21 22:25:22","codes":[{"authorDate":"2019-03-05 21:10:55","commitOrder":5,"curCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof DBAPrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(\"<no objects>\");\n\n            this.currentPrivileges = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPrivileges = new DBAPrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPrivileges[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n    }\n","date":"2019-03-05 21:10:55","endLine":380,"groupId":"10936","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"updateObjectPermissions","params":"(List<DBSObject>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ff/994ccc4273c3e94ec18fbd4c55baf9a424c2a3.src","preCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof DBAPrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(\"<no objects>\");\n\n            this.currentPrivileges = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPrivileges = new DBAPrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPrivileges[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.acl/src/org/jkiss/dbeaver/ui/editors/acl/ObjectACLEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"N"},{"authorDate":"2021-05-21 22:25:22","commitOrder":5,"curCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n        if (isRoleEditor()) {\n            \r\n            permissionTable.removeAll();\n\n            if (!CommonUtils.isEmpty(objects)) {\n                Class<?> objectType = objects.get(0).getClass();\n                for (PostgrePrivilegeType pt : getDatabaseObject().getDataSource().getSupportedPrivilegeTypes()) {\n                    if (!pt.isValid() || !pt.supportsType(objectType)) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n                permissionTable.getParent().layout(true);\n                UIUtils.packColumns(permissionTable, false);\n            }\n        }\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof PostgrePrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(PostgreMessages.dialog_object_description_text_no_objects);\n\n            this.currentPermissions = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPermissions = new PostgrePrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPermissions[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n        if (ArrayUtils.isEmpty(currentPermissions)) {\n            \r\n            for (TableItem item : permissionTable.getItems()) {\n                item.setChecked(false);\n                item.setText(1, \"\");\n                item.setText(2, \"\");\n            }\n        } else {\n            for (TableItem item : permissionTable.getItems()) {\n                PostgrePrivilegeType privType = (PostgrePrivilegeType) item.getData();\n                short perm = currentPermissions[0] == null ? PostgrePrivilege.NONE : currentPermissions[0].getPermission(privType);\n                item.setChecked((perm & PostgrePrivilege.GRANTED) != 0);\n                if ((perm & PostgrePrivilege.WITH_GRANT_OPTION) != 0) {\n                    item.setText(1, \"X\");\n                } else {\n                    item.setText(1, \"\");\n                }\n                if ((perm & PostgrePrivilege.WITH_HIERARCHY) != 0) {\n                    item.setText(2, \"X\");\n                } else {\n                    item.setText(2, \"\");\n                }\n            }\n        }\n    }\n","date":"2021-05-21 22:25:22","endLine":432,"groupId":"10936","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"updateObjectPermissions","params":"(List<DBSObject>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/13/bb8dbf21ab2757d55d072fc443197cc5762a3c.src","preCode":"    private void updateObjectPermissions(List<DBSObject> objects) {\n\n        boolean hasBadObjects = CommonUtils.isEmpty(objects);\n\n        if (isRoleEditor()) {\n            \r\n            permissionTable.removeAll();\n\n            if (!CommonUtils.isEmpty(objects)) {\n                Class<?> objectType = objects.get(0).getClass();\n                for (PostgrePrivilegeType pt : PostgrePrivilegeType.values()) {\n                    if (!pt.isValid() || !pt.supportsType(objectType)) {\n                        continue;\n                    }\n                    TableItem privItem = new TableItem(permissionTable, SWT.LEFT);\n                    privItem.setText(0, pt.name());\n                    privItem.setData(pt);\n                }\n                permissionTable.getParent().layout(true);\n                UIUtils.packColumns(permissionTable, false);\n            }\n        }\n\n        StringBuilder objectNames = new StringBuilder();\n        if (!hasBadObjects) {\n            for (DBSObject object : objects) {\n                if (!(object instanceof PostgrePrivilegeOwner)) {\n                    hasBadObjects = true;\n                    break;\n                }\n                if (objectNames.length() > 0) objectNames.append(\", \");\n                objectNames.append(DBUtils.getObjectFullName(object.getDataSource(), object, DBPEvaluationContext.DML));\n            }\n        }\n        boolean editEnabled;\n        if (hasBadObjects) {\n            objectDescriptionText.setText(PostgreMessages.dialog_object_description_text_no_objects);\n\n            this.currentPermissions = null;\n            this.currentObjects = null;\n            editEnabled = false;\n\n        } else {\n            objectDescriptionText.setText(objectNames.toString());\n\n            this.currentObjects = objects.toArray(new DBSObject[0]);\n            this.currentPermissions = new PostgrePrivilege[this.currentObjects.length];\n            for (int i = 0; i < currentObjects.length; i++) {\n                this.currentPermissions[i] = getObjectPermissions(currentObjects[i]);\n            }\n            editEnabled = !CommonUtils.isEmpty(objects);\n        }\n\n        if (editEnabled) {\n            if (permissionsEnable != null) {\n                permissionsEnable.restore();\n                permissionsEnable = null;\n            }\n        } else {\n            if (permissionsEnable == null) {\n                permissionsEnable = ControlEnableState.disable(permEditPanel);\n            }\n        }\n\n        if (ArrayUtils.isEmpty(currentPermissions)) {\n            \r\n            for (TableItem item : permissionTable.getItems()) {\n                item.setChecked(false);\n                item.setText(1, \"\");\n                item.setText(2, \"\");\n            }\n        } else {\n            for (TableItem item : permissionTable.getItems()) {\n                PostgrePrivilegeType privType = (PostgrePrivilegeType) item.getData();\n                short perm = currentPermissions[0] == null ? PostgrePrivilege.NONE : currentPermissions[0].getPermission(privType);\n                item.setChecked((perm & PostgrePrivilege.GRANTED) != 0);\n                if ((perm & PostgrePrivilege.WITH_GRANT_OPTION) != 0) {\n                    item.setText(1, \"X\");\n                } else {\n                    item.setText(1, \"\");\n                }\n                if ((perm & PostgrePrivilege.WITH_HIERARCHY) != 0) {\n                    item.setText(2, \"X\");\n                } else {\n                    item.setText(2, \"\");\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/editors/PostgresRolePrivilegesEditor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"}],"commitId":"f2f7bb78e6641cab5685dd2c493ffa9665398d2e","commitMessage":"@@@Merge pull request #12543 from dbeaver/redshift-users-support#11912\n\n#11912 Redshift: Add support for users and permissions","date":"2021-05-21 22:25:22","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"}]
