[{"authorTime":"2021-06-03 22:10:36","codes":[{"authorDate":"2021-06-03 22:10:36","commitOrder":1,"curCode":"    public void testColumnNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", t -> {\n                    t.attribute(\"Col1\");\n                    t.attribute(\"Col2\");\n                    t.attribute(\"Col3\");\n                });\n                s.table(\"Table2\", t -> {\n                    t.attribute(\"Col4\");\n                    t.attribute(\"Col5\");\n                    t.attribute(\"Col6\");\n                });\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT | FROM Table1\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE |\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE Table1.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 t WHERE t.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t.| FROM Table1 t\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t2.| FROM Table1 t, Table2 t2\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col6\", proposals.get(2).getReplacementString());\n        }\n    }\n","date":"2021-06-03 22:10:36","endLine":133,"groupId":"6620","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testColumnNamesCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ed/da650d4f68cced4930f64e64de5a8c33a69252.src","preCode":"    public void testColumnNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", t -> {\n                    t.attribute(\"Col1\");\n                    t.attribute(\"Col2\");\n                    t.attribute(\"Col3\");\n                });\n                s.table(\"Table2\", t -> {\n                    t.attribute(\"Col4\");\n                    t.attribute(\"Col5\");\n                    t.attribute(\"Col6\");\n                });\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT | FROM Table1\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE |\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE Table1.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 t WHERE t.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t.| FROM Table1 t\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t2.| FROM Table1 t, Table2 t2\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col6\", proposals.get(2).getReplacementString());\n        }\n    }\n","realPath":"test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/SQLCompletionAnalyzerTest.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"B"},{"authorDate":"2021-06-03 22:10:36","commitOrder":1,"curCode":"    public void testTableNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", empty());\n                s.table(\"Table2\", empty());\n                s.table(\"Table3\", empty());\n                s.table(\"Tbl4\", empty());\n                s.table(\"Tbl5\", empty());\n                s.table(\"Tbl6\", empty());\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM |\");\n            Assert.assertTrue(proposals.size() >= 3);\n            Assert.assertEquals(\"Table1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Table2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Table3\", proposals.get(2).getReplacementString());\n\n            \r\n            \r\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM Tb|\");\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Tbl4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Tbl5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Tbl6\", proposals.get(2).getReplacementString());\n        }\n    }\n","date":"2021-06-03 22:10:36","endLine":203,"groupId":"6618","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableNamesCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ed/da650d4f68cced4930f64e64de5a8c33a69252.src","preCode":"    public void testTableNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", empty());\n                s.table(\"Table2\", empty());\n                s.table(\"Table3\", empty());\n                s.table(\"Tbl4\", empty());\n                s.table(\"Tbl5\", empty());\n                s.table(\"Tbl6\", empty());\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM |\");\n            Assert.assertTrue(proposals.size() >= 3);\n            Assert.assertEquals(\"Table1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Table2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Table3\", proposals.get(2).getReplacementString());\n\n            \r\n            \r\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM Tb|\");\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Tbl4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Tbl5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Tbl6\", proposals.get(2).getReplacementString());\n        }\n    }\n","realPath":"test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/SQLCompletionAnalyzerTest.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"5342fa065b236568c46fc350f12cba7d7134cdf0","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-06-03 22:10:36","modifiedFileCount":"0","status":"B","submitter":"Serge Rider"},{"authorTime":"2021-06-03 22:10:36","codes":[{"authorDate":"2021-06-25 18:30:11","commitOrder":2,"curCode":"    public void testColumnNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", t -> {\n                    t.attribute(\"Col1\");\n                    t.attribute(\"Col2\");\n                    t.attribute(\"Col3\");\n                });\n                s.table(\"Table2\", t -> {\n                    t.attribute(\"Col4\");\n                    t.attribute(\"Col5\");\n                    t.attribute(\"Col6\");\n                });\n                s.table(\"Table 3\", t -> {\n                    t.attribute(\"Col7\");\n                    t.attribute(\"Col8\");\n                    t.attribute(\"Col9\");\n                });\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT | FROM Table1\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE |\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE Table1.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 t WHERE t.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                    .request(\"SELECT * FROM \\\"Table 3\\\" t WHERE t.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col7\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col8\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col9\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t.| FROM Table1 t\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t2.| FROM Table1 t, Table2 t2\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col6\", proposals.get(2).getReplacementString());\n        }\n    }\n","date":"2021-06-25 18:30:11","endLine":148,"groupId":"1068","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testColumnNamesCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7a/03a6a672323751bb273bc9a21136f2b193d182.src","preCode":"    public void testColumnNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", t -> {\n                    t.attribute(\"Col1\");\n                    t.attribute(\"Col2\");\n                    t.attribute(\"Col3\");\n                });\n                s.table(\"Table2\", t -> {\n                    t.attribute(\"Col4\");\n                    t.attribute(\"Col5\");\n                    t.attribute(\"Col6\");\n                });\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT | FROM Table1\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE |\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 WHERE Table1.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT * FROM Table1 t WHERE t.|\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t.| FROM Table1 t\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col3\", proposals.get(2).getReplacementString());\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request\n                .request(\"SELECT t2.| FROM Table1 t, Table2 t2\");\n\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Col4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Col5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Col6\", proposals.get(2).getReplacementString());\n        }\n    }\n","realPath":"test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/SQLCompletionAnalyzerTest.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"},{"authorDate":"2021-06-03 22:10:36","commitOrder":2,"curCode":"    public void testTableNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", empty());\n                s.table(\"Table2\", empty());\n                s.table(\"Table3\", empty());\n                s.table(\"Tbl4\", empty());\n                s.table(\"Tbl5\", empty());\n                s.table(\"Tbl6\", empty());\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM |\");\n            Assert.assertTrue(proposals.size() >= 3);\n            Assert.assertEquals(\"Table1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Table2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Table3\", proposals.get(2).getReplacementString());\n\n            \r\n            \r\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM Tb|\");\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Tbl4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Tbl5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Tbl6\", proposals.get(2).getReplacementString());\n        }\n    }\n","date":"2021-06-03 22:10:36","endLine":203,"groupId":"1068","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testTableNamesCompletion","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ed/da650d4f68cced4930f64e64de5a8c33a69252.src","preCode":"    public void testTableNamesCompletion() throws DBException {\n        final RequestResult request = RequestBuilder\n            .tables(s -> {\n                s.table(\"Table1\", empty());\n                s.table(\"Table2\", empty());\n                s.table(\"Table3\", empty());\n                s.table(\"Tbl4\", empty());\n                s.table(\"Tbl5\", empty());\n                s.table(\"Tbl6\", empty());\n            })\n            .prepare();\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM |\");\n            Assert.assertTrue(proposals.size() >= 3);\n            Assert.assertEquals(\"Table1\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Table2\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Table3\", proposals.get(2).getReplacementString());\n\n            \r\n            \r\n        }\n\n        {\n            final List<SQLCompletionProposalBase> proposals = request.request(\"SELECT * FROM Tb|\");\n            Assert.assertEquals(3, proposals.size());\n            Assert.assertEquals(\"Tbl4\", proposals.get(0).getReplacementString());\n            Assert.assertEquals(\"Tbl5\", proposals.get(1).getReplacementString());\n            Assert.assertEquals(\"Tbl6\", proposals.get(2).getReplacementString());\n        }\n    }\n","realPath":"test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/analyzer/SQLCompletionAnalyzerTest.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"N"}],"commitId":"e30736bab9ecf630ac12691e89cf8b9308700427","commitMessage":"@@@Merge pull request #12985 from dbeaver/completionTests#12159\n\n#12159 more tests for quoted tables","date":"2021-06-25 18:30:11","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"}]
