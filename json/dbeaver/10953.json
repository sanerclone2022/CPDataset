[{"authorTime":"2020-03-21 23:14:30","codes":[{"authorDate":"2020-08-11 22:44:17","commitOrder":6,"curCode":"    private OracleConstants.ConnectionType getConnectionType(DBPConnectionConfiguration connectionInfo) {\n        OracleConstants.ConnectionType connectionType;\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        return connectionType;\n    }\n","date":"2020-08-11 22:44:17","endLine":138,"groupId":"1364","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getConnectionType","params":"(DBPConnectionConfigurationconnectionInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/da/c48a34b222ece0322535efa322810d8fddd2bc.src","preCode":"    private OracleConstants.ConnectionType getConnectionType(DBPConnectionConfiguration connectionInfo) {\n        OracleConstants.ConnectionType connectionType;\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        return connectionType;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/OracleDataSourceProvider.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"B"},{"authorDate":"2020-03-21 23:14:30","commitOrder":6,"curCode":"    public void loadSettings()\n    {\n        super.loadSettings();\n\n        \r\n        DBPConnectionConfiguration connectionInfo = site.getActiveDataSource().getConnectionConfiguration();\n\n        final String sidService = connectionInfo.getProviderProperty(OracleConstants.PROP_SID_SERVICE);\n        if (sidService != null) {\n            sidServiceCombo.setText(OracleConnectionType.valueOf(sidService).getTitle());\n        }\n\n        \r\n        oraHomeSelector.populateHomes(site.getDriver(), connectionInfo.getClientHomeId(), site.isNew());\n        \r\n\n        if (tnsNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(this::populateTnsNameCombo);\n        }\n\n        if (serviceNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(() -> {\n                for (String alias : getAvailableServiceNames()) {\n                    serviceNameCombo.add(alias);\n                }\n            });\n        }\n\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        connectionTypeFolder.setSelection(connectionType.ordinal());\n\n        switch (connectionType) {\n            case BASIC:\n                hostText.setText(CommonUtils.notEmpty(connectionInfo.getHostName()));\n                if (!CommonUtils.isEmpty(connectionInfo.getHostPort())) {\n                    portText.setText(connectionInfo.getHostPort());\n                } else if (site.getDriver().getDefaultPort() != null) {\n                    portText.setText(site.getDriver().getDefaultPort());\n                } else {\n                    portText.setText(\"\");\n                }\n\n                serviceNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                break;\n            case TNS: {\n                tnsNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                String tnsPathProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_TNS_PATH);\n\r\n\r\n\r\n                if (tnsPathProperty != null) {\n                    tnsPathText.setText(tnsPathProperty);\n                }\n                break;\n            }\n            case CUSTOM:\n                connectionUrlText.setText(CommonUtils.notEmpty(connectionInfo.getUrl()));\n                break;\n        }\n\n        activated = true;\n    }\n","date":"2020-03-21 23:14:30","endLine":363,"groupId":"3158","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fd/a5dac53641fd9f03833c5d5b4991d5925d58b3.src","preCode":"    public void loadSettings()\n    {\n        super.loadSettings();\n\n        \r\n        DBPConnectionConfiguration connectionInfo = site.getActiveDataSource().getConnectionConfiguration();\n\n        final String sidService = connectionInfo.getProviderProperty(OracleConstants.PROP_SID_SERVICE);\n        if (sidService != null) {\n            sidServiceCombo.setText(OracleConnectionType.valueOf(sidService).getTitle());\n        }\n\n        \r\n        oraHomeSelector.populateHomes(site.getDriver(), connectionInfo.getClientHomeId(), site.isNew());\n        \r\n\n        if (tnsNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(this::populateTnsNameCombo);\n        }\n\n        if (serviceNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(() -> {\n                for (String alias : getAvailableServiceNames()) {\n                    serviceNameCombo.add(alias);\n                }\n            });\n        }\n\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        connectionTypeFolder.setSelection(connectionType.ordinal());\n\n        switch (connectionType) {\n            case BASIC:\n                hostText.setText(CommonUtils.notEmpty(connectionInfo.getHostName()));\n                if (!CommonUtils.isEmpty(connectionInfo.getHostPort())) {\n                    portText.setText(connectionInfo.getHostPort());\n                } else if (site.getDriver().getDefaultPort() != null) {\n                    portText.setText(site.getDriver().getDefaultPort());\n                } else {\n                    portText.setText(\"\");\n                }\n\n                serviceNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                break;\n            case TNS: {\n                tnsNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                String tnsPathProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_TNS_PATH);\n\r\n\r\n\r\n                if (tnsPathProperty != null) {\n                    tnsPathText.setText(tnsPathProperty);\n                }\n                break;\n            }\n            case CUSTOM:\n                connectionUrlText.setText(CommonUtils.notEmpty(connectionInfo.getUrl()));\n                break;\n        }\n\n        activated = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle.ui/src/org/jkiss/dbeaver/ext/oracle/ui/views/OracleConnectionPage.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"NB"}],"commitId":"af4a408938c6162362f7773cc50087c88bac4705","commitMessage":"@@@#9102 Show target address for non host-based connections (TNS). + show port number.\n\n\nFormer-commit-id: 55f1254e042731b3971f6813d8266a9c9a81478d","date":"2020-08-11 22:44:17","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-13 21:33:45","codes":[{"authorDate":"2020-08-11 22:44:17","commitOrder":7,"curCode":"    private OracleConstants.ConnectionType getConnectionType(DBPConnectionConfiguration connectionInfo) {\n        OracleConstants.ConnectionType connectionType;\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        return connectionType;\n    }\n","date":"2020-08-11 22:44:17","endLine":138,"groupId":"10953","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getConnectionType","params":"(DBPConnectionConfigurationconnectionInfo)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/da/c48a34b222ece0322535efa322810d8fddd2bc.src","preCode":"    private OracleConstants.ConnectionType getConnectionType(DBPConnectionConfiguration connectionInfo) {\n        OracleConstants.ConnectionType connectionType;\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        return connectionType;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/OracleDataSourceProvider.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":129,"status":"N"},{"authorDate":"2020-08-13 21:33:45","commitOrder":7,"curCode":"    public void loadSettings()\n    {\n        super.loadSettings();\n\n        \r\n        DBPConnectionConfiguration connectionInfo = site.getActiveDataSource().getConnectionConfiguration();\n\n        final String sidService = connectionInfo.getProviderProperty(OracleConstants.PROP_SID_SERVICE);\n        if (sidService != null) {\n            sidServiceCombo.setText(OracleConnectionType.valueOf(sidService).getTitle());\n        }\n\n        \r\n        oraHomeSelector.populateHomes(site.getDriver(), connectionInfo.getClientHomeId(), site.isNew());\n        \r\n\n        if (tnsNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(this::populateTnsNameCombo);\n        }\n\n        if (serviceNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(() -> {\n                for (String alias : getAvailableServiceNames()) {\n                    serviceNameCombo.add(alias);\n                }\n            });\n        }\n\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        connectionTypeFolder.setSelection(connectionType.ordinal());\n\n        switch (connectionType) {\n            case BASIC:\n                if (site.isNew() && CommonUtils.isEmpty(connectionInfo.getDatabaseName())) {\n                    hostText.setText(\"localhost\");\n                } else {\n                    hostText.setText(CommonUtils.notEmpty(connectionInfo.getHostName()));\n                }\n                if (!CommonUtils.isEmpty(connectionInfo.getHostPort())) {\n                    portText.setText(connectionInfo.getHostPort());\n                } else {\n                    portText.setText(CommonUtils.notEmpty(site.getDriver().getDefaultPort()));\n                }\n\n                if (site.isNew() && CommonUtils.isEmpty(connectionInfo.getDatabaseName())) {\n                    serviceNameCombo.setText(CommonUtils.notEmpty(site.getDriver().getDefaultDatabase()));\n                } else {\n                    serviceNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                }\n                break;\n            case TNS: {\n                tnsNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                String tnsPathProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_TNS_PATH);\n\r\n\r\n\r\n                if (tnsPathProperty != null) {\n                    tnsPathText.setText(tnsPathProperty);\n                }\n                break;\n            }\n            case CUSTOM:\n                connectionUrlText.setText(CommonUtils.notEmpty(connectionInfo.getUrl()));\n                break;\n        }\n\n        activated = true;\n    }\n","date":"2020-08-13 21:33:45","endLine":372,"groupId":"10953","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c9/cad578376b51f4afe59ffb35ada5991bf4faed.src","preCode":"    public void loadSettings()\n    {\n        super.loadSettings();\n\n        \r\n        DBPConnectionConfiguration connectionInfo = site.getActiveDataSource().getConnectionConfiguration();\n\n        final String sidService = connectionInfo.getProviderProperty(OracleConstants.PROP_SID_SERVICE);\n        if (sidService != null) {\n            sidServiceCombo.setText(OracleConnectionType.valueOf(sidService).getTitle());\n        }\n\n        \r\n        oraHomeSelector.populateHomes(site.getDriver(), connectionInfo.getClientHomeId(), site.isNew());\n        \r\n\n        if (tnsNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(this::populateTnsNameCombo);\n        }\n\n        if (serviceNameCombo.getItemCount() == 0) {\n            UIUtils.asyncExec(() -> {\n                for (String alias : getAvailableServiceNames()) {\n                    serviceNameCombo.add(alias);\n                }\n            });\n        }\n\n        String conTypeProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_CONNECTION_TYPE);\n        if (conTypeProperty != null) {\n            connectionType = OracleConstants.ConnectionType.valueOf(CommonUtils.toString(conTypeProperty));\n        } else {\n            connectionType = OracleConstants.ConnectionType.BASIC;\n        }\n        connectionTypeFolder.setSelection(connectionType.ordinal());\n\n        switch (connectionType) {\n            case BASIC:\n                hostText.setText(CommonUtils.notEmpty(connectionInfo.getHostName()));\n                if (!CommonUtils.isEmpty(connectionInfo.getHostPort())) {\n                    portText.setText(connectionInfo.getHostPort());\n                } else if (site.getDriver().getDefaultPort() != null) {\n                    portText.setText(site.getDriver().getDefaultPort());\n                } else {\n                    portText.setText(\"\");\n                }\n\n                serviceNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                break;\n            case TNS: {\n                tnsNameCombo.setText(CommonUtils.notEmpty(connectionInfo.getDatabaseName()));\n                String tnsPathProperty = connectionInfo.getProviderProperty(OracleConstants.PROP_TNS_PATH);\n\r\n\r\n\r\n                if (tnsPathProperty != null) {\n                    tnsPathText.setText(tnsPathProperty);\n                }\n                break;\n            }\n            case CUSTOM:\n                connectionUrlText.setText(CommonUtils.notEmpty(connectionInfo.getUrl()));\n                break;\n        }\n\n        activated = true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle.ui/src/org/jkiss/dbeaver/ext/oracle/ui/views/OracleConnectionPage.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":300,"status":"M"}],"commitId":"10575fbe3b0e700339915a18a666e69fc9ca2630","commitMessage":"@@@#9520 Driver config.  driver editor.  databases config (pg.  mysql.  oracle)\n\n\nFormer-commit-id: 2f9a85189a6f420cf5e0ba216a52a6a26f5080bb","date":"2020-08-13 21:33:45","modifiedFileCount":"9","status":"M","submitter":"Serge Rider"}]
