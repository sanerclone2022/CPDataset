[{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2018-08-15 00:53:44","commitOrder":1,"curCode":"    private void showEditor(final TreeItem item, boolean isDef)\n    {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, SWT.LEFT);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        prop.propertySource.setPropertyValue(\n                            null,\n                            prop.property.getId(),\n                            value);\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, 1);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2018-08-15 00:53:44","endLine":480,"groupId":"11120","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef)\n    {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, SWT.LEFT);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        prop.propertySource.setPropertyValue(\n                            null,\n                            prop.property.getId(),\n                            value);\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, 1);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"B"},{"authorDate":"2018-08-15 00:53:44","commitOrder":1,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"B"}],"commitId":"aa14dc53c5c488a5ae30d1a1ef21f3c0f0ddea31","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 82f7a4fe56fccb9cb54aecddfd86d69cd795214f","date":"2018-08-15 00:53:44","modifiedFileCount":"162","status":"B","submitter":"serge@jkiss.org"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2018-11-19 00:54:11","commitOrder":2,"curCode":"    private void showEditor(final TreeItem item, boolean isDef)\n    {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        prop.propertySource.setPropertyValue(\n                            null,\n                            prop.property.getId(),\n                            value);\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, 1);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2018-11-19 00:54:11","endLine":488,"groupId":"11120","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ab/dc97a791b60d25f14a24b86d54bc2eda59c167.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef)\n    {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, SWT.LEFT);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        prop.propertySource.setPropertyValue(\n                            null,\n                            prop.property.getId(),\n                            value);\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, 1);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":398,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":2,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"95af41cc685d343ecc230a95be9fda7c14dbd2c6","commitMessage":"@@@#4527 Mask *password* properties\n\n\nFormer-commit-id: 3b813819a8ea9dbd215bdc7ad1e3a9240272234d","date":"2018-11-19 00:54:11","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2019-09-15 23:57:43","commitOrder":3,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            Object oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2019-09-15 23:57:43","endLine":559,"groupId":"292","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/77/124cf87d0be2d6a8cb4983815ec5eb9dd99880.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef)\n    {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        prop.propertySource.setPropertyValue(\n                            null,\n                            prop.property.getId(),\n                            value);\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, 1);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":3,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"9ff2cdf81d6b0e765c7f9e5d3700829589e785e9","commitMessage":"@@@#6748 Property viewer: support new props and property name editor\n\n\nFormer-commit-id: cbb05f83f1993c4c66a74db8926bcf86b6e93f73","date":"2019-09-15 23:57:43","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2020-06-10 23:35:44","commitOrder":4,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            Object oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2020-06-10 23:35:44","endLine":560,"groupId":"292","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a0/b7410cf51212a290650ea18cdc56f3cc5c63d4.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = UIUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            Object oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":4,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"c945b45e936c039bf46bb4fd2aa25b9d20f4c4ef","commitMessage":"@@@Property validator model\n\n\nFormer-commit-id: 6ef9daf3bdf14f2baf29c6e49245724c9dc15594","date":"2020-06-10 23:35:44","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2020-06-19 15:17:22","commitOrder":5,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            Object oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2020-06-19 15:17:22","endLine":564,"groupId":"292","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0b/b9c6d37c30fa89882a23b57d3dca18f57e20c3.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            Object oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(propertyValue);\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":5,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"a41ab32728fc0caa5836ecc15f3136d25a3de3ab","commitMessage":"@@@Merge pull request #9024 from dbeaver/trimspace#8602\n\n#8602 trim spaces in editing mode\n\nFormer-commit-id: 59ac374307d5795f2df1dfd1e15102397d5cd6a9","date":"2020-06-19 15:17:22","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2020-07-05 17:55:54","commitOrder":6,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            String oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2020-07-05 17:55:54","endLine":564,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/9835c3d8594b71c5f31ea9bd6e7f7d63bbe640.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            Object oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":455,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":6,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"a735616187ae38240f70bfebbd04711c5174962e","commitMessage":"@@@Properties model refactoring\n\n\nFormer-commit-id: 16ca7c8c54e6a5dfe239a57ba98edc8f1f273349","date":"2020-07-05 17:55:54","modifiedFileCount":"58","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2020-08-11 17:01:22","commitOrder":7,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            String oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2020-08-11 17:01:22","endLine":565,"groupId":"292","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0e/1ab68cd45780dea9855ac636ae7074806fb5c8.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (!CommonUtils.equalObjects(oldValue, value)) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            String oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":456,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":7,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"b532233c91676ad7592905b0e7d94135f157a174","commitMessage":"@@@Property tree viewer: edited value compare fix\n\n\nFormer-commit-id: ebdf1a6a227abbbe8cbbafe20b4aeb7570bbf87f","date":"2020-08-11 17:01:22","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2021-08-24 00:12:39","commitOrder":8,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    try {\n                        \r\n                        final Object value = cellEditor.getValue();\n                        final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                        if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                            \r\n                            return;\n                        }\n                        if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                            if (selectedColumn == 0) {\n                                String newName = CommonUtils.toString(value);\n                                String oldPropId = prop.property.getId();\n                                Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                                ((DBPNamedObject2) prop.property).setName(newName);\n                                if (oldPropValue != null) {\n                                    prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                    prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                                }\n                            } else {\n                                prop.propertySource.setPropertyValue(\n                                    null,\n                                    prop.property.getId(),\n                                    value);\n                            }\n                            handlePropertyChange(prop);\n                        }\n                    } catch (Exception e) {\n                        DBWorkbench.getPlatformUI().showError(\"Error setting property value\", \"Error setting property '\" + prop.property.getDisplayName() + \"' value\", e);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2021-08-24 00:12:39","endLine":585,"groupId":"0","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a8/6cdd864d1ab6b53256950723082643a39f8838.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    \r\n                    final Object value = cellEditor.getValue();\n                    final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                    if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                        \r\n                        return;\n                    }\n                    if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                        if (selectedColumn == 0) {\n                            String newName = CommonUtils.toString(value);\n                            String oldPropId = prop.property.getId();\n                            Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                            ((DBPNamedObject2)prop.property).setName(newName);\n                            if (oldPropValue != null) {\n                                prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                            }\n                        } else {\n                            prop.propertySource.setPropertyValue(\n                                null,\n                                prop.property.getId(),\n                                value);\n                        }\n                        handlePropertyChange(prop);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":8,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"f037bd799cb3723b9866ed05ce20f8e5793d44b8","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-08-24 00:12:39","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2021-09-08 15:16:08","commitOrder":9,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            final int columnIndex;\n            if (selectedColumn == 0 && (!namesEditable || !(prop.property instanceof DBPNamedObject))) {\n                columnIndex = 1;\n            } else {\n                columnIndex = this.selectedColumn;\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = columnIndex == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    try {\n                        \r\n                        final Object value = cellEditor.getValue();\n                        final Object oldValue = columnIndex == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                        if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                            \r\n                            return;\n                        }\n                        if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                            if (columnIndex == 0) {\n                                String newName = CommonUtils.toString(value);\n                                String oldPropId = prop.property.getId();\n                                Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                                ((DBPNamedObject2) prop.property).setName(newName);\n                                if (oldPropValue != null) {\n                                    prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                    prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                                }\n                            } else {\n                                prop.propertySource.setPropertyValue(\n                                    null,\n                                    prop.property.getId(),\n                                    value);\n                            }\n                            handlePropertyChange(prop);\n                        }\n\n                        disposeOldEditor();\n                    } catch (Exception e) {\n                        DBWorkbench.getPlatformUI().showError(\"Error setting property value\", \"Error setting property '\" + prop.property.getDisplayName() + \"' value\", e);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, columnIndex);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2021-09-08 15:16:08","endLine":588,"groupId":"14313","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/25/b2b607235aa0a913e1f7733c01599427079540.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            if (selectedColumn == 0) {\n                if (!namesEditable || !(prop.property instanceof DBPNamedObject)) {\n                    return;\n                }\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    try {\n                        \r\n                        final Object value = cellEditor.getValue();\n                        final Object oldValue = selectedColumn == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                        if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                            \r\n                            return;\n                        }\n                        if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                            if (selectedColumn == 0) {\n                                String newName = CommonUtils.toString(value);\n                                String oldPropId = prop.property.getId();\n                                Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                                ((DBPNamedObject2) prop.property).setName(newName);\n                                if (oldPropValue != null) {\n                                    prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                    prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                                }\n                            } else {\n                                prop.propertySource.setPropertyValue(\n                                    null,\n                                    prop.property.getId(),\n                                    value);\n                            }\n                            handlePropertyChange(prop);\n                        }\n                    } catch (Exception e) {\n                        DBWorkbench.getPlatformUI().showError(\"Error setting property value\", \"Error setting property '\" + prop.property.getDisplayName() + \"' value\", e);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, selectedColumn);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":472,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":9,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"11649","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"c1a785a26bd47f5781b847a2ae469840cec15227","commitMessage":"@@@#13599 Activate property value editor on traverse event RETURN (key Enter)\n","date":"2021-09-08 15:16:08","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-08-15 00:53:44","codes":[{"authorDate":"2021-09-15 23:45:43","commitOrder":10,"curCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            final int columnIndex;\n            if (selectedColumn == 0 && (!namesEditable || !(prop.property instanceof DBPNamedObject))) {\n                columnIndex = 1;\n            } else {\n                columnIndex = this.selectedColumn;\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            if (cellEditor instanceof BooleanStyleDecorator) {\n                ((BooleanStyleDecorator) cellEditor).setBooleanAlignment(UIElementAlignment.LEFT);\n            }\n            final Object propertyValue = columnIndex == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    try {\n                        \r\n                        final Object value = cellEditor.getValue();\n                        final Object oldValue = columnIndex == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                        if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                            \r\n                            return;\n                        }\n                        if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                            if (columnIndex == 0) {\n                                String newName = CommonUtils.toString(value);\n                                String oldPropId = prop.property.getId();\n                                Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                                ((DBPNamedObject2) prop.property).setName(newName);\n                                if (oldPropValue != null) {\n                                    prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                    prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                                }\n                            } else {\n                                prop.propertySource.setPropertyValue(\n                                    null,\n                                    prop.property.getId(),\n                                    value);\n                            }\n                            handlePropertyChange(prop);\n                        }\n\n                        disposeOldEditor();\n                    } catch (Exception e) {\n                        DBWorkbench.getPlatformUI().showError(\"Error setting property value\", \"Error setting property '\" + prop.property.getDisplayName() + \"' value\", e);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, columnIndex);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","date":"2021-09-15 23:45:43","endLine":594,"groupId":"10639","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"showEditor","params":"(finalTreeItemitem@booleanisDef)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/19afd46cb6c58479c635f1d0c5329aa5b62d19.src","preCode":"    private void showEditor(final TreeItem item, boolean isDef) {\n        \r\n        disposeOldEditor();\n        if (item == null) {\n            return;\n        }\n\n        \r\n        if (item.getData() instanceof TreeNode) {\n            final Tree treeControl = super.getTree();\n            final TreeNode prop = (TreeNode) item.getData();\n            if (prop.property == null || !prop.isEditable()) {\n                return;\n            }\n            final int columnIndex;\n            if (selectedColumn == 0 && (!namesEditable || !(prop.property instanceof DBPNamedObject))) {\n                columnIndex = 1;\n            } else {\n                columnIndex = this.selectedColumn;\n            }\n            int editStyle = SWT.LEFT;\n            if (isHidePropertyValue(prop.property)) {\n                editStyle |= SWT.PASSWORD;\n            }\n            final CellEditor cellEditor = PropertyEditorUtils.createPropertyEditor(UIUtils.getActiveWorkbenchWindow(), treeControl, prop.propertySource, prop.property, editStyle);\n            if (cellEditor == null) {\n                return;\n            }\n            final Object propertyValue = columnIndex == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n            final ICellEditorListener cellEditorListener = new ICellEditorListener() {\n                @Override\n                public void applyEditorValue()\n                {\n                    try {\n                        \r\n                        final Object value = cellEditor.getValue();\n                        final Object oldValue = columnIndex == 0 ? prop.property.getDisplayName() : prop.propertySource.getPropertyValue(null, prop.property.getId());\n                        if (value instanceof String && ((String) value).isEmpty() && oldValue == null) {\n                            \r\n                            return;\n                        }\n                        if (DBUtils.compareDataValues(oldValue, value) != 0) {\n                            if (columnIndex == 0) {\n                                String newName = CommonUtils.toString(value);\n                                String oldPropId = prop.property.getId();\n                                Object oldPropValue = prop.propertySource.getPropertyValue(null, prop.property.getId());\n                                ((DBPNamedObject2) prop.property).setName(newName);\n                                if (oldPropValue != null) {\n                                    prop.propertySource.resetPropertyValueToDefault(oldPropId);\n                                    prop.propertySource.setPropertyValue(null, prop.property.getId(), oldPropValue);\n                                }\n                            } else {\n                                prop.propertySource.setPropertyValue(\n                                    null,\n                                    prop.property.getId(),\n                                    value);\n                            }\n                            handlePropertyChange(prop);\n                        }\n\n                        disposeOldEditor();\n                    } catch (Exception e) {\n                        DBWorkbench.getPlatformUI().showError(\"Error setting property value\", \"Error setting property '\" + prop.property.getDisplayName() + \"' value\", e);\n                    }\n                }\n\n                @Override\n                public void cancelEditor()\n                {\n                    disposeOldEditor();\n                }\n\n                @Override\n                public void editorValueChanged(boolean oldValidState, boolean newValidState)\n                {\n                }\n            };\n            cellEditor.addListener(cellEditorListener);\n            if (propertyValue != null) {\n                cellEditor.setValue(UIUtils.normalizePropertyValue(propertyValue));\n            }\n            curCellEditor = cellEditor;\n            selectedProperty = prop.property;\n\n            if (isDef) {\n                cellEditor.activate();\n            }\n            final Control editorControl = cellEditor.getControl();\n            if (editorControl != null) {\n                editorControl.addTraverseListener(e -> {\n                    \r\n\r\n\r\n\r\n\r\nif (e.detail == SWT.TRAVERSE_ESCAPE) {\n                        e.doit = false;\n                        e.detail = SWT.TRAVERSE_NONE;\n                        disposeOldEditor();\n                        if (prop.isEditable()) {\n                            new ActionResetProperty(prop, false).run();\n                        }\n                    }\n                });\n                treeEditor.verticalAlignment = cellEditor.getLayoutData().verticalAlignment;\n                treeEditor.horizontalAlignment = cellEditor.getLayoutData().horizontalAlignment;\n                treeEditor.minimumWidth = cellEditor.getLayoutData().minimumWidth;\n                treeEditor.grabHorizontal = cellEditor.getLayoutData().grabHorizontal;\n\n                treeEditor.setEditor(editorControl, item, columnIndex);\n            }\n            if (isDef) {\n                \r\n                cellEditor.setFocus();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":475,"status":"M"},{"authorDate":"2018-08-15 00:53:44","commitOrder":10,"curCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","date":"2018-08-15 00:53:44","endLine":1009,"groupId":"10639","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bf/3f389d6a9d3a1c3d34eb4197e8a8299027dc22.src","preCode":"        public void run()\n        {\n            if (prop.propertySource != null) {\n                if (toDefault) {\n                    prop.propertySource.resetPropertyValueToDefault(prop.property.getId());\n                } else {\n                    prop.propertySource.resetPropertyValue(null, prop.property.getId());\n                }\n            }\n            handlePropertyChange(prop);\n            PropertyTreeViewer.this.update(prop, null);\n            disposeOldEditor();\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui/src/org/jkiss/dbeaver/ui/properties/PropertyTreeViewer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":997,"status":"N"}],"commitId":"9fada26d0055656c57faffdcb65ece43411353d2","commitMessage":"@@@Merge pull request #13903 from dbeaver/boolen-text-display-configuration#11345\n\n#11345 Boolean text presentation configurator","date":"2021-09-15 23:45:43","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"}]
