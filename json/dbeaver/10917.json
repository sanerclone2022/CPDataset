[{"authorTime":"2019-07-19 20:01:52","codes":[{"authorDate":"2019-07-19 20:01:52","commitOrder":1,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(@NotNull DBCSession session, @NotNull DBSEntityAttribute keyColumn, @NotNull List<Object> keyValues, List<DBDAttributeValue> preceedingKeys, boolean sortByValue, boolean sortAsc) throws DBException {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n            for (Object value : keyValues) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n            }\n            dbStat.setLimit(0, keyValues.size());\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","date":"2019-07-19 20:01:52","endLine":649,"groupId":"1009","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBCSessionsession@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/95/8846a60cdc2cf8f4b78b6dab905febb328702c.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(@NotNull DBCSession session, @NotNull DBSEntityAttribute keyColumn, @NotNull List<Object> keyValues, List<DBDAttributeValue> preceedingKeys, boolean sortByValue, boolean sortAsc) throws DBException {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n            for (Object value : keyValues) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n            }\n            dbStat.setLimit(0, keyValues.size());\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"B"},{"authorDate":"2019-07-19 20:01:52","commitOrder":1,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBCSession session,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        if (keyPattern instanceof CharSequence && keyColumn.getDataKind() != DBPDataKind.NUMERIC) {\n            if (((CharSequence)keyPattern).length() > 0) {\n                keyPattern = \"%\" + keyPattern.toString() + \"%\";\n            } else {\n                keyPattern = null;\n            }\n        }\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    \r\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(session.getProgressMonitor(), this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n\n            if (keyPattern != null && searchInKeys) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, keyPattern);\n            }\n\n            if (searchInDesc) {\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                        valueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, keyPattern);\n                    }\n                }\n            }\n\n            dbStat.setLimit(0, maxResults);\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","date":"2019-07-19 20:01:52","endLine":815,"groupId":"1656","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBCSessionsession@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/95/8846a60cdc2cf8f4b78b6dab905febb328702c.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBCSession session,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        if (keyPattern instanceof CharSequence && keyColumn.getDataKind() != DBPDataKind.NUMERIC) {\n            if (((CharSequence)keyPattern).length() > 0) {\n                keyPattern = \"%\" + keyPattern.toString() + \"%\";\n            } else {\n                keyPattern = null;\n            }\n        }\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    \r\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(session.getProgressMonitor(), this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n\n            if (keyPattern != null && searchInKeys) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, keyPattern);\n            }\n\n            if (searchInDesc) {\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                        valueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, keyPattern);\n                    }\n                }\n            }\n\n            dbStat.setLimit(0, maxResults);\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":651,"status":"B"}],"commitId":"3aa9e208be52fab111151fc1bfebc6a2afe1ee89","commitMessage":"@@@#5384 Virtual FKs + dictionary reading + dictionary model refactoring\n\n\nFormer-commit-id: 8bd4bb7ad94dc5f9086f32772cb034e7a1f6ec56","date":"2019-07-19 20:01:52","modifiedFileCount":"7","status":"B","submitter":"Serge Rider"},{"authorTime":"2019-07-29 18:33:04","codes":[{"authorDate":"2019-07-29 18:33:04","commitOrder":2,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBCSession session,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n            for (Object value : keyValues) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n            }\n            dbStat.setLimit(0, keyValues.size());\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","date":"2019-07-29 18:33:04","endLine":656,"groupId":"1009","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBCSessionsession@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/5eb6fa7381240c520da2ba75eece565faa4716.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(@NotNull DBCSession session, @NotNull DBSEntityAttribute keyColumn, @NotNull List<Object> keyValues, List<DBDAttributeValue> preceedingKeys, boolean sortByValue, boolean sortAsc) throws DBException {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n            for (Object value : keyValues) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n            }\n            dbStat.setLimit(0, keyValues.size());\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"M"},{"authorDate":"2019-07-29 18:33:04","commitOrder":2,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBCSession session,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(session.getProgressMonitor(), this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n\n            if (keyPattern != null && searchInKeys) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                    keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n            }\n\n            if (searchInDesc) {\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                        valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                            descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\": keyPattern);\n                    }\n                }\n            }\n\n            dbStat.setLimit(0, maxResults);\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","date":"2019-07-29 18:33:04","endLine":828,"groupId":"0","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBCSessionsession@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/68/5eb6fa7381240c520da2ba75eece565faa4716.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBCSession session,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        if (keyPattern instanceof CharSequence && keyColumn.getDataKind() != DBPDataKind.NUMERIC) {\n            if (((CharSequence)keyPattern).length() > 0) {\n                keyPattern = \"%\" + keyPattern.toString() + \"%\";\n            } else {\n                keyPattern = null;\n            }\n        }\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    \r\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(session.getProgressMonitor(), this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n\n            if (keyPattern != null && searchInKeys) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, keyPattern);\n            }\n\n            if (searchInDesc) {\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                        valueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, keyPattern);\n                    }\n                }\n            }\n\n            dbStat.setLimit(0, maxResults);\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":658,"status":"M"}],"commitId":"ae8339f3676f8e65ca388574886a99e4d3c260e6","commitMessage":"@@@#6367 Columns filter fix (search by numbers and strings)\n\n\nFormer-commit-id: d08bca443f5ff68346290e61cb5fb214d0736cc2","date":"2019-07-29 18:33:04","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-07 22:20:51","codes":[{"authorDate":"2019-08-07 22:20:51","commitOrder":3,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2019-08-07 22:20:51","endLine":659,"groupId":"9705","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/1d245922801276f6621c7c9942f557972f9e9e.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBCSession session,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n            for (Object value : keyValues) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n            }\n            dbStat.setLimit(0, keyValues.size());\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"M"},{"authorDate":"2019-08-07 22:20:51","commitOrder":3,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2019-08-07 22:20:51","endLine":833,"groupId":"3554","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/1d245922801276f6621c7c9942f557972f9e9e.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBCSession session,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(session, keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(session.getProgressMonitor(), keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(session.getProgressMonitor(), this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n            int paramPos = 0;\n\n            if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                for (DBDAttributeValue precAttribute : preceedingKeys) {\n                    DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                    precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                }\n            }\n\n            if (keyPattern != null && searchInKeys) {\n                keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                    keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n            }\n\n            if (searchInDesc) {\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                        valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                            descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\": keyPattern);\n                    }\n                }\n            }\n\n            dbStat.setLimit(0, maxResults);\n            if (dbStat.executeStatement()) {\n                try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                    return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                }\n            } else {\n                return Collections.emptyList();\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"M"}],"commitId":"9c4f69c395030aaf044bc5eb83e4f03b1da90ebb","commitMessage":"@@@Dictionary/enum reading refactoring (support cross-database queries)\n\n\nFormer-commit-id: 4f1ee1c74e0aa2bf6822b2ef06b7332c441b0c4d","date":"2019-08-07 22:20:51","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-07 23:05:37","codes":[{"authorDate":"2019-08-07 22:20:51","commitOrder":4,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2019-08-07 22:20:51","endLine":659,"groupId":"9705","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/1d245922801276f6621c7c9942f557972f9e9e.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"N"},{"authorDate":"2019-08-07 23:05:37","commitOrder":4,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2019-08-07 23:05:37","endLine":841,"groupId":"3554","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/aa/1651221cfd9b63c28097aeeb93acc30bf79c02.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    if (keyPattern instanceof Integer) {\n                        keyPattern = (Integer) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Short) {\n                        keyPattern = (Short) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Long) {\n                        keyPattern = (Long) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Float) {\n                        keyPattern = (Float) keyPattern - gapSize;\n                    } else if (keyPattern instanceof Double) {\n                        keyPattern = (Double) keyPattern - gapSize;\n                    } else if (keyPattern instanceof BigInteger) {\n                        keyPattern = ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize));\n                    } else if (keyPattern instanceof BigDecimal) {\n                        keyPattern = ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize));\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":661,"status":"M"}],"commitId":"41fee967c5174cfc6384f399156c4614fca3d538","commitMessage":"@@@Dictionary read fix (use negative key value pattern only if key is negative)\n\n\nFormer-commit-id: 0411ba00eaf856a759d963ae479309e4da2e5c83","date":"2019-08-07 23:05:37","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-08-28 20:33:42","codes":[{"authorDate":"2019-08-07 22:20:51","commitOrder":5,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2019-08-07 22:20:51","endLine":659,"groupId":"9705","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/1d245922801276f6621c7c9942f557972f9e9e.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":591,"status":"N"},{"authorDate":"2019-08-28 20:33:42","commitOrder":5,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2019-08-28 20:33:42","endLine":834,"groupId":"3554","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/22/681b2e18a0e68ee992db5a4cf694a5c081a980.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n        }\n        \r\n        if (searchInDesc) {\n            boolean hasCondition = searchInKeys;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    if (hasCondition) {\n                        query.append(\" OR \");\n                    }\n                    query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                    hasCondition = true;\n                }\n            }\n        }\n        if (hasCond) query.append(\")\");\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":654,"status":"M"}],"commitId":"c7bc07ebf71df7b756978c8b367dcdc06570ccf0","commitMessage":"@@@#6612 Dictionary value reading fix\n\n\nFormer-commit-id: cc9371a7611786f67933ed8cc906c7402ed8163f","date":"2019-08-28 20:33:42","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-14 03:38:04","codes":[{"authorDate":"2020-02-14 03:38:04","commitOrder":6,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2020-02-14 03:38:04","endLine":643,"groupId":"9705","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c0/8de1f68099e7b80f0efbf8b3789e89da69cf11.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"M"},{"authorDate":"2020-02-14 03:38:04","commitOrder":6,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2020-02-14 03:38:04","endLine":825,"groupId":"3554","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c0/8de1f68099e7b80f0efbf8b3789e89da69cf11.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":645,"status":"M"}],"commitId":"526f2de08ac78bbb3a879f0cf32935b31576ca03","commitMessage":"@@@#1751 Use native value formatters for proposals\n\n\nFormer-commit-id: fd2c3d93090f670ee41a5f05ddf58ed859838262","date":"2020-02-14 03:38:04","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-09 22:30:49","codes":[{"authorDate":"2020-02-14 03:38:04","commitOrder":7,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2020-02-14 03:38:04","endLine":643,"groupId":"9705","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c0/8de1f68099e7b80f0efbf8b3789e89da69cf11.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":575,"status":"N"},{"authorDate":"2020-08-09 22:30:49","commitOrder":7,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence ) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else if (keyColumn.getDataKind() == DBPDataKind.STRING) {\n                    query.append(\" LIKE ?\");\n                } else {\n                    query.append(\" = ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2020-08-09 22:30:49","endLine":829,"groupId":"6504","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/bc/d320d2f5679f60919318a03d6ebe2b0d1fd762.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence && keyColumn.getDataKind() == DBPDataKind.STRING) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else {\n                    query.append(\" LIKE ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":647,"status":"M"}],"commitId":"cc9464ac5ec6160a261587511f8040b7d82f3681","commitMessage":"@@@#9294 Filter value search: use exact match for non-string data types\n\n\nFormer-commit-id: c495bcbfb24d0ec090b17127a4e797948b5954d6","date":"2020-08-09 22:30:49","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-03-12 00:47:33","codes":[{"authorDate":"2021-03-12 00:47:33","commitOrder":8,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true, false);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2021-03-12 00:47:33","endLine":660,"groupId":"9705","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ae/db3e3654cfebcfcebf935b57b00a0d41a92d4a.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"M"},{"authorDate":"2021-03-12 00:47:33","commitOrder":8,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence ) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else if (keyColumn.getDataKind() == DBPDataKind.STRING) {\n                    query.append(\" LIKE ?\");\n                } else {\n                    query.append(\" = ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true, false);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2021-03-12 00:47:33","endLine":844,"groupId":"6504","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ae/db3e3654cfebcfcebf935b57b00a0d41a92d4a.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence ) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else if (keyColumn.getDataKind() == DBPDataKind.STRING) {\n                    query.append(\" LIKE ?\");\n                } else {\n                    query.append(\" = ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":662,"status":"M"}],"commitId":"ff5ba919e2301b2479be26c7c017a88467600105","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 89d7cef4513ea2d093c61f1b53563d673f7ce381","date":"2021-03-12 00:47:33","modifiedFileCount":"12","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-04-09 00:26:19","codes":[{"authorDate":"2021-03-12 00:47:33","commitOrder":9,"curCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true, false);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2021-03-12 00:47:33","endLine":660,"groupId":"10917","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getDictionaryValues","params":"(@NotNullDBRProgressMonitormonitor@@NotNullDBSEntityAttributekeyColumn@@NotNullList<Object>keyValues@@NullableList<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ae/db3e3654cfebcfcebf935b57b00a0d41a92d4a.src","preCode":"    public List<DBDLabelValuePair> getDictionaryValues(\n        @NotNull DBRProgressMonitor monitor,\n        @NotNull DBSEntityAttribute keyColumn,\n        @NotNull List<Object> keyValues,\n        @Nullable List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc) throws DBException\n    {\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        if (descColumns != null) {\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML)).append(\" WHERE \");\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (DBDAttributeValue pk : preceedingKeys) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), pk.getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (hasCond) query.append(\" AND \");\n        query.append(DBUtils.getQuotedIdentifier(keyColumn)).append(\" IN (\");\n        for (int i = 0; i < keyValues.size(); i++) {\n            if (i > 0) query.append(\",\");\n            query.append(\"?\");\n        }\n        query.append(\")\");\n\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load dictionary values\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n                for (Object value : keyValues) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++, value);\n                }\n                dbStat.setLimit(0, keyValues.size());\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true, false);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":592,"status":"N"},{"authorDate":"2021-04-09 00:26:19","commitOrder":9,"curCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        boolean caseInsensitiveSearch,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence ) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            final SQLDialect dialect = getDataSource().getSQLDialect();\n            final SQLExpressionFormatter caseInsensitiveFormatter = caseInsensitiveSearch\n                ? dialect.getCaseInsensitiveExpressionFormatter(DBCLogicalOperator.LIKE)\n                : null;\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                final String identifier = DBUtils.getQuotedIdentifier(keyColumn);\n                if (keyColumn.getDataKind() == DBPDataKind.STRING) {\n                    if (caseInsensitiveSearch && caseInsensitiveFormatter != null) {\n                        query.append(caseInsensitiveFormatter.format(identifier, \"?\"));\n                    } else {\n                        query.append(identifier).append(\" LIKE ?\");\n                    }\n                } else if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(identifier).append(\" >= ?\");\n                } else {\n                    query.append(identifier).append(\" = ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        final String identifier = DBUtils.getQuotedIdentifier(descAttr);\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        if (caseInsensitiveSearch && caseInsensitiveFormatter != null) {\n                            query.append(caseInsensitiveFormatter.format(identifier, \"?\"));\n                        } else {\n                            query.append(identifier).append(\" LIKE ?\");\n                        }\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true, false);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","date":"2021-04-09 00:26:19","endLine":865,"groupId":"10917","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"readKeyEnumeration","params":"(DBRProgressMonitormonitor@DBSEntityAttributekeyColumn@ObjectkeyPattern@List<DBDAttributeValue>preceedingKeys@booleansortByValue@booleansortAsc@booleancaseInsensitiveSearch@intmaxResults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/21/e85801c3e5f95fe98888e2c229d3653e02180f.src","preCode":"    private List<DBDLabelValuePair> readKeyEnumeration(\n        DBRProgressMonitor monitor,\n        DBSEntityAttribute keyColumn,\n        Object keyPattern,\n        List<DBDAttributeValue> preceedingKeys,\n        boolean sortByValue,\n        boolean sortAsc,\n        int maxResults)\n        throws DBException\n    {\n        if (keyColumn.getParentObject() != this) {\n            throw new IllegalArgumentException(\"Bad key column argument\");\n        }\n\n        DBDValueHandler keyValueHandler = DBUtils.findValueHandler(keyColumn.getDataSource(), keyColumn);\n\n        boolean searchInKeys = keyPattern != null;\n\n        if (keyPattern != null) {\n            if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                if (keyPattern instanceof Number) {\n                    \r\n                    int gapSize = maxResults / 2;\n                    boolean allowNegative = ((Number) keyPattern).longValue() < 0;\n                    if (keyPattern instanceof Integer) {\n                        int intValue = (Integer) keyPattern;\n                        keyPattern = allowNegative || intValue > gapSize ? intValue - gapSize : 0;\n                    } else if (keyPattern instanceof Short) {\n                        int shortValue = (Short) keyPattern;\n                        keyPattern = allowNegative || shortValue > gapSize ? shortValue - gapSize : (short)0;\n                    } else if (keyPattern instanceof Long) {\n                        long longValue = (Long) keyPattern;\n                        keyPattern = allowNegative || longValue > gapSize ? longValue - gapSize : (long)0;\n                    } else if (keyPattern instanceof Float) {\n                        float floatValue = (Float) keyPattern;\n                        keyPattern = allowNegative || floatValue > gapSize ? floatValue - gapSize : 0.0f;\n                    } else if (keyPattern instanceof Double) {\n                        double doubleValue = (Double) keyPattern;\n                        keyPattern = allowNegative || doubleValue > gapSize ? doubleValue - gapSize : 0.0;\n                    } else if (keyPattern instanceof BigInteger) {\n                        BigInteger biValue = (BigInteger) keyPattern;\n                        keyPattern = allowNegative || biValue.longValue() > gapSize ? ((BigInteger) keyPattern).subtract(BigInteger.valueOf(gapSize)) : new BigInteger(\"0\");\n                    } else if (keyPattern instanceof BigDecimal) {\n                        BigDecimal bdValue = (BigDecimal) keyPattern;\n                        keyPattern = allowNegative || bdValue.longValue() > gapSize ? ((BigDecimal) keyPattern).subtract(new BigDecimal(gapSize)) : new BigDecimal(0);\n                    } else {\n                        searchInKeys = false;\n                    }\n                } else if (keyPattern instanceof String) {\n                    if (((String) keyPattern).isEmpty() || !Character.isDigit(((String)keyPattern).charAt(0)) ) {\n                        searchInKeys = false;\n                    }\n                    \r\n                    \r\n                }\n            } else if (keyPattern instanceof CharSequence ) {\n                \r\n            } else {\n                searchInKeys = false;\n            }\n        }\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n        StringBuilder query = new StringBuilder();\n        query.append(\"SELECT \").append(DBUtils.getQuotedIdentifier(keyColumn));\n\n        String descColumns = DBVUtils.getDictionaryDescriptionColumns(monitor, keyColumn);\n        Collection<DBSEntityAttribute> descAttributes = null;\n        if (descColumns != null) {\n            descAttributes = DBVEntity.getDescriptionColumns(monitor, this, descColumns);\n            query.append(\", \").append(descColumns);\n        }\n        query.append(\" FROM \").append(DBUtils.getObjectFullName(this, DBPEvaluationContext.DML));\n\n        boolean searchInDesc = keyPattern instanceof CharSequence && descAttributes != null;\n        if (searchInDesc) {\n            boolean hasStringAttrs = false;\n            for (DBSEntityAttribute descAttr : descAttributes) {\n                if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                    hasStringAttrs = true;\n                    break;\n                }\n            }\n            if (!hasStringAttrs) {\n                searchInDesc = false;\n            }\n        }\n\n        if (!CommonUtils.isEmpty(preceedingKeys) || searchInKeys || searchInDesc) {\n            query.append(\" WHERE \");\n        }\n        boolean hasCond = false;\n        \r\n        if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n            for (int i = 0; i < preceedingKeys.size(); i++) {\n                if (hasCond) query.append(\" AND \");\n                query.append(DBUtils.getQuotedIdentifier(getDataSource(), preceedingKeys.get(i).getAttribute().getName())).append(\" = ?\");\n                hasCond = true;\n            }\n        }\n        if (keyPattern != null) {\n            if (hasCond) query.append(\" AND (\");\n            if (searchInKeys) {\n                query.append(DBUtils.getQuotedIdentifier(keyColumn));\n                if (keyColumn.getDataKind() == DBPDataKind.NUMERIC) {\n                    query.append(\" >= ?\");\n                } else if (keyColumn.getDataKind() == DBPDataKind.STRING) {\n                    query.append(\" LIKE ?\");\n                } else {\n                    query.append(\" = ?\");\n                }\n            }\n            \r\n            if (searchInDesc) {\n                boolean hasCondition = searchInKeys;\n                for (DBSEntityAttribute descAttr : descAttributes) {\n                    if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                        if (hasCondition) {\n                            query.append(\" OR \");\n                        }\n                        query.append(DBUtils.getQuotedIdentifier(descAttr)).append(\" LIKE ?\");\n                        hasCondition = true;\n                    }\n                }\n            }\n            if (hasCond) query.append(\")\");\n        }\n        query.append(\" ORDER BY \");\n        if (sortByValue) {\n            query.append(DBUtils.getQuotedIdentifier(keyColumn));\n        } else {\n            \r\n            query.append(descColumns);\n        }\n        if (!sortAsc) {\n            query.append(\" DESC\");\n        }\n\n        try (JDBCSession session = DBUtils.openUtilSession(monitor, this, \"Load attribute value enumeration\")) {\n            try (DBCStatement dbStat = session.prepareStatement(DBCStatementType.QUERY, query.toString(), false, false, false)) {\n                int paramPos = 0;\n\n                if (preceedingKeys != null && !preceedingKeys.isEmpty()) {\n                    for (DBDAttributeValue precAttribute : preceedingKeys) {\n                        DBDValueHandler precValueHandler = DBUtils.findValueHandler(session, precAttribute.getAttribute());\n                        precValueHandler.bindValueObject(session, dbStat, precAttribute.getAttribute(), paramPos++, precAttribute.getValue());\n                    }\n                }\n\n                if (keyPattern != null && searchInKeys) {\n                    keyValueHandler.bindValueObject(session, dbStat, keyColumn, paramPos++,\n                        keyColumn.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                }\n\n                if (searchInDesc) {\n                    for (DBSEntityAttribute descAttr : descAttributes) {\n                        if (descAttr.getDataKind() == DBPDataKind.STRING) {\n                            final DBDValueHandler valueHandler = DBUtils.findValueHandler(session, descAttr);\n                            valueHandler.bindValueObject(session, dbStat, descAttr, paramPos++,\n                                descAttr.getDataKind() == DBPDataKind.STRING ? \"%\" + keyPattern + \"%\" : keyPattern);\n                        }\n                    }\n                }\n\n                dbStat.setLimit(0, maxResults);\n                if (dbStat.executeStatement()) {\n                    try (DBCResultSet dbResult = dbStat.openResultSet()) {\n                        return DBVUtils.readDictionaryRows(session, keyColumn, keyValueHandler, dbResult, true, false);\n                    }\n                } else {\n                    return Collections.emptyList();\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/struct/JDBCTable.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":669,"status":"M"}],"commitId":"1e1f46a021373bee6c210a658725c7b615cc89c2","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 3cf886b64155ddd1df1b72ce668bff4fb7fcf2c0","date":"2021-04-09 00:26:19","modifiedFileCount":"15","status":"M","submitter":"Serge Rider"}]
