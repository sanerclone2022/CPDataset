[{"authorTime":"2015-07-03 05:23:35","codes":[{"authorDate":"2015-07-03 05:23:35","commitOrder":1,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            if (contentLength < dataSource.getContainer().getApplication().getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        dataSource.getContainer().getApplication().getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, dataSource.getContainer().getApplication(), \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(dataSource.getContainer().getApplication(), tempFile);\n            }\n            \r\n            try {\n                blob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                blob = null;\n            }\n        }\n        return storage;\n    }\n","date":"2015-07-03 05:23:35","endLine":124,"groupId":"9205","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1d/c723f80158f60162b9c4fd22608f4a979dbc7e.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            if (contentLength < dataSource.getContainer().getApplication().getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        dataSource.getContainer().getApplication().getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, dataSource.getContainer().getApplication(), \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(dataSource.getContainer().getApplication(), tempFile);\n            }\n            \r\n            try {\n                blob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                blob = null;\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2015-07-03 05:23:35","commitOrder":1,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            if (contentLength < dataSource.getContainer().getApplication().getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, dataSource.getContainer().getApplication(), \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(dataSource.getContainer().getApplication(), tempFile);\n            }\n            \r\n            try {\n                clob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                clob = null;\n            }\n        }\n        return storage;\n    }\n","date":"2015-07-03 05:23:35","endLine":123,"groupId":"17486","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fe/57a10af3fce77d509d89b94879062602cf0225.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            if (contentLength < dataSource.getContainer().getApplication().getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, dataSource.getContainer().getApplication(), \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(dataSource.getContainer().getApplication(), tempFile);\n            }\n            \r\n            try {\n                clob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                clob = null;\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"B"}],"commitId":"0743792128fca9e7cb91b033f751fdbae190416d","commitMessage":"@@@Model bundle\n\nFormer-commit-id: 36a4943063ae5a5d2b114f7852f192bb5a75eb9c","date":"2015-07-03 05:23:35","modifiedFileCount":"63","status":"B","submitter":"jurgen"},{"authorTime":"2015-07-07 04:41:40","codes":[{"authorDate":"2015-07-07 04:41:40","commitOrder":2,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            try {\n                blob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                blob = null;\n            }\n        }\n        return storage;\n    }\n","date":"2015-07-07 04:41:40","endLine":126,"groupId":"9205","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/43d0d3d75000346d3d59a505d7737a530ccf9c.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            if (contentLength < dataSource.getContainer().getApplication().getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        dataSource.getContainer().getApplication().getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, dataSource.getContainer().getApplication(), \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(dataSource.getContainer().getApplication(), tempFile);\n            }\n            \r\n            try {\n                blob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                blob = null;\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2015-07-07 04:41:40","commitOrder":2,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            try {\n                clob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                clob = null;\n            }\n        }\n        return storage;\n    }\n","date":"2015-07-07 04:41:40","endLine":125,"groupId":"17486","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/56/23ae20b80bb4331ea6c714f582119693252a67.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            if (contentLength < dataSource.getContainer().getApplication().getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, dataSource.getContainer().getApplication(), \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(dataSource.getContainer().getApplication(), tempFile);\n            }\n            \r\n            try {\n                clob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                clob = null;\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"1b60bdca223634f97e332d8b09ee7852ce52c17e","commitMessage":"@@@Model preferences refactoring.\nObject editors model refactoring.\n\nFormer-commit-id: c6933a705931738ba4b505763c11b2df6decf550","date":"2015-07-07 04:41:40","modifiedFileCount":"15","status":"M","submitter":"jurgen"},{"authorTime":"2015-07-22 06:01:16","codes":[{"authorDate":"2015-07-22 06:01:16","commitOrder":3,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2015-07-22 06:01:16","endLine":122,"groupId":"9205","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/80/47e9f573be2e567a3d0bd9a44406ee3e043639.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            try {\n                blob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                blob = null;\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2015-07-22 06:01:16","commitOrder":3,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2015-07-22 06:01:16","endLine":121,"groupId":"17486","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/06/47f17ef8762777dbe559abb7467425ef93d24f.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            try {\n                clob.free();\n            } catch (Throwable e) {\n                log.debug(e);\n            } finally {\n                clob = null;\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"96415364e193baa917b1d146943db59c3d2c3565","commitMessage":"@@@LOB editors fixed.\nOracle XML tables edit support.\n\nFormer-commit-id: 5f842c470cf075b5381bc14b7ab50af09937a20e","date":"2015-07-22 06:01:16","modifiedFileCount":"6","status":"M","submitter":"jurgen"},{"authorTime":"2015-12-17 16:20:53","codes":[{"authorDate":"2015-12-17 16:20:53","commitOrder":4,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    ContentUtils.copyStreams(blob.getBinaryStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2015-12-17 16:20:53","endLine":121,"groupId":"6439","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/094b230e92a7fe4c2d5c3c52d4712665920c72.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try {\n                    ContentUtils.copyStreamToFile(monitor, blob.getBinaryStream(), contentLength, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error whle copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-12-17 16:20:53","commitOrder":4,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new FileWriter(tempFile)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2015-12-17 16:20:53","endLine":121,"groupId":"11299","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/dd/10d17b6c5a43092a18344c091af8f22852a9a0.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                IFile tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try {\n                    ContentUtils.copyReaderToFile(monitor, clob.getCharacterStream(), contentLength, GeneralUtils.DEFAULT_FILE_CHARSET_NAME, tempFile);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(monitor, tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"00f30cb9ee83219d2e3ca1fa059ff2cf5850617f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 560bbcf5075a69e673d80fa5f4f06fb6646605f7","date":"2015-12-17 16:20:53","modifiedFileCount":"18","status":"M","submitter":"serge-rider"},{"authorTime":"2015-12-17 16:20:53","codes":[{"authorDate":"2016-03-04 03:05:31","commitOrder":5,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-03-04 03:05:31","endLine":125,"groupId":"8310","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0c/7e62f3a67c83842f39ee76071f678df67a90e5.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = BytesContentStorage.createFromStream(\n                        blob.getBinaryStream(),\n                        contentLength,\n                        application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    ContentUtils.copyStreams(blob.getBinaryStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-12-17 16:20:53","commitOrder":5,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new FileWriter(tempFile)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2015-12-17 16:20:53","endLine":121,"groupId":"11299","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/dd/10d17b6c5a43092a18344c091af8f22852a9a0.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new FileWriter(tempFile)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"N"}],"commitId":"4ef617a0c2a105274d1f87f72bcd6e6cc84085ac","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 7df48563ec5a513669fd9631cfdab1dfb567f931","date":"2016-03-04 03:05:31","modifiedFileCount":"19","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-10-19 06:26:11","codes":[{"authorDate":"2016-03-04 03:05:31","commitOrder":6,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-03-04 03:05:31","endLine":125,"groupId":"8310","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0c/7e62f3a67c83842f39ee76071f678df67a90e5.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2016-10-19 06:26:11","commitOrder":6,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), ContentUtils.DEFAULT_CHARSET)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2016-10-19 06:26:11","endLine":121,"groupId":"10572","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b8/ab7ac3a919b5e3b1f5e9f1afabb9da8f670355.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new FileWriter(tempFile)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"1cff99d6ca1c0b99d31410cbe3c85ab9475258bc","commitMessage":"@@@Big national CLOB reading fix\n\n\nFormer-commit-id: 23ab65387ab4fe56a2b334dbb74f317cf8832644","date":"2016-10-19 06:26:11","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-11-02 04:24:35","codes":[{"authorDate":"2016-03-04 03:05:31","commitOrder":7,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-03-04 03:05:31","endLine":125,"groupId":"8310","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0c/7e62f3a67c83842f39ee76071f678df67a90e5.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2016-11-02 04:24:35","commitOrder":7,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), GeneralUtils.DEFAULT_ENCODING)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2016-11-02 04:24:35","endLine":122,"groupId":"10572","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/90/015a51ceda2f92fd558135c7a0e94175b8a2d8.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), ContentUtils.DEFAULT_CHARSET)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"bc34fefbd58b9397d54832e652f2916022a342eb","commitMessage":"@@@Default encoding usage refactoring\n\n\nFormer-commit-id: 1a12d60d96374185ddb267dd723be674a40e7525","date":"2016-11-02 04:24:35","modifiedFileCount":"31","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-12-02 06:32:18","codes":[{"authorDate":"2016-12-02 06:32:18","commitOrder":8,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-12-02 06:32:18","endLine":125,"groupId":"2886","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/1e8d281595b3ee27c412fdec2695c5cfbc8f26.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2016-12-02 06:32:18","commitOrder":8,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), GeneralUtils.DEFAULT_ENCODING)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2016-12-02 06:32:18","endLine":122,"groupId":"18","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f8/0a3d69b5d6fc45d2cbe965200c0dd858feb998.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), GeneralUtils.DEFAULT_ENCODING)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"170f1aebc9763c55777390a3f55db3a5bbfd57bf","commitMessage":"@@@Application model refactoring\n\n\nFormer-commit-id: e5c9be8650805bece3eaf6e230b632f2ce613036","date":"2016-12-02 06:32:18","modifiedFileCount":"34","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-12-29 01:38:21","codes":[{"authorDate":"2016-12-29 01:38:21","commitOrder":9,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-12-29 01:38:21","endLine":124,"groupId":"2886","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/34b84a95e8913df1cfac72b2d4cd74cfc37888.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2016-12-29 01:38:21","commitOrder":9,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), GeneralUtils.DEFAULT_ENCODING)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2016-12-29 01:38:21","endLine":122,"groupId":"9477","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d0/94a162d7162abaf08a1b87b778707d8537536c.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), GeneralUtils.DEFAULT_ENCODING)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"}],"commitId":"0642210b6f0975a5c52ee5b8d628e5b263235de9","commitMessage":"@@@#1043 Extra error handling in LOB operations\n\n\nFormer-commit-id: 3fd46db766817829106223647e4242f5e30cab64","date":"2016-12-29 01:38:21","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2017-02-28 18:00:26","codes":[{"authorDate":"2017-02-28 18:00:26","commitOrder":10,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2017-02-28 18:00:26","endLine":125,"groupId":"2886","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/a6cda93be899e0173d8d1c5904575bab2e32be.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2017-02-28 18:00:26","commitOrder":10,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2017-02-28 18:00:26","endLine":120,"groupId":"3425","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/08/91493a5ffb48b8691a978809a70e6887b1aa4a.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), GeneralUtils.DEFAULT_ENCODING)) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"5ecc2dcd9f3699d5cc865fc4ce5b2ed276c98292","commitMessage":"@@@Content encoding (use one from preferences)\n\n\nFormer-commit-id: 7abe3786328ee897cc4ecfbe1513b3de38e0db18","date":"2017-02-28 18:00:26","modifiedFileCount":"7","status":"M","submitter":"serge-rider"},{"authorTime":"2017-09-14 06:23:34","codes":[{"authorDate":"2017-02-28 18:00:26","commitOrder":11,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2017-02-28 18:00:26","endLine":125,"groupId":"2886","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/a6cda93be899e0173d8d1c5904575bab2e32be.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"N"},{"authorDate":"2017-09-14 06:23:34","commitOrder":11,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    String subString = clob.getSubString(1, (int) contentLength);\n                    storage = new JDBCContentChars(dataSource, subString);\n                } catch (Exception e) {\n                    log.debug(\"Can't get CLOB as substring\", e);\n                    try {\n                        storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                    } catch (IOException e1) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    } catch (Throwable e1) {\n                        throw new DBCException(e, dataSource);\n                    }\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2017-09-14 06:23:34","endLine":126,"groupId":"16244","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b0/0fcd78260a5373179163261953e43ebd8f068f.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"2bcfe382e9a3c2badf5ac869d4c6bdab9794457e","commitMessage":"@@@#2037 CLOB reading enhancement (try subString first)\n\n\nFormer-commit-id: 21d72eacf2ac078bcf9a3f51aa034213344675de","date":"2017-09-14 06:23:34","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-08-31 00:48:44","codes":[{"authorDate":"2020-08-31 00:48:44","commitOrder":12,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, executionContext);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2020-08-31 00:48:44","endLine":125,"groupId":"2886","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e8/c82225d758f5ae0fb6cf8d841cf6f88dd35c16.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-08-31 00:48:44","commitOrder":12,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    String subString = clob.getSubString(1, (int) contentLength);\n                    storage = new JDBCContentChars(executionContext, subString);\n                } catch (Exception e) {\n                    log.debug(\"Can't get CLOB as substring\", e);\n                    try {\n                        storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                    } catch (IOException e1) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    } catch (Throwable e1) {\n                        throw new DBCException(e, executionContext);\n                    }\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2020-08-31 00:48:44","endLine":126,"groupId":"4120","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/74/3fce8eb4d23b93b0fb9cf08ffaf19d312198fe.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    String subString = clob.getSubString(1, (int) contentLength);\n                    storage = new JDBCContentChars(dataSource, subString);\n                } catch (Exception e) {\n                    log.debug(\"Can't get CLOB as substring\", e);\n                    try {\n                        storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                    } catch (IOException e1) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    } catch (Throwable e1) {\n                        throw new DBCException(e, dataSource);\n                    }\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"3e80e6b4b8d5987e031242a6fced2b32adcc3ad9","commitMessage":"@@@LOB objects refactoring (use executionContext instead of dataSource)\n\n\nFormer-commit-id: c1ad11133ba708ece562b0a8f26d7f8447084335","date":"2020-08-31 00:48:44","modifiedFileCount":"19","status":"M","submitter":"serge-rider"},{"authorTime":"2021-08-18 16:56:42","codes":[{"authorDate":"2021-08-18 16:56:42","commitOrder":13,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, executionContext);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding(), true);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2021-08-18 16:56:42","endLine":126,"groupId":"10887","id":25,"instanceNumber":1,"isCurCommit":1,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/78/007fbc968fe2b0df666c0a268c574eb6476034.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, executionContext);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2021-08-18 16:56:42","commitOrder":13,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    String subString = clob.getSubString(1, (int) contentLength);\n                    storage = new JDBCContentChars(executionContext, subString);\n                } catch (Exception e) {\n                    log.debug(\"Can't get CLOB as substring\", e);\n                    try {\n                        storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                    } catch (IOException e1) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    } catch (Throwable e1) {\n                        throw new DBCException(e, executionContext);\n                    }\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding(), true);\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","date":"2021-08-18 16:56:42","endLine":126,"groupId":"10887","id":26,"instanceNumber":2,"isCurCommit":1,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e0/2e05afe83491a704f1fb0bc3ef2fcd9edef812.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && clob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    String subString = clob.getSubString(1, (int) contentLength);\n                    storage = new JDBCContentChars(executionContext, subString);\n                } catch (Exception e) {\n                    log.debug(\"Can't get CLOB as substring\", e);\n                    try {\n                        storage = StringContentStorage.createFromReader(clob.getCharacterStream(), contentLength);\n                    } catch (IOException e1) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    } catch (Throwable e1) {\n                        throw new DBCException(e, executionContext);\n                    }\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"clob\" + clob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temp file\", e);\n                }\n                try (Writer os = new OutputStreamWriter(new FileOutputStream(tempFile), getDefaultEncoding())) {\n                    ContentUtils.copyStreams(clob.getCharacterStream(), contentLength, os, monitor);\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying content\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseClob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentCLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"b71c42d935716e59adbfd8dd152d20cea3ecb604","commitMessage":"@@@#12614 Bugfix: external image files deleted after importing in detached editor\n","date":"2021-08-18 16:56:42","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"}]
