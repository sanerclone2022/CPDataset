[{"authorTime":"2016-06-21 02:06:52","codes":[{"authorDate":"2016-03-04 03:05:31","commitOrder":6,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-03-04 03:05:31","endLine":125,"groupId":"8310","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0c/7e62f3a67c83842f39ee76071f678df67a90e5.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"NB"},{"authorDate":"2016-06-21 02:06:52","commitOrder":6,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = getInputStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + bfile.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = getInputStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-06-21 02:06:52","endLine":143,"groupId":"3608","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ac/585ef49258172d99c2702074d90f306f363ee0.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = getInputStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + bfile.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = getInputStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"65df812577e58d9cf600eaa6bdf871a32c1b53a2","commitMessage":"@@@Oracle: BFILE support\n\nFormer-commit-id: 02d7f728479aeb11db7b230cc4042b924b3b8350","date":"2016-06-21 02:06:52","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-06-21 02:22:53","codes":[{"authorDate":"2016-03-04 03:05:31","commitOrder":7,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-03-04 03:05:31","endLine":125,"groupId":"8310","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0c/7e62f3a67c83842f39ee76071f678df67a90e5.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"},{"authorDate":"2016-06-21 02:22:53","commitOrder":7,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPApplication application = dataSource.getContainer().getApplication();\n                if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(application, tempFile);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","date":"2016-06-21 02:22:53","endLine":181,"groupId":"3608","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0f/0343091590960d9f291ab421b73fe4d43a23b1.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = getInputStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + bfile.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = getInputStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"11ca7c845026186224b4413a2bbb042643c6ff9f","commitMessage":"@@@Oracle: BFILE support\n\nFormer-commit-id: 157b5a37e5db4bddf8dc53f4f722b5fb2f6eab00","date":"2016-06-21 02:22:53","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-12-02 06:32:18","codes":[{"authorDate":"2016-12-02 06:32:18","commitOrder":8,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-12-02 06:32:18","endLine":125,"groupId":"2886","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e3/1e8d281595b3ee27c412fdec2695c5cfbc8f26.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPApplication application = dataSource.getContainer().getApplication();\n            if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(application, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2016-12-02 06:32:18","commitOrder":8,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = dataSource.getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","date":"2016-12-02 06:32:18","endLine":181,"groupId":"3608","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4e/ea1ce845024c2684d3dff25d9eb18bd7cb9ebc.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPApplication application = dataSource.getContainer().getApplication();\n                if (contentLength < application.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                application.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, application, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(application, tempFile);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"170f1aebc9763c55777390a3f55db3a5bbfd57bf","commitMessage":"@@@Application model refactoring\n\n\nFormer-commit-id: e5c9be8650805bece3eaf6e230b632f2ce613036","date":"2016-12-02 06:32:18","modifiedFileCount":"34","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-12-02 06:32:18","codes":[{"authorDate":"2016-12-29 01:38:21","commitOrder":9,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2016-12-29 01:38:21","endLine":124,"groupId":"2886","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/34b84a95e8913df1cfac72b2d4cd74cfc37888.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                }\n                catch (SQLException e) {\n                    throw new DBCException(e, dataSource);\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (SQLException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2016-12-02 06:32:18","commitOrder":9,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = dataSource.getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","date":"2016-12-02 06:32:18","endLine":181,"groupId":"3608","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4e/ea1ce845024c2684d3dff25d9eb18bd7cb9ebc.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = dataSource.getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"0642210b6f0975a5c52ee5b8d628e5b263235de9","commitMessage":"@@@#1043 Extra error handling in LOB operations\n\n\nFormer-commit-id: 3fd46db766817829106223647e4242f5e30cab64","date":"2016-12-29 01:38:21","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2017-02-28 18:00:26","codes":[{"authorDate":"2017-02-28 18:00:26","commitOrder":10,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2017-02-28 18:00:26","endLine":125,"groupId":"2886","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/a6cda93be899e0173d8d1c5904575bab2e32be.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2017-02-28 18:00:26","commitOrder":10,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = dataSource.getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                getDefaultEncoding());\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","date":"2017-02-28 18:00:26","endLine":180,"groupId":"3608","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/56/7369f34b59caba6b65ce2ee363fa345fdd083e.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = dataSource.getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                platform.getPreferenceStore().getString(ModelPreferences.CONTENT_HEX_ENCODING));\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"5ecc2dcd9f3699d5cc865fc4ce5b2ed276c98292","commitMessage":"@@@Content encoding (use one from preferences)\n\n\nFormer-commit-id: 7abe3786328ee897cc4ecfbe1513b3de38e0db18","date":"2017-02-28 18:00:26","modifiedFileCount":"7","status":"M","submitter":"serge-rider"},{"authorTime":"2020-08-31 00:48:44","codes":[{"authorDate":"2020-08-31 00:48:44","commitOrder":11,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, executionContext);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2020-08-31 00:48:44","endLine":125,"groupId":"2886","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e8/c82225d758f5ae0fb6cf8d841cf6f88dd35c16.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = dataSource.getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, dataSource);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, dataSource);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"},{"authorDate":"2020-08-31 00:48:44","commitOrder":11,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                getDefaultEncoding());\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, executionContext);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","date":"2020-08-31 00:48:44","endLine":180,"groupId":"3608","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ac/94a6fce588207e859771ddde15f17a5169e916.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = dataSource.getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                getDefaultEncoding());\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, dataSource);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"3e80e6b4b8d5987e031242a6fced2b32adcc3ad9","commitMessage":"@@@LOB objects refactoring (use executionContext instead of dataSource)\n\n\nFormer-commit-id: c1ad11133ba708ece562b0a8f26d7f8447084335","date":"2020-08-31 00:48:44","modifiedFileCount":"19","status":"M","submitter":"serge-rider"},{"authorTime":"2021-08-18 16:56:42","codes":[{"authorDate":"2021-08-18 16:56:42","commitOrder":12,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, executionContext);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding(), true);\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","date":"2021-08-18 16:56:42","endLine":126,"groupId":"10888","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/78/007fbc968fe2b0df666c0a268c574eb6476034.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && blob != null) {\n            long contentLength = getContentLength();\n            DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n            if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                try {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        storage = BytesContentStorage.createFromStream(\n                            bs,\n                            contentLength,\n                            getDefaultEncoding());\n                    }\n                } catch (IOException e) {\n                    throw new DBCException(\"IO error while reading content\", e);\n                } catch (Throwable e) {\n                    throw new DBCException(e, executionContext);\n                }\n            } else {\n                \r\n                File tempFile;\n                try {\n                    tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + blob.hashCode());\n                }\n                catch (IOException e) {\n                    throw new DBCException(\"Can't create temporary file\", e);\n                }\n                try (OutputStream os = new FileOutputStream(tempFile)) {\n                    try (InputStream bs = blob.getBinaryStream()) {\n                        ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                    }\n                } catch (IOException e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(\"IO error while copying stream\", e);\n                } catch (Throwable e) {\n                    ContentUtils.deleteTempFile(tempFile);\n                    throw new DBCException(e, executionContext);\n                }\n                this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n            }\n            \r\n            releaseBlob();\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/data/JDBCContentBLOB.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2021-08-18 16:56:42","commitOrder":12,"curCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                getDefaultEncoding());\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, executionContext);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding(), true);\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","date":"2021-08-18 16:56:42","endLine":180,"groupId":"10888","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"getContents","params":"(DBRProgressMonitormonitor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/88/ab04af2c229f545d677a5e050731e896f86877.src","preCode":"    public DBDContentStorage getContents(DBRProgressMonitor monitor)\n        throws DBCException\n    {\n        if (storage == null && bfile != null) {\n            try {\n                openFile();\n                long contentLength = getContentLength();\n                DBPPlatform platform = executionContext.getDataSource().getContainer().getPlatform();\n                if (contentLength < platform.getPreferenceStore().getInt(ModelPreferences.MEMORY_CONTENT_MAX_SIZE)) {\n                    try {\n                        try (InputStream bs = getInputStream()) {\n                            storage = BytesContentStorage.createFromStream(\n                                bs,\n                                contentLength,\n                                getDefaultEncoding());\n                        }\n                    } catch (IOException e) {\n                        throw new DBCException(\"IO error while reading content\", e);\n                    }\n                } else {\n                    \r\n                    File tempFile;\n                    try {\n                        tempFile = ContentUtils.createTempContentFile(monitor, platform, \"blob\" + bfile.hashCode());\n                    } catch (IOException e) {\n                        throw new DBCException(\"Can't create temporary file\", e);\n                    }\n                    try (OutputStream os = new FileOutputStream(tempFile)) {\n                        try (InputStream bs = getInputStream()) {\n                            ContentUtils.copyStreams(bs, contentLength, os, monitor);\n                        }\n                    } catch (IOException e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(\"IO error while copying stream\", e);\n                    } catch (Throwable e) {\n                        ContentUtils.deleteTempFile(tempFile);\n                        throw new DBCException(e, executionContext);\n                    }\n                    this.storage = new TemporaryContentStorage(platform, tempFile, getDefaultEncoding());\n                }\n                \r\n                releaseBlob();\n            }\n            finally {\n                closeFile();\n            }\n        }\n        return storage;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/data/OracleContentBFILE.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"b71c42d935716e59adbfd8dd152d20cea3ecb604","commitMessage":"@@@#12614 Bugfix: external image files deleted after importing in detached editor\n","date":"2021-08-18 16:56:42","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"}]
