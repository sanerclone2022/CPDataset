[{"authorTime":"2016-11-28 05:49:11","codes":[{"authorDate":"2015-11-19 04:51:22","commitOrder":8,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT RDB$GENERATOR_NAME,RDB$DESCRIPTION FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, 1);\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, 2);\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2015-11-19 04:51:22","endLine":111,"groupId":"12216","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a9/cccf497681b9066f2b94b46aa309d395eb795a.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT RDB$GENERATOR_NAME,RDB$DESCRIPTION FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, 1);\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, 2);\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.firebird/src/org/jkiss/dbeaver/ext/firebird/model/FireBirdMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"NB"},{"authorDate":"2016-11-28 05:49:11","commitOrder":8,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2016-11-28 05:49:11","endLine":102,"groupId":"582","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a2/dcc6671141d851196c83383d1b8b9c130ceb08.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.h2/src/org/jkiss/dbeaver/ext/h2/model/H2MetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"37104cdb6e99c34829e1aa093b148fca97e5f0e6","commitMessage":"@@@H2 view definition.  sequences\n\n\nFormer-commit-id: 88e30367753410f1245211d59a3b333319ded4e6","date":"2016-11-28 05:49:11","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2018-07-23 15:41:36","commitOrder":9,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT RDB$GENERATOR_NAME,RDB$DESCRIPTION FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, 1);\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, 2);\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":121,"groupId":"12216","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6b/fa78977dff4f7e7e1f5ca23f088a715282cb6d.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT RDB$GENERATOR_NAME,RDB$DESCRIPTION FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, 1);\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, 2);\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.firebird/src/org/jkiss/dbeaver/ext/firebird/model/FireBirdMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-07-23 15:41:36","commitOrder":9,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":101,"groupId":"582","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/8d316215e8a23ac541054ec1efe37e4bf6dbf5.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container.getDataSource(), \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.h2/src/org/jkiss/dbeaver/ext/h2/model/H2MetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"}],"commitId":"f5dacff54df650fa052fcc6e82dac15c414085c3","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: f856da844bdb094ac789a5c775045caea0c36124","date":"2018-07-23 15:41:36","modifiedFileCount":"524","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2018-08-15 00:53:44","commitOrder":10,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, \"RDB$DESCRIPTION\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-08-15 00:53:44","endLine":121,"groupId":"8600","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/46/914a942bddc60385558f4ba4c7305b6ff40608.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT RDB$GENERATOR_NAME,RDB$DESCRIPTION FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, 1);\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, 2);\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.firebird/src/org/jkiss/dbeaver/ext/firebird/model/FireBirdMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-07-23 15:41:36","commitOrder":10,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":101,"groupId":"582","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/8d316215e8a23ac541054ec1efe37e4bf6dbf5.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.h2/src/org/jkiss/dbeaver/ext/h2/model/H2MetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"aa14dc53c5c488a5ae30d1a1ef21f3c0f0ddea31","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 82f7a4fe56fccb9cb54aecddfd86d69cd795214f","date":"2018-08-15 00:53:44","modifiedFileCount":"162","status":"M","submitter":"serge@jkiss.org"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2019-02-12 04:36:02","commitOrder":11,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"RDB$DESCRIPTION\");\n                        FireBirdSequence sequence = new FireBirdSequence(\n                            container,\n                            name,\n                            description,\n                            null,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2019-02-12 04:36:02","endLine":109,"groupId":"8600","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/38/ee7afffc3d3eb5a19ebb7b97b748c5cce79605.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        name = name.trim();\n                        String description = JDBCUtils.safeGetString(dbResult, \"RDB$DESCRIPTION\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            -1,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                \r\n                for (GenericSequence sequence : result) {\n                    try (JDBCPreparedStatement dbSeqStat = session.prepareStatement(\"SELECT GEN_ID(\" + sequence.getName() + \", 0) from RDB$DATABASE\")) {\n                        try (JDBCResultSet seqResults = dbSeqStat.executeQuery()) {\n                            seqResults.next();\n                            sequence.setLastValue(JDBCUtils.safeGetLong(seqResults, 1));\n                        }\n                    }\n                }\n\n                return result;\n\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.firebird/src/org/jkiss/dbeaver/ext/firebird/model/FireBirdMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2018-07-23 15:41:36","commitOrder":11,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":101,"groupId":"582","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/8d316215e8a23ac541054ec1efe37e4bf6dbf5.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.h2/src/org/jkiss/dbeaver/ext/h2/model/H2MetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"32a04f7a0ce604240bfef8efc2324373edb1af84","commitMessage":"@@@#5252 Firebird: sequence reading fix\n\n\nFormer-commit-id: 5dc7085abc3401e3e676ea70778c0d445c9ecbb4","date":"2019-02-12 04:36:02","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2020-04-28 16:12:35","commitOrder":12,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetStringTrimmed(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetStringTrimmed(dbResult, \"RDB$DESCRIPTION\");\n                        FireBirdSequence sequence = new FireBirdSequence(\n                            container,\n                            name,\n                            description,\n                            null,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2020-04-28 16:12:35","endLine":113,"groupId":"13354","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ac/378d17a13058f28f3557e0c87c3835bd69c15f.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"RDB$DESCRIPTION\");\n                        FireBirdSequence sequence = new FireBirdSequence(\n                            container,\n                            name,\n                            description,\n                            null,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.firebird/src/org/jkiss/dbeaver/ext/firebird/model/FireBirdMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2018-07-23 15:41:36","commitOrder":12,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":101,"groupId":"582","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/8d316215e8a23ac541054ec1efe37e4bf6dbf5.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.h2/src/org/jkiss/dbeaver/ext/h2/model/H2MetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"5a754e9dc7f75b11745c5db3e9489edf06576391","commitMessage":"@@@dbeaver/cloudbeaver #11 Firebird driver version update. Tables read fix (trim strings)\n\n\nFormer-commit-id: 36c97228106195797b108df8f17be783f72ff21e","date":"2020-04-28 16:12:35","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2018-07-23 15:41:36","codes":[{"authorDate":"2021-02-20 21:26:38","commitOrder":13,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetStringTrimmed(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetStringTrimmed(dbResult, \"RDB$DESCRIPTION\");\n                        boolean isSystem = JDBCUtils.safeGetBoolean(dbResult, \"RDB$SYSTEM_FLAG\");\n                        FireBirdSequence sequence = new FireBirdSequence(\n                            container,\n                            name,\n                            description,\n                            null,\n                            0,\n                            -1,\n                            1,\n                            isSystem\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2021-02-20 21:26:38","endLine":118,"groupId":"10501","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/51/df6211ef310f830ac3d2f20e035397a75f3b3a.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM RDB$GENERATORS\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetStringTrimmed(dbResult, \"RDB$GENERATOR_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetStringTrimmed(dbResult, \"RDB$DESCRIPTION\");\n                        FireBirdSequence sequence = new FireBirdSequence(\n                            container,\n                            name,\n                            description,\n                            null,\n                            0,\n                            -1,\n                            1\n                        );\n                        result.add(sequence);\n                    }\n                }\n\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.firebird/src/org/jkiss/dbeaver/ext/firebird/model/FireBirdMetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"M"},{"authorDate":"2018-07-23 15:41:36","commitOrder":13,"curCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","date":"2018-07-23 15:41:36","endLine":101,"groupId":"10501","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSequences","params":"(@NotNullDBRProgressMonitormonitor@@NotNullGenericStructContainercontainer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8c/8d316215e8a23ac541054ec1efe37e4bf6dbf5.src","preCode":"    public List<GenericSequence> loadSequences(@NotNull DBRProgressMonitor monitor, @NotNull GenericStructContainer container) throws DBException {\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, container, \"Read sequences\")) {\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\"SELECT * FROM INFORMATION_SCHEMA.SEQUENCES\")) {\n                List<GenericSequence> result = new ArrayList<>();\n\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String name = JDBCUtils.safeGetString(dbResult, \"SEQUENCE_NAME\");\n                        if (name == null) {\n                            continue;\n                        }\n                        String description = JDBCUtils.safeGetString(dbResult, \"REMARKS\");\n                        GenericSequence sequence = new GenericSequence(\n                            container,\n                            name,\n                            description,\n                            JDBCUtils.safeGetLong(dbResult, \"CURRENT_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MIN_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"MAX_VALUE\"),\n                            JDBCUtils.safeGetLong(dbResult, \"INCREMENT\")\n                        );\n                        result.add(sequence);\n                    }\n                }\n                return result;\n            }\n        } catch (SQLException e) {\n            throw new DBException(e, container.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.h2/src/org/jkiss/dbeaver/ext/h2/model/H2MetaModel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"d3350d26a96cc12c00feeb8f3aa30f427e91431a","commitMessage":"@@@Merge pull request #11435 from dbeaver/firebirdSystem#8181\n\n#8181 reading system flags for triggers and sequences added\n\nFormer-commit-id: 58e067693a04571e1d621e22e7d09078d3640381","date":"2021-02-20 21:26:38","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"}]
