[{"authorTime":"2019-02-19 21:27:55","codes":[{"authorDate":"2019-02-19 21:27:55","commitOrder":1,"curCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","date":"2019-02-19 21:27:55","endLine":63,"groupId":"3509","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLPlanClassic","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7e/6446eca490a5dd857229e22dd6d918078b1478.src","preCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"},{"authorDate":"2019-02-19 21:27:55","commitOrder":1,"curCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                while (dbResult.next()) {\n\r\n\r\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","date":"2019-02-19 21:27:55","endLine":60,"groupId":"3899","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"MySQLPlanJSON","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9c/d116b8f1e3c963b127be4ddf60b37def4537ce.src","preCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                while (dbResult.next()) {\n\r\n\r\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"B"}],"commitId":"15b666265634c537ee2de48c4b15a6d7a64dfe4f","commitMessage":"@@@MySQL plan analyzer improvements\n\n\nFormer-commit-id: 7b1679bdcec47dc5e0cd43aa1fa8f383e54b86dd","date":"2019-02-19 21:27:55","modifiedFileCount":"2","status":"B","submitter":"Serge Rider"},{"authorTime":"2019-02-19 23:43:16","codes":[{"authorDate":"2019-02-19 21:27:55","commitOrder":2,"curCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","date":"2019-02-19 21:27:55","endLine":63,"groupId":"3509","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLPlanClassic","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7e/6446eca490a5dd857229e22dd6d918078b1478.src","preCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"},{"authorDate":"2019-02-19 23:43:16","commitOrder":2,"curCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","date":"2019-02-19 23:43:16","endLine":102,"groupId":"3899","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"MySQLPlanJSON","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/eb/93ac027e48bd534d84fa2f383709c06943299d.src","preCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                while (dbResult.next()) {\n\r\n\r\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"}],"commitId":"47dba22323afe33e6c009962d3c161af5aa68391","commitMessage":"@@@MySQL plan json format support\n\n\nFormer-commit-id: d7b4e57aca7c8e995523e3c5bc79089bda56fc96","date":"2019-02-19 23:43:16","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-29 06:05:17","codes":[{"authorDate":"2019-12-29 06:05:17","commitOrder":3,"curCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2019-12-29 06:05:17","endLine":60,"groupId":"3509","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLPlanClassic","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cb/44809dd468d5823481b536c386570b534bc920.src","preCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":40,"status":"M"},{"authorDate":"2019-12-29 06:05:17","commitOrder":3,"curCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2019-12-29 06:05:17","endLine":99,"groupId":"3899","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"MySQLPlanJSON","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/00/f39197d36287d829c9055eed9f11bee053c9ce.src","preCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getDataSource());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"27c4e0bc98c408da4f8b0048241282dc53cb27b6","commitMessage":"@@@DBCException refactoring (for proper transactions invalidation)\n\n\nFormer-commit-id: f0891fe1ea04b4720836e3868aecc07da22640c3","date":"2019-12-29 06:05:17","modifiedFileCount":"82","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-29 06:05:17","codes":[{"authorDate":"2020-04-23 18:30:45","commitOrder":4,"curCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        SQLDialect dialect = SQLUtils.getDialectFromObject(dataSource);\n        String plainQuery = SQLUtils.stripComments(dialect, query).toUpperCase();\n        if (!\"SELECT\".equalsIgnoreCase(SQLUtils.getFirstKeyword(dialect, plainQuery))) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2020-04-23 18:30:45","endLine":62,"groupId":"3509","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLPlanClassic","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6b/cd22fb94b7de728918d5fa9d16d58fd5d9423b.src","preCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"M"},{"authorDate":"2019-12-29 06:05:17","commitOrder":4,"curCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2019-12-29 06:05:17","endLine":99,"groupId":"3899","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"MySQLPlanJSON","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/00/f39197d36287d829c9055eed9f11bee053c9ce.src","preCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"N"}],"commitId":"567432b12d2f9c9dd716c6d6bf5244d62f6909a1","commitMessage":"@@@#8401 MySQL execution plan: query type detection fixed\n\n\nFormer-commit-id: 8cb1708a3a71415699c77975fb2ab827ddc91fe8","date":"2020-04-23 18:30:45","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-23 23:20:39","codes":[{"authorDate":"2020-04-23 18:30:45","commitOrder":5,"curCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        SQLDialect dialect = SQLUtils.getDialectFromObject(dataSource);\n        String plainQuery = SQLUtils.stripComments(dialect, query).toUpperCase();\n        if (!\"SELECT\".equalsIgnoreCase(SQLUtils.getFirstKeyword(dialect, plainQuery))) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2020-04-23 18:30:45","endLine":62,"groupId":"3509","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"MySQLPlanClassic","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6b/cd22fb94b7de728918d5fa9d16d58fd5d9423b.src","preCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        SQLDialect dialect = SQLUtils.getDialectFromObject(dataSource);\n        String plainQuery = SQLUtils.stripComments(dialect, query).toUpperCase();\n        if (!\"SELECT\".equalsIgnoreCase(SQLUtils.getFirstKeyword(dialect, plainQuery))) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":41,"status":"N"},{"authorDate":"2020-04-23 23:20:39","commitOrder":5,"curCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase().equals(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2020-04-23 23:20:39","endLine":98,"groupId":"3899","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"MySQLPlanJSON","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7e/be9f0a4cf19fcdb769f12bd034b389b6109a8e.src","preCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        String plainQuery = SQLUtils.stripComments(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase();\n        if (!plainQuery.startsWith(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"9478550c28998dcdce9afd11e858974fdee87bb5","commitMessage":"@@@#8401 Extract first keyword properly\n\n\nFormer-commit-id: acf89671a807a4fa5ba52c9d4ddf70f2da10ca33","date":"2020-04-23 23:20:39","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2021-06-21 17:13:11","codes":[{"authorDate":"2021-06-21 17:13:11","commitOrder":6,"curCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2021-06-21 17:13:11","endLine":54,"groupId":"10165","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"MySQLPlanClassic","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fc/500002db5fae2aa814e1a670ca4d0e677b77cd.src","preCode":"    public MySQLPlanClassic(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        SQLDialect dialect = SQLUtils.getDialectFromObject(dataSource);\n        String plainQuery = SQLUtils.stripComments(dialect, query).toUpperCase();\n        if (!\"SELECT\".equalsIgnoreCase(SQLUtils.getFirstKeyword(dialect, plainQuery))) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodePlain> nodes = new ArrayList<>();\n                while (dbResult.next()) {\n                    MySQLPlanNodePlain node = new MySQLPlanNodePlain(null, dbResult);\n                    nodes.add(node);\n                }\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanClassic.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":39,"status":"M"},{"authorDate":"2021-06-21 17:13:11","commitOrder":6,"curCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","date":"2021-06-21 17:13:11","endLine":93,"groupId":"10165","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"MySQLPlanJSON","params":"(JDBCSessionsession@Stringquery)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/27/6edf7d095b6c2b6b503b3ddb1923754480e5c6.src","preCode":"    public MySQLPlanJSON(JDBCSession session, String query) throws DBCException {\n        super((MySQLDataSource) session.getDataSource(), query);\n\n        if (!SQLUtils.getFirstKeyword(SQLUtils.getDialectFromObject(dataSource), query).toUpperCase().equals(\"SELECT\")) {\n            throw new DBCException(\"Only SELECT statements could produce execution plan\");\n        }\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(getPlanQueryString())) {\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                List<MySQLPlanNodeJSON> nodes = new ArrayList<>();\n\n                dbResult.next();\n                String jsonPlan = dbResult.getString(1);\n\n                JsonObject planObject = gson.fromJson(jsonPlan, JsonObject.class);\n                JsonObject queryBlock = planObject.getAsJsonObject(\"query_block\");\n\n                MySQLPlanNodeJSON rootNode = new MySQLPlanNodeJSON(null, \"select\", queryBlock);\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n                if (CommonUtils.isEmpty(rootNode.getNested()) && rootNode.getProperty(\"message\") != null) {\n                    throw new DBCException(\"Can't explain plan: \" + rootNode.getProperty(\"message\"));\n                }\n                nodes.add(rootNode);\n\n                rootNodes = nodes;\n            }\n        } catch (SQLException e) {\n            throw new DBCException(e, session.getExecutionContext());\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/plan/MySQLPlanJSON.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"5e1a9f7f8681ad2269c5b718653286091db08ec0","commitMessage":"@@@Merge pull request #12917 from dbeaver/mysql-explain-cte#12274\n\n#12274 Support explaining queries with CTE","date":"2021-06-21 17:13:11","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"}]
