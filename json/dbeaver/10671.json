[{"authorTime":"2020-08-08 04:06:03","codes":[{"authorDate":"2020-08-08 04:06:03","commitOrder":1,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            if (!(tableManager instanceof DBEStructEditor)) {\n                throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n            }\n            Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n            Class<? extends DBSEntityAttribute> attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n            if (attrClass == null) {\n                throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n            }\n\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            SQLStructEditor.StructCreateCommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = (SQLStructEditor.StructCreateCommand) tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                    continue;\n                }\n                DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                if (!(newAttribute instanceof DBPNamedObject2)) {\n                    throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                }\n                ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                \r\n                if (newAttribute instanceof DBSTypedObjectExt2) {\n                    DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                    if (typedAttr instanceof DBSTypedObjectExt3) {\n                        String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                        ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                    } else {\n                        String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                        typedAttr.setTypeName(targetAttrType);\n                    }\n\n                    DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                    if (sourceAttr != null) {\n                        typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                        typedAttr.setPrecision(sourceAttr.getPrecision());\n                        typedAttr.setScale(sourceAttr.getScale());\n                        typedAttr.setRequired(sourceAttr.isRequired());\n                    }\n                }\n\n                SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                if (createCommand != null) {\n                    createCommand.aggregateCommand(attrCreateCommand);\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2020-08-08 04:06:03","endLine":256,"groupId":"15568","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c5/5dd75c57f345e8c54b117488237a9499d36fb0.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            if (!(tableManager instanceof DBEStructEditor)) {\n                throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n            }\n            Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n            Class<? extends DBSEntityAttribute> attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n            if (attrClass == null) {\n                throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n            }\n\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            SQLStructEditor.StructCreateCommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = (SQLStructEditor.StructCreateCommand) tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                    continue;\n                }\n                DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                if (!(newAttribute instanceof DBPNamedObject2)) {\n                    throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                }\n                ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                \r\n                if (newAttribute instanceof DBSTypedObjectExt2) {\n                    DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                    if (typedAttr instanceof DBSTypedObjectExt3) {\n                        String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                        ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                    } else {\n                        String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                        typedAttr.setTypeName(targetAttrType);\n                    }\n\n                    DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                    if (sourceAttr != null) {\n                        typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                        typedAttr.setPrecision(sourceAttr.getPrecision());\n                        typedAttr.setScale(sourceAttr.getScale());\n                        typedAttr.setRequired(sourceAttr.isRequired());\n                    }\n                }\n\n                SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                if (createCommand != null) {\n                    createCommand.aggregateCommand(attrCreateCommand);\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"B"},{"authorDate":"2020-08-08 04:06:03","commitOrder":1,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-08 04:06:03","endLine":317,"groupId":"14393","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c5/5dd75c57f345e8c54b117488237a9499d36fb0.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"B"}],"commitId":"528dfa0aa03fe80b224147883d8f86a55fdd8678","commitMessage":"@@@#8556 Stream producer settings refresh. Database consumer config (mappings) save\n\n\nFormer-commit-id: 9375fffb4652aef82f9975633d58fb92100726b2","date":"2020-08-08 04:06:03","modifiedFileCount":"3","status":"B","submitter":"serge-rider"},{"authorTime":"2020-08-08 04:06:03","codes":[{"authorDate":"2020-08-10 20:44:45","commitOrder":2,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            SQLStructEditor.ObjectCreateCommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                        if (sourceAttr != null) {\n                            typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                            typedAttr.setPrecision(sourceAttr.getPrecision());\n                            typedAttr.setScale(sourceAttr.getScale());\n                            typedAttr.setRequired(sourceAttr.isRequired());\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof SQLStructEditor.StructCreateCommand) {\n                        ((SQLStructEditor.StructCreateCommand)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2020-08-10 20:44:45","endLine":264,"groupId":"15568","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/fe/86f5a66977c8f03188166116beb69bb317e138.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            if (!(tableManager instanceof DBEStructEditor)) {\n                throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n            }\n            Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n            Class<? extends DBSEntityAttribute> attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n            if (attrClass == null) {\n                throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n            }\n\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            SQLStructEditor.StructCreateCommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = (SQLStructEditor.StructCreateCommand) tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                    continue;\n                }\n                DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                if (!(newAttribute instanceof DBPNamedObject2)) {\n                    throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                }\n                ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                \r\n                if (newAttribute instanceof DBSTypedObjectExt2) {\n                    DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                    if (typedAttr instanceof DBSTypedObjectExt3) {\n                        String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                        ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                    } else {\n                        String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                        typedAttr.setTypeName(targetAttrType);\n                    }\n\n                    DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                    if (sourceAttr != null) {\n                        typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                        typedAttr.setPrecision(sourceAttr.getPrecision());\n                        typedAttr.setScale(sourceAttr.getScale());\n                        typedAttr.setRequired(sourceAttr.isRequired());\n                    }\n                }\n\n                SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                if (createCommand != null) {\n                    createCommand.aggregateCommand(attrCreateCommand);\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"},{"authorDate":"2020-08-08 04:06:03","commitOrder":2,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-08 04:06:03","endLine":317,"groupId":"14393","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c5/5dd75c57f345e8c54b117488237a9499d36fb0.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"}],"commitId":"128de68d3caf6cbcc43edfe82986c41201ebef85","commitMessage":"@@@Data transfer: handle non-relational target databases\n\n\nFormer-commit-id: 55bbd6c022f6943593cca95a2c25139597a2df1a","date":"2020-08-10 20:44:45","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-08 04:06:03","codes":[{"authorDate":"2020-08-10 22:01:58","commitOrder":3,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                        if (sourceAttr != null) {\n                            typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                            typedAttr.setPrecision(sourceAttr.getPrecision());\n                            typedAttr.setScale(sourceAttr.getScale());\n                            typedAttr.setRequired(sourceAttr.isRequired());\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2020-08-10 22:01:58","endLine":263,"groupId":"15568","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/7c8be9575b659580a585f7b9a83f34ee0e731f.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            SQLStructEditor.ObjectCreateCommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                        if (sourceAttr != null) {\n                            typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                            typedAttr.setPrecision(sourceAttr.getPrecision());\n                            typedAttr.setScale(sourceAttr.getScale());\n                            typedAttr.setRequired(sourceAttr.isRequired());\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof SQLStructEditor.StructCreateCommand) {\n                        ((SQLStructEditor.StructCreateCommand)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-08-08 04:06:03","commitOrder":3,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-08 04:06:03","endLine":317,"groupId":"14393","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c5/5dd75c57f345e8c54b117488237a9499d36fb0.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":293,"status":"N"}],"commitId":"6bd05d6dfefe5c9f89d2bac172b1d4bbc66235ce","commitMessage":"@@@Build fix\n\n\nFormer-commit-id: 1d806e7d8ec6b90790bbda8de384bf8c47c199ba","date":"2020-08-10 22:01:58","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-13 02:18:36","codes":[{"authorDate":"2020-08-13 02:18:36","commitOrder":4,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2020-08-13 02:18:36","endLine":275,"groupId":"14391","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b9/37a1df7ae464b931d91397ff4615d43c3aaae9.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(containerMapping.getTargetName());\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(attributeMapping.getTargetName());\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                        if (sourceAttr != null) {\n                            typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                            typedAttr.setPrecision(sourceAttr.getPrecision());\n                            typedAttr.setScale(sourceAttr.getScale());\n                            typedAttr.setRequired(sourceAttr.isRequired());\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-08-13 02:18:36","commitOrder":4,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-13 02:18:36","endLine":337,"groupId":"14393","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b9/37a1df7ae464b931d91397ff4615d43c3aaae9.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"M"}],"commitId":"94398858fb702e0b5adac7d3d1676e6cbe62c1b9","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: c013082c666c3077318900d757f87bfef4fbbda9","date":"2020-08-13 02:18:36","modifiedFileCount":"76","status":"M","submitter":"serge-rider"},{"authorTime":"2020-08-13 02:18:36","codes":[{"authorDate":"2021-01-04 17:22:32","commitOrder":5,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2021-01-04 17:22:32","endLine":275,"groupId":"14391","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/89/37e7ab0f4cb9ff937e99045f4b31dc39af298e.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"},{"authorDate":"2020-08-13 02:18:36","commitOrder":5,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-13 02:18:36","endLine":337,"groupId":"14393","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b9/37a1df7ae464b931d91397ff4615d43c3aaae9.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"ae4bb34820e84c7ea208b3c7162c816dd8f7bbb5","commitMessage":"@@@#10836 Full data type name mapping fix (use explicit target datasource)\n\n\nFormer-commit-id: 672eebd058d037ee1a8fa33e0ee37c5430a9f61a","date":"2021-01-04 17:22:32","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2020-08-13 02:18:36","codes":[{"authorDate":"2021-05-14 01:12:50","commitOrder":6,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = BeanUtils.findAssignableType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2021-05-14 01:12:50","endLine":280,"groupId":"14391","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3d/a96c503df63b1645a248ed73d7380d6ee9e48b.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = getChildType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-08-13 02:18:36","commitOrder":6,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-13 02:18:36","endLine":337,"groupId":"14393","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b9/37a1df7ae464b931d91397ff4615d43c3aaae9.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"dbd97e4c29768dace2eccbec27b8ab868d00fe27","commitMessage":"@@@dbeaver/dbeaver-ee#587 Create associations + utils refactoring\n\n\nFormer-commit-id: ca095f526350666fccfff770b41d29a0b31d4dc7","date":"2021-05-14 01:12:50","modifiedFileCount":"9","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-13 02:18:36","codes":[{"authorDate":"2021-06-08 17:32:57","commitOrder":7,"curCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = BeanUtils.findAssignableType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = DBExecUtils.getActionsListFromCommandContext(monitor, commandContext, executionContext, options, null);\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","date":"2021-06-08 17:32:57","endLine":274,"groupId":"10671","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"generateStructTableDDL","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/98e64fea3b04648ed7e1fff80ce563979bc835.src","preCode":"    private static DBEPersistAction[] generateStructTableDDL(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        try {\n            Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n            if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n                throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n            }\n            SQLObjectEditor<DBSEntity, ?> tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n            if (tableManager == null) {\n                throw new DBException(\"Table manager not found for '\" + tableClass.getName() + \"'\");\n            }\n            Class<? extends DBSEntityAttribute> attrClass;\n            SQLObjectEditor<DBSEntityAttribute,?> attributeManager;\n            if (executionContext.getDataSource().getInfo().isDynamicMetadata()) {\n                attrClass = null;\n                attributeManager = null;\n            } else {\n                if (!(tableManager instanceof DBEStructEditor)) {\n                    throw new DBException(\"Table create not supported by \" + executionContext.getDataSource().getContainer().getDriver().getName());\n                }\n                Class<?>[] childTypes = ((DBEStructEditor<?>) tableManager).getChildTypes();\n                attrClass = BeanUtils.findAssignableType(childTypes, DBSEntityAttribute.class);\n                if (attrClass == null) {\n                    throw new DBException(\"Column manager not found for '\" + tableClass.getName() + \"'\");\n                }\n                attributeManager = editorsRegistry.getObjectManager(attrClass, SQLObjectEditor.class);\n            }\n\n            Map<String, Object> options = new HashMap<>();\n            options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n\n            DBECommandContext commandContext = new TargetCommandContext(executionContext);\n\n            String tableFinalName;\n\n            DBSEntity table;\n            DBECommand createCommand = null;\n            if (containerMapping.getMappingType() == DatabaseMappingType.create) {\n                table = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n                tableFinalName = DBObjectNameCaseTransformer.transformName(table.getDataSource(), containerMapping.getTargetName());\n                if (table instanceof DBPNamedObject2) {\n                    ((DBPNamedObject2) table).setName(tableFinalName);\n                } else {\n                    throw new DBException(\"Table name cannot be set for \" + tableClass.getName());\n                }\n\n                createCommand = tableManager.makeCreateCommand(table, options);\n            } else {\n                table = (DBSEntity) containerMapping.getTarget();\n                if (table == null) {\n                    throw new DBException(\"Internal error - target table not set\");\n                }\n                tableFinalName = table.getName();\n            }\n\n            if (attributeManager != null) {\n                for (DatabaseMappingAttribute attributeMapping : containerMapping.getAttributeMappings(monitor)) {\n                    if (attributeMapping.getMappingType() != DatabaseMappingType.create) {\n                        continue;\n                    }\n                    DBSEntityAttribute newAttribute = attributeManager.createNewObject(monitor, commandContext, table, null, options);\n                    if (!(newAttribute instanceof DBPNamedObject2)) {\n                        throw new DBException(\"Table column name cannot be set for \" + attrClass.getName());\n                    }\n                    ((DBPNamedObject2) newAttribute).setName(\n                        DBObjectNameCaseTransformer.transformName(newAttribute.getDataSource(),\n                            attributeMapping.getTargetName()));\n\n                    \r\n                    if (newAttribute instanceof DBSTypedObjectExt2) {\n                        DBSTypedObjectExt2 typedAttr = (DBSTypedObjectExt2) newAttribute;\n\n                        boolean typeModifiersSet = false;\n                        if (typedAttr instanceof DBSTypedObjectExt3) {\n                            String fullTargetTypeName = attributeMapping.getTargetType(executionContext.getDataSource(), true);\n                            typeModifiersSet = fullTargetTypeName.contains(\"(\");\n                            ((DBSTypedObjectExt3) typedAttr).setFullTypeName(fullTargetTypeName);\n                        } else {\n                            String targetAttrType = attributeMapping.getTargetType(executionContext.getDataSource(), false);\n                            typedAttr.setTypeName(targetAttrType);\n                        }\n\n                        if (!typeModifiersSet) {\n                            DBSAttributeBase sourceAttr = attributeMapping.getSource();\n                            if (sourceAttr != null) {\n                                typedAttr.setMaxLength(sourceAttr.getMaxLength());\n                                typedAttr.setPrecision(sourceAttr.getPrecision());\n                                typedAttr.setScale(sourceAttr.getScale());\n                                typedAttr.setRequired(sourceAttr.isRequired());\n                            }\n                        }\n                    }\n\n                    SQLObjectEditor.ObjectCreateCommand attrCreateCommand = attributeManager.makeCreateCommand(newAttribute, options);\n                    if (createCommand instanceof DBECommandAggregator) {\n                        ((DBECommandAggregator)createCommand).aggregateCommand(attrCreateCommand);\n                    }\n                }\n            }\n\n            containerMapping.setTargetName(tableFinalName);\n\n            List<DBEPersistAction> actions = new ArrayList<>();\n            for (DBECommand cmd : commandContext.getFinalCommands()) {\n                DBEPersistAction[] persistActions = cmd.getPersistActions(monitor, executionContext, options);\n                if (persistActions != null) {\n                    Collections.addAll(actions, persistActions);\n                }\n            }\n            return actions.toArray(new DBEPersistAction[0]);\n        } catch (DBException e) {\n            log.debug(e);\n            return null;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":165,"status":"M"},{"authorDate":"2020-08-13 02:18:36","commitOrder":7,"curCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","date":"2020-08-13 02:18:36","endLine":337,"groupId":"10671","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"createTargetDynamicTable","params":"(DBRProgressMonitormonitor@DBCExecutionContextexecutionContext@DBSObjectContainerschema@DatabaseMappingContainercontainerMapping)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b9/37a1df7ae464b931d91397ff4615d43c3aaae9.src","preCode":"    public static void createTargetDynamicTable(DBRProgressMonitor monitor, DBCExecutionContext executionContext, DBSObjectContainer schema, DatabaseMappingContainer containerMapping) throws DBException {\n        final DBERegistry editorsRegistry = executionContext.getDataSource().getContainer().getPlatform().getEditorsRegistry();\n\n        Class<? extends DBSObject> tableClass = schema.getPrimaryChildType(monitor);\n        if (!DBSEntity.class.isAssignableFrom(tableClass)) {\n            throw new DBException(\"Wrong table container child type: \" + tableClass.getName());\n        }\n        SQLObjectEditor tableManager = editorsRegistry.getObjectManager(tableClass, SQLObjectEditor.class);\n        if (tableManager == null) {\n            throw new DBException(\"Entity manager not found for '\" + tableClass.getName() + \"'\");\n        }\n        DBECommandContext commandContext = new TargetCommandContext(executionContext);\n        Map<String, Object> options = new HashMap<>();\n        options.put(SQLObjectEditor.OPTION_SKIP_CONFIGURATION, true);\n        DBSObject targetEntity = tableManager.createNewObject(monitor, commandContext, schema, null, options);\n        if (targetEntity == null) {\n            throw new DBException(\"Null target entity returned\");\n        }\n        if (targetEntity instanceof DBPNamedObject2) {\n            ((DBPNamedObject2) targetEntity).setName(containerMapping.getTargetName());\n        } else {\n            throw new DBException(\"Can not set name for target entity '\" + targetEntity.getClass().getName() + \"'\");\n        }\n        commandContext.saveChanges(monitor, options);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.transfer/src/org/jkiss/dbeaver/tools/transfer/database/DatabaseTransferUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":313,"status":"N"}],"commitId":"dfff7114527f26bb244f25ceceeda34f8435725f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-06-08 17:32:57","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"}]
