[{"authorTime":"2015-07-01 22:08:05","codes":[{"authorDate":"2015-07-01 22:08:05","commitOrder":1,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n            \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults);\n        try {\n            dbStat.setString(1, procNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException\n                        {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n            finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n    }\n","date":"2015-07-01 22:08:05","endLine":200,"groupId":"12040","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1c/cd8c2df3b5629cae690045c711aa7c7c1c7691.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n            \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults);\n        try {\n            dbStat.setString(1, procNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException\n                        {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n            finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"B"},{"authorDate":"2015-07-01 22:08:05","commitOrder":1,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n            \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults);\n        try {\n            dbStat.setString(1, constrNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName()\n                        {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException\n                        {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n            finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n    }\n","date":"2015-07-01 22:08:05","endLine":326,"groupId":"6810","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1c/cd8c2df3b5629cae690045c711aa7c7c1c7691.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n            \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults);\n        try {\n            dbStat.setString(1, constrNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName()\n                        {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException\n                        {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n            finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":263,"status":"B"}],"commitId":"90ac579a64c970ba65c348aefb5b6d42d6063cc7","commitMessage":"@@@Plugins directories renamed (ext)\n\nFormer-commit-id: 88615645e80b32fba90eb0a74130657937e5c811","date":"2015-07-01 22:08:05","modifiedFileCount":"0","status":"B","submitter":"jurgen"},{"authorTime":"2015-10-03 06:58:22","codes":[{"authorDate":"2015-10-03 06:58:22","commitOrder":2,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2015-10-03 06:58:22","endLine":184,"groupId":"7502","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/2a/cb95d7369380729c30bd0947fd4ba628e1c6cf.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n            \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults);\n        try {\n            dbStat.setString(1, procNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException\n                        {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n            finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"},{"authorDate":"2015-10-03 06:58:22","commitOrder":2,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2015-10-03 06:58:22","endLine":294,"groupId":"3948","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/2a/cb95d7369380729c30bd0947fd4ba628e1c6cf.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n            \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults);\n        try {\n            dbStat.setString(1, constrNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            JDBCResultSet dbResult = dbStat.executeQuery();\n            try {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName()\n                        {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException\n                        {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n            finally {\n                dbResult.close();\n            }\n        } finally {\n            dbStat.close();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":239,"status":"M"}],"commitId":"7d8e925311844771cefc37311309cb62b064a6ec","commitMessage":"@@@Java 1.7 -> fix auto-close\n\nFormer-commit-id: 6d25c7bb871b38b224ca2771a7148a371cf306bf","date":"2015-10-03 06:58:22","modifiedFileCount":"78","status":"M","submitter":"jurgen"},{"authorTime":"2015-10-05 22:35:51","codes":[{"authorDate":"2015-10-05 22:35:51","commitOrder":3,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2015-10-05 22:35:51","endLine":185,"groupId":"7502","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/de891945b1230785b773e4c668a92c5d949295.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"M"},{"authorDate":"2015-10-05 22:35:51","commitOrder":3,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2015-10-05 22:35:51","endLine":295,"groupId":"3948","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/de891945b1230785b773e4c668a92c5d949295.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase());\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":240,"status":"M"}],"commitId":"8a8a096049c1fdbe99a5b89b41bc3c2b9d0230da","commitMessage":"@@@Case conversion fix (use EN locale)\n\nFormer-commit-id: 0e4bd70f4ece343dff9ccc18a4e31889aee6b521","date":"2015-10-05 22:35:51","modifiedFileCount":"9","status":"M","submitter":"jurgen"},{"authorTime":"2015-11-23 01:48:10","codes":[{"authorDate":"2015-10-05 22:35:51","commitOrder":4,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2015-10-05 22:35:51","endLine":185,"groupId":"7502","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f0/de891945b1230785b773e4c668a92c5d949295.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"N"},{"authorDate":"2015-11-23 01:48:10","commitOrder":4,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2015-11-23 01:48:10","endLine":297,"groupId":"3948","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/16/b92f00bdc31e95c9198230d1af9f3a78ebb7a3.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":241,"status":"M"}],"commitId":"4e20f81408f7d2c1a794fd317ec7537316251528","commitMessage":"@@@Annotations\n\n\nFormer-commit-id: f8aa11764117154d39fb31b044e2f50ab957016e","date":"2015-11-23 01:48:10","modifiedFileCount":"54","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-08-17 05:48:56","codes":[{"authorDate":"2016-08-17 05:48:56","commitOrder":5,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2016-08-17 05:48:56","endLine":186,"groupId":"7125","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/41/36b54db2700dd2484674b6f999769d065c748d.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"M"},{"authorDate":"2016-08-17 05:48:56","commitOrder":5,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2016-08-17 05:48:56","endLine":298,"groupId":"4886","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/41/36b54db2700dd2484674b6f999769d065c748d.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"01f0d3f768b2d9824e2eb5737db4a4dbc656e456","commitMessage":"@@@Object reference model refactoring (add object class info)\n\n\nFormer-commit-id: e3a043c97240352fb8b6b64a60674b1dc64956b0","date":"2016-08-17 05:48:56","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2016-09-12 20:35:27","codes":[{"authorDate":"2016-08-17 05:48:56","commitOrder":6,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2016-08-17 05:48:56","endLine":186,"groupId":"7125","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/41/36b54db2700dd2484674b6f999769d065c748d.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":146,"status":"N"},{"authorDate":"2016-09-12 20:35:27","commitOrder":6,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2016-09-12 20:35:30","endLine":302,"groupId":"1011","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f3/d7e88aa0b646d74a5d826f5f533fad96ce1fa0.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullQualifiedName() {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullQualifiedName() + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":246,"status":"M"}],"commitId":"a03a147e73df7aa4dae339fd4629409aaa89f113","commitMessage":"@@@Qualified objects model refactoring\n\n\nFormer-commit-id: 46d6664860ff90a574209711bf16ec16a3b6b17b","date":"2016-09-12 20:35:30","modifiedFileCount":"153","status":"M","submitter":"serge-rider"},{"authorTime":"2019-03-25 22:24:10","codes":[{"authorDate":"2019-03-25 22:24:10","commitOrder":7,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLDatabase catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLDatabase procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2019-03-25 22:24:10","endLine":189,"groupId":"7125","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLDatabasecatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ab/ff8c1ee897c763e1121cd480db2bdde33a3903.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-03-25 22:24:10","commitOrder":7,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLDatabase catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLDatabase tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2019-03-25 22:24:10","endLine":301,"groupId":"0","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLDatabasecatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ab/ff8c1ee897c763e1121cd480db2bdde33a3903.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"52052d9706bb4cc37aff664da157b4302b559eb8","commitMessage":"@@@MySQL model refactoring (use schemas but catalogs)\n\n\nFormer-commit-id: 4e097990e59251d1e58d14be604b833de32187ec","date":"2019-03-25 22:24:10","modifiedFileCount":"27","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-03-26 01:31:38","codes":[{"authorDate":"2019-03-26 01:31:38","commitOrder":8,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2019-03-26 01:31:38","endLine":189,"groupId":"7125","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringprocNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/5e16f7101433e84f00759cefac9c9f94771699.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLDatabase catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLDatabase procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2019-03-26 01:31:38","commitOrder":8,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2019-03-26 01:31:38","endLine":301,"groupId":"1011","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@StringconstrNameMask@intmaxResults@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/49/5e16f7101433e84f00759cefac9c9f94771699.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLDatabase catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLDatabase tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"}],"commitId":"01e96a024df392c2a3f6ad6995dd3ad41be1b549","commitMessage":"@@@MySQL catalog class name revert\n\n\nFormer-commit-id: 49d24aa68178116c82332e275c853dea6bb72df1","date":"2019-03-26 01:31:38","modifiedFileCount":"26","status":"M","submitter":"serge-rider"},{"authorTime":"2021-04-06 20:35:15","codes":[{"authorDate":"2021-04-06 20:35:15","commitOrder":9,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, @NotNull ObjectsSearchParams params,\n                                      List<DBSObjectReference> objects) throws SQLException {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        String sql = generateQuery(\n                params,\n                MySQLConstants.COL_ROUTINE_NAME,\n                \"ROUTINE_COMMENT\",\n                MySQLConstants.COL_ROUTINE_SCHEMA,\n                MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME,\n                MySQLConstants.META_TABLE_ROUTINES,\n                catalog,\n                objects\n        );\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(sql)) {\n            fillParameters(dbStat, params, catalog, true);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (!monitor.isCanceled() && dbResult.next()) {\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2021-04-06 20:35:15","endLine":188,"groupId":"676","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@@NotNullObjectsSearchParamsparams@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5b/7eec9288e0e1e9093426e5a20f18746703f2ea.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String procNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_ROUTINES + \" WHERE \" + MySQLConstants.COL_ROUTINE_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_ROUTINE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_ROUTINE_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, procNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2021-04-06 20:35:15","commitOrder":9,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, @NotNull ObjectsSearchParams params,\n                                        List<DBSObjectReference> objects) throws SQLException {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        String sql = generateQuery(\n                params,\n                MySQLConstants.COL_COLUMN_NAME,\n                \"COLUMN_COMMENT\",\n                MySQLConstants.COL_TABLE_SCHEMA,\n                MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME,\n                MySQLConstants.META_TABLE_COLUMNS,\n                catalog,\n                objects\n        );\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(sql)) {\n            fillParameters(dbStat, params, catalog, true);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (!monitor.isCanceled() && dbResult.next()) {\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2021-04-06 20:35:15","endLine":303,"groupId":"680","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@@NotNullObjectsSearchParamsparams@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5b/7eec9288e0e1e9093426e5a20f18746703f2ea.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, String constrNameMask, int maxResults, List<DBSObjectReference> objects)\n        throws SQLException, DBException\n    {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(\n            \"SELECT \" + MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME +\n                \" FROM \" + MySQLConstants.META_TABLE_COLUMNS + \" WHERE \" + MySQLConstants.COL_COLUMN_NAME + \" LIKE ? \" +\n                (catalog == null ? \"\" : \" AND \" + MySQLConstants.COL_TABLE_SCHEMA + \"=?\") +\n                \" ORDER BY \" + MySQLConstants.COL_COLUMN_NAME + \" LIMIT \" + maxResults)) {\n            dbStat.setString(1, constrNameMask.toLowerCase(Locale.ENGLISH));\n            if (catalog != null) {\n                dbStat.setString(2, catalog.getName());\n            }\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                int tableNum = maxResults;\n                while (dbResult.next() && tableNum-- > 0) {\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"}],"commitId":"57f75a36c097e247a0603d2a31c929d0e76c304a","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 5f91104468cde36ac982db80d67194f17242a12d","date":"2021-04-06 20:35:15","modifiedFileCount":"22","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-06-29 21:02:31","codes":[{"authorDate":"2021-06-29 21:02:31","commitOrder":10,"curCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, @NotNull ObjectsSearchParams params,\n                                      List<DBSObjectReference> objects) throws SQLException {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        QueryParams queryParams = new QueryParams(\n            MySQLConstants.COL_ROUTINE_NAME,\n            MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME,\n            MySQLConstants.META_TABLE_ROUTINES\n        );\n        if (params.isSearchInComments()) {\n            queryParams.setCommentColumnName(\"ROUTINE_COMMENT\");\n        }\n        if (catalog != null) {\n            queryParams.setSchemaColumnName(MySQLConstants.COL_ROUTINE_SCHEMA);\n        }\n        queryParams.setMaxResults(params.getMaxResults() - objects.size());\n        if (params.isSearchInDefinitions()) {\n            queryParams.setDefinitionColumnName(MySQLConstants.COL_ROUTINE_DEFINITION);\n        }\n        String sql = generateQuery(queryParams);\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(sql)) {\n            fillParameters(dbStat, params, catalog, true, true);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (!monitor.isCanceled() && dbResult.next()) {\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2021-06-29 21:02:31","endLine":196,"groupId":"10230","id":19,"instanceNumber":1,"isCurCommit":1,"methodName":"findProceduresByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@@NotNullObjectsSearchParamsparams@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/01768f8365e993361dd46965032d3f8ee9dbb2.src","preCode":"    private void findProceduresByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, @NotNull ObjectsSearchParams params,\n                                      List<DBSObjectReference> objects) throws SQLException {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        String sql = generateQuery(\n                params,\n                MySQLConstants.COL_ROUTINE_NAME,\n                \"ROUTINE_COMMENT\",\n                MySQLConstants.COL_ROUTINE_SCHEMA,\n                MySQLConstants.COL_ROUTINE_SCHEMA + \",\" + MySQLConstants.COL_ROUTINE_NAME,\n                MySQLConstants.META_TABLE_ROUTINES,\n                catalog,\n                objects\n        );\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(sql)) {\n            fillParameters(dbStat, params, catalog, true);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (!monitor.isCanceled() && dbResult.next()) {\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_SCHEMA);\n                    final String procName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_ROUTINE_NAME);\n                    objects.add(new AbstractObjectReference(procName, dataSource.getCatalog(catalogName), null, MySQLProcedure.class, RelationalObjectType.TYPE_PROCEDURE) {\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog procCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (procCatalog == null) {\n                                throw new DBException(\"Procedure catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLProcedure procedure = procCatalog.getProcedure(monitor, procName);\n                            if (procedure == null) {\n                                throw new DBException(\"Procedure '\" + procName + \"' not found in catalog '\" + procCatalog.getName() + \"'\");\n                            }\n                            return procedure;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":151,"status":"M"},{"authorDate":"2021-06-29 21:02:31","commitOrder":10,"curCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, @NotNull ObjectsSearchParams params,\n                                        List<DBSObjectReference> objects) throws SQLException {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        QueryParams queryParams = new QueryParams(\n            MySQLConstants.COL_COLUMN_NAME,\n            MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME,\n            MySQLConstants.META_TABLE_COLUMNS\n        );\n        if (params.isSearchInComments()) {\n            queryParams.setCommentColumnName(\"COLUMN_COMMENT\");\n        }\n        if (catalog != null) {\n            queryParams.setSchemaColumnName(MySQLConstants.COL_TABLE_SCHEMA);\n        }\n        queryParams.setMaxResults(params.getMaxResults() - objects.size());\n        if (params.isSearchInDefinitions()) {\n            queryParams.setDefinitionColumnName(MySQLConstants.COL_COLUMN_GENERATION_EXPRESSION);\n        }\n        String sql = generateQuery(queryParams);\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(sql)) {\n            fillParameters(dbStat, params, catalog, true, true);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (!monitor.isCanceled() && dbResult.next()) {\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","date":"2021-06-29 21:02:31","endLine":317,"groupId":"10230","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"findTableColumnsByMask","params":"(JDBCSessionsession@@NullablefinalMySQLCatalogcatalog@@NotNullObjectsSearchParamsparams@List<DBSObjectReference>objects)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/01768f8365e993361dd46965032d3f8ee9dbb2.src","preCode":"    private void findTableColumnsByMask(JDBCSession session, @Nullable final MySQLCatalog catalog, @NotNull ObjectsSearchParams params,\n                                        List<DBSObjectReference> objects) throws SQLException {\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n\n        String sql = generateQuery(\n                params,\n                MySQLConstants.COL_COLUMN_NAME,\n                \"COLUMN_COMMENT\",\n                MySQLConstants.COL_TABLE_SCHEMA,\n                MySQLConstants.COL_TABLE_SCHEMA + \",\" + MySQLConstants.COL_TABLE_NAME + \",\" + MySQLConstants.COL_COLUMN_NAME,\n                MySQLConstants.META_TABLE_COLUMNS,\n                catalog,\n                objects\n        );\n\n        \r\n        try (JDBCPreparedStatement dbStat = session.prepareStatement(sql)) {\n            fillParameters(dbStat, params, catalog, true);\n            try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                while (!monitor.isCanceled() && dbResult.next()) {\n                    final String catalogName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_SCHEMA);\n                    final String tableName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_TABLE_NAME);\n                    final String columnName = JDBCUtils.safeGetString(dbResult, MySQLConstants.COL_COLUMN_NAME);\n                    objects.add(new AbstractObjectReference(columnName, dataSource.getCatalog(catalogName), null, MySQLTableColumn.class, RelationalObjectType.TYPE_TABLE_COLUMN) {\n                        @NotNull\n                        @Override\n                        public String getFullyQualifiedName(DBPEvaluationContext context) {\n                            return DBUtils.getQuotedIdentifier(dataSource, catalogName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, tableName) +\n                                '.' +\n                                DBUtils.getQuotedIdentifier(dataSource, columnName);\n\n                        }\n\n                        @Override\n                        public DBSObject resolveObject(DBRProgressMonitor monitor) throws DBException {\n                            MySQLCatalog tableCatalog = catalog != null ? catalog : dataSource.getCatalog(catalogName);\n                            if (tableCatalog == null) {\n                                throw new DBException(\"Column catalog '\" + catalogName + \"' not found\");\n                            }\n                            MySQLTableBase table = tableCatalog.getTableCache().getObject(monitor, tableCatalog, tableName);\n                            if (table == null) {\n                                throw new DBException(\"Column table '\" + tableName + \"' not found in catalog '\" + tableCatalog.getName() + \"'\");\n                            }\n                            MySQLTableColumn column = table.getAttribute(monitor, columnName);\n                            if (column == null) {\n                                throw new DBException(\"Column '\" + columnName + \"' not found in table '\" + table.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"'\");\n                            }\n                            return column;\n                        }\n                    });\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/model/MySQLStructureAssistant.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":256,"status":"M"}],"commitId":"ce1d5a94866f3aa3e85ee695607aaa0fb32c55ce","commitMessage":"@@@Merge pull request #12994 from dbeaver/search-in-definitions#2443\n\nSearch in definitions#2443","date":"2021-06-29 21:02:31","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"}]
