[{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2019-04-29 00:28:37","commitOrder":2,"curCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.showViews) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    Collections.sort(objects, DBUtils.nameComparator());\n                    UIUtils.syncExec(new Runnable() {\n                        @Override\n                        public void run() {\n                            tablesTable.removeAll();\n                            for (MySQLTableBase table : objects) {\n                                TableItem item = new TableItem(tablesTable, SWT.NONE);\n                                item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                                item.setText(0, table.getName());\n                                item.setData(table);\n                                item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                            }\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-04-29 00:28:39","endLine":252,"groupId":"3711","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadTables","params":"(finalMySQLCatalogcatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/fdb627208f63347df09555ca36991c241b1f04.src","preCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.showViews) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    Collections.sort(objects, DBUtils.nameComparator());\n                    UIUtils.syncExec(new Runnable() {\n                        @Override\n                        public void run() {\n                            tablesTable.removeAll();\n                            for (MySQLTableBase table : objects) {\n                                TableItem item = new TableItem(tablesTable, SWT.NONE);\n                                item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                                item.setText(0, table.getName());\n                                item.setData(table);\n                                item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                            }\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"B"},{"authorDate":"2019-04-02 01:47:10","commitOrder":2,"curCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.showViews) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-04-02 01:47:11","endLine":256,"groupId":"3730","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTables","params":"(finalPostgreSchemacatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/70/d9a3edb89a6ef5fae75fe0051385a50cc43386.src","preCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.showViews) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"NB"}],"commitId":"0d1915d6b91418006ddd21959702768c3d02d742","commitMessage":"@@@MySQL UI module refactoring\n\n\nFormer-commit-id: 6ebe0bcc6d531508bdc5dffaf16a50a7a3bade75","date":"2019-04-29 00:28:39","modifiedFileCount":"14","status":"M","submitter":"serge-rider"},{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2019-05-22 03:56:32","commitOrder":3,"curCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.showViews) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (MySQLTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-05-22 03:56:32","endLine":245,"groupId":"9158","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadTables","params":"(finalMySQLCatalogcatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/14/1b6e3a0822c645feca455823a18c550295393e.src","preCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.showViews) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    Collections.sort(objects, DBUtils.nameComparator());\n                    UIUtils.syncExec(new Runnable() {\n                        @Override\n                        public void run() {\n                            tablesTable.removeAll();\n                            for (MySQLTableBase table : objects) {\n                                TableItem item = new TableItem(tablesTable, SWT.NONE);\n                                item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                                item.setText(0, table.getName());\n                                item.setData(table);\n                                item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                            }\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2019-04-02 01:47:10","commitOrder":3,"curCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.showViews) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-04-02 01:47:11","endLine":256,"groupId":"3730","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTables","params":"(finalPostgreSchemacatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/70/d9a3edb89a6ef5fae75fe0051385a50cc43386.src","preCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.showViews) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":214,"status":"N"}],"commitId":"706726c7522fe29edb4d663fada814802a00c04e","commitMessage":"@@@Backup/restore wizard buttons styling fix\n\n\nFormer-commit-id: 81ca0f014c254eb672f0cbe2e677c373980ec811","date":"2019-05-22 03:56:32","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-18 18:59:54","codes":[{"authorDate":"2019-12-18 18:59:54","commitOrder":4,"curCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.getSettings().isShowViews()) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (MySQLTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-12-18 18:59:54","endLine":245,"groupId":"17005","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadTables","params":"(finalMySQLCatalogcatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/771f18104cf532f8ae36ee4e1f0480272f45d2.src","preCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.showViews) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (MySQLTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"},{"authorDate":"2019-12-18 18:59:54","commitOrder":4,"curCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.getSettings().isShowViews()) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-12-18 18:59:54","endLine":257,"groupId":"8291","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTables","params":"(finalPostgreSchemacatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/52/df354b551222bcbe643ae84e4bd92ff313b916.src","preCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.showViews) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":215,"status":"M"}],"commitId":"c69ca2cdd3e2c2e3f70458f2d2b9bfaba2f75aa3","commitMessage":"@@@#6972 Dump/restore tools refactoring (keep settings separately)\n\n\nFormer-commit-id: afa2737eedb1b6f784e2e88042dcba4cc091c5d3","date":"2019-12-18 18:59:54","modifiedFileCount":"21","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-14 22:41:04","codes":[{"authorDate":"2019-12-18 18:59:54","commitOrder":5,"curCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.getSettings().isShowViews()) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (MySQLTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2019-12-18 18:59:54","endLine":245,"groupId":"10311","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadTables","params":"(finalMySQLCatalogcatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7b/771f18104cf532f8ae36ee4e1f0480272f45d2.src","preCode":"    private void loadTables(final MySQLCatalog catalog) {\n        if (catalog != null) {\n            curCatalog = catalog;\n        }\n        if (curCatalog == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curCatalog);\n        final Set<MySQLTableBase> checkedObjects = this.checkedObjects.get(curCatalog);\n        new AbstractJob(\"Load '\" + curCatalog.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<MySQLTableBase> objects = new ArrayList<>();\n                    objects.addAll(curCatalog.getTables(monitor));\n                    if (wizard.getSettings().isShowViews()) {\n                        objects.addAll(curCatalog.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (MySQLTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/tools/MySQLExportWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"N"},{"authorDate":"2020-08-14 22:41:04","commitOrder":5,"curCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                monitor.beginTask(\"Collect tables\", 1);\n                try {\n                    monitor.subTask(\"Collect tables to dump\");\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.getSettings().isShowViews()) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                } finally {\n                    monitor.done();\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","date":"2020-08-14 22:41:04","endLine":289,"groupId":"10311","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadTables","params":"(finalPostgreSchemacatalog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/58/6013dbe5202e44bdb8c839a3635d6ef103eef2.src","preCode":"    private void loadTables(final PostgreSchema catalog) {\n        if (catalog != null) {\n            curSchema = catalog;\n        }\n        if (curSchema == null) {\n            return;\n        }\n        final boolean isCatalogChecked = isChecked(curSchema);\n        final Set<PostgreTableBase> checkedObjects = this.checkedObjects.get(curSchema);\n        new AbstractJob(\"Load '\" + curSchema.getName() + \"' tables\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(DBRProgressMonitor monitor) {\n                try {\n                    final List<PostgreTableBase> objects = new ArrayList<>();\n                    for (JDBCTable table : curSchema.getTables(monitor)) {\n                        if (table instanceof PostgreTableBase) {\n                            objects.add((PostgreTableBase) table);\n                        }\n                    }\n                    if (wizard.getSettings().isShowViews()) {\n                        objects.addAll(curSchema.getViews(monitor));\n                    }\n                    objects.sort(DBUtils.nameComparator());\n                    UIUtils.syncExec(() -> {\n                        tablesTable.removeAll();\n                        for (PostgreTableBase table : objects) {\n                            TableItem item = new TableItem(tablesTable, SWT.NONE);\n                            item.setImage(DBeaverIcons.getImage(table.isView() ? DBIcon.TREE_VIEW : DBIcon.TREE_TABLE));\n                            item.setText(0, table.getName());\n                            item.setData(table);\n                            item.setChecked(isCatalogChecked && (checkedObjects == null || checkedObjects.contains(table)));\n                        }\n                    });\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Table list\", \"Can't read table list\", e);\n                }\n                return Status.OK_STATUS;\n            }\n        }.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/tools/PostgreBackupWizardPageObjects.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"M"}],"commitId":"5c8a1a0353d418e8f8d7d4f048f3cfdb3801d383","commitMessage":"@@@Monitoring fix\n\n\nFormer-commit-id: 96855922359e9fe268caa0de94a21330022d89ce","date":"2020-08-14 22:41:04","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"}]
