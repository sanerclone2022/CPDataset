[{"authorTime":"2019-12-22 02:01:10","codes":[{"authorDate":"2019-12-21 21:45:49","commitOrder":3,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-21 21:45:49","endLine":154,"groupId":"13410","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c1/2fa162cfeeedebb0e5952fe329aab76913e6fd.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"NB"},{"authorDate":"2019-12-22 02:01:10","commitOrder":3,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-22 02:01:10","endLine":153,"groupId":"13410","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/52/3211695c776f95515fc4285a32a13ba052a9ab.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"}],"commitId":"bb9fd77daf267eb315761d430c166d601b82971b","commitMessage":"@@@#7444 PG tasks. MySQL and PG settings load/save fixes\n\n\nFormer-commit-id: 2f064417fa6640e4d73ce0e459951eb23a60e6dd","date":"2019-12-22 02:01:10","modifiedFileCount":"22","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-22 03:28:45","codes":[{"authorDate":"2019-12-21 21:45:49","commitOrder":4,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-21 21:45:49","endLine":154,"groupId":"13410","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c1/2fa162cfeeedebb0e5952fe329aab76913e6fd.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":122,"status":"N"},{"authorDate":"2019-12-22 03:28:45","commitOrder":4,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-22 03:28:45","endLine":153,"groupId":"13410","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreDatabaseBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/38/2c4b93aa27c7fe66d7b0da52621c3f57223145.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"}],"commitId":"060fdab33fc1616fc0ff4b402b2f907c5060695d","commitMessage":"@@@#7444 PG restore + script execute tasks\n\n\nFormer-commit-id: de68125fb5527d45fc69365a262cb5811914a5bd","date":"2019-12-22 03:28:45","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-23 21:20:34","codes":[{"authorDate":"2019-12-23 21:20:34","commitOrder":5,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-23 21:20:34","endLine":160,"groupId":"10970","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1d/e8b2b9b3d234188c4a4a7a41d9cd703ed18e7b.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"},{"authorDate":"2019-12-23 21:20:34","commitOrder":5,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-23 21:20:34","endLine":154,"groupId":"10970","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreDatabaseBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cd/5cd7bf0434486f7fe56f9d0d1bb1893fc26a3c.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"}],"commitId":"fdb93e46504fa19878e2c657fe3e2228c21fc3dd","commitMessage":"@@@#7444 Regacy code remove.\n\n\nFormer-commit-id: 351808eca76b8afbdc72dea86788fd0804024ee0","date":"2019-12-23 21:20:34","modifiedFileCount":"29","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-20 18:31:54","codes":[{"authorDate":"2019-12-23 21:20:34","commitOrder":6,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2019-12-23 21:20:34","endLine":160,"groupId":"10970","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1d/e8b2b9b3d234188c4a4a7a41d9cd703ed18e7b.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"N"},{"authorDate":"2020-02-20 18:31:54","commitOrder":6,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        if (settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            String outFileName = getOutputFileName(settings, arg);\n\n            File outFile = new File(settings.getOutputFolder(), outFileName);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","date":"2020-02-20 18:31:54","endLine":144,"groupId":"16693","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreDatabaseBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/253f12d014688346130bb1a9e0bc98826aadd0.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<PostgreTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n        DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"9175bf47f617e8f438701b7f8f988f97e7b1c51c","commitMessage":"@@@#7942 PG_dump + directory format: specify output directory\n\n\nFormer-commit-id: 2ab5734fa32e96a299f732660dd8e0afae3414c3","date":"2020-02-20 18:31:54","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-20 18:31:54","codes":[{"authorDate":"2020-12-12 17:38:44","commitOrder":7,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_CONN_TYPE:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getConnectionType().getId();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2020-12-12 17:38:44","endLine":159,"groupId":"8097","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c5/a727c144eb670f6848acb95b07d68f783d1a14.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2020-02-20 18:31:54","commitOrder":7,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        if (settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            String outFileName = getOutputFileName(settings, arg);\n\n            File outFile = new File(settings.getOutputFolder(), outFileName);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","date":"2020-02-20 18:31:54","endLine":144,"groupId":"16693","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreDatabaseBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/94/253f12d014688346130bb1a9e0bc98826aadd0.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        if (settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            String outFileName = getOutputFileName(settings, arg);\n\n            File outFile = new File(settings.getOutputFolder(), outFileName);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"}],"commitId":"6985ab18751658436e58fe49956a9fb505796cce","commitMessage":"@@@Merge pull request #10649 from dbeaver/native-tool-dump-pattern#10134\n\n#10134 Add \"connectionType\" variable for name pattern in dump tool\n\nFormer-commit-id: a854767a51a30c02eff49f190718a1e622aac529","date":"2020-12-12 17:38:44","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-07-06 22:41:58","codes":[{"authorDate":"2021-07-06 22:41:58","commitOrder":8,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        File outFile = settings.getOutputFile(arg);\n        if (outFile.exists()) {\n            \r\n            \r\n            \r\n            throw new IOException(\"Output file already exists\");\n        }\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2021-07-06 22:41:58","endLine":162,"groupId":"0","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9d/cb55aaa368f219f742f0b8070ef3687f1dde10.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        String outFileName = GeneralUtils.replaceVariables(settings.getOutputFilePattern(), name -> {\n            switch (name) {\n                case NativeToolUtils.VARIABLE_DATABASE:\n                    return arg.getDatabase().getName();\n                case NativeToolUtils.VARIABLE_HOST:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getHostName();\n                case NativeToolUtils.VARIABLE_CONN_TYPE:\n                    return arg.getDatabase().getDataSource().getContainer().getConnectionConfiguration().getConnectionType().getId();\n                case NativeToolUtils.VARIABLE_TABLE:\n                    final Iterator<MySQLTableBase> iterator = arg.getTables() == null ? null : arg.getTables().iterator();\n                    if (iterator != null && iterator.hasNext()) {\n                        return iterator.next().getName();\n                    } else {\n                        return \"null\";\n                    }\n                case NativeToolUtils.VARIABLE_TIMESTAMP:\n                    return RuntimeUtils.getCurrentTimeStamp();\n                case NativeToolUtils.VARIABLE_DATE:\n                    return RuntimeUtils.getCurrentDate();\n                default:\n                    System.getProperty(name);\n            }\n            return null;\n        });\n\n        File outFile = new File(settings.getOutputFolder(), outFileName);\n\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"},{"authorDate":"2021-07-06 22:41:58","commitOrder":8,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        if (settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            File outFile = settings.getOutputFile(arg);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","date":"2021-07-06 22:41:58","endLine":144,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreDatabaseBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b0/b7bafa700ba286c4699bd235f67ab586187ca5.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n\n        if (settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            String outFileName = getOutputFileName(settings, arg);\n\n            File outFile = new File(settings.getOutputFolder(), outFileName);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"7d0515fc4d9e5fa0f50a32f5e1539cf64a739af1","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-07-06 22:41:58","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-07-14 17:56:34","codes":[{"authorDate":"2021-07-06 22:41:58","commitOrder":9,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        File outFile = settings.getOutputFile(arg);\n        if (outFile.exists()) {\n            \r\n            \r\n            \r\n            throw new IOException(\"Output file already exists\");\n        }\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","date":"2021-07-06 22:41:58","endLine":162,"groupId":"10161","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@MySQLExportSettingssettings@finalMySQLDatabaseExportInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9d/cb55aaa368f219f742f0b8070ef3687f1dde10.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, MySQLExportSettings settings, final MySQLDatabaseExportInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        File outFile = settings.getOutputFile(arg);\n        if (outFile.exists()) {\n            \r\n            \r\n            \r\n            throw new IOException(\"Output file already exists\");\n        }\n        boolean isFiltering = settings.isRemoveDefiner();\n        Thread job = isFiltering ?\n            new DumpFilterJob(monitor, process.getInputStream(), outFile, log) :\n            new DumpCopierJob(monitor, \"Dump database\", process.getInputStream(), outFile, log);\n        job.start();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql/src/org/jkiss/dbeaver/ext/mysql/tasks/MySQLDatabaseExportHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"N"},{"authorDate":"2021-07-14 17:56:34","commitOrder":9,"curCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        if (USE_STREAM_MONITOR && settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            File outFile = settings.getOutputFile(arg);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","date":"2021-07-14 17:56:34","endLine":144,"groupId":"10161","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"startProcessHandler","params":"(DBRProgressMonitormonitor@DBTTasktask@PostgreDatabaseBackupSettingssettings@PostgreDatabaseBackupInfoarg@ProcessBuilderprocessBuilder@Processprocess@Loglog)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/dc/fd9c021fbf8740920bd7a63c5ed0492f5c2d27.src","preCode":"    protected void startProcessHandler(DBRProgressMonitor monitor, DBTTask task, PostgreDatabaseBackupSettings settings, PostgreDatabaseBackupInfo arg, ProcessBuilder processBuilder, Process process, Log log) throws IOException {\n        super.startProcessHandler(monitor, task, settings, arg, processBuilder, process, log);\n        if (settings.getFormat() != PostgreBackupRestoreSettings.ExportFormat.DIRECTORY) {\n            File outFile = settings.getOutputFile(arg);\n            DumpCopierJob job = new DumpCopierJob(monitor, \"Export database\", process.getInputStream(), outFile, log);\n            job.start();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/tasks/PostgreDatabaseBackupHandler.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"}],"commitId":"c6e11990757a6802f473a85a971427a7f011144b","commitMessage":"@@@#7813 PG dump/restore - disable progress streams\n","date":"2021-07-14 17:56:34","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"}]
