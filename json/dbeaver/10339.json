[{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2020-01-10 23:16:20","commitOrder":6,"curCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","date":"2020-01-10 23:16:20","endLine":451,"groupId":"7176","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCellString","params":"(ResultSetModelmodel@DBDAttributeBindingattr@ResultSetRowrow@DBDDisplayFormatdisplayFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/58/827abc332cde55dc7857db319e1191f5e250bb.src","preCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.console/src/org/jkiss/dbeaver/data/console/ConsoleTextPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":415,"status":"B"},{"authorDate":"2019-04-02 01:47:10","commitOrder":6,"curCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","date":"2019-04-02 01:47:11","endLine":432,"groupId":"7176","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCellString","params":"(ResultSetModelmodel@DBDAttributeBindingattr@ResultSetRowrow@DBDDisplayFormatdisplayFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/54/b41e7e120a8275e32e75d0375707a397e543e2.src","preCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/plaintext/PlainTextPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"NB"}],"commitId":"ed61883da063203d0710885dc1afa753c9469f19","commitMessage":"@@@Merge pull request #7580 from dbeaver/667-script-console\n\nSQL Script Output Console - plugin module\n\nFormer-commit-id: 5ac05a70dcd19424dafae8148ffc1ae0553277bc","date":"2020-01-10 23:16:20","modifiedFileCount":"0","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-04-02 01:47:10","codes":[{"authorDate":"2020-01-19 00:25:44","commitOrder":7,"curCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        StringBuilder fixBuffer = new StringBuilder();\n\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","date":"2020-01-19 00:25:44","endLine":443,"groupId":"7176","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCellString","params":"(ResultSetModelmodel@DBDAttributeBindingattr@ResultSetRowrow@DBDDisplayFormatdisplayFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/de9da855fdaf7da6d02bf07dd33125052f5559.src","preCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.console/src/org/jkiss/dbeaver/data/console/ConsoleTextPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"M"},{"authorDate":"2019-04-02 01:47:10","commitOrder":7,"curCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","date":"2019-04-02 01:47:11","endLine":432,"groupId":"7176","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCellString","params":"(ResultSetModelmodel@DBDAttributeBindingattr@ResultSetRowrow@DBDDisplayFormatdisplayFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/54/b41e7e120a8275e32e75d0375707a397e543e2.src","preCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/plaintext/PlainTextPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":396,"status":"N"}],"commitId":"7fe72d533296d7a8c48443ebb04c1481e57e295d","commitMessage":"@@@Console viewer\n\n\nFormer-commit-id: 6c85ce39074926d5dd709a9995e2da0822495ec4","date":"2020-01-19 00:25:44","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-08 02:53:08","codes":[{"authorDate":"2020-01-19 00:25:44","commitOrder":8,"curCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        StringBuilder fixBuffer = new StringBuilder();\n\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","date":"2020-01-19 00:25:44","endLine":443,"groupId":"10339","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getCellString","params":"(ResultSetModelmodel@DBDAttributeBindingattr@ResultSetRowrow@DBDDisplayFormatdisplayFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/de9da855fdaf7da6d02bf07dd33125052f5559.src","preCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        StringBuilder fixBuffer = new StringBuilder();\n\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.data.console/src/org/jkiss/dbeaver/data/console/ConsoleTextPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":406,"status":"N"},{"authorDate":"2020-02-08 02:53:08","commitOrder":8,"curCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        if (cellValue instanceof Number && controller.getPreferenceStore().getBoolean(ModelPreferences.RESULT_NATIVE_NUMERIC_FORMAT)) {\n            displayFormat = DBDDisplayFormat.NATIVE;\n        }\n\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","date":"2020-02-08 02:53:08","endLine":435,"groupId":"10339","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCellString","params":"(ResultSetModelmodel@DBDAttributeBindingattr@ResultSetRowrow@DBDDisplayFormatdisplayFormat)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ca/dad0ac661f1f9a61a6f0e2d155a2ef4099888b.src","preCode":"    private String getCellString(ResultSetModel model, DBDAttributeBinding attr, ResultSetRow row, DBDDisplayFormat displayFormat) {\n        Object cellValue = model.getCellValue(attr, row);\n        if (cellValue instanceof DBDValueError) {\n            return ((DBDValueError) cellValue).getErrorTitle();\n        }\n        String displayString = attr.getValueHandler().getValueDisplayString(attr, cellValue, displayFormat);\n\n        if (displayString.isEmpty() &&\n            showNulls &&\n            DBUtils.isNullValue(cellValue))\n        {\n            displayString = DBConstants.NULL_VALUE_LABEL;\n        }\n\n        fixBuffer.setLength(0);\n        for (int i = 0; i < displayString.length(); i++) {\n            char c = displayString.charAt(i);\n            switch (c) {\n                case '\\n':\n                    c = CommonUtils.PARAGRAPH_CHAR;\n                    break;\n                case '\\r':\n                    continue;\n                case 0:\n                case 255:\n                case '\\t':\n                    c = ' ';\n                    break;\n            }\n            if (c < ' ') {\n                c = ' ';\n            }\n            fixBuffer.append(c);\n        }\n\n        return fixBuffer.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/plaintext/PlainTextPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":395,"status":"M"}],"commitId":"27a970e1950fc261904bad3eeb08be905205f823","commitMessage":"@@@#7237 Native numbers formatting support\n\n\nFormer-commit-id: d68a93118201ad9889be0de1acb592e1e562911f","date":"2020-02-08 02:53:08","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"}]
