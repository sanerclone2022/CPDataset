[{"authorTime":"2021-02-14 03:32:27","codes":[{"authorDate":"2020-06-12 03:53:15","commitOrder":4,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).setFolder(null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","date":"2020-06-12 03:53:15","endLine":496,"groupId":"10899","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/dd/79eee3f30cdc856b61a1be2c168bf628ab08ed.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).setFolder(null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"NB"},{"authorDate":"2021-02-14 03:32:27","commitOrder":4,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-14 03:32:27","endLine":725,"groupId":"8146","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/ddaec6e0f41377969cb8b7a258c6cae911fd9f.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"B"}],"commitId":"f10e55b8ead542067eae1d7c25adffbd2bd0c2d7","commitMessage":"@@@Tasks view plugin extraction\n\n\nFormer-commit-id: 2260d73a07f7fa9b379035102f18ffed4b19147b","date":"2021-02-14 03:32:27","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2021-02-14 03:32:27","codes":[{"authorDate":"2021-02-23 01:42:14","commitOrder":5,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).moveToFolder(null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-23 01:42:14","endLine":496,"groupId":"10899","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/75/db7dc8d62694e585710b2183cfc069c94d19e3.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).setFolder(null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2021-02-14 03:32:27","commitOrder":5,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-14 03:32:27","endLine":725,"groupId":"8146","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/ddaec6e0f41377969cb8b7a258c6cae911fd9f.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"N"}],"commitId":"4085d7810ba51de0210a7662db26736016ff87b9","commitMessage":"@@@Navigator model refactoring\n\n\nFormer-commit-id: 9a1fbd25f41de2d8e463e58d282d90dbb3558202","date":"2021-02-23 01:42:14","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-02-14 03:32:27","codes":[{"authorDate":"2021-02-23 01:57:59","commitOrder":6,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).moveToFolder(node.getOwnerProject(), null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-23 01:57:59","endLine":496,"groupId":"10899","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/00/f829ce3594a041bc08a131a1d9f52ef9aa30e3.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).moveToFolder(null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2021-02-14 03:32:27","commitOrder":6,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-14 03:32:27","endLine":725,"groupId":"8146","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/ddaec6e0f41377969cb8b7a258c6cae911fd9f.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"N"}],"commitId":"050553334ececd10d23d0665bdc09320239a4893","commitMessage":"@@@Navigator model refactoring - connections dnd\n\n\nFormer-commit-id: 2cf43a6e5c456e70076c4489e6c6cf0736fe93bc","date":"2021-02-23 01:57:59","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-02-14 03:32:27","codes":[{"authorDate":"2021-03-03 00:14:26","commitOrder":7,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    ((DBNDataSource) node).moveToFolder(node.getOwnerProject(), null);\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","date":"2021-03-03 00:16:08","endLine":509,"groupId":"11677","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer@booleanenableDrag@booleanenableDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8a/43ce5866a3fffb4648b845a080e4d99d3892c9.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceListener() {\n\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBNNode> nodes = new ArrayList<>();\n                    List<DBPNamedObject> objects = new ArrayList<>();\n                    String lineSeparator = CommonUtils.getLineSeparator();\n                    StringBuilder buf = new StringBuilder();\n                    for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                        Object nextSelected = i.next();\n                        if (!(nextSelected instanceof DBNNode)) {\n                            continue;\n                        }\n                        nodes.add((DBNNode)nextSelected);\n                        String nodeName;\n                        if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                            DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                            if (object == null) {\n                                continue;\n                            }\n                            nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                            objects.add(object);\n                        } else if (nextSelected instanceof DBNDataSource) {\n                            DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                            nodeName = object.getName();\n                            objects.add(object);\n                        } else {\n                            nodeName = ((DBNNode)nextSelected).getNodeTargetName();\n                        }\n                        if (buf.length() > 0) {\n                            buf.append(lineSeparator);\n                        }\n                        buf.append(nodeName);\n                    }\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = nodes;\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = objects;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = Collections.emptyList();\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    @SuppressWarnings(\"unchecked\")\n                    Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                    if (curObject instanceof DBNNode) {\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!((DBNNode)curObject).supportsDrop(node)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            return ((DBNNode)curObject).supportsDrop(null);\n                        }\n                    } else if (curObject == null) {\n                        \r\n                        if (!CommonUtils.isEmpty(nodesToDrop)) {\n                            for (DBNNode node : nodesToDrop) {\n                                if (!(node instanceof DBNDataSource)) {\n                                    return false;\n                                }\n                            }\n                            return true;\n                        } else {\n                            Widget widget = event.widget;\n                            if (widget instanceof DropTarget) {\n                                widget = ((DropTarget) widget).getControl();\n                            }\n                            return widget == viewer.getControl();\n                        }\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event)\n            {\n                if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n                    if (curObject instanceof DBNNode) {\n                        Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                        try {\n                            ((DBNNode)curObject).dropNodes(nodesToDrop);\n                        } catch (DBException e) {\n                            DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                        }\n                    } else if (curObject == null) {\n                        for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                            if (node instanceof DBNDataSource) {\n                                ((DBNDataSource) node).moveToFolder(node.getOwnerProject(), null);\n                            } else if (node instanceof DBNLocalFolder) {\n                                ((DBNLocalFolder) node).getFolder().setParent(null);\n                            } else {\n                                continue;\n                            }\n                            DBNModel.updateConfigAndRefreshDatabases(node);\n                        }\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":320,"status":"M"},{"authorDate":"2021-02-14 03:32:27","commitOrder":7,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-14 03:32:27","endLine":725,"groupId":"8146","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/ddaec6e0f41377969cb8b7a258c6cae911fd9f.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"N"}],"commitId":"c7a8b64f94db264f6083f99c6b2d4bfa30a36377","commitMessage":"@@@Navigator DnD mode customize\n\n\nFormer-commit-id: 5a8ec708acf4229bd9311eed0662fd3f056942ce","date":"2021-03-03 00:16:08","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2021-02-14 03:32:27","codes":[{"authorDate":"2021-03-07 14:19:15","commitOrder":8,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","date":"2021-03-07 14:19:15","endLine":517,"groupId":"11677","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer@booleanenableDrag@booleanenableDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/03/bbd530634e4f73ac015985f574b44666539d51.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    ((DBNDataSource) node).moveToFolder(node.getOwnerProject(), null);\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2021-02-14 03:32:27","commitOrder":8,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","date":"2021-02-14 03:32:27","endLine":725,"groupId":"8146","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/5d/ddaec6e0f41377969cb8b7a258c6cae911fd9f.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":671,"status":"N"}],"commitId":"173ac5ef060acc4fea766f3af0ac7875b3fea6e2","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 530fc3ef120e1e8491b37608f66773afe3a9731a","date":"2021-03-07 14:19:15","modifiedFileCount":"13","status":"M","submitter":"serge-rider"},{"authorTime":"2021-08-23 16:10:05","codes":[{"authorDate":"2021-03-07 14:19:15","commitOrder":9,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","date":"2021-03-07 14:19:15","endLine":517,"groupId":"11677","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer@booleanenableDrag@booleanenableDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/03/bbd530634e4f73ac015985f574b44666539d51.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"},{"authorDate":"2021-08-23 16:10:05","commitOrder":9,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(DatabaseTaskTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                if (DatabaseTaskTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n\n                    if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder) {\n                        return true;\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        return ((TaskCategoryNode) curObject).taskFolder != null;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        return ((TaskTypeNode) curObject).taskFolder != null;\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event) {\n                Object curObject;\n                if (event.item instanceof Item) {\n                    curObject = event.item.getData();\n                } else {\n                    \r\n                    return;\n                }\n\n                if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder || curObject instanceof TaskCategoryNode || curObject instanceof TaskTypeNode) {\n                    DBTTaskFolder taskFolder;\n                    if (curObject instanceof DBTTask) {\n                        taskFolder = ((DBTTask) curObject).getTaskFolder();\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        taskFolder = ((TaskCategoryNode) curObject).taskFolder;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        taskFolder = ((TaskTypeNode) curObject).taskFolder;\n                    } else {\n                        taskFolder = (DBTTaskFolder) curObject;\n                    }\n\n                    if (taskFolder == null) {\n                        \r\n                        return;\n                    }\n\n                    if (event.data instanceof DatabaseTaskTransfer.Data) {\n                        List<DBTTask> tasksToDrop = ((DatabaseTaskTransfer.Data) event.data).getTasks();\n                        if (!CommonUtils.isEmpty(tasksToDrop)) {\n                            for (DBTTask task : tasksToDrop) {\n                                if (task instanceof TaskImpl && task.getProject() == taskFolder.getProject()) { \r\n                                    ((TaskImpl)task).setTaskFolder(taskFolder);\n                                }\n                            }\n                            TaskRegistry.getInstance().notifyTaskFoldersListeners(new DBTTaskFolderEvent(taskFolder, DBTTaskFolderEvent.Action.TASK_FOLDER_UPDATE));\n                        }\n                    }\n                }\n            }\n\n        });\n    }\n","date":"2021-08-23 16:10:05","endLine":908,"groupId":"8146","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/28/c2d9260ad1339a6512c08d7e4a2843792e175d.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":751,"status":"M"}],"commitId":"845c46f8e268dfb2cdc60d2c276d66df44943297","commitMessage":"@@@Merge pull request #13288 from dbeaver/taskFolder#1040\n\ndbeaver/dbeaver-ee#1040 task folders implementation","date":"2021-08-23 16:10:05","modifiedFileCount":"17","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-08-24 00:12:39","codes":[{"authorDate":"2021-03-07 14:19:15","commitOrder":10,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","date":"2021-03-07 14:19:15","endLine":517,"groupId":"11677","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer@booleanenableDrag@booleanenableDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/03/bbd530634e4f73ac015985f574b44666539d51.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"},{"authorDate":"2021-08-24 00:12:39","commitOrder":10,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(DatabaseTaskTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                if (DatabaseTaskTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n\n                    if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder) {\n                        return true;\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        return ((TaskCategoryNode) curObject).taskFolder != null;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        return ((TaskTypeNode) curObject).taskFolder != null;\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event) {\n                Object curObject;\n                if (event.item instanceof Item) {\n                    curObject = event.item.getData();\n                } else {\n                    \r\n                    return;\n                }\n\n                if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder || curObject instanceof TaskCategoryNode || curObject instanceof TaskTypeNode) {\n                    DBTTaskFolder taskFolder;\n                    if (curObject instanceof DBTTask) {\n                        taskFolder = ((DBTTask) curObject).getTaskFolder();\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        taskFolder = ((TaskCategoryNode) curObject).taskFolder;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        taskFolder = ((TaskTypeNode) curObject).taskFolder;\n                    } else {\n                        taskFolder = (DBTTaskFolder) curObject;\n                    }\n\n                    if (taskFolder == null) {\n                        \r\n                        return;\n                    }\n\n                    if (event.data instanceof DatabaseTaskTransfer.Data) {\n                        List<DBTTask> tasksToDrop = ((DatabaseTaskTransfer.Data) event.data).getTasks();\n                        if (!CommonUtils.isEmpty(tasksToDrop)) {\n                            for (DBTTask task : tasksToDrop) {\n                                if (task instanceof TaskImpl && task.getProject() == taskFolder.getProject()) { \r\n                                    ((TaskImpl)task).setTaskFolder(taskFolder);\n                                    taskFolder.addTaskToFolder(task);\n                                }\n                            }\n                            TaskRegistry.getInstance().notifyTaskFoldersListeners(new DBTTaskFolderEvent(taskFolder, DBTTaskFolderEvent.Action.TASK_FOLDER_REMOVE)); \r\n                        }\n                    }\n                }\n            }\n\n        });\n    }\n","date":"2021-08-24 00:12:39","endLine":909,"groupId":"8146","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/68b9687bdce9fa2fcd4c2f50abe1a446d6014b.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(DatabaseTaskTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                if (DatabaseTaskTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n\n                    if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder) {\n                        return true;\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        return ((TaskCategoryNode) curObject).taskFolder != null;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        return ((TaskTypeNode) curObject).taskFolder != null;\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event) {\n                Object curObject;\n                if (event.item instanceof Item) {\n                    curObject = event.item.getData();\n                } else {\n                    \r\n                    return;\n                }\n\n                if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder || curObject instanceof TaskCategoryNode || curObject instanceof TaskTypeNode) {\n                    DBTTaskFolder taskFolder;\n                    if (curObject instanceof DBTTask) {\n                        taskFolder = ((DBTTask) curObject).getTaskFolder();\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        taskFolder = ((TaskCategoryNode) curObject).taskFolder;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        taskFolder = ((TaskTypeNode) curObject).taskFolder;\n                    } else {\n                        taskFolder = (DBTTaskFolder) curObject;\n                    }\n\n                    if (taskFolder == null) {\n                        \r\n                        return;\n                    }\n\n                    if (event.data instanceof DatabaseTaskTransfer.Data) {\n                        List<DBTTask> tasksToDrop = ((DatabaseTaskTransfer.Data) event.data).getTasks();\n                        if (!CommonUtils.isEmpty(tasksToDrop)) {\n                            for (DBTTask task : tasksToDrop) {\n                                if (task instanceof TaskImpl && task.getProject() == taskFolder.getProject()) { \r\n                                    ((TaskImpl)task).setTaskFolder(taskFolder);\n                                }\n                            }\n                            TaskRegistry.getInstance().notifyTaskFoldersListeners(new DBTTaskFolderEvent(taskFolder, DBTTaskFolderEvent.Action.TASK_FOLDER_UPDATE));\n                        }\n                    }\n                }\n            }\n\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":751,"status":"M"}],"commitId":"f037bd799cb3723b9866ed05ce20f8e5793d44b8","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n","date":"2021-08-24 00:12:39","modifiedFileCount":"13","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-08-25 23:28:21","codes":[{"authorDate":"2021-03-07 14:19:15","commitOrder":11,"curCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","date":"2021-03-07 14:19:15","endLine":517,"groupId":"10719","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(finalViewerviewer@booleanenableDrag@booleanenableDrop)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/03/bbd530634e4f73ac015985f574b44666539d51.src","preCode":"    public static void addDragAndDropSupport(final Viewer viewer, boolean enableDrag, boolean enableDrop)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), TreeNodeTransfer.getInstance(), DatabaseObjectTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        if (enableDrag) {\n            final DragSource source = new DragSource(viewer.getControl(), operations);\n            source.setTransfer(types);\n            source.addDragListener(new DragSourceListener() {\n\n                private IStructuredSelection selection;\n\n                @Override\n                public void dragStart(DragSourceEvent event) {\n                    selection = (IStructuredSelection) viewer.getSelection();\n                }\n\n                @Override\n                public void dragSetData(DragSourceEvent event) {\n                    if (!selection.isEmpty()) {\n                        List<DBNNode> nodes = new ArrayList<>();\n                        List<DBPNamedObject> objects = new ArrayList<>();\n                        String lineSeparator = CommonUtils.getLineSeparator();\n                        StringBuilder buf = new StringBuilder();\n                        for (Iterator<?> i = selection.iterator(); i.hasNext(); ) {\n                            Object nextSelected = i.next();\n                            if (!(nextSelected instanceof DBNNode)) {\n                                continue;\n                            }\n                            nodes.add((DBNNode) nextSelected);\n                            String nodeName;\n                            if (nextSelected instanceof DBNDatabaseNode && !(nextSelected instanceof DBNDataSource)) {\n                                DBSObject object = ((DBNDatabaseNode) nextSelected).getObject();\n                                if (object == null) {\n                                    continue;\n                                }\n                                nodeName = DBUtils.getObjectFullName(object, DBPEvaluationContext.UI);\n                                objects.add(object);\n                            } else if (nextSelected instanceof DBNDataSource) {\n                                DBPDataSourceContainer object = ((DBNDataSource) nextSelected).getDataSourceContainer();\n                                nodeName = object.getName();\n                                objects.add(object);\n                            } else {\n                                nodeName = ((DBNNode) nextSelected).getNodeTargetName();\n                            }\n                            if (buf.length() > 0) {\n                                buf.append(lineSeparator);\n                            }\n                            buf.append(nodeName);\n                        }\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = nodes;\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = objects;\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = buf.toString();\n                        }\n                    } else {\n                        if (TreeNodeTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (DatabaseObjectTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = Collections.emptyList();\n                        } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                            event.data = \"\";\n                        }\n                    }\n                }\n\n                @Override\n                public void dragFinished(DragSourceEvent event) {\n                }\n            });\n        }\n\n        if (enableDrop) {\n            DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n            dropTarget.setTransfer(TreeNodeTransfer.getInstance());\n            dropTarget.addDropListener(new DropTargetListener() {\n                @Override\n                public void dragEnter(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragLeave(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOperationChanged(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void dragOver(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                @Override\n                public void drop(DropTargetEvent event) {\n                    handleDragEvent(event);\n                    if (event.detail == DND.DROP_MOVE) {\n                        moveNodes(event);\n                    }\n                }\n\n                @Override\n                public void dropAccept(DropTargetEvent event) {\n                    handleDragEvent(event);\n                }\n\n                private void handleDragEvent(DropTargetEvent event) {\n                    event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                    event.feedback = DND.FEEDBACK_SELECT;\n                }\n\n                private boolean isDropSupported(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        @SuppressWarnings(\"unchecked\")\n                        Collection<DBNNode> nodesToDrop = (Collection<DBNNode>) event.data;\n                        if (curObject instanceof DBNNode) {\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!((DBNNode) curObject).supportsDrop(node)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                return ((DBNNode) curObject).supportsDrop(null);\n                            }\n                        } else if (curObject == null) {\n                            \r\n                            if (!CommonUtils.isEmpty(nodesToDrop)) {\n                                for (DBNNode node : nodesToDrop) {\n                                    if (!(node instanceof DBNDataSource)) {\n                                        return false;\n                                    }\n                                }\n                                return true;\n                            } else {\n                                Widget widget = event.widget;\n                                if (widget instanceof DropTarget) {\n                                    widget = ((DropTarget) widget).getControl();\n                                }\n                                return widget == viewer.getControl();\n                            }\n                        }\n                    }\n                    return false;\n                }\n\n                private void moveNodes(DropTargetEvent event) {\n                    if (TreeNodeTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                        Object curObject;\n                        if (event.item instanceof Item) {\n                            curObject = event.item.getData();\n                        } else {\n                            curObject = null;\n                        }\n                        if (curObject instanceof DBNNode) {\n                            Collection<DBNNode> nodesToDrop = TreeNodeTransfer.getInstance().getObject();\n                            try {\n                                ((DBNNode) curObject).dropNodes(nodesToDrop);\n                            } catch (DBException e) {\n                                DBWorkbench.getPlatformUI().showError(\"Drop error\", \"Can't drop node\", e);\n                            }\n                        } else if (curObject == null) {\n                            for (DBNNode node : TreeNodeTransfer.getInstance().getObject()) {\n                                if (node instanceof DBNDataSource) {\n                                    \r\n                                    \r\n                                    if (viewer.getInput() instanceof DatabaseNavigatorContent) {\n                                        DBNNode rootNode = ((DatabaseNavigatorContent) viewer.getInput()).getRootNode();\n                                        if (rootNode != null && rootNode.getOwnerProject() != null) {\n                                            ((DBNDataSource) node).moveToFolder(rootNode.getOwnerProject(), null);\n                                        }\n                                    }\n                                } else if (node instanceof DBNLocalFolder) {\n                                    ((DBNLocalFolder) node).getFolder().setParent(null);\n                                } else {\n                                    continue;\n                                }\n                                DBNModel.updateConfigAndRefreshDatabases(node);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.navigator/src/org/jkiss/dbeaver/ui/navigator/NavigatorUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"},{"authorDate":"2021-08-25 23:28:21","commitOrder":11,"curCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker) {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n\n    }\n","date":"2021-08-25 23:28:21","endLine":805,"groupId":"10719","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragSourceSupport","params":"(Viewerviewer@IFilterdraggableChecker)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f8/13a2d31334065b7ccccceff2c2bfc586d68f81.src","preCode":"    public static void addDragSourceSupport(Viewer viewer, IFilter draggableChecker)\n    {\n        Transfer[] types = new Transfer[] {TextTransfer.getInstance(), DatabaseTaskTransfer.getInstance()};\n        int operations = DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK;\n\n        final DragSource source = new DragSource(viewer.getControl(), operations);\n        source.setTransfer(types);\n        source.addDragListener (new DragSourceAdapter() {\n            private IStructuredSelection selection;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                selection = (IStructuredSelection) viewer.getSelection();\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (!selection.isEmpty()) {\n                    List<DBTTask> tasks = new ArrayList<>();\n                    StringBuilder buf = new StringBuilder();\n                    for (Object nextSelected : selection.toArray()) {\n                        if (draggableChecker != null && !draggableChecker.select(nextSelected)) {\n                            continue;\n                        }\n                        DBTTask task = null;\n                        if (nextSelected instanceof DBTTask) {\n                            task  = (DBTTask) nextSelected;\n                        } else if (nextSelected instanceof DBTTaskReference) {\n                            task = ((DBTTaskReference) nextSelected).getTask();\n                        }\n                        if (task == null) {\n                            continue;\n                        }\n                        tasks.add(task);\n                        String taskName = task.getName();\n                        if (buf.length() > 0) {\n                            buf.append(\", \");\n                        }\n                        buf.append(taskName);\n                    }\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), tasks);\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = buf.toString();\n                    }\n                } else {\n                    if (DatabaseTaskTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = new DatabaseTaskTransfer.Data(viewer.getControl(), Collections.emptyList());\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        event.data = \"\";\n                    }\n                }\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(viewer.getControl(), DND.DROP_MOVE);\n        dropTarget.setTransfer(DatabaseTaskTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveNodes(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                event.detail = isDropSupported(event) ? DND.DROP_MOVE : DND.DROP_NONE;\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                if (DatabaseTaskTransfer.getInstance().isSupportedType(event.currentDataType)) {\n                    Object curObject;\n                    if (event.item instanceof Item) {\n                        curObject = event.item.getData();\n                    } else {\n                        curObject = null;\n                    }\n\n                    if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder) {\n                        return true;\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        return ((TaskCategoryNode) curObject).taskFolder != null;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        return ((TaskTypeNode) curObject).taskFolder != null;\n                    }\n                }\n                return false;\n            }\n\n            private void moveNodes(DropTargetEvent event) {\n                Object curObject;\n                if (event.item instanceof Item) {\n                    curObject = event.item.getData();\n                } else {\n                    \r\n                    return;\n                }\n\n                if (curObject instanceof DBTTask || curObject instanceof DBTTaskFolder || curObject instanceof TaskCategoryNode || curObject instanceof TaskTypeNode) {\n                    DBTTaskFolder taskFolder;\n                    if (curObject instanceof DBTTask) {\n                        taskFolder = ((DBTTask) curObject).getTaskFolder();\n                    } else if (curObject instanceof TaskCategoryNode) {\n                        taskFolder = ((TaskCategoryNode) curObject).taskFolder;\n                    } else if (curObject instanceof TaskTypeNode) {\n                        taskFolder = ((TaskTypeNode) curObject).taskFolder;\n                    } else {\n                        taskFolder = (DBTTaskFolder) curObject;\n                    }\n\n                    if (taskFolder == null) {\n                        \r\n                        return;\n                    }\n\n                    if (event.data instanceof DatabaseTaskTransfer.Data) {\n                        List<DBTTask> tasksToDrop = ((DatabaseTaskTransfer.Data) event.data).getTasks();\n                        if (!CommonUtils.isEmpty(tasksToDrop)) {\n                            for (DBTTask task : tasksToDrop) {\n                                if (task instanceof TaskImpl && task.getProject() == taskFolder.getProject()) { \r\n                                    ((TaskImpl)task).setTaskFolder(taskFolder);\n                                    taskFolder.addTaskToFolder(task);\n                                }\n                            }\n                            TaskRegistry.getInstance().notifyTaskFoldersListeners(new DBTTaskFolderEvent(taskFolder, DBTTaskFolderEvent.Action.TASK_FOLDER_REMOVE)); \r\n                        }\n                    }\n                }\n            }\n\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.tasks.ui.view/src/org/jkiss/dbeaver/tasks/ui/view/DatabaseTasksTree.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":751,"status":"M"}],"commitId":"30e3e2e77a70de7c6f6a57d22f7d54b1229dc6a3","commitMessage":"@@@Merge pull request #13670 from dbeaver/taskDragDrop#1040\n\ndbeaver/dbeaver-ee#1040 split drag and drop methods for composite tasks","date":"2021-08-25 23:28:21","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"}]
