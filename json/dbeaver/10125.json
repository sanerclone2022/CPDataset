[{"authorTime":"2018-12-24 21:38:48","codes":[{"authorDate":"2019-02-07 05:36:04","commitOrder":2,"curCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(dndControl, operations);\n        dropTarget.setTransfer(DashboardTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveDashboard(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (selectedItem == null || !(event.getSource() instanceof DashboardItem)) {\n                    return false;\n                }\n                DashboardItem overItem = (DashboardItem) event.getSource();\n                return overItem != selectedItem;\n            }\n\n            private DashboardItem getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, DashboardList.this, new Point(event.x, event.y));\n\n                return null;\r\n            }\n\n            private void moveDashboard(DropTargetEvent event)\n            {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            }\n        });\n    }\n","date":"2019-02-07 05:36:04","endLine":262,"groupId":"2825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(DashboardItemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cc/5dfae868fd7dd83707656392e19713655fe4af.src","preCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(dndControl, operations);\n        dropTarget.setTransfer(DashboardTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveDashboard(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (selectedItem == null || !(event.getSource() instanceof DashboardItem)) {\n                    return false;\n                }\n                DashboardItem overItem = (DashboardItem) event.getSource();\n                return overItem != selectedItem;\n            }\n\n            private DashboardItem getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, DashboardList.this, new Point(event.x, event.y));\n\n                return null;\r\n            }\n\n            private void moveDashboard(DropTargetEvent event)\n            {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/control/DashboardList.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"B"},{"authorDate":"2018-12-24 21:38:48","commitOrder":2,"curCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","date":"2018-12-24 21:38:48","endLine":4583,"groupId":"9320","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/51/e631c6c9808258eaae1437863a06b368e76403.src","preCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/LightGrid.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":4380,"status":"NB"}],"commitId":"0559558301d05c4fa1b53971586694404f859daa","commitMessage":"@@@#4209 Dashboard DnD support stub\n\n\nFormer-commit-id: 2af3d8abb19e7585d8d9f79a9203f5775c669ca2","date":"2019-02-07 05:36:04","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2018-12-24 21:38:48","codes":[{"authorDate":"2019-02-09 21:09:48","commitOrder":3,"curCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(dndControl, operations);\n        dropTarget.setTransfer(DashboardTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveDashboard(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                DashboardItem overItem = getOverItem(event);\n                if (selectedItem == null || overItem == null) {\n                    return false;\n                }\n                return overItem != selectedItem;\n            }\n\n            private void moveDashboard(DropTargetEvent event)\n            {\n                DashboardItem overItem = getOverItem(event);\n                if (selectedItem == null || overItem == null || selectedItem == overItem) {\n                    return;\n                }\n\n                List<DashboardItem> newList = new ArrayList<>(items);\n                int newIndex = newList.indexOf(overItem);\n                newList.remove(selectedItem);\n                newList.add(newIndex, selectedItem);\n\n                DashboardViewConfiguration viewConfiguration = viewContainer.getViewConfiguration();\n                \r\n\n                \r\n                DashboardList.this.setRedraw(false);\n                try {\n                    for (DashboardItem item : items.toArray(new DashboardItem[0])) {\n                        item.dispose();\n                    }\n\n                    for (DashboardItem oldItem : newList) {\n                        DashboardItem newItem = new DashboardItem(DashboardList.this, oldItem.getDashboardId());\n                        newItem.copyFrom(oldItem);\n                    }\n                } finally {\n                    DashboardList.this.layout(true, true);\n                    DashboardList.this.setRedraw(true);\n                }\n\n                viewConfiguration.saveSettings();\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            }\n\n            private DashboardItem getOverItem(DropTargetEvent event) {\n                Object source = event.getSource();\n                if (source instanceof DropTarget) {\n                    Control control = ((DropTarget) source).getControl();\n                    for (Composite parent = control.getParent(); parent != null; parent = parent.getParent()) {\n                        if (parent instanceof DashboardItem) {\n                            return (DashboardItem) parent;\n                        }\n                    }\n                }\n                return null;\n            }\n\n        });\n    }\n","date":"2019-02-09 21:09:48","endLine":333,"groupId":"2825","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(DashboardItemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/44/f36bb3e97277e10a6372e7dcc96cf804d0f54c.src","preCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(dndControl, operations);\n        dropTarget.setTransfer(DashboardTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveDashboard(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (selectedItem == null || !(event.getSource() instanceof DashboardItem)) {\n                    return false;\n                }\n                DashboardItem overItem = (DashboardItem) event.getSource();\n                return overItem != selectedItem;\n            }\n\n            private DashboardItem getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, DashboardList.this, new Point(event.x, event.y));\n\n                return null;\r\n            }\n\n            private void moveDashboard(DropTargetEvent event)\n            {\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/control/DashboardList.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2018-12-24 21:38:48","commitOrder":3,"curCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","date":"2018-12-24 21:38:48","endLine":4583,"groupId":"9320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/51/e631c6c9808258eaae1437863a06b368e76403.src","preCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/LightGrid.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":4380,"status":"N"}],"commitId":"7e91de1cbedcb74efa271fa58816295823fd2eba","commitMessage":"@@@#4209 Dashboards drag-n-drop\n\n\nFormer-commit-id: ef9c1da97d60968446147d8569ef0f4f03245588","date":"2019-02-09 21:09:48","modifiedFileCount":"6","status":"M","submitter":"serge-rider"},{"authorTime":"2018-12-24 21:38:48","codes":[{"authorDate":"2019-02-09 21:36:44","commitOrder":4,"curCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","date":"2019-02-09 21:36:44","endLine":205,"groupId":"2825","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(DashboardItemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/06/cfa877c7a5fb33108b87f1b8dc2463862d1b05.src","preCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(dndControl, operations);\n        dropTarget.setTransfer(DashboardTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveDashboard(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                DashboardItem overItem = getOverItem(event);\n                if (selectedItem == null || overItem == null) {\n                    return false;\n                }\n                return overItem != selectedItem;\n            }\n\n            private void moveDashboard(DropTargetEvent event)\n            {\n                DashboardItem overItem = getOverItem(event);\n                if (selectedItem == null || overItem == null || selectedItem == overItem) {\n                    return;\n                }\n\n                List<DashboardItem> newList = new ArrayList<>(items);\n                int newIndex = newList.indexOf(overItem);\n                newList.remove(selectedItem);\n                newList.add(newIndex, selectedItem);\n\n                DashboardViewConfiguration viewConfiguration = viewContainer.getViewConfiguration();\n                \r\n\n                \r\n                DashboardList.this.setRedraw(false);\n                try {\n                    for (DashboardItem item : items.toArray(new DashboardItem[0])) {\n                        item.dispose();\n                    }\n\n                    for (DashboardItem oldItem : newList) {\n                        DashboardItem newItem = new DashboardItem(DashboardList.this, oldItem.getDashboardId());\n                        newItem.copyFrom(oldItem);\n                    }\n                } finally {\n                    DashboardList.this.layout(true, true);\n                    DashboardList.this.setRedraw(true);\n                }\n\n                viewConfiguration.saveSettings();\n\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n            }\n\n            private DashboardItem getOverItem(DropTargetEvent event) {\n                Object source = event.getSource();\n                if (source instanceof DropTarget) {\n                    Control control = ((DropTarget) source).getControl();\n                    for (Composite parent = control.getParent(); parent != null; parent = parent.getParent()) {\n                        if (parent instanceof DashboardItem) {\n                            return (DashboardItem) parent;\n                        }\n                    }\n                }\n                return null;\n            }\n\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/control/DashboardList.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2018-12-24 21:38:48","commitOrder":4,"curCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","date":"2018-12-24 21:38:48","endLine":4583,"groupId":"9320","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/51/e631c6c9808258eaae1437863a06b368e76403.src","preCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/LightGrid.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":4380,"status":"N"}],"commitId":"e87f2d94f85491b259a9635bb6677618082d5f3c","commitMessage":"@@@#4209 Dashboards drag-n-drop and size detect\n\n\nFormer-commit-id: e4b51220ca9ab23e0770b1f6f92a02194e5d15ce","date":"2019-02-09 21:36:44","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2019-03-10 20:12:51","codes":[{"authorDate":"2019-02-09 21:36:44","commitOrder":5,"curCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","date":"2019-02-09 21:36:44","endLine":205,"groupId":"2825","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(DashboardItemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/06/cfa877c7a5fb33108b87f1b8dc2463862d1b05.src","preCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/control/DashboardList.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"N"},{"authorDate":"2019-03-10 20:12:51","commitOrder":5,"curCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return overColumn != null && draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (overColumn == null || draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","date":"2019-03-10 20:12:51","endLine":4595,"groupId":"9320","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/dd/c863e1dd0750deab929671769be7f4ea5626f1.src","preCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/LightGrid.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":4392,"status":"M"}],"commitId":"ad489197f3a9547f531f7041d9ebd0433015f1cc","commitMessage":"@@@Grid dnd fix (NPE)\n\n\nFormer-commit-id: 2ec74d491b41eb010c6030823151593127e7e988","date":"2019-03-10 20:12:51","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2019-10-11 23:20:45","codes":[{"authorDate":"2019-10-11 23:20:45","commitOrder":6,"curCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    if (dragImage != null) {\n                        dragImage.dispose();\n                        dragImage = null;\n                    }\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","date":"2019-10-11 23:20:45","endLine":336,"groupId":"16464","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(DashboardItemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c9/28006527672dbcf412517dff1213c2fa82139a.src","preCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/control/DashboardList.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"M"},{"authorDate":"2019-10-11 23:20:45","commitOrder":6,"curCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    if (dragImage != null) {\n                        dragImage.dispose();\n                        dragImage = null;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return overColumn != null && draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (overColumn == null || draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","date":"2019-10-11 23:20:45","endLine":4664,"groupId":"9320","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/35/8d9a8e69ce578e1f864b29e17835edad1278ce.src","preCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return overColumn != null && draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (overColumn == null || draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/LightGrid.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":4457,"status":"M"}],"commitId":"fa72a1d83437f277c825da494206648866ede81c","commitMessage":"@@@#6810 Result tabs DnD support + panel tabs DnD.\n\n\nFormer-commit-id: 385b87ac68d500bfa1bcbdffaa3a3e51ba124582","date":"2019-10-11 23:20:45","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-12 22:10:23","codes":[{"authorDate":"2019-10-11 23:20:45","commitOrder":7,"curCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    if (dragImage != null) {\n                        dragImage.dispose();\n                        dragImage = null;\n                    }\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","date":"2019-10-11 23:20:45","endLine":336,"groupId":"10125","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"(DashboardItemitem)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c9/28006527672dbcf412517dff1213c2fa82139a.src","preCode":"    private void addDragAndDropSupport(DashboardItem item)\n    {\n        Label dndControl = item.getTitleLabel();\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(dndControl, operations);\n        source.setTransfer(DashboardTransfer.INSTANCE);\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (selectedItem == null || lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds = selectedItem.getBounds();\n                    if (dragImage != null) {\n                        dragImage.dispose();\n                        dragImage = null;\n                    }\n                    GC gc = new GC(DashboardList.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                        dragImage,\n                        columnBounds.x,\n                        columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (selectedItem != null) {\n                    if (DashboardTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        event.data = selectedItem;\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        addControlDropTarget(dndControl, operations);\n        addControlDropTarget(item.getDashboardControl(), operations);\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/control/DashboardList.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":283,"status":"N"},{"authorDate":"2020-05-12 22:10:23","commitOrder":7,"curCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    if (dragImage != null) {\n                        dragImage.dispose();\n                        dragImage = null;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return overColumn != null && draggingColumn != overColumn && draggingColumn.isPinned() == overColumn.isPinned();\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (overColumn == null || draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","date":"2020-05-12 22:10:23","endLine":4814,"groupId":"10125","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"addDragAndDropSupport","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/84/16a5bcf280498d00f98f4ff856e70fd4bbf00a.src","preCode":"    private void addDragAndDropSupport()\n    {\n        final int operations = DND.DROP_MOVE | DND.DROP_COPY;\r\n\n        final DragSource source = new DragSource(this, operations);\n        source.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        source.addDragListener (new DragSourceListener() {\n\n            private Image dragImage;\n            private long lastDragEndTime;\n\n            @Override\n            public void dragStart(DragSourceEvent event) {\n                if (lastDragEndTime > 0 && System.currentTimeMillis() - lastDragEndTime < 100) {\n                    event.doit = false;\n                } else {\n                    Rectangle columnBounds;\n                    if (headerColumnDragStarted && hoveringColumn != null) {\n                        draggingColumn = hoveringColumn;\n                        columnBounds = hoveringColumn.getBounds();\n                    } else if (rowHeaderDragStarted && hoveringRow != null) {\n                        draggingRow = hoveringRow;\n                        int rowFromTop = hoveringRow - getTopIndex();\n                        columnBounds = new Rectangle(0, rowFromTop * getItemHeight(), getRowHeaderWidth(), getItemHeight());\n                    } else {\n                        event.doit = false;\n                        return;\n                    }\n                    if (dragImage != null) {\n                        dragImage.dispose();\n                        dragImage = null;\n                    }\n                    GC gc = new GC(LightGrid.this);\n                    dragImage = new Image(Display.getCurrent(), columnBounds.width, columnBounds.height);\n                    gc.copyArea(\n                            dragImage,\n                            columnBounds.x,\n                            columnBounds.y);\n                    event.image = dragImage;\n                    gc.dispose();\n                }\n            }\n\n            @Override\n            public void dragSetData (DragSourceEvent event) {\n                if (draggingColumn != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleColumn()) {\n                            elements.add(draggingColumn.getElement());\n                        } else {\n                            for (GridColumn col : selectedColumns) {\n                                elements.add(col.getElement());\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        \r\n                        if (selectedColumns.size() > 1 && !isDragSingleColumn()) {\n                            StringBuilder text = new StringBuilder();\n                            for (GridColumn column : selectedColumns) {\n                                if (text.length() > 0) text.append(\", \");\n                                text.append(getLabelProvider().getText(column.getElement()));\n                            }\n                            event.data = text.toString();\n                        } else {\n                            event.data = getLabelProvider().getText(draggingColumn.getElement());\n                        }\n                    }\n                } else if (draggingRow != null) {\n                    if (GridColumnTransfer.INSTANCE.isSupportedType(event.dataType)) {\n                        List<Object> elements = new ArrayList<>();\n                        if (isDragSingleRow()) {\n                            elements.add(getRowElement(draggingRow));\n                        } else {\n                            for (Integer row : selectedRows.keySet()) {\n                                elements.add(getRowElement(row));\n                            }\n                        }\n                        event.data = elements;\n                    } else if (TextTransfer.getInstance().isSupportedType(event.dataType)) {\n                        List<GridColumn> columns = selectedColumns;\n                        if (columns.isEmpty()) {\n                            columns = LightGrid.this.columns;\n                        }\n                        Set<Integer> rows = selectedRows.keySet();\n                        if (rows.isEmpty()) {\n                            rows = Collections.singleton(draggingRow);\n                        }\n\n                        StringBuilder text = new StringBuilder();\n                        for (Integer row : rows) {\n                            if (text.length() > 0) text.append(\"\\n\");\n                            for (int i = 0; i < columns.size(); i++) {\n                                GridColumn column = columns.get(i);\n                                String cellText = getContentProvider().getCellText(column.getElement(), getRowElement(row));\n                                if (i > 0) text.append(\", \");\n                                text.append(cellText);\n                            }\n                        }\n                        event.data = text.toString();\n                    }\n                }\n            }\n            @Override\n            public void dragFinished(DragSourceEvent event) {\n                draggingColumn = null;\n                draggingRow = null;\n                if (dragImage != null) {\n                    UIUtils.dispose(dragImage);\n                    dragImage = null;\n                }\n                lastDragEndTime = System.currentTimeMillis();\n            }\n        });\n\n        DropTarget dropTarget = new DropTarget(this, operations);\n        dropTarget.setTransfer(GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetListener() {\n            @Override\n            public void dragEnter(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE) {\n                    moveColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event)\n            {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event)\n            {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    event.detail = DND.DROP_MOVE;\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event)\n            {\n                if (!hoveringOnHeaderDragArea) {\n                    return false;\n                }\n                if (draggingColumn == null || draggingColumn.getGrid() != LightGrid.this) {\n                    return false;\n                }\n                GridColumn overColumn = getOverColumn(event);\n                return overColumn != null && draggingColumn != overColumn;\n            }\n\n            private GridColumn getOverColumn(DropTargetEvent event) {\n                Point dragPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                return getColumn(dragPoint);\n            }\n\n            private void moveColumns(DropTargetEvent event)\n            {\n                GridColumn overColumn = getOverColumn(event);\n                if (overColumn == null || draggingColumn == null || draggingColumn == overColumn) {\n                    return;\n                }\n                IGridController gridController = getGridController();\n                if (gridController != null) {\n                    IGridController.DropLocation location;\r\n\n                    Point dropPoint = getDisplay().map(null, LightGrid.this, new Point(event.x, event.y));\n                    Rectangle columnBounds = overColumn.getBounds();\n                    if (dropPoint.x > columnBounds.x + columnBounds.width / 2) {\n                        location = IGridController.DropLocation.DROP_AFTER;\n                    } else {\n                        location = IGridController.DropLocation.DROP_BEFORE;\n                    }\n                    gridController.moveColumn(draggingColumn.getElement(), overColumn.getElement(), location);\n                }\n                draggingColumn = null;\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/lightgrid/LightGrid.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":4607,"status":"M"}],"commitId":"bfa05229aa0f2d72f0bd3a8884e5a4549b7206ba","commitMessage":"@@@Merge pull request #8678 from dbeaver/rsv_pin_columns\n\nRsv pin columns\n\nFormer-commit-id: 4443f3dd265f41135edc0b7cc0f19cdc97b70865","date":"2020-05-12 22:10:23","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"}]
