[{"authorTime":"2020-01-11 20:24:18","codes":[{"authorDate":"2019-12-30 06:28:44","commitOrder":6,"curCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","date":"2019-12-30 06:28:44","endLine":164,"groupId":"11375","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"readData","params":"(@NotNullDBCExecutionSourcesource@@NotNullDBCSessionsession@@NotNullDBDDataReceiverdataReceiver@DBDDataFilterdataFilter@longfirstRow@longmaxRows@longflags@intfetchSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/06/bf7420a05e64e514e01f981ef0dd8f875b759d.src","preCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/data/SQLQueryDataContainer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"NB"},{"authorDate":"2020-01-11 20:24:18","commitOrder":6,"curCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","date":"2020-01-11 20:24:18","endLine":346,"groupId":"16819","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchQueryData","params":"(DBCSessionsession@DBCResultSetresultSet@DBDDataReceiverdataReceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e1/312e191519c30357d9c608a4b1de608be6d783.src","preCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/exec/SQLScriptProcessor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"B"}],"commitId":"1a2364fc7e54ef11a25a673f0f4aba1b1abfc81a","commitMessage":"@@@#2928 SQL Script processing\n\n\nFormer-commit-id: 4dd156ba0127cdc7f2320d86515c44e27935696e","date":"2020-01-11 20:24:18","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-11 20:24:18","codes":[{"authorDate":"2020-01-12 01:16:39","commitOrder":7,"curCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, sqlQuery.getOffset(), sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","date":"2020-01-12 01:16:39","endLine":180,"groupId":"11375","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"readData","params":"(@NotNullDBCExecutionSourcesource@@NotNullDBCSessionsession@@NotNullDBDDataReceiverdataReceiver@DBDDataFilterdataFilter@longfirstRow@longmaxRows@longflags@intfetchSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ad/f9f2b147e681747b4f4fe2f40930c8254068ac.src","preCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/data/SQLQueryDataContainer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-01-11 20:24:18","commitOrder":7,"curCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","date":"2020-01-11 20:24:18","endLine":346,"groupId":"16819","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchQueryData","params":"(DBCSessionsession@DBCResultSetresultSet@DBDDataReceiverdataReceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e1/312e191519c30357d9c608a4b1de608be6d783.src","preCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/exec/SQLScriptProcessor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"}],"commitId":"ee91078a0932748b41ec972ba920a0587fec62eb","commitMessage":"@@@#7513 Dynamic parameters for tasks (data transfer + sql scripts)\n\n\nFormer-commit-id: 46c790269a244e561c052c59efd7b2a2ff78fb43","date":"2020-01-12 01:16:39","modifiedFileCount":"26","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-11 20:24:18","codes":[{"authorDate":"2020-02-11 23:58:42","commitOrder":8,"curCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, 0, sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","date":"2020-02-11 23:58:42","endLine":180,"groupId":"11375","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"readData","params":"(@NotNullDBCExecutionSourcesource@@NotNullDBCSessionsession@@NotNullDBDDataReceiverdataReceiver@DBDDataFilterdataFilter@longfirstRow@longmaxRows@longflags@intfetchSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/de/e3fb60206da040cbbebaea6bf1525a2b7c6627.src","preCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, sqlQuery.getOffset(), sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/data/SQLQueryDataContainer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-01-11 20:24:18","commitOrder":8,"curCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","date":"2020-01-11 20:24:18","endLine":346,"groupId":"16819","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchQueryData","params":"(DBCSessionsession@DBCResultSetresultSet@DBDDataReceiverdataReceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e1/312e191519c30357d9c608a4b1de608be6d783.src","preCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/exec/SQLScriptProcessor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"}],"commitId":"550b4a750ddde00b4809e81111a6e88e42e3f843","commitMessage":"@@@#7731 SQL query data container fix (query offset)\n\n\nFormer-commit-id: 3df66759e964f31bf17c17eab42813c6672cbfb0","date":"2020-02-11 23:58:42","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-11 20:24:18","codes":[{"authorDate":"2020-02-23 02:15:06","commitOrder":9,"curCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getOriginalText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, 0, sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","date":"2020-02-23 02:15:06","endLine":180,"groupId":"11375","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"readData","params":"(@NotNullDBCExecutionSourcesource@@NotNullDBCSessionsession@@NotNullDBDDataReceiverdataReceiver@DBDDataFilterdataFilter@longfirstRow@longmaxRows@longflags@intfetchSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0d/f081a6730ed8f9be8f6fe22e74c903890d007a.src","preCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, 0, sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/data/SQLQueryDataContainer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-01-11 20:24:18","commitOrder":9,"curCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","date":"2020-01-11 20:24:18","endLine":346,"groupId":"16819","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchQueryData","params":"(DBCSessionsession@DBCResultSetresultSet@DBDDataReceiverdataReceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e1/312e191519c30357d9c608a4b1de608be6d783.src","preCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/exec/SQLScriptProcessor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"}],"commitId":"ca6698e000159f722d11e001130bbd8c19992210","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 4e115003cefdc7e5990d3f71cbecd22b5e5b40a1","date":"2020-02-23 02:15:06","modifiedFileCount":"27","status":"M","submitter":"serge-rider"},{"authorTime":"2020-01-11 20:24:18","codes":[{"authorDate":"2020-05-06 04:03:33","commitOrder":10,"curCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                session.getProgressMonitor(),\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getOriginalText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, 0, sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","date":"2020-05-06 04:03:33","endLine":181,"groupId":"10834","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"readData","params":"(@NotNullDBCExecutionSourcesource@@NotNullDBCSessionsession@@NotNullDBDDataReceiverdataReceiver@DBDDataFilterdataFilter@longfirstRow@longmaxRows@longflags@intfetchSize)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a6/a0f36e5236e38b888980ac3e9bba3072ab877a.src","preCode":"    public DBCStatistics readData(@NotNull DBCExecutionSource source, @NotNull DBCSession session, @NotNull DBDDataReceiver dataReceiver, DBDDataFilter dataFilter, long firstRow, long maxRows, long flags, int fetchSize) throws DBCException\n    {\n        DBCStatistics statistics = new DBCStatistics();\n        \r\n        DBPDataSource dataSource = session.getDataSource();\n        SQLQuery sqlQuery = query;\n        String queryText = sqlQuery.getOriginalText();\r\n        if (dataFilter != null && dataFilter.hasFilters()) {\n            String filteredQueryText = dataSource.getSQLDialect().addFiltersToQuery(\n                dataSource, queryText, dataFilter);\n            sqlQuery = new SQLQuery(dataSource, filteredQueryText, sqlQuery);\n        } else {\n            sqlQuery = new SQLQuery(dataSource, queryText, sqlQuery);\n        }\n\n        if (scriptContext != null) {\n            SQLSyntaxManager syntaxManager = new SQLSyntaxManager();\n            syntaxManager.init(dataSource);\n            SQLRuleManager ruleManager = new SQLRuleManager(syntaxManager);\n            ruleManager.loadRules(dataSource, false);\n            SQLParserContext parserContext = new SQLParserContext(this, syntaxManager, ruleManager, new Document(query.getOriginalText()));\n            sqlQuery.setParameters(SQLScriptParser.parseParameters(parserContext, 0, sqlQuery.getLength()));\n            if (!scriptContext.fillQueryParameters(sqlQuery, CommonUtils.isBitSet(flags, DBSDataContainer.FLAG_REFRESH))) {\n                \r\n                return statistics;\n            }\n        }\n\n        final SQLQueryResult curResult = new SQLQueryResult(sqlQuery);\n        if (firstRow > 0) {\n            curResult.setRowOffset(firstRow);\n        }\n        statistics.setQueryText(sqlQuery.getText());\n\n        long startTime = System.currentTimeMillis();\n\n        try (final DBCStatement dbcStatement = DBUtils.makeStatement(\n            source,\n            session,\n            DBCStatementType.SCRIPT,\n            sqlQuery,\n            firstRow,\n            maxRows))\n        {\n            DBExecUtils.setStatementFetchSize(dbcStatement, firstRow, maxRows, fetchSize);\n\n            \r\n\n            session.getProgressMonitor().subTask(\"Execute query\");\n\n            boolean hasResultSet = dbcStatement.executeStatement();\n\n            statistics.addExecuteTime(System.currentTimeMillis() - startTime);\n            statistics.addStatementsCount();\n\n            curResult.setHasResultSet(hasResultSet);\n\n            if (hasResultSet) {\n                DBCResultSet resultSet = dbcStatement.openResultSet();\n                if (resultSet != null) {\n                    SQLQueryResult.ExecuteResult executeResult = curResult.addExecuteResult(true);\n                    DBRProgressMonitor monitor = session.getProgressMonitor();\n                    monitor.subTask(\"Fetch result set\");\n                    DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n                    dataReceiver.fetchStart(session, resultSet, firstRow, maxRows);\n\n                    try {\n                        long fetchStartTime = System.currentTimeMillis();\n\n                        \r\n                        while (!fetchProgress.isMaxRowsFetched(maxRows) && !fetchProgress.isCanceled() && resultSet.nextRow()) {\n                            dataReceiver.fetchRow(session, resultSet);\n                            fetchProgress.monitorRowFetch();\n                        }\n                        statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n                    }\n                    finally {\n                        try {\n                            resultSet.close();\n                        } catch (Throwable e) {\n                            log.error(\"Error while closing resultset\", e);\n                        }\n                        try {\n                            dataReceiver.fetchEnd(session, resultSet);\n                        } catch (Throwable e) {\n                            log.error(\"Error while handling end of result set fetch\", e);\n                        }\n                        dataReceiver.close();\n                    }\n\n                    if (executeResult != null) {\n                        executeResult.setRowCount(fetchProgress.getRowCount());\n                    }\n                    statistics.setRowsFetched(fetchProgress.getRowCount());\n                    monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n                }\n            } else {\n                log.warn(\"No results returned by query execution\");\n            }\n            try {\n                curResult.addWarnings(dbcStatement.getStatementWarnings());\n            } catch (Throwable e) {\n                log.warn(\"Can't read execution warnings\", e);\n            }\n        }\n\n        return statistics;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/data/SQLQueryDataContainer.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"M"},{"authorDate":"2020-01-11 20:24:18","commitOrder":10,"curCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","date":"2020-01-11 20:24:18","endLine":346,"groupId":"10834","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"fetchQueryData","params":"(DBCSessionsession@DBCResultSetresultSet@DBDDataReceiverdataReceiver)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/e1/312e191519c30357d9c608a4b1de608be6d783.src","preCode":"    private boolean fetchQueryData(DBCSession session, DBCResultSet resultSet, DBDDataReceiver dataReceiver)\n        throws DBCException {\n        if (dataReceiver == null) {\n            \r\n            return false;\n        }\n        if (resultSet == null) {\n            return false;\n        }\n        DBRProgressMonitor monitor = session.getProgressMonitor();\n        monitor.subTask(\"Fetch result set\");\n        DBFetchProgress fetchProgress = new DBFetchProgress(session.getProgressMonitor());\n\n        dataReceiver.fetchStart(session, resultSet, 0, 0);\n\n        try {\n            long fetchStartTime = System.currentTimeMillis();\n\n            \r\n            while (!fetchProgress.isCanceled() && resultSet.nextRow()) {\n                dataReceiver.fetchRow(session, resultSet);\n                fetchProgress.monitorRowFetch();\n            }\n            statistics.addFetchTime(System.currentTimeMillis() - fetchStartTime);\n        } finally {\n            try {\n                resultSet.close();\n            } catch (Throwable e) {\n                log.error(\"Error while closing resultset\", e);\n            }\n            try {\n                dataReceiver.fetchEnd(session, resultSet);\n            } catch (Throwable e) {\n                log.error(\"Error while handling end of result set fetch\", e);\n            }\n            dataReceiver.close();\n        }\n\n        statistics.setRowsFetched(fetchProgress.getRowCount());\n        monitor.subTask(fetchProgress.getRowCount() + \" rows fetched\");\n\n        return true;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/exec/SQLScriptProcessor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"N"}],"commitId":"847fcabec194cfff3fe2b9253256e228b52ae807","commitMessage":"@@@#6927 SQL query patch fix (order by.  check attribute existence)\n\n\nFormer-commit-id: fabfc1aea68f0748611719a9a9ab8a852fab8a14","date":"2020-05-06 04:03:33","modifiedFileCount":"5","status":"M","submitter":"serge-rider"}]
