[{"authorTime":"2019-08-09 18:44:45","codes":[{"authorDate":"2019-08-09 18:44:45","commitOrder":5,"curCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE));\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","date":"2019-08-09 18:44:45","endLine":98,"groupId":"9080","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c8/c9fd299032672e86237e802041fdaf9270f17d.src","preCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE));\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/ui/views/MySQLSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"MB"},{"authorDate":"2019-08-09 18:44:45","commitOrder":5,"curCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","date":"2019-08-09 18:44:45","endLine":128,"groupId":"13224","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"(finalDBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0e/421bc613511d452c8da269240411129b89f144.src","preCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"MB"}],"commitId":"014b51d7f99e844860c86af6cbcfc6cf19ad06b3","commitMessage":"@@@Network handlers properties management refactored\n\n\nFormer-commit-id: 80e41a6a59430570ef286052b6add7aa4fae942a","date":"2019-08-09 18:44:45","modifiedFileCount":"23","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-17 00:09:01","codes":[{"authorDate":"2019-08-09 18:44:45","commitOrder":6,"curCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE));\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","date":"2019-08-09 18:44:45","endLine":98,"groupId":"9080","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c8/c9fd299032672e86237e802041fdaf9270f17d.src","preCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE));\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/ui/views/MySQLSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2020-01-17 00:09:01","commitOrder":6,"curCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    sslFactoryCombo.removeAll();\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","date":"2020-01-17 00:09:01","endLine":129,"groupId":"13224","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"(finalDBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/7b76c8020304ce35aa16aedb80ffa3d981c08f.src","preCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"}],"commitId":"6f88572699ad846323478130f6f9b0bbabc9db27","commitMessage":"@@@PG: SSL config page fix (dups in ssl factory combo)\n\nFormer-commit-id: 351d833aa8832fe49a24598786c2b0c019d03bdf","date":"2020-01-17 00:09:01","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-17 00:09:01","codes":[{"authorDate":"2020-03-25 19:10:21","commitOrder":7,"curCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","date":"2020-03-25 19:10:21","endLine":102,"groupId":"1932","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c2/99f98034600bc10398484bf69fda6af37135c4.src","preCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE));\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/ui/views/MySQLSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2020-01-17 00:09:01","commitOrder":7,"curCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    sslFactoryCombo.removeAll();\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","date":"2020-01-17 00:09:01","endLine":129,"groupId":"13224","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"(finalDBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/82/7b76c8020304ce35aa16aedb80ffa3d981c08f.src","preCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    sslFactoryCombo.removeAll();\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"N"}],"commitId":"2a375d5e704582fddbc4c28d92cd63f9e94a0466","commitMessage":"@@@#7620 MariaDB: SSL configuration fix\n\n\nFormer-commit-id: 3e79ae92dc51d6dcc608b4006270738601d343ab","date":"2020-03-25 19:10:21","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-08-09 22:24:18","codes":[{"authorDate":"2020-03-25 19:10:21","commitOrder":8,"curCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","date":"2020-03-25 19:10:21","endLine":102,"groupId":"1932","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c2/99f98034600bc10398484bf69fda6af37135c4.src","preCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/ui/views/MySQLSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2020-08-09 22:24:18","commitOrder":8,"curCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n        if (ENABLE_PROXY) {\n            useProxyService.setSelection(configuration.getBooleanProperty(PostgreConstants.PROP_SSL_PROXY));\n        }\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    sslFactoryCombo.removeAll();\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","date":"2020-08-09 22:24:18","endLine":143,"groupId":"13224","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"(finalDBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/00/eebc406fadffbbce7234dd611dd82cc454bdd3.src","preCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    sslFactoryCombo.removeAll();\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"6b3db94ebf84ff88eb223fcf3b89942714396f52","commitMessage":"@@@#7253 PG stunnel config option (disabled)\n\n\nFormer-commit-id: da84a43c2cf6ca9f62ed7d2f4c4feed6a25d9a40","date":"2020-08-09 22:24:18","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-09-21 16:58:56","codes":[{"authorDate":"2020-03-25 19:10:21","commitOrder":9,"curCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","date":"2020-03-25 19:10:21","endLine":102,"groupId":"1932","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c2/99f98034600bc10398484bf69fda6af37135c4.src","preCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/ui/views/MySQLSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"N"},{"authorDate":"2020-09-21 16:58:56","commitOrder":9,"curCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n        if (ENABLE_PROXY) {\n            useProxyService.setSelection(configuration.getBooleanProperty(PostgreConstants.PROP_SSL_PROXY));\n        }\n\n        if (!sslClassesResolved) {\n            sslClassesResolved = true;\n            final Job resolveJob = new Job(\"Find factories\") {\n                {\n                    setUser(true);\n                }\n\n                @Override\n                protected IStatus run(IProgressMonitor monitor) {\n                    final DriverClassFindJob finder = new DriverClassFindJob(\n                        configuration.getDriver(),\n                        SSLSocketFactory.class.getName(),\n                        false);\n                    finder.run(new DefaultProgressMonitor(monitor));\n                    UIUtils.syncExec(() -> {\n                        sslFactoryCombo.removeAll();\n                        for (String cn : finder.getDriverClassNames()) {\n                            sslFactoryCombo.add(cn);\n                        }\n                        final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                        if (!CommonUtils.isEmpty(factoryValue)) {\n                            sslFactoryCombo.setText(factoryValue);\n                        }\n                    });\n                    return Status.OK_STATUS;\n                }\n            };\n            resolveJob.schedule();\n        }\n    }\n","date":"2020-09-21 16:58:56","endLine":150,"groupId":"13224","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"(finalDBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/9d/b16ecaffabc06f89f053b63bfb5319edbd2e2e.src","preCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n        if (ENABLE_PROXY) {\n            useProxyService.setSelection(configuration.getBooleanProperty(PostgreConstants.PROP_SSL_PROXY));\n        }\n\n        final Job resolveJob = new Job(\"Find factories\") {\n            {\n                setUser(true);\n            }\n            @Override\n            protected IStatus run(IProgressMonitor monitor) {\n                final DriverClassFindJob finder = new DriverClassFindJob(\n                    configuration.getDriver(),\n                    SSLSocketFactory.class.getName(),\n                    false);\n                finder.run(new DefaultProgressMonitor(monitor));\n                UIUtils.syncExec(() -> {\n                    sslFactoryCombo.removeAll();\n                    for (String cn : finder.getDriverClassNames()) {\n                        sslFactoryCombo.add(cn);\n                    }\n                    final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                    if (!CommonUtils.isEmpty(factoryValue)) {\n                        sslFactoryCombo.setText(factoryValue);\n                    }\n                });\n                return Status.OK_STATUS;\n            }\n        };\n        resolveJob.schedule();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":112,"status":"M"}],"commitId":"84f81b613b889387436e13e23d76af1b9e4b606f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 26b08ebd9e0bfe9e1a8e15be426901ce80c7f1a5","date":"2020-09-21 16:58:56","modifiedFileCount":"31","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-12-17 05:09:19","codes":[{"authorDate":"2020-12-17 05:09:19","commitOrder":10,"curCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        super.loadSettings(configuration);\n\n        if (CommonUtils.isEmpty(configuration.getStringProperty(SSLHandlerTrustStoreImpl.PROP_SSL_METHOD))) {\n            \r\n            caCertPath.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n            clientCertPath.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n            clientKeyPath.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        }\n\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n    }\n","date":"2020-12-17 05:09:19","endLine":88,"groupId":"10318","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"loadSettings","params":"(DBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1d/caf895779b034e0f50187e25126b733701c234.src","preCode":"    public void loadSettings(DBWHandlerConfiguration configuration) {\n        requireSSQL.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_REQUIRE_SSL, false));\n        veryServerCert.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_VERIFY_SERVER_SERT, true));\n        allowPublicKeyRetrieval.setSelection(configuration.getBooleanProperty(MySQLConstants.PROP_SSL_PUBLIC_KEY_RETRIEVE, false));\n\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CLIENT_KEY)));\n        clientCAText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CA_CERT)));\n        cipherSuitesText.setText(CommonUtils.notEmpty(configuration.getStringProperty(MySQLConstants.PROP_SSL_CIPHER_SUITES)));\n\r\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mysql.ui/src/org/jkiss/dbeaver/ext/mysql/ui/views/MySQLSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-12-17 05:09:19","commitOrder":10,"curCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        super.loadSettings(configuration);\n\n        if (CommonUtils.isEmpty(configuration.getStringProperty(SSLHandlerTrustStoreImpl.PROP_SSL_METHOD))) {\n            \r\n            caCertPath.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n            clientCertPath.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n            clientKeyPath.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        }\n\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n        if (ENABLE_PROXY) {\n            useProxyService.setSelection(configuration.getBooleanProperty(PostgreConstants.PROP_SSL_PROXY));\n        }\n\n        if (!sslClassesResolved) {\n            sslClassesResolved = true;\n            final Job resolveJob = new Job(\"Find factories\") {\n                {\n                    setUser(true);\n                }\n\n                @Override\n                protected IStatus run(IProgressMonitor monitor) {\n                    final DriverClassFindJob finder = new DriverClassFindJob(\n                        configuration.getDriver(),\n                        SSLSocketFactory.class.getName(),\n                        false);\n                    finder.run(new DefaultProgressMonitor(monitor));\n                    UIUtils.syncExec(() -> {\n                        sslFactoryCombo.removeAll();\n                        for (String cn : finder.getDriverClassNames()) {\n                            sslFactoryCombo.add(cn);\n                        }\n                        final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                        if (!CommonUtils.isEmpty(factoryValue)) {\n                            sslFactoryCombo.setText(factoryValue);\n                        }\n                    });\n                    return Status.OK_STATUS;\n                }\n            };\n            resolveJob.schedule();\n        }\n    }\n","date":"2020-12-17 05:09:19","endLine":134,"groupId":"10318","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSettings","params":"(finalDBWHandlerConfigurationconfiguration)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/ee/57ee5885f447e895d5ed8d6c87fb04768a1b1c.src","preCode":"    public void loadSettings(final DBWHandlerConfiguration configuration) {\n        clientCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_CERT)));\n        clientKeyText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_CLIENT_KEY)));\n        rootCertText.setText(CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_ROOT_CERT)));\n        UIUtils.setComboSelection(sslModeCombo, CommonUtils.notEmpty(configuration.getStringProperty(PostgreConstants.PROP_SSL_MODE)));\n        if (ENABLE_PROXY) {\n            useProxyService.setSelection(configuration.getBooleanProperty(PostgreConstants.PROP_SSL_PROXY));\n        }\n\n        if (!sslClassesResolved) {\n            sslClassesResolved = true;\n            final Job resolveJob = new Job(\"Find factories\") {\n                {\n                    setUser(true);\n                }\n\n                @Override\n                protected IStatus run(IProgressMonitor monitor) {\n                    final DriverClassFindJob finder = new DriverClassFindJob(\n                        configuration.getDriver(),\n                        SSLSocketFactory.class.getName(),\n                        false);\n                    finder.run(new DefaultProgressMonitor(monitor));\n                    UIUtils.syncExec(() -> {\n                        sslFactoryCombo.removeAll();\n                        for (String cn : finder.getDriverClassNames()) {\n                            sslFactoryCombo.add(cn);\n                        }\n                        final String factoryValue = configuration.getStringProperty(PostgreConstants.PROP_SSL_FACTORY);\n                        if (!CommonUtils.isEmpty(factoryValue)) {\n                            sslFactoryCombo.setText(factoryValue);\n                        }\n                    });\n                    return Status.OK_STATUS;\n                }\n            };\n            resolveJob.schedule();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql.ui/src/org/jkiss/dbeaver/ext/postgresql/ui/PostgreSSLConfigurator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"}],"commitId":"5ba7eee9e45cddf293d6bfaa47ca104327a9bfce","commitMessage":"@@@Merge pull request #10711 from dbeaver/ssl-config-keystore#9912\n\n#9912 SSL config keystore\n\nFormer-commit-id: 3b90f09b8c275e1daac937eacf5e5b9f0e2ce695","date":"2020-12-17 05:09:19","modifiedFileCount":"17","status":"M","submitter":"Serge Rider"}]
