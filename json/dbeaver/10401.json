[{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2018-12-29 05:36:45","commitOrder":1,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2018-12-29 05:36:49","endLine":409,"groupId":"7584","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a3/bcab78b8e0741a13d6a0a0060a7a7ec0a30e44.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"B"},{"authorDate":"2018-12-29 05:36:45","commitOrder":1,"curCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.isAttributeReadOnly(attr)) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.isAttributeReadOnly(attr)) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2018-12-29 05:36:49","endLine":609,"groupId":"1826","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(booleanextended)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a1/c34ff49ae13db7af9eb6664f8fcda1c050c523.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.isAttributeReadOnly(attr)) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.isAttributeReadOnly(attr)) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"B"}],"commitId":"3752e74ff31a5aee8616c9e37d50626de690a976","commitMessage":"@@@#10 RSV implementation extraction\n\n\nFormer-commit-id: aa7c026a3e9871fad79ded3afbf21c0e1684c7dd","date":"2018-12-29 05:36:49","modifiedFileCount":"16","status":"B","submitter":"serge-rider"},{"authorTime":"2020-02-14 01:43:03","codes":[{"authorDate":"2018-12-29 05:36:45","commitOrder":2,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2018-12-29 05:36:49","endLine":409,"groupId":"7584","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a3/bcab78b8e0741a13d6a0a0060a7a7ec0a30e44.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":399,"status":"N"},{"authorDate":"2020-02-14 01:43:03","commitOrder":2,"curCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2020-02-14 01:43:03","endLine":635,"groupId":"17133","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(booleanextended)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/4f/4ae523768832e44d756b696679cf9924bf7132.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.isAttributeReadOnly(attr)) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.isAttributeReadOnly(attr)) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":526,"status":"M"}],"commitId":"7b4a6a5aa8f9a3129c131222c014e8c57a47f0d9","commitMessage":"@@@#6485 Read-only state visualization\n\n\nFormer-commit-id: 1d9d600b9f32cd3d0b60bf7de33297e938f85793","date":"2020-02-14 01:43:03","modifiedFileCount":"10","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-22 03:52:00","codes":[{"authorDate":"2020-02-22 03:52:00","commitOrder":3,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2020-02-22 03:52:00","endLine":71,"groupId":"7584","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/3b1fcc3cb64a583b661309e771da72ff2e133d.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"},{"authorDate":"2020-02-22 03:52:00","commitOrder":3,"curCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2020-02-22 03:52:00","endLine":636,"groupId":"3939","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(booleanextended)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d9/e2edad40dcda369772610cf5ae98ed7a1d47e8.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":527,"status":"M"}],"commitId":"914f5e000ea4124d9fa69d15b583d3496447c48e","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 4d72d1a448a470d13a5e9184c0ed487ebda93768","date":"2020-02-22 03:52:00","modifiedFileCount":"82","status":"M","submitter":"serge-rider"},{"authorTime":"2020-05-07 22:34:07","codes":[{"authorDate":"2020-02-22 03:52:00","commitOrder":4,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2020-02-22 03:52:00","endLine":71,"groupId":"7584","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/3b1fcc3cb64a583b661309e771da72ff2e133d.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-05-07 22:34:07","commitOrder":4,"curCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2020-05-07 22:34:07","endLine":663,"groupId":"3939","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(booleanextended)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/27/27631b08f53c157352418fc832f8af7bb8287e.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"}],"commitId":"1b4a5578d899c99b8281b8451088c94e08e51b6d","commitMessage":"@@@Spreadsheet - update panels on value paste\n\n\nFormer-commit-id: 2e67545adeb3258f3cca5af571a709365a42c1d8","date":"2020-05-07 22:34:07","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-07-29 20:24:53","codes":[{"authorDate":"2020-02-22 03:52:00","commitOrder":5,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2020-02-22 03:52:00","endLine":71,"groupId":"7584","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/3b1fcc3cb64a583b661309e771da72ff2e133d.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-07-29 20:24:53","commitOrder":5,"curCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n\n                    \r\n                    \r\n\r\n\r\n\r\n\r\n\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    \r\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2020-07-29 20:24:53","endLine":669,"groupId":"3939","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(booleanextended)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/04/18e97fa6d56c298f66212e32c0296a2f055350.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n                    \r\n                    if (overNewRow) {\n                        for (int i = 0 ; i < newLines.length - 1; i++) {\n                            controller.addNewRow(false, true, false);\n                        }\n                        spreadsheet.refreshRowsData();\n                    } else {\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    }\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"}],"commitId":"57d97ca181cbdb1fb4b789b31df7e964bc78e9fe","commitMessage":"@@@Merge pull request #9392 from dbeaver/advpaste#9095\n\n#9095 automatic creation of unnecessary new lines fixed\n\nFormer-commit-id: eb718865dc34c48d9a17f6ff0d21a77ff84d8a79","date":"2020-07-29 20:24:53","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-11-12 17:44:06","codes":[{"authorDate":"2020-02-22 03:52:00","commitOrder":6,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2020-02-22 03:52:00","endLine":71,"groupId":"7584","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/3b1fcc3cb64a583b661309e771da72ff2e133d.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2020-11-12 17:44:06","commitOrder":6,"curCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n\n                    \r\n                    \r\n\r\n\r\n\r\n\r\n\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    \r\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    SpreadsheetValueController valueController = new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null);\n\n                    Object newValue = null;\n\n                    if (attr.getDataKind() == DBPDataKind.BINARY || attr.getDataKind() == DBPDataKind.CONTENT) {\n\n                        Clipboard clipboard = new Clipboard(Display.getCurrent());\n                        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attr, \"Copy from clipboard\")) {\n                            byte[] binaryContents = (byte[]) clipboard.getContents(SimpleByteArrayTransfer.getInstance());\n                            if (binaryContents != null) {\n                                newValue = valueController.getValueHandler().getValueFromObject(session, attr, binaryContents, false, false);\n                            }\n                        } finally {\n                            clipboard.dispose();\n                        }\n                    }\n                    if (newValue == null) {\n                        newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                        if (newValue == null) {\n                            continue;\n                        }\n                    }\n                    valueController.updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2020-11-12 17:44:06","endLine":735,"groupId":"3939","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(booleanextended)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/bbe917f75970080e898822d6418465e0986732.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n\n                    \r\n                    \r\n\r\n\r\n\r\n\r\n\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    \r\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    Object newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                    if (newValue == null) {\n                        continue;\n                    }\n                    new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null).updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":606,"status":"M"}],"commitId":"1f8a7abf918593db3d7da66d6c62da0ff778cdd5","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 52f6e6bf16f6719ea34624f66d332bf98d8cdda0","date":"2020-11-12 17:44:06","modifiedFileCount":"16","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-09-05 19:46:28","codes":[{"authorDate":"2020-02-22 03:52:00","commitOrder":7,"curCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","date":"2020-02-22 03:52:00","endLine":71,"groupId":"10401","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getAttributeValueFromClipboard","params":"(DBDAttributeBindingattribute)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/76/3b1fcc3cb64a583b661309e771da72ff2e133d.src","preCode":"    public static Object getAttributeValueFromClipboard(DBDAttributeBinding attribute) throws DBCException\n    {\n        Clipboard clipboard = new Clipboard(Display.getCurrent());\n        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attribute, \"Copy from clipboard\")) {\n            String strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n            return attribute.getValueHandler().getValueFromObject(\n                session, attribute.getAttribute(), strValue, true, false);\n        } finally {\n            clipboard.dispose();\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/ResultSetUtils.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"N"},{"authorDate":"2021-09-05 19:46:28","commitOrder":7,"curCode":"    public void pasteFromClipboard(@Nullable ResultSetPasteSettings settings)\n    {\n        try {\n            if (settings != null) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue, settings.isInsertMultipleRows());\n\n                    \r\n                    \r\n\r\n\r\n\r\n\r\n\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    \r\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            final Object newValue;\n                            if (settings.isInsertNulls() && settings.getNullValueMark().equalsIgnoreCase(value)) {\n                                newValue = null;\n                            } else {\n                                newValue = attr.getValueHandler().getValueFromObject(session, attr.getAttribute(), value, true, false);\n                            }\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    SpreadsheetValueController valueController = new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null);\n\n                    Object newValue = null;\n\n                    if (attr.getDataKind() == DBPDataKind.BINARY || attr.getDataKind() == DBPDataKind.CONTENT) {\n\n                        Clipboard clipboard = new Clipboard(Display.getCurrent());\n                        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attr, \"Copy from clipboard\")) {\n                            byte[] binaryContents = (byte[]) clipboard.getContents(SimpleByteArrayTransfer.getInstance());\n                            if (binaryContents != null) {\n                                newValue = valueController.getValueHandler().getValueFromObject(session, attr, binaryContents, false, false);\n                            }\n                        } finally {\n                            clipboard.dispose();\n                        }\n                    }\n                    if (newValue == null) {\n                        newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                        if (newValue == null) {\n                            continue;\n                        }\n                    }\n                    valueController.updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","date":"2021-09-05 19:46:28","endLine":755,"groupId":"10401","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"pasteFromClipboard","params":"(@NullableResultSetPasteSettingssettings)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c8/4632343e330595501a6ee6fe823a659d7123d8.src","preCode":"    public void pasteFromClipboard(boolean extended)\n    {\n        try {\n            if (extended) {\n                String strValue;\n                Clipboard clipboard = new Clipboard(Display.getCurrent());\n                try {\n                    strValue = (String) clipboard.getContents(TextTransfer.getInstance());\n                } finally {\n                    clipboard.dispose();\n                }\n                if (CommonUtils.isEmpty(strValue)) {\n                    return;\n                }\n                GridPos focusPos = spreadsheet.getFocusPos();\n                int rowNum = focusPos.row;\n                if (rowNum < 0) {\n                    return;\n                }\n                boolean overNewRow = controller.getModel().getRow(rowNum).getState() == ResultSetRow.STATE_ADDED;\n                try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), controller.getDataContainer(), \"Advanced paste\")) {\n\n                    String[][] newLines = parseGridLines(strValue);\n\n                    \r\n                    \r\n\r\n\r\n\r\n\r\n\n                        while (rowNum + newLines.length > spreadsheet.getItemCount()) {\n                            controller.addNewRow(false, true, false);\n                            spreadsheet.refreshRowsData();\n                        }\n                    \r\n                    if (rowNum < 0 || rowNum >= spreadsheet.getItemCount()) {\n                        return;\n                    }\n\n                    for (String[] line : newLines) {\n                        int colNum = focusPos.col;\n                        Object rowElement = spreadsheet.getRowElement(rowNum);\n                        for (String value : line) {\n                            if (colNum >= spreadsheet.getColumnCount()) {\n                                break;\n                            }\n                            Object colElement = spreadsheet.getColumnElement(colNum);\n                            final DBDAttributeBinding attr = (DBDAttributeBinding)(controller.isRecordMode() ? rowElement : colElement);\n                            final ResultSetRow row = (ResultSetRow)(controller.isRecordMode() ? colElement : rowElement);\n                            if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                                continue;\n                            }\n                            Object newValue = attr.getValueHandler().getValueFromObject(\n                                session, attr.getAttribute(), value, true, false);\n                            new SpreadsheetValueController(\n                                controller,\n                                attr,\n                                row,\n                                IValueController.EditType.NONE,\n                                null).updateValue(newValue, false);\n\n                            colNum++;\n                        }\n                        rowNum++;\n                        if (rowNum >= spreadsheet.getItemCount()) {\n                            \r\n                            break;\n                        }\n                    }\n                }\n\n            } else {\n                Collection<GridPos> ssSelection = spreadsheet.getSelection();\n                for (GridPos pos : ssSelection) {\n                    DBDAttributeBinding attr;\n                    ResultSetRow row;\n                    if (controller.isRecordMode()) {\n                        attr = (DBDAttributeBinding) spreadsheet.getRowElement(pos.row);\n                        row = controller.getCurrentRow();\n                    } else {\n                        attr = (DBDAttributeBinding) spreadsheet.getColumnElement(pos.col);\n                        row = (ResultSetRow) spreadsheet.getRowElement(pos.row);\n                    }\n                    if (attr == null || row == null) {\n                        continue;\n                    }\n                    if (controller.getAttributeReadOnlyStatus(attr) != null) {\n                        \r\n                        continue;\n                    }\n\n                    SpreadsheetValueController valueController = new SpreadsheetValueController(\n                        controller,\n                        attr,\n                        row,\n                        IValueController.EditType.NONE,\n                        null);\n\n                    Object newValue = null;\n\n                    if (attr.getDataKind() == DBPDataKind.BINARY || attr.getDataKind() == DBPDataKind.CONTENT) {\n\n                        Clipboard clipboard = new Clipboard(Display.getCurrent());\n                        try (DBCSession session = DBUtils.openUtilSession(new VoidProgressMonitor(), attr, \"Copy from clipboard\")) {\n                            byte[] binaryContents = (byte[]) clipboard.getContents(SimpleByteArrayTransfer.getInstance());\n                            if (binaryContents != null) {\n                                newValue = valueController.getValueHandler().getValueFromObject(session, attr, binaryContents, false, false);\n                            }\n                        } finally {\n                            clipboard.dispose();\n                        }\n                    }\n                    if (newValue == null) {\n                        newValue = ResultSetUtils.getAttributeValueFromClipboard(attr);\n                        if (newValue == null) {\n                            continue;\n                        }\n                    }\n                    valueController.updateValue(newValue, false);\n                }\n            }\n            controller.redrawData(false, true);\n            controller.updateEditControls();\n            controller.updatePanelsContent(false);\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Cannot replace cell value\", null, e);\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/spreadsheet/SpreadsheetPresentation.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"M"}],"commitId":"e443d42ad5494b80d04b0e421febd08c150611ce","commitMessage":"@@@Merge pull request #13742 from dbeaver/rsv-advanced-paste-options#13076\n\n#13076 Advanced paste options dialog","date":"2021-09-05 19:46:28","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"}]
