[{"authorTime":"2018-12-29 05:36:45","codes":[{"authorDate":"2018-12-29 05:36:45","commitOrder":1,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2018-12-29 05:36:49","endLine":187,"groupId":"4473","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f5/1d3843e4108ace3c561255071086cceddc181d.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"B"},{"authorDate":"2018-12-29 05:36:45","commitOrder":1,"curCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        attributeBindings.add(((DBDAttributeBinding) element).getFullyQualifiedName(DBPEvaluationContext.DML));\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't perform grouping query\", e);\n                }\n            }\n        });\n    }\n","date":"2018-12-29 05:36:49","endLine":171,"groupId":"3809","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(IResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/64/74d092c36e5b003fb9d84cfc9297fbe75c6893.src","preCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        attributeBindings.add(((DBDAttributeBinding) element).getFullyQualifiedName(DBPEvaluationContext.DML));\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't perform grouping query\", e);\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"B"}],"commitId":"3752e74ff31a5aee8616c9e37d50626de690a976","commitMessage":"@@@#10 RSV implementation extraction\n\n\nFormer-commit-id: aa7c026a3e9871fad79ded3afbf21c0e1684c7dd","date":"2018-12-29 05:36:49","modifiedFileCount":"16","status":"B","submitter":"serge-rider"},{"authorTime":"2019-02-22 17:14:21","codes":[{"authorDate":"2018-12-29 05:36:45","commitOrder":2,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2018-12-29 05:36:49","endLine":187,"groupId":"4473","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f5/1d3843e4108ace3c561255071086cceddc181d.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2019-02-22 17:14:21","commitOrder":2,"curCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't perform grouping query\", e);\n                }\n            }\n        });\n    }\n","date":"2019-02-22 17:14:21","endLine":186,"groupId":"3809","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(IResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/35/76bbdbe6fcc56a39f6017ecb2b6e9d5c12c262.src","preCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        attributeBindings.add(((DBDAttributeBinding) element).getFullyQualifiedName(DBPEvaluationContext.DML));\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't perform grouping query\", e);\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"caaab6c8c8196c87d42c9195f9dc37497d98613d","commitMessage":"@@@Grouping panel fixes\n\n\nFormer-commit-id: 86dd8af4a5c91084e06c045a9042b96ccf366be3","date":"2019-02-22 17:14:21","modifiedFileCount":"3","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-04-20 17:46:12","codes":[{"authorDate":"2018-12-29 05:36:45","commitOrder":3,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2018-12-29 05:36:49","endLine":187,"groupId":"4473","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f5/1d3843e4108ace3c561255071086cceddc181d.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":178,"status":"N"},{"authorDate":"2019-04-20 17:46:12","commitOrder":3,"curCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                }\n            }\n        });\n    }\n","date":"2019-04-20 17:46:12","endLine":188,"groupId":"3809","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(IResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a7/5dc61632bce990490f23a8e690061efc274d21.src","preCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't perform grouping query\", e);\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"a20f67430abc5e639df557dca7ad83106227b1c7","commitMessage":"@@@Merge pull request #5559 from riednyko/#91_data_editor_panels\n\ndbeaver-corp/dbeaver-i18n#91\n\nFormer-commit-id: 41b3e43425d65b4bdebc59b5c2d480af4b0609ce","date":"2019-04-20 17:46:12","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-01-07 06:57:27","codes":[{"authorDate":"2020-01-07 06:57:27","commitOrder":4,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2020-01-07 06:57:27","endLine":194,"groupId":"4473","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6a/80015a232503e4e4f2e125282adf4d1aec3a0b.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(resultsContainer.getResultSetController().getControl().getShell(), resultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    resultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"},{"authorDate":"2020-01-07 06:57:27","commitOrder":4,"curCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                UIUtils.asyncExec(() -> {\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-01-07 06:57:27","endLine":187,"groupId":"3809","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(IResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f8/8845c069668157b98e22b2686621f6a5d4895b.src","preCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                try {\n                    container.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                }\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"03c92b102156a479369a22311a631c248553a367","commitMessage":"@@@Query processing performance (run in async + lazy panel initialization)\n\n\nFormer-commit-id: ee4c43c141754f8a0cfb1ff5d23c6e01e6637b39","date":"2020-01-07 06:57:27","modifiedFileCount":"10","status":"M","submitter":"serge-rider"},{"authorTime":"2020-03-25 19:17:19","codes":[{"authorDate":"2020-01-07 06:57:27","commitOrder":5,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2020-01-07 06:57:27","endLine":194,"groupId":"4473","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6a/80015a232503e4e4f2e125282adf4d1aec3a0b.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"},{"authorDate":"2020-03-25 19:17:19","commitOrder":5,"curCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-03-25 19:17:19","endLine":186,"groupId":"3809","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(IResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/09/49dbeccc6aa20b3ab3231d945c33e4871e397d.src","preCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                if (event.detail == DND.DROP_COPY) {\n                    GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                    if (dialog.open() != IDialogConstants.OK_ID) {\n                        container.clearGrouping();\n                        return;\n                    }\n                }\n                UIUtils.asyncExec(() -> {\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"}],"commitId":"8c612ed023cc9cd1e754067312fe310be1bd7091","commitMessage":"@@@#7773 Grouping panel + dnd bug (run UI in async mode)\n\n\nFormer-commit-id: 8ec03e38330f80d2941e4cc4290a7340ca164816","date":"2020-03-25 19:17:19","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-04-14 05:52:34","codes":[{"authorDate":"2020-01-07 06:57:27","commitOrder":6,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2020-01-07 06:57:27","endLine":194,"groupId":"4473","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6a/80015a232503e4e4f2e125282adf4d1aec3a0b.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"},{"authorDate":"2020-04-14 05:52:34","commitOrder":6,"curCode":"    public void registerDragAndDrop(@NotNull IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-04-14 05:52:34","endLine":187,"groupId":"3809","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(@NotNullIResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d4/e1b965dc4ad10e248625f4918f42337df15a82.src","preCode":"    public void registerDragAndDrop(IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"}],"commitId":"0b395d82e5c6377f83dc569bb9f6f03e78941c61","commitMessage":"@@@RSV presentation model refactoring\n\n\nFormer-commit-id: 329dedf54c0516da395e83761106df80f7caae5d","date":"2020-04-14 05:52:34","modifiedFileCount":"11","status":"M","submitter":"serge-rider"},{"authorTime":"2020-09-12 02:24:55","codes":[{"authorDate":"2020-01-07 06:57:27","commitOrder":7,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2020-01-07 06:57:27","endLine":194,"groupId":"4473","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6a/80015a232503e4e4f2e125282adf4d1aec3a0b.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"},{"authorDate":"2020-09-12 02:24:55","commitOrder":7,"curCode":"    public void registerDragAndDrop(@NotNull IResultSetPresentation presentation) {\n        final DropTargetListener[] gridDropListeners;\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            gridDropListeners = ((DropTarget) oldDropTarget).getDropListeners();\n            ((DropTarget) oldDropTarget).dispose();\n        } else {\n            gridDropListeners = null;\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> newBindings = new ArrayList<>();\n                List<DBDAttributeBinding> movedBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        String attrName = getAttributeBindingName(binding);\n\n                        if (ArrayUtils.contains(container.getResultSetController().getModel().getAttributes(), binding)) {\n                            \r\n                            if (!container.getGroupFunctions().contains(attrName)) {\n                                \r\n                                movedBindings.add(binding);\n                            }\n                        } else {\n                            newBindings.add(attrName);\n                        }\n                    }\n                }\n                if (!movedBindings.isEmpty()) {\n                    if (gridDropListeners != null) {\n                        \r\n                        dropElements.clear();\n                        dropElements.addAll(movedBindings);\n                        for (DropTargetListener listener : gridDropListeners) {\n                            listener.drop(event);\n                        }\n                    }\n                    \r\n                    List<String> curAttributes = new ArrayList<>(container.getGroupAttributes());\n                    for (DBDAttributeBinding mb : movedBindings) {\n                        String attrName = getAttributeBindingName(mb);\n                        curAttributes.remove(attrName);\n                        curAttributes.add(0, attrName);\n                    }\n                    container.clearGroupingAttributes();\n                    container.addGroupingAttributes(curAttributes);\n                }\n\n                if (!newBindings.isEmpty()) {\n                    container.addGroupingAttributes(newBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-09-12 02:24:55","endLine":219,"groupId":"5260","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(@NotNullIResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/7f/68114177a9c56826d3f0851615fd52d4cdd174.src","preCode":"    public void registerDragAndDrop(@NotNull IResultSetPresentation presentation) {\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            ((DropTarget) oldDropTarget).dispose();\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> attributeBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        if (binding instanceof DBDAttributeBindingMeta && binding.getMetaAttribute() != null) {\n                            attributeBindings.add(DBUtils.getQuotedIdentifier(binding.getDataSource(), binding.getMetaAttribute().getLabel()));\n                        } else {\n                            attributeBindings.add(binding.getFullyQualifiedName(DBPEvaluationContext.DML));\n                        }\n                    }\n                }\n                if (!attributeBindings.isEmpty()) {\n                    container.addGroupingAttributes(attributeBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"570fa8d6e9e56df37be5d1a851bfd576918c0462","commitMessage":"@@@#4856 Grouping: column reorder handle\n\n\nFormer-commit-id: ebf07f0abbf3a3af19b977af87c2e1d689620a7d","date":"2020-09-12 02:24:55","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-10-01 01:49:33","codes":[{"authorDate":"2020-01-07 06:57:27","commitOrder":8,"curCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","date":"2020-01-07 06:57:27","endLine":194,"groupId":"12423","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/6a/80015a232503e4e4f2e125282adf4d1aec3a0b.src","preCode":"        public void run() {\n            GroupingConfigDialog dialog = new GroupingConfigDialog(groupingResultsContainer.getResultSetController().getControl().getShell(), groupingResultsContainer);\n            if (dialog.open() == IDialogConstants.OK_ID) {\n                try {\n                    groupingResultsContainer.rebuildGrouping();\n                } catch (DBException e) {\n                    DBWorkbench.getPlatformUI().showError(\"Grouping error\", \"Can't change grouping settings\", e);\n                }\n            }\n        }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingPanel.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"N"},{"authorDate":"2020-10-01 01:49:33","commitOrder":8,"curCode":"    public void registerDragAndDrop(@NotNull IResultSetPresentation presentation) {\n        Control presentationControl = presentation.getControl();\n        final DropTargetListener[] gridDropListeners;\n        \r\n        Object oldDropTarget = presentationControl.getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            gridDropListeners = ((DropTarget) oldDropTarget).getDropListeners();\n            ((DropTarget) oldDropTarget).dispose();\n        } else {\n            gridDropListeners = null;\n        }\n        DropTarget dropTarget = new DropTarget(presentationControl, DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> newBindings = new ArrayList<>();\n                List<DBDAttributeBinding> movedBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        String attrName = getAttributeBindingName(binding);\n\n                        if (ArrayUtils.contains(container.getResultSetController().getModel().getAttributes(), binding)) {\n                            \r\n                            if (container.getGroupAttributes().contains(attrName)) {\n                                \r\n                                movedBindings.add(binding);\n                            }\n                        } else {\n                            newBindings.add(attrName);\n                        }\n                    }\n                }\n                if (movedBindings.isEmpty() && newBindings.isEmpty()) {\n                    return;\n                }\n                if (!movedBindings.isEmpty()) {\n                    if (gridDropListeners != null) {\n                        \r\n\r\n\r\n\r\n\r\n\r\n                    }\n\n                    \r\n                    List<String> curAttributes = new ArrayList<>(container.getGroupAttributes());\n                    if (!(presentation.getControl() instanceof Spreadsheet)) {\n                        return;\n                    }\n\n                    int overColumnIndex = ((Spreadsheet)presentationControl).getColumnIndex(event.x, event.y);\n                    if (overColumnIndex < 0) {\n                        return;\n                    }\n                    if (overColumnIndex >= curAttributes.size()) {\n                        overColumnIndex = curAttributes.size() - 1;\n                    }\n\n                    for (DBDAttributeBinding mb : movedBindings) {\n                        String attrName = getAttributeBindingName(mb);\n                        curAttributes.remove(attrName);\n                        curAttributes.add(overColumnIndex, attrName);\n                    }\n                    container.clearGroupingAttributes();\n                    container.addGroupingAttributes(curAttributes);\n                }\n\n                if (!newBindings.isEmpty()) {\n                    container.addGroupingAttributes(newBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","date":"2020-10-01 01:49:33","endLine":238,"groupId":"12423","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"registerDragAndDrop","params":"(@NotNullIResultSetPresentationpresentation)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b1/ae25cd6d72a31607891896cbacf73e8a9e5b6f.src","preCode":"    public void registerDragAndDrop(@NotNull IResultSetPresentation presentation) {\n        final DropTargetListener[] gridDropListeners;\n        \r\n        Object oldDropTarget = presentation.getControl().getData(DND.DROP_TARGET_KEY);\n        if (oldDropTarget instanceof DropTarget) {\n            gridDropListeners = ((DropTarget) oldDropTarget).getDropListeners();\n            ((DropTarget) oldDropTarget).dispose();\n        } else {\n            gridDropListeners = null;\n        }\n        DropTarget dropTarget = new DropTarget(presentation.getControl(), DND.DROP_MOVE | DND.DROP_COPY);\n        dropTarget.setTransfer(LightGrid.GridColumnTransfer.INSTANCE, TextTransfer.getInstance());\n        dropTarget.addDropListener(new DropTargetAdapter() {\n            @Override\n            public void dragEnter(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragLeave(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOperationChanged(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void dragOver(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            @Override\n            public void drop(DropTargetEvent event) {\n                handleDragEvent(event);\n                if (event.detail == DND.DROP_MOVE || event.detail == DND.DROP_COPY) {\n                    dropColumns(event);\n                }\n            }\n\n            @Override\n            public void dropAccept(DropTargetEvent event) {\n                handleDragEvent(event);\n            }\n\n            private void handleDragEvent(DropTargetEvent event) {\n                if (!isDropSupported(event)) {\n                    event.detail = DND.DROP_NONE;\n                } else {\n                    if (event.detail == DND.DROP_NONE) {\n                        event.detail = DND.DROP_MOVE;\n                    }\n                }\n                event.feedback = DND.FEEDBACK_SELECT;\n            }\n\n            private boolean isDropSupported(DropTargetEvent event) {\n                return true;\n                \r\n                \r\n            }\n\n            @SuppressWarnings(\"unchecked\")\n            private void dropColumns(DropTargetEvent event) {\n                if (!(event.data instanceof List)) {\n                    return;\n                }\n                List<Object> dropElements = (List<Object>) event.data;\n                List<String> newBindings = new ArrayList<>();\n                List<DBDAttributeBinding> movedBindings = new ArrayList<>();\n                for (Object element : dropElements) {\n                    if (element instanceof DBDAttributeBinding) {\n                        DBDAttributeBinding binding = (DBDAttributeBinding) element;\n                        String attrName = getAttributeBindingName(binding);\n\n                        if (ArrayUtils.contains(container.getResultSetController().getModel().getAttributes(), binding)) {\n                            \r\n                            if (!container.getGroupFunctions().contains(attrName)) {\n                                \r\n                                movedBindings.add(binding);\n                            }\n                        } else {\n                            newBindings.add(attrName);\n                        }\n                    }\n                }\n                if (!movedBindings.isEmpty()) {\n                    if (gridDropListeners != null) {\n                        \r\n                        dropElements.clear();\n                        dropElements.addAll(movedBindings);\n                        for (DropTargetListener listener : gridDropListeners) {\n                            listener.drop(event);\n                        }\n                    }\n                    \r\n                    List<String> curAttributes = new ArrayList<>(container.getGroupAttributes());\n                    for (DBDAttributeBinding mb : movedBindings) {\n                        String attrName = getAttributeBindingName(mb);\n                        curAttributes.remove(attrName);\n                        curAttributes.add(0, attrName);\n                    }\n                    container.clearGroupingAttributes();\n                    container.addGroupingAttributes(curAttributes);\n                }\n\n                if (!newBindings.isEmpty()) {\n                    container.addGroupingAttributes(newBindings);\n                }\n                UIUtils.asyncExec(() -> {\n                    if (event.detail == DND.DROP_COPY) {\n                        GroupingConfigDialog dialog = new GroupingConfigDialog(container.getResultSetController().getControl().getShell(), container);\n                        if (dialog.open() != IDialogConstants.OK_ID) {\n                            container.clearGrouping();\n                            return;\n                        }\n                    }\n                    try {\n                        container.rebuildGrouping();\n                    } catch (DBException e) {\n                        DBWorkbench.getPlatformUI().showError(ResultSetMessages.results_decorator_error_grouping_error, ResultSetMessages.results_decorator_error_cant_perform_grouping_query, e);\n                    }\n                });\n            }\n        });\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.editors.data/src/org/jkiss/dbeaver/ui/controls/resultset/panel/grouping/GroupingResultsDecorator.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":95,"status":"M"}],"commitId":"43e3dbd4980737073d19c854511633548f3bf3e4","commitMessage":"@@@#4856 Groupping columns reorder suport\n\n\nFormer-commit-id: 615c5c97cb635d94ddc74d56518def783f345f00","date":"2020-10-01 01:49:33","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"}]
