[{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-03-04 23:23:40","commitOrder":5,"curCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","date":"2020-03-04 23:23:40","endLine":58,"groupId":"14589","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3e/6b615583cc5c105b821944eca1c6a6f1045f7d.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2019-12-31 02:25:32","commitOrder":5,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"}],"commitId":"638578f10062f9c0d63c752cdba37d9c656ac95e","commitMessage":"@@@Auth model + registry\n\n\nFormer-commit-id: 2e83167439fafeab0130a4322a4f0ea4ac3fcd2c","date":"2020-03-04 23:23:40","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-03-16 23:52:59","commitOrder":6,"curCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"datasource\")) {\n            this.dataSources.add(new DataSourceInfo(dsConfig));\n        }\n    }\n","date":"2020-03-16 23:52:59","endLine":106,"groupId":"14589","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/a8/09d0c7fc02bc3aa2e878c67310e8173d9dae30.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config)\n    {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":6,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"a42f49d52d2c1833d0c580c068804d0840ed8866","commitMessage":"@@@#8128 Multi-auth model mode\n\n\nFormer-commit-id: 49f0ba3a4a6a27cb4ccedbee7429987809a72025","date":"2020-03-16 23:52:59","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-03-17 00:26:03","commitOrder":7,"curCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"datasource\")) {\n            this.dataSources.add(new DataSourceInfo(dsConfig));\n        }\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n    }\n","date":"2020-03-17 00:26:03","endLine":111,"groupId":"14589","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/95/4e3c5b712324fc3504503d80e933b431f60921.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"datasource\")) {\n            this.dataSources.add(new DataSourceInfo(dsConfig));\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":7,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"bd856ebf23a0ed889107e4b6a16204e1c675bccf","commitMessage":"@@@#8128 Model replacements\n\n\nFormer-commit-id: c8c6a22a39906b3c2f30c8bda820f80b7d707110","date":"2020-03-17 00:26:03","modifiedFileCount":"2","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-05-09 21:09:11","commitOrder":8,"curCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"datasource\")) {\n            this.dataSources.add(new DataSourceInfo(dsConfig));\n        }\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n    }\n","date":"2020-05-09 21:09:11","endLine":111,"groupId":"14589","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/2a/6a8b86d4729518e1f8e0117c9d77ae7f4c1a29.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"datasource\")) {\n            this.dataSources.add(new DataSourceInfo(dsConfig));\n        }\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":8,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"143e3e26e71697948c95b12ae688d8001720ee92","commitMessage":"@@@dbeaver/dbeaver#2092 Auth profiles in action. Secure credentials save/load redesign\n\n\nFormer-commit-id: d067f67cc5e19315598a3f81e52650781b0ba358","date":"2020-05-09 21:09:11","modifiedFileCount":"5","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-05-31 20:44:19","commitOrder":9,"curCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n    }\n","date":"2020-05-31 20:44:19","endLine":65,"groupId":"14589","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b5/6df6110ba5458a8288db72e7ea670f332de049.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"datasource\")) {\n            this.dataSources.add(new DataSourceInfo(dsConfig));\n        }\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":9,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"884e891cfe5b3b75a5360920550d96e9d2cd07ed","commitMessage":"@@@SQL tools configuration: bind task type to datasources\n\n\nFormer-commit-id: 4269244017d669ad385fef2c105d325c3dc2ca54","date":"2020-05-31 20:44:19","modifiedFileCount":"4","status":"M","submitter":"serge-rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-07-05 17:01:34","commitOrder":10,"curCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n        this.authProperties = PropertyDescriptor.extractPropertyGroups(config);\n\n    }\n","date":"2020-07-05 17:01:34","endLine":70,"groupId":"14589","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/06/17b59cd9753a57be7ee29f5611fff7f8fd714c.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":10,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"481f3f1f190cdb1ff1dbed8ccc0cc5ef1957b6a6","commitMessage":"@@@Properties model refactoring\n\n\nFormer-commit-id: 992fb16cbac4e982186b1bac236df4fa699d42c8","date":"2020-07-05 17:01:34","modifiedFileCount":"28","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-07-05 19:19:09","commitOrder":11,"curCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n        this.credentialsType = new ObjectType(config, \"credentialsClass\");\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","date":"2020-07-05 19:19:09","endLine":68,"groupId":"14589","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/f4/8c0bb0272f07113c158f9f0edd291b84bc0231.src","preCode":"    public DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n\n        this.authProperties = PropertyDescriptor.extractPropertyGroups(config);\n\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":11,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"38578dbef0fcc4d42c61dcfadf15dc7d159a1c0a","commitMessage":"@@@Auth model credentials model\n\n\nFormer-commit-id: dbc5c27c72f5900e970d85ec3e7856ccfe507034","date":"2020-07-05 19:19:09","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-12-31 02:25:32","codes":[{"authorDate":"2020-07-05 22:59:52","commitOrder":12,"curCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","date":"2020-07-05 22:59:52","endLine":66,"groupId":"14589","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/81/333643f4fa152fbfb57df500ee0b89dc1d026e.src","preCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n        this.credentialsType = new ObjectType(config, \"credentialsClass\");\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2019-12-31 02:25:32","commitOrder":12,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2019-12-31 02:25:32","endLine":159,"groupId":"14589","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/17/438d5dd02fa32f556ce1ba4ad5e16353fbc33a.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"N"}],"commitId":"0346ba2069f1e0fd547167ddf9ef9e725cb78882","commitMessage":"@@@Auth model credentials API\n\n\nFormer-commit-id: 43ba58251cdf4ca3316f51fce58bdf602127e657","date":"2020-07-05 22:59:52","modifiedFileCount":"8","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-01-30 22:18:10","codes":[{"authorDate":"2020-07-05 22:59:52","commitOrder":13,"curCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","date":"2020-07-05 22:59:52","endLine":66,"groupId":"14589","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/81/333643f4fa152fbfb57df500ee0b89dc1d026e.src","preCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"N"},{"authorDate":"2021-01-30 22:18:10","commitOrder":13,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2021-01-30 22:18:10","endLine":183,"groupId":"14589","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8d/a8fa77b15e81fa692515ef97c3a2ac760e70cb.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"ec99c7252ddc2744fd09edaf1555682c1542785f","commitMessage":"@@@CB-690 Driver additional properties model + PG props\n\n\nFormer-commit-id: 394ad1c2b4ac3243ccaa7680787e15569f012925","date":"2021-01-30 22:18:10","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-01-30 22:18:10","codes":[{"authorDate":"2021-02-05 17:55:35","commitOrder":14,"curCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n        this.defaultModel = CommonUtils.toBoolean(config.getAttribute(RegistryConstants.ATTR_DEFAULT));\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","date":"2021-02-05 17:55:35","endLine":70,"groupId":"14589","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/86/1f970cf444bca30095d67acfe3a3705ee1c3ba.src","preCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-01-30 22:18:10","commitOrder":14,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2021-01-30 22:18:10","endLine":183,"groupId":"14589","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/8d/a8fa77b15e81fa692515ef97c3a2ac760e70cb.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"N"}],"commitId":"daf2dccdd63002fc1a4ab767c0c09ef6534432b5","commitMessage":"@@@Default auth model API\n\n\nFormer-commit-id: bad60804ad68cf8c6dec1c23e4b576336e0de5db","date":"2021-02-05 17:55:35","modifiedFileCount":"4","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-07-22 16:51:47","codes":[{"authorDate":"2021-02-05 17:55:35","commitOrder":15,"curCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n        this.defaultModel = CommonUtils.toBoolean(config.getAttribute(RegistryConstants.ATTR_DEFAULT));\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","date":"2021-02-05 17:55:35","endLine":70,"groupId":"12550","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"DataSourceAuthModelDescriptor","params":"(IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/86/1f970cf444bca30095d67acfe3a3705ee1c3ba.src","preCode":"    DataSourceAuthModelDescriptor(IConfigurationElement config) {\n        super(config);\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.TREE_PACKAGE;\n        }\n        this.defaultModel = CommonUtils.toBoolean(config.getAttribute(RegistryConstants.ATTR_DEFAULT));\n\n        for (IConfigurationElement dsConfig : config.getChildren(\"replace\")) {\n            this.replaces.add(dsConfig.getAttribute(\"model\"));\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceAuthModelDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2021-07-22 16:51:47","commitOrder":15,"curCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeDescriptor(this, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","date":"2021-07-22 16:51:47","endLine":183,"groupId":"12550","id":22,"instanceNumber":2,"isCurCommit":1,"methodName":"DataSourceProviderDescriptor","params":"(DataSourceProviderRegistryregistry@IConfigurationElementconfig)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/d6/c6a417d6fa9c0ee35e45a5bc0a7208f09d571b.src","preCode":"    public DataSourceProviderDescriptor(DataSourceProviderRegistry registry, IConfigurationElement config)\n    {\n        super(config);\n        this.registry = registry;\n        this.temporary = false;\n\n        String parentId = config.getAttribute(RegistryConstants.ATTR_PARENT);\n        if (!CommonUtils.isEmpty(parentId)) {\n            this.parentProvider = registry.getDataSourceProvider(parentId);\n            if (this.parentProvider == null) {\n                log.error(\"Provider '\" + parentId + \"' not found\");\n            }\n        }\n\n        this.id = config.getAttribute(RegistryConstants.ATTR_ID);\n        this.implType = new ObjectType(config.getAttribute(RegistryConstants.ATTR_CLASS));\n        this.name = config.getAttribute(RegistryConstants.ATTR_LABEL);\n        this.description = config.getAttribute(RegistryConstants.ATTR_DESCRIPTION);\n        this.icon = iconToImage(config.getAttribute(RegistryConstants.ATTR_ICON));\n        if (this.icon == null) {\n            this.icon = DBIcon.DATABASE_DEFAULT;\n        }\n        String dialectId = config.getAttribute(RegistryConstants.ATTR_DIALECT);\n        if (CommonUtils.isEmpty(dialectId)) {\n            log.debug(\"No SQL dialect specified for data source provider '\" + this.id + \"'. Use default.\");\n            dialectId = BasicSQLDialect.ID;\n        }\n        this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(dialectId);\n        if (this.scriptDialect == null) {\n            log.debug(\"Script dialect '\" + dialectId + \"' not found in registry (for data source provider \" + id + \"). Use default.\");\n            this.scriptDialect = SQLDialectRegistry.getInstance().getDialect(BasicSQLDialect.ID);\n        }\n\n        {\n            \r\n            IConfigurationElement[] trees = config.getChildren(RegistryConstants.TAG_TREE);\n            if (!ArrayUtils.isEmpty(trees)) {\n                this.treeDescriptor = this.loadTreeInfo(trees[0]);\n            } else if (parentProvider != null) {\n                \r\n                this.treeDescriptor = new DBXTreeItem(this, null, parentProvider.treeDescriptor);\n            }\n\n            \r\n            IConfigurationElement[] injections = config.getChildren(RegistryConstants.TAG_TREE_INJECTION);\n            if (!ArrayUtils.isEmpty(injections)) {\n                for (IConfigurationElement treeInject : injections) {\n                    this.injectTreeNodes(treeInject);\n                }\n            }\n        }\n\n        \r\n        {\n            if (parentProvider != null) {\n                driverProperties.addAll(parentProvider.driverProperties);\n            }\n            for (IConfigurationElement propsElement : config.getChildren(RegistryConstants.TAG_DRIVER_PROPERTIES)) {\n                for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                    driverProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement driversElement : config.getChildren(RegistryConstants.TAG_DRIVERS)) {\n                this.driversManagable = driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE) == null ||\n                    CommonUtils.getBoolean(driversElement.getAttribute(RegistryConstants.ATTR_MANAGABLE));\n                for (IConfigurationElement driverElement : driversElement.getChildren(RegistryConstants.TAG_DRIVER)) {\n                    try {\n                        this.drivers.add(loadDriver(driverElement));\n                    } catch (Exception e) {\n                        log.error(\"Error loading driver\", e);\n                    }\n                }\n\n                \r\n                {\n                    for (IConfigurationElement propsElement : driversElement.getChildren(RegistryConstants.TAG_PROVIDER_PROPERTIES)) {\n                        String driversSpec = propsElement.getAttribute(\"drivers\");\n                        List<DBPPropertyDescriptor> providerProperties = new ArrayList<>();\n                        for (IConfigurationElement prop : propsElement.getChildren(PropertyDescriptor.TAG_PROPERTY_GROUP)) {\n                            providerProperties.addAll(PropertyDescriptor.extractProperties(prop));\n                        }\n                        List<DriverDescriptor> appDrivers;\n                        if (CommonUtils.isEmpty(driversSpec) || driversSpec.equals(\"*\")) {\n                            appDrivers = drivers;\n                        } else {\n                            String[] driverIds = driversSpec.split(\",\");\n                            appDrivers = drivers.stream()\n                                .filter(d -> ArrayUtils.contains(driverIds, d.getId())).collect(Collectors.toList());\n                        }\n                        appDrivers.forEach(d -> d.addProviderPropertyDescriptors(providerProperties));\n                    }\n                }\n            }\n        }\n\n        \r\n        {\n            for (IConfigurationElement nativeClientsElement : config.getChildren(\"nativeClients\")) {\n                for (IConfigurationElement clientElement : nativeClientsElement.getChildren(\"client\")) {\n                    this.nativeClients.add(new NativeClientDescriptor(clientElement));\n                }\n            }\n        }\n    }\n","realPath":"plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceProviderDescriptor.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"931f7cd045826395a1d779f21d26cc3c46eb9e4e","commitMessage":"@@@dbeaver/dbeaver-ee#954 Merge entities support check\n","date":"2021-07-22 16:51:47","modifiedFileCount":"6","status":"M","submitter":"Serge Rider"}]
