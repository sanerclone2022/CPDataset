[{"authorTime":"2019-07-26 18:15:29","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":13,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"11846","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"B"},{"authorDate":"2019-07-26 18:15:29","commitOrder":13,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 18:15:29","endLine":425,"groupId":"1960","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/14/f164194341886aa9b0a3113b2232adbc2616ed.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"NB"}],"commitId":"d415f5fa6b92a49429cfb1665a3fc8591806e744","commitMessage":"@@@#6218 SQL Server: schema DDL.\n\n\nFormer-commit-id: 52b43a4872fb084607dcd3c1ce4414029ae187f2","date":"2019-07-26 20:21:25","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-02-14 20:12:39","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":14,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"11846","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-02-14 20:12:39","commitOrder":14,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","date":"2020-02-14 20:12:39","endLine":461,"groupId":"1960","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1d/34a7da4e6a1905af8276f711db3dfa85a4be26.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":385,"status":"M"}],"commitId":"788ee53a0227fe8494947931950bee7747253b1c","commitMessage":"@@@#6565 PG schema DDL (add user permissions)\n\n\nFormer-commit-id: 898429827f0d389c0ad35bb121156337c74e04cc","date":"2020-02-14 20:12:39","modifiedFileCount":"1","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-05-16 01:40:38","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":15,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"11846","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-05-16 01:40:38","commitOrder":15,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","date":"2020-05-16 01:40:38","endLine":466,"groupId":"5987","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1c/0a0ceb9aa9fdf43192a57e5228ea0539bb6a27.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"M"}],"commitId":"212c1abd1696ad4454fb28ec88c5228f97c11d61","commitMessage":"@@@#8714 Greenplum statistics\n\n\nFormer-commit-id: 915ad1f0b695e5ae832f23290b0b6cdc9945f32c","date":"2020-05-16 01:40:38","modifiedFileCount":"1","status":"M","submitter":"serge-rider"},{"authorTime":"2020-08-13 02:18:36","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":16,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"11846","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2020-08-13 02:18:36","commitOrder":16,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","date":"2020-08-13 02:18:36","endLine":467,"groupId":"5987","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/88/8f5de207f9f265e10fc4ea1140880b8c2ad2ab.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription())) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, PostgreConstants.OPTION_DDL_SHOW_FULL)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":391,"status":"M"}],"commitId":"94398858fb702e0b5adac7d3d1676e6cbe62c1b9","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: c013082c666c3077318900d757f87bfef4fbbda9","date":"2020-08-13 02:18:36","modifiedFileCount":"76","status":"M","submitter":"serge-rider"},{"authorTime":"2021-01-26 19:56:09","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":17,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"11846","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2021-01-26 19:56:09","commitOrder":17,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                if (dataType.hasAttributes() || dataType.isArray()) {\n                    \r\n                    continue;\n                }\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","date":"2021-01-26 19:56:09","endLine":562,"groupId":"11920","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/1c/61c6f8038528dafc0768244ccf4b87a2142663.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":482,"status":"M"}],"commitId":"beb8319214c6068275e2d9ac64faaefa1d627b29","commitMessage":"@@@#11117 Skip table and array types\n\n\nFormer-commit-id: c82fbb80fc3237c38911a94a4c615f380365ffef","date":"2021-01-26 19:56:09","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-02-11 17:43:01","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":18,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"11846","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2021-02-11 17:43:01","commitOrder":18,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            boolean readAllTypes = getDatabase().getDataSource().supportReadingAllDataTypes();\n            for (PostgreDataType dataType : dataTypes) {\n                if (!readAllTypes && (dataType.hasAttributes() || dataType.isArray())) {\n                    \r\n                    continue;\n                }\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","date":"2021-02-11 17:43:01","endLine":561,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/11/f41404c1038177ad5d343da9b4829272b8e41b.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (PostgreDataType dataType : dataTypes) {\n                if (dataType.hasAttributes() || dataType.isArray()) {\n                    \r\n                    continue;\n                }\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":480,"status":"M"}],"commitId":"298151a5a46fbd86ccdd9e6005d5219c7b9b626c","commitMessage":"@@@Merge pull request #11295 from dbeaver/postgreTypess#11216\n\n#11216 postgreSQL data types cache reading changed\n\nFormer-commit-id: 8fb55606d47c3049e7d7f72da53af5f798b9b75b","date":"2021-02-11 17:43:01","modifiedFileCount":"12","status":"M","submitter":"Serge Rider"},{"authorTime":"2021-02-20 19:56:58","codes":[{"authorDate":"2019-07-26 20:21:25","commitOrder":19,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","date":"2019-07-26 20:21:25","endLine":272,"groupId":"10809","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/47/4b4ef6b28352fd88bf6edf6851fd8d458a3718.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        sql.append(\";\\n\");\n\n        if (!monitor.isCanceled()) {\n            Collection<SQLServerTableBase> tablesOrViews = tableCache.getAllObjects(monitor, this);\n            DBStructUtils.generateTableListDDL(monitor, sql, tablesOrViews, options, false);\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.mssql/src/org/jkiss/dbeaver/ext/mssql/model/SQLServerSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":259,"status":"N"},{"authorDate":"2021-02-20 19:56:58","commitOrder":19,"curCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            boolean readAllTypes = getDatabase().getDataSource().supportReadingAllDataTypes();\n            for (PostgreDataType dataType : dataTypes) {\n                if (!readAllTypes && (dataType.hasAttributes() || dataType.isArray())) {\n                    \r\n                    continue;\n                }\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(new SubTaskProgressMonitor(monitor), sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","date":"2021-02-20 19:56:58","endLine":562,"groupId":"10809","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getObjectDefinitionText","params":"(DBRProgressMonitormonitor@Map<String@Object>options)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/cf/7337f63eb0f7ceb5220a24ac31b5d9287993e6.src","preCode":"    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP SCHEMA \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE SCHEMA \").append(DBUtils.getQuotedIdentifier(this));\n        PostgreRole owner = getOwner(monitor);\n        if (owner != null) {\n            sql.append(\" AUTHORIZATION \").append(DBUtils.getQuotedIdentifier(owner));\n        }\n        sql.append(\";\\n\");\n        if (!CommonUtils.isEmpty(getDescription()) && CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_COMMENTS)) {\n            sql.append(\"\\nCOMMENT ON SCHEMA \").append(DBUtils.getQuotedIdentifier(this))\n                .append(\" IS \").append(SQLUtils.quoteString(this, getDescription()));\n            sql.append(\";\\n\");\n        }\n\n        if (CommonUtils.getOption(options, DBPScriptObject.OPTION_INCLUDE_NESTED_OBJECTS)) {\n            \r\n            monitor.beginTask(\"Cache schema\", 1);\n            cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n            monitor.done();\n\r\n\r\n\r\n\r\n\r\n\n            Collection<PostgreDataType> dataTypes = getDataTypes(monitor);\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            boolean readAllTypes = getDatabase().getDataSource().supportReadingAllDataTypes();\n            for (PostgreDataType dataType : dataTypes) {\n                if (!readAllTypes && (dataType.hasAttributes() || dataType.isArray())) {\n                    \r\n                    continue;\n                }\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n                monitor.worked(1);\n            }\n            monitor.done();\n\n            if (!monitor.isCanceled()) {\n                Collection<PostgreTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n\n                List<PostgreTableBase> allTables = new ArrayList<>();\n                for (PostgreTableBase tableOrView : tablesOrViews) {\n                    monitor.subTask(tableOrView.getName());\n                    if (tableOrView instanceof PostgreSequence) {\n                        addDDLLine(sql, tableOrView.getObjectDefinitionText(monitor, options));\n                    } else {\n                        allTables.add(tableOrView);\n                    }\n                }\n                DBStructUtils.generateTableListDDL(monitor, sql, allTables, options, false);\n                monitor.done();\n            }\n            if (!monitor.isCanceled()) {\n                Collection<PostgreProcedure> procedures = getProcedures(monitor);\n                monitor.beginTask(\"Load procedures\", procedures.size());\n                for (PostgreProcedure procedure : procedures) {\n                    monitor.subTask(procedure.getName());\n                    addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                    monitor.worked(1);\n                    if (monitor.isCanceled()) {\n                        break;\n                    }\n                }\n                monitor.done();\n            }\n        }\n\n        List<DBEPersistAction> actions = new ArrayList<>();\n        PostgreUtils.getObjectGrantPermissionActions(monitor, this, actions, options);\n        if (!actions.isEmpty()) {\n            sql.append(\"\\n\\n\");\n            sql.append(SQLUtils.generateScript(getDataSource(), actions.toArray(new DBEPersistAction[0]), false));\n        }\n\n\n        return sql.toString();\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ext.postgresql/src/org/jkiss/dbeaver/ext/postgresql/model/PostgreSchema.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":481,"status":"M"}],"commitId":"8d6b8c247c9777045e47c8f47074e483a6598d98","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 98f30ec2ff0fc9da8ef979520cf3f4f8cec0f2f7","date":"2021-02-20 19:56:58","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"}]
