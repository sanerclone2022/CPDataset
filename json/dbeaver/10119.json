[{"authorTime":"2019-02-11 05:50:08","codes":[{"authorDate":"2019-02-11 02:34:14","commitOrder":3,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = UIIcon.ACTION_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","date":"2019-02-11 02:34:14","endLine":212,"groupId":"1928","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b5/490bbf13c59bab70274c806e1e6598e8f7aa31.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = UIIcon.ACTION_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardManagerDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"NB"},{"authorDate":"2019-02-11 05:50:08","commitOrder":3,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new PatternFilter() {\n                protected boolean isLeafMatch(Viewer viewer, Object element) {\n                    if (element instanceof DBPNamedObject) {\n                        return wordMatches(((DBPNamedObject) element).getName());\n                    }\n                    return false;\n                }\n\n            }, true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","date":"2019-02-11 05:50:08","endLine":165,"groupId":"15357","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/3f/66dbd47d9a8f38f3e6a7f8d28e9b34741f99ea.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new PatternFilter() {\n                protected boolean isLeafMatch(Viewer viewer, Object element) {\n                    if (element instanceof DBPNamedObject) {\n                        return wordMatches(((DBPNamedObject) element).getName());\n                    }\n                    return false;\n                }\n\n            }, true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardDatabaseSelectDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"2fe5979ce43ae0bf11d0901d50675e6f919d1d8e","commitMessage":"@@@#4209 Dashboard edit\n\n\nFormer-commit-id: 262adbdc1c0e7e53ededd14dc8fc5adba1f038a0","date":"2019-02-11 05:50:08","modifiedFileCount":"7","status":"M","submitter":"serge-rider"},{"authorTime":"2019-02-16 01:30:55","codes":[{"authorDate":"2019-02-11 02:34:14","commitOrder":4,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = UIIcon.ACTION_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","date":"2019-02-11 02:34:14","endLine":212,"groupId":"1928","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/b5/490bbf13c59bab70274c806e1e6598e8f7aa31.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = UIIcon.ACTION_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardManagerDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"},{"authorDate":"2019-02-16 01:30:55","commitOrder":4,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","date":"2019-02-16 01:30:55","endLine":158,"groupId":"15357","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/66/ee91de628ec372a3517ca91bc654e76e59e93d.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new PatternFilter() {\n                protected boolean isLeafMatch(Viewer viewer, Object element) {\n                    if (element instanceof DBPNamedObject) {\n                        return wordMatches(((DBPNamedObject) element).getName());\n                    }\n                    return false;\n                }\n\n            }, true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardDatabaseSelectDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"d0ff70176460ecd0ce5a6acaa8bc474ab060bb6c","commitMessage":"@@@Filter settings dialog enhancement\n\n\nFormer-commit-id: d01a3603bade71fad3652e93d2ed1d6d840c8510","date":"2019-02-16 01:30:55","modifiedFileCount":"2","status":"M","submitter":"Serge Rider"},{"authorTime":"2019-02-16 01:30:55","codes":[{"authorDate":"2019-07-31 02:17:59","commitOrder":5,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = DBIcon.TYPE_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","date":"2019-07-31 02:17:59","endLine":213,"groupId":"1928","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/c7/1a05db70648963ac0847a8d36f7e2b8fd806eb.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = UIIcon.ACTION_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardManagerDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"M"},{"authorDate":"2019-02-16 01:30:55","commitOrder":5,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","date":"2019-02-16 01:30:55","endLine":158,"groupId":"15357","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/66/ee91de628ec372a3517ca91bc654e76e59e93d.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardDatabaseSelectDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"N"}],"commitId":"265f6b9ca095663bf3b6a3b8c40fc8d80dd30595","commitMessage":"@@@#6379 Data viewer: color settings dialog\n\n\nFormer-commit-id: 80d7e7b91736e052f12856d917f3404151d24c3a","date":"2019-07-31 02:17:59","modifiedFileCount":"5","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-09-10 22:54:59","codes":[{"authorDate":"2020-09-10 22:54:59","commitOrder":6,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_manager_treecolumn_name);\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = DBIcon.TYPE_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_new, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_copy, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_edit, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_delete, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, UIDashboardMessages.dialog_dashboard_manager_infolabel_predifined_dashboard);\n\n        this.updateButtons();\n        return group;\n    }\n","date":"2020-09-10 22:54:59","endLine":214,"groupId":"1928","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/c2b310f766c3c98f2169cd9060ecb3a5942bdc.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = DBIcon.TYPE_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, \"New Dashboard ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, \"Copy\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, \"Edit ...\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, \"Delete\", null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, \"Predefined dashboards are read-only. But you can copy them.\");\n\n        this.updateButtons();\n        return group;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardManagerDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"M"},{"authorDate":"2020-09-10 22:54:59","commitOrder":6,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_database_select_column_name);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_database_select_column_description);\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","date":"2020-09-10 22:54:59","endLine":155,"groupId":"15357","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/0e/5cf95b916800e0b749cc8c022d82d5c4255200.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Name\");\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, \"Description\");\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardDatabaseSelectDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"8fbd51d13f79ad63f7fe00e864dc99053ccae29f","commitMessage":"@@@Merge pull request #9739 from dbeaver/i18n#176\n\ndbeaver-i18n#176 i18n of dashboard plugin\n\nFormer-commit-id: 07d00f9932fd61bb60b0af1011d8f2464b381a2b","date":"2020-09-10 22:54:59","modifiedFileCount":"11","status":"M","submitter":"Serge Rider"},{"authorTime":"2020-09-21 16:58:56","codes":[{"authorDate":"2020-09-10 22:54:59","commitOrder":7,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_manager_treecolumn_name);\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = DBIcon.TYPE_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_new, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_copy, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_edit, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_delete, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, UIDashboardMessages.dialog_dashboard_manager_infolabel_predifined_dashboard);\n\n        this.updateButtons();\n        return group;\n    }\n","date":"2020-09-10 22:54:59","endLine":214,"groupId":"10119","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/45/c2b310f766c3c98f2169cd9060ecb3a5942bdc.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        getShell().setMinimumSize(300, 300);\n\n        Composite dialogArea = super.createDialogArea(parent);\n\n        Composite group = UIUtils.createPlaceholder(dialogArea, 2);\n        group.setLayoutData(new GridData(GridData.FILL_BOTH));\n\n        {\n            treeViewer = new TreeViewer(group, SWT.BORDER);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_manager_treecolumn_name);\n            \r\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDataSourceProviderDescriptor)parentElement, false);\n                    } else if (parentElement instanceof DBPDriver) {\n                        result = DashboardRegistry.getInstance().getDashboards((DBPDriver)parentElement, false);\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DashboardDescriptor) {\n                        return false;\n                    }\n                    return true;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        if (element instanceof DBPDriver) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDriver) element).getIcon()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setImage(DBeaverIcons.getImage(((DBPDataSourceProviderDescriptor) element).getIcon()));\n                        } else if (element instanceof DashboardDescriptor) {\n                            DashboardDescriptor dashboardDescriptor = (DashboardDescriptor) element;\n                            DBPImage icon;\n                            if (dashboardDescriptor.isCustom()) {\n                                icon = DBIcon.TYPE_OBJECT;\n                            } else {\n                                icon = dashboardDescriptor.getDefaultViewType().getIcon();\n                            }\n                            if (icon != null) {\n                                cell.setImage(DBeaverIcons.getImage(icon));\n                            }\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DashboardRegistry.getInstance().getAllSupportedSources());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (selectedDashboard != null) {\n                    editDashboard();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.selectedDashboard = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DashboardDescriptor) {\n                        this.selectedDashboard = (DashboardDescriptor) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        {\n            Composite buttonBar = new Composite(group, SWT.TOP);\n            buttonBar.setLayout(new GridLayout(1, false));\n            GridData gd = new GridData(GridData.FILL_VERTICAL);\n            buttonBar.setLayoutData(gd);\n\n            newButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_new, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    createDashboard();\n                }\n            });\n            newButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            copyButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_copy, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    copyDashboard();\n                }\n            });\n            copyButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            editButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_edit, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    editDashboard();\n                }\n            });\n            editButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n\n            deleteButton = UIUtils.createPushButton(buttonBar, UIDashboardMessages.dialog_dashboard_manager_button_delete, null, new SelectionAdapter() {\n                @Override\n                public void widgetSelected(SelectionEvent e) {\n                    deleteDashboard();\n                }\n            });\n            deleteButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\n        }\n\n        UIUtils.createInfoLabel(dialogArea, UIDashboardMessages.dialog_dashboard_manager_infolabel_predifined_dashboard);\n\n        this.updateButtons();\n        return group;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardManagerDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":71,"status":"N"},{"authorDate":"2020-09-21 16:58:56","commitOrder":7,"curCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = DialogUtils.createFilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), null);\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_database_select_column_name);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_database_select_column_description);\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","date":"2020-09-21 16:58:56","endLine":155,"groupId":"10119","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createDialogArea","params":"(Compositeparent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-dbeaver-10-0.7/blobInfo/CC_OUT/blobs/56/708c2a7bcecfe0c65dca8e992bf6100de0e48b.src","preCode":"    protected Composite createDialogArea(Composite parent) {\n        Composite dialogArea = super.createDialogArea(parent);\n\n        {\n            treeViewer = new FilteredTree(dialogArea, SWT.BORDER, new NamedObjectPatternFilter(), true).getViewer();\n            GridData gd = new GridData(GridData.FILL_BOTH);\n            gd.heightHint = 300;\n            gd.widthHint = 300;\n            treeViewer.getControl().setLayoutData(gd);\n            treeViewer.getTree().setHeaderVisible(true);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_database_select_column_name);\n            UIUtils.createTreeColumn(treeViewer.getTree(), SWT.LEFT, UIDashboardMessages.dialog_dashboard_database_select_column_description);\n\n            treeViewer.setContentProvider(new TreeContentProvider() {\n                @Override\n                public Object[] getChildren(Object parentElement) {\n                    List<? extends DBPNamedObject> result = null;\n                    if (parentElement instanceof List) {\n                        result = (List) parentElement;\n                    } else if (parentElement instanceof DBPDataSourceProviderDescriptor) {\n                        result = ((DBPDataSourceProviderDescriptor) parentElement).getEnabledDrivers();\n                        if (result.size() <= 1) {\n                            result = null;\n                        }\n                    }\n                    if (result == null) {\n                        return new Object[0];\n                    }\n                    result.sort(DBUtils.nameComparator());\n                    return result.toArray();\n                }\n\n                @Override\n                public boolean hasChildren(Object element) {\n                    if (element instanceof DBPDriver) {\n                        return false;\n                    }\n                    return ((DBPDataSourceProviderDescriptor) element).getEnabledDrivers().size() > 1;\n                }\n            });\n            treeViewer.setLabelProvider(new CellLabelProvider() {\n                @Override\n                public void update(ViewerCell cell) {\n                    DBPNamedObject element = (DBPNamedObject) cell.getElement();\n                    if (cell.getColumnIndex() == 0) {\n                        cell.setText(element.getName());\n                        DBPImage icon = null;\n                        if (element instanceof DBPDriver) {\n                            icon = ((DBPDriver) element).getIcon();\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            icon = ((DBPDataSourceProviderDescriptor) element).getIcon();\n                        }\n                        if (icon != null) {\n                            cell.setImage(DBeaverIcons.getImage(icon));\n                        }\n                    } else {\n                        if (element instanceof DBPDriver) {\n                            cell.setText(CommonUtils.notEmpty(((DBPDriver) element).getDescription()));\n                        } else if (element instanceof DBPDataSourceProviderDescriptor) {\n                            cell.setText(((DBPDataSourceProviderDescriptor) element).getDescription());\n                        }\n                    }\n                }\n            });\n            treeViewer.setInput(DBWorkbench.getPlatform().getDataSourceProviderRegistry().getDataSourceProviders());\n\n            treeViewer.addDoubleClickListener(event -> {\n                if (target != null) {\n                    okPressed();\n                }\n            });\n            treeViewer.addSelectionChangedListener(event -> {\n                this.target = null;\n                ISelection selection = event.getSelection();\n                if (selection instanceof IStructuredSelection) {\n                    Object selectedObject = ((IStructuredSelection) selection).getFirstElement();\n                    if (selectedObject instanceof DBPNamedObject) {\n                        this.target = (DBPNamedObject) selectedObject;\n                    }\n                }\n                this.updateButtons();\n            });\n\n            UIUtils.asyncExec(() -> {\n                treeViewer.expandAll();\n                UIUtils.packColumns(treeViewer.getTree(), true, null);\n            });\n        }\n\n        return dialogArea;\n    }\n","realPath":"plugins/org.jkiss.dbeaver.ui.dashboard/src/org/jkiss/dbeaver/ui/dashboard/view/DashboardDatabaseSelectDialog.java","repoName":"dbeaver","snippetEndLine":0,"snippetStartLine":0,"startLine":65,"status":"M"}],"commitId":"84f81b613b889387436e13e23d76af1b9e4b606f","commitMessage":"@@@Merge remote-tracking branch 'origin/devel' into devel\n\n\nFormer-commit-id: 26b08ebd9e0bfe9e1a8e15be426901ce80c7f1a5","date":"2020-09-21 16:58:56","modifiedFileCount":"31","status":"M","submitter":"Serge Rider"}]
