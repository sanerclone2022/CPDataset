[{"authorTime":"2017-02-10 13:39:06","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2018-04-06 02:00:07","endLine":98,"groupId":"31118","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2a/fc74f5cda2d9225b0bd365d81b7de3bda82ba3.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"B"},{"authorDate":"2017-02-10 13:39:06","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2017-02-10 13:39:51","endLine":76,"groupId":"31118","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/1df8df50987b2237f6e8809b1770c0ac1e4d47.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"NB"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-02-10 13:39:06","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 2);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":104,"groupId":"31118","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/7561caf1b9c365950a505693fa3de4a7f8c0ef.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2017-02-10 13:39:06","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2017-02-10 13:39:51","endLine":76,"groupId":"31118","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/1df8df50987b2237f6e8809b1770c0ac1e4d47.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"N"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 2);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":109,"groupId":"10877","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/775402737e9c5da09ced5ec6546c330a68af3a.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n\n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(collection, 2, 2);\n    \n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":85,"status":"M"},{"authorDate":"2021-01-18 23:59:41","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n    \n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1)\n        .setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":79,"groupId":"10877","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/a0dd093357cc50d4598b22d56ab5e2fc1da74a.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(4)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .addConfig(\"ml\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"ml\").resolve(\"conf\"))\n        .configure();\n    \n    String collection;\n    useAlias = random().nextBoolean();\n    if (useAlias) {\n      collection = COLLECTIONORALIAS + \"_collection\";\n    } else {\n      collection = COLLECTIONORALIAS;\n    }\n    CollectionAdminRequest.createCollection(collection, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collection, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n    if (useAlias) {\n      CollectionAdminRequest.createAlias(COLLECTIONORALIAS, collection).process(cluster.getSolrClient());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/SelectWithEvaluatorsTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
