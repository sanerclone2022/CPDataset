[{"authorTime":"2017-10-17 21:05:24","codes":[{"authorDate":"2017-10-04 16:25:32","commitOrder":5,"curCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","date":"2017-10-04 16:25:32","endLine":949,"groupId":"13777","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/5c966b9a4cba02a845df016362b25dca7d2b4c.src","preCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"NB"},{"authorDate":"2017-10-17 21:05:24","commitOrder":5,"curCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n    zkClient.multi(ops, true);\n  }\n","date":"2017-10-17 21:05:24","endLine":991,"groupId":"13777","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/a88ea45c21e28658e1a3fce91f7e180c6f9a49.src","preCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":979,"status":"B"}],"commitId":"87f9bcdbb97f1b6af1acf842563adc7cce9c6ab4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-10-17 21:05:24","modifiedFileCount":"3","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-10-19 11:42:07","codes":[{"authorDate":"2017-10-04 16:25:32","commitOrder":6,"curCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","date":"2017-10-04 16:25:32","endLine":949,"groupId":"13777","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/5c966b9a4cba02a845df016362b25dca7d2b4c.src","preCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"N"},{"authorDate":"2017-10-19 11:42:07","commitOrder":6,"curCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    if (zkClient.exists(nodeAddedPath, true)) {\n      ops.add(Op.delete(nodeAddedPath, -1));\n    }\n    zkClient.multi(ops, true);\n  }\n","date":"2017-10-19 11:42:07","endLine":993,"groupId":"13777","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/801e0fa1c0b607cf33e422edbf2568b4d93ed1.src","preCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":979,"status":"M"}],"commitId":"99e853faf820b891d577626d30b15a3dfef72970","commitMessage":"@@@SOLR-11478: Only remove nodeAddedPath node if it exists\n","date":"2017-10-19 11:42:07","modifiedFileCount":"1","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2017-10-04 16:25:32","commitOrder":7,"curCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","date":"2017-10-04 16:25:32","endLine":949,"groupId":"13777","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/5c966b9a4cba02a845df016362b25dca7d2b4c.src","preCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":930,"status":"N"},{"authorDate":"2018-11-30 01:58:18","commitOrder":7,"curCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n \n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":1103,"groupId":"13777","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/a030c88dc457e3c8f41f029690f144762477bd.src","preCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    if (zkClient.exists(nodeAddedPath, true)) {\n      ops.add(Op.delete(nodeAddedPath, -1));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1086,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-12-20 20:16:28","commitOrder":8,"curCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","date":"2018-12-20 20:16:28","endLine":1088,"groupId":"13777","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a8/1481b4329a6e38b7bec7ab05a2e0ca1a4911ee.src","preCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      ops.add(Op.create(nodeAddedPath, null, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1068,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":8,"curCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n \n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":1103,"groupId":"13777","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/a030c88dc457e3c8f41f029690f144762477bd.src","preCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n \n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1086,"status":"N"}],"commitId":"1f0e875db65a0a2e9a8a62757aff1770ecf99866","commitMessage":"@@@SOLR-13072: Management of markers for nodeLost / nodeAdded events is broken.\n","date":"2018-12-20 20:16:28","modifiedFileCount":"11","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-04-27 20:34:10","codes":[{"authorDate":"2020-04-27 20:34:10","commitOrder":9,"curCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","date":"2020-04-27 20:34:10","endLine":1127,"groupId":"13777","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/0d3daa9806cbf3b80ba5f7873650946b38fdcc.src","preCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1107,"status":"M"},{"authorDate":"2020-04-27 20:34:10","commitOrder":9,"curCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","date":"2020-04-27 20:34:10","endLine":1146,"groupId":"2333","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/0d3daa9806cbf3b80ba5f7873650946b38fdcc.src","preCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:\" + nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1129,"status":"M"}],"commitId":"ff4363675e3f0873cdb874d12740749449e91d9f","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-27 20:34:10","modifiedFileCount":"19","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-07-20 20:17:01","codes":[{"authorDate":"2020-07-20 20:17:01","commitOrder":10,"curCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    zkClient.multi(ops, true);\n  }\n","date":"2020-07-20 20:17:01","endLine":1129,"groupId":"102415","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/44ece55cfd2b8e19da51327229e51e29d352e7.src","preCode":"  private void createEphemeralLiveNode() throws KeeperException,\n      InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Register node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.create(nodePath, null, zkClient.getZkACLProvider().getACLsToAdd(nodePath), CreateMode.EPHEMERAL));\n    \r\n    boolean createMarkerNode = zkStateReader.getAutoScalingConfig().hasTriggerForEvents(TriggerEventType.NODEADDED);\n    if (createMarkerNode && !zkClient.exists(nodeAddedPath, true)) {\n      \r\n      \r\n      byte[] json = Utils.toJSON(Collections.singletonMap(\"timestamp\", TimeSource.NANO_TIME.getEpochTimeNs()));\n      ops.add(Op.create(nodeAddedPath, json, zkClient.getZkACLProvider().getACLsToAdd(nodeAddedPath), CreateMode.EPHEMERAL));\n    }\n    zkClient.multi(ops, true);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1118,"status":"M"},{"authorDate":"2020-07-20 20:17:01","commitOrder":10,"curCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","date":"2020-07-20 20:17:01","endLine":1146,"groupId":"102415","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"removeEphemeralLiveNode","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/44ece55cfd2b8e19da51327229e51e29d352e7.src","preCode":"  public void removeEphemeralLiveNode() throws KeeperException, InterruptedException {\n    if (zkRunOnly) {\n      return;\n    }\n    String nodeName = getNodeName();\n    String nodePath = ZkStateReader.LIVE_NODES_ZKNODE + \"/\" + nodeName;\n    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + \"/\" + nodeName;\n    log.info(\"Remove node as live in ZooKeeper:{}\", nodePath);\n    List<Op> ops = new ArrayList<>(2);\n    ops.add(Op.delete(nodePath, -1));\n    ops.add(Op.delete(nodeAddedPath, -1));\n\n    try {\n      zkClient.multi(ops, true);\n    } catch (NoNodeException e) {\n\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1131,"status":"M"}],"commitId":"cc0c111949d5039a0c7cb67cad55c63e2f761298","commitMessage":"@@@SOLR-14656: Removing Autoscaling Framework\n\nThe following were removed:\n *  Autoscaling policy.  triggers etc.\n *  withCollection handling\n *  UTILIZENODE command\n *  Sim framework\n *  Suggestions tab in UI\n *  Reference guide pages for autoscaling\n *  autoAddReplicas feature\n *  UTILIZENODE\n","date":"2020-07-20 20:17:01","modifiedFileCount":"47","status":"M","submitter":"Ishan Chattopadhyaya"}]
