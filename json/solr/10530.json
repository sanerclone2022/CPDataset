[{"authorTime":"2017-05-31 19:56:14","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":3,"curCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","date":"2018-12-17 00:58:20","endLine":191,"groupId":"36115","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrentCollectionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9e/0745f72c2340de6aedcbc95ba55badd057258b.src","preCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2017-05-31 19:56:14","commitOrder":3,"curCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","date":"2017-05-31 19:56:14","endLine":268,"groupId":"36115","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentCollectionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/061d54e6e589c2881baa8d60a6316d67781bbd.src","preCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"NB"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-04-13 10:46:35","codes":[{"authorDate":"2020-04-13 10:46:35","commitOrder":4,"curCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","date":"2020-04-13 10:46:35","endLine":191,"groupId":"10530","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testConcurrentCollectionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/c1a068b5a8bfc5b4d02deb14363b3244f68d3f.src","preCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString(), http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient\n             = new ConcurrentUpdateHttp2SolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\", http2Client)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2020-04-13 10:46:35","commitOrder":4,"curCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","date":"2020-04-13 10:46:35","endLine":271,"groupId":"10530","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testConcurrentCollectionUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/a32b47eb622622cac025c8a667cf064439df5d.src","preCode":"  public void testConcurrentCollectionUpdate() throws Exception {\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    int numDocs = 100;\n    int numRunnables = 5;\n    int expected = numDocs * numRunnables;\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString()))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      \r\n      concurrentClient.deleteByQuery(\"collection1\", \"*:*\");\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient, \"collection1\"));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      concurrentClient.commit(\"collection1\");\n\n      assertEquals(expected, concurrentClient.query(\"collection1\", new SolrQuery(\"*:*\")).getResults().getNumFound());\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n    }\n\n    try (ConcurrentUpdateSolrClient concurrentClient\n         = (new ConcurrentUpdateSolrClient.Builder(jetty.getBaseUrl().toString() + \"/collection1\"))\n         .withQueueSize(cussQueueSize)\n         .withThreadCount(cussThreadCount).build()) {\n\n      assertEquals(expected, concurrentClient.query(new SolrQuery(\"*:*\")).getResults().getNumFound());\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"13f19f65559290a860df84fa1b5ac2db903b27ec","commitMessage":"@@@SOLR-9906: SolrjNamedThreadFactory is deprecated in favor of SolrNamedThreadFactory. DefaultSolrThreadFactory is removed from solr-core in favor of SolrNamedThreadFactory in solrj package and all solr-core classes now use SolrNamedThreadFactory\n","date":"2020-04-13 10:46:35","modifiedFileCount":"83","status":"M","submitter":"Shalin Shekhar Mangar"}]
