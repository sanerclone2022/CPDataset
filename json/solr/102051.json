[{"authorTime":"2017-11-01 23:46:41","codes":[{"authorDate":"2017-11-01 23:46:41","commitOrder":33,"curCode":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getHashableId(), cmd.getSolrInputDocument());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    \r\n    if (!cmd.isInPlaceUpdate()) {\n      cmd.prevVersion = cmd.getReq().getParams().getLong(DistributedUpdateProcessor.DISTRIB_INPLACE_PREVVERSION, -1);\n    }\n    \r\n    \r\n    \r\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd = versionAdd(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n\n    \r\n    if (returnVersions && rsp != null && idField != null) {\n      if (addsResponse == null) {\n        addsResponse = new NamedList<>(1);\n        rsp.add(\"adds\",addsResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      addsResponse.add(scratch.toString(), cmd.getVersion());\n    }\n\n    \r\n    \r\n    \r\n    \r\n\n  }\n","date":"2017-11-01 23:47:09","endLine":693,"groupId":"45997","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/7e49a0a2078f72015ef55efe3872b438af5ac8.src","preCode":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getHashableId(), cmd.getSolrInputDocument());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    \r\n    if (!cmd.isInPlaceUpdate()) {\n      cmd.prevVersion = cmd.getReq().getParams().getLong(DistributedUpdateProcessor.DISTRIB_INPLACE_PREVVERSION, -1);\n    }\n    \r\n    \r\n    \r\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd = versionAdd(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n\n    \r\n    if (returnVersions && rsp != null && idField != null) {\n      if (addsResponse == null) {\n        addsResponse = new NamedList<>(1);\n        rsp.add(\"adds\",addsResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      addsResponse.add(scratch.toString(), cmd.getVersion());\n    }\n\n    \r\n    \r\n    \r\n    \r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":590,"status":"MB"},{"authorDate":"2017-11-01 23:46:41","commitOrder":33,"curCode":"  private void doDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getId(), null, cmd.getRoute());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd  = versionDelete(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n\n    \r\n    \r\n    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {\n      if (deleteResponse == null) {\n        deleteResponse = new NamedList<>(1);\n        rsp.add(\"deletes\",deleteResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      deleteResponse.add(scratch.toString(), cmd.getVersion());  \r\n    }\n  }\n","date":"2017-11-01 23:47:09","endLine":1398,"groupId":"46001","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/7e49a0a2078f72015ef55efe3872b438af5ac8.src","preCode":"  private void doDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getId(), null, cmd.getRoute());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd  = versionDelete(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n\n    \r\n    \r\n    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {\n      if (deleteResponse == null) {\n        deleteResponse = new NamedList<>(1);\n        rsp.add(\"deletes\",deleteResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      deleteResponse.add(scratch.toString(), cmd.getVersion());  \r\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1326,"status":"MB"}],"commitId":"1ff6084d8ee9fa26d3ca642d3379fc8fc7b31289","commitMessage":"@@@SOLR-11511: minor: use existing fields in DURP: coreDesc.  zkController.  collection\n","date":"2017-11-01 23:47:09","modifiedFileCount":"1","status":"M","submitter":"David Smiley"},{"authorTime":"2017-11-01 23:46:41","codes":[{"authorDate":"2019-03-05 21:22:31","commitOrder":34,"curCode":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getHashableId(), cmd.getSolrInputDocument());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    \r\n    if (!cmd.isInPlaceUpdate()) {\n      cmd.prevVersion = cmd.getReq().getParams().getLong(DistributedUpdateProcessor.DISTRIB_INPLACE_PREVVERSION, -1);\n    }\n    \r\n    \r\n    \r\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd = versionAdd(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n\n    \r\n    if (returnVersions && rsp != null && idField != null) {\n      if (addsResponse == null) {\n        addsResponse = new NamedList<>(1);\n        rsp.add(\"adds\",addsResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      addsResponse.add(scratch.toString(), cmd.getVersion());\n    }\n\n    \r\n    \r\n    \r\n    \r\n\n  }\n","date":"2019-03-06 00:16:25","endLine":789,"groupId":"45997","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"processAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/1fd8a9c468e85d5ceac7f693fd6c07daa02e60.src","preCode":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getHashableId(), cmd.getSolrInputDocument());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    \r\n    if (!cmd.isInPlaceUpdate()) {\n      cmd.prevVersion = cmd.getReq().getParams().getLong(DistributedUpdateProcessor.DISTRIB_INPLACE_PREVVERSION, -1);\n    }\n    \r\n    \r\n    \r\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd = versionAdd(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n\n    \r\n    if (returnVersions && rsp != null && idField != null) {\n      if (addsResponse == null) {\n        addsResponse = new NamedList<>(1);\n        rsp.add(\"adds\",addsResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      addsResponse.add(scratch.toString(), cmd.getVersion());\n    }\n\n    \r\n    \r\n    \r\n    \r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":681,"status":"M"},{"authorDate":"2017-11-01 23:46:41","commitOrder":34,"curCode":"  private void doDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getId(), null, cmd.getRoute());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd  = versionDelete(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n\n    \r\n    \r\n    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {\n      if (deleteResponse == null) {\n        deleteResponse = new NamedList<>(1);\n        rsp.add(\"deletes\",deleteResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      deleteResponse.add(scratch.toString(), cmd.getVersion());  \r\n    }\n  }\n","date":"2017-11-01 23:47:09","endLine":1398,"groupId":"46001","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/7e49a0a2078f72015ef55efe3872b438af5ac8.src","preCode":"  private void doDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getId(), null, cmd.getRoute());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd  = versionDelete(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n\n    \r\n    \r\n    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {\n      if (deleteResponse == null) {\n        deleteResponse = new NamedList<>(1);\n        rsp.add(\"deletes\",deleteResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      deleteResponse.add(scratch.toString(), cmd.getVersion());  \r\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1326,"status":"N"}],"commitId":"0bc26d07ad7131c2dd6e2e11391fecd7f627626f","commitMessage":"@@@SOLR-13271: Read-only mode for SolrCloud collections.\n","date":"2019-03-06 00:16:25","modifiedFileCount":"11","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2019-03-20 01:26:31","codes":[{"authorDate":"2019-03-20 01:26:31","commitOrder":35,"curCode":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    setupRequest(cmd);\n\n    \r\n    if (!cmd.isInPlaceUpdate()) {\n      cmd.prevVersion = cmd.getReq().getParams().getLong(DistributedUpdateProcessor.DISTRIB_INPLACE_PREVVERSION, -1);\n    }\n    \r\n    \r\n    \r\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd = versionAdd(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    doDistribAdd(cmd);\n\n    \r\n    if (returnVersions && rsp != null && idField != null) {\n      if (addsResponse == null) {\n        addsResponse = new NamedList<>(1);\n        rsp.add(\"adds\",addsResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      addsResponse.add(scratch.toString(), cmd.getVersion());\n    }\n\n    \r\n    \r\n    \r\n    \r\n\n  }\n","date":"2019-03-20 01:26:31","endLine":246,"groupId":"102051","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"processAdd","params":"(AddUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/660cba684800142c6ab37d93133e7da42843cc.src","preCode":"  public void processAdd(AddUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getHashableId(), cmd.getSolrInputDocument());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    \r\n    if (!cmd.isInPlaceUpdate()) {\n      cmd.prevVersion = cmd.getReq().getParams().getLong(DistributedUpdateProcessor.DISTRIB_INPLACE_PREVVERSION, -1);\n    }\n    \r\n    \r\n    \r\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd = versionAdd(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getHashableId(), cmd.getSolrInputDocument());\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, subShardLeaders, params, true);\n      }\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getHashableId(), cmd.getSolrInputDocument());\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribAdd(cmd, nodesByRoutingRules, params, true);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ?\n              DistribPhase.FROMLEADER.toString() :\n              DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.set(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n\n      if (cmd.isInPlaceUpdate()) {\n        params.set(DISTRIB_INPLACE_PREVVERSION, String.valueOf(cmd.prevVersion));\n\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        cmdDistrib.distribAdd(cmd, nodes, params, true, rollupReplicationTracker, leaderReplicationTracker);\n      } else {\n        cmdDistrib.distribAdd(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n      }\n    }\n\n    \r\n    if (returnVersions && rsp != null && idField != null) {\n      if (addsResponse == null) {\n        addsResponse = new NamedList<>(1);\n        rsp.add(\"adds\",addsResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      addsResponse.add(scratch.toString(), cmd.getVersion());\n    }\n\n    \r\n    \r\n    \r\n    \r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"},{"authorDate":"2019-03-20 01:26:31","commitOrder":35,"curCode":"  protected void doDeleteById(DeleteUpdateCommand cmd) throws IOException {\n\n    setupRequest(cmd);\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd  = versionDelete(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    doDistribDeleteById(cmd);\n\n    \r\n    \r\n    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {\n      if (deleteResponse == null) {\n        deleteResponse = new NamedList<>(1);\n        rsp.add(\"deletes\",deleteResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      deleteResponse.add(scratch.toString(), cmd.getVersion());  \r\n    }\n  }\n","date":"2019-03-20 01:26:31","endLine":714,"groupId":"102051","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doDeleteById","params":"(DeleteUpdateCommandcmd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/660cba684800142c6ab37d93133e7da42843cc.src","preCode":"  private void doDeleteById(DeleteUpdateCommand cmd) throws IOException {\n    if (zkEnabled) {\n      zkCheck();\n      nodes = setupRequest(cmd.getId(), null, cmd.getRoute());\n    } else {\n      isLeader = getNonZkLeaderAssumption(req);\n    }\n\n    \r\n    \r\n    checkReplicationTracker(cmd);\n\n    boolean dropCmd = false;\n    if (!forwardToLeader) {\n      dropCmd  = versionDelete(cmd);\n    }\n\n    if (dropCmd) {\n      \r\n      return;\n    }\n\n    if (zkEnabled && isLeader && !isSubShardLeader)  {\n      DocCollection coll = zkController.getClusterState().getCollection(collection);\n      List<Node> subShardLeaders = getSubShardLeaders(coll, cloudDesc.getShardId(), cmd.getId(), null);\n      \r\n      if (subShardLeaders != null && !subShardLeaders.isEmpty()) {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_PARENT, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, subShardLeaders, params, true, null, null);\n      }\n\n      final List<Node> nodesByRoutingRules = getNodesByRoutingRules(zkController.getClusterState(), coll, cmd.getId(), null);\n      if (nodesByRoutingRules != null && !nodesByRoutingRules.isEmpty())  {\n        ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n        params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n            zkController.getBaseUrl(), req.getCore().getName()));\n        params.set(DISTRIB_FROM_COLLECTION, collection);\n        params.set(DISTRIB_FROM_SHARD, cloudDesc.getShardId());\n        cmdDistrib.distribDelete(cmd, nodesByRoutingRules, params, true, null, null);\n      }\n    }\n\n    if (nodes != null) {\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n      params.set(DISTRIB_UPDATE_PARAM,\n          (isLeader || isSubShardLeader ? DistribPhase.FROMLEADER.toString()\n              : DistribPhase.TOLEADER.toString()));\n      params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n          zkController.getBaseUrl(), req.getCore().getName()));\n\n      if (req.getParams().get(UpdateRequest.MIN_REPFACT) != null) {\n        \r\n        params.add(UpdateRequest.MIN_REPFACT, req.getParams().get(UpdateRequest.MIN_REPFACT));\n      }\n      cmdDistrib.distribDelete(cmd, nodes, params, false, rollupReplicationTracker, leaderReplicationTracker);\n    }\n\n    \r\n    \r\n    if (returnVersions && rsp != null && cmd.getIndexedId() != null && idField != null) {\n      if (deleteResponse == null) {\n        deleteResponse = new NamedList<>(1);\n        rsp.add(\"deletes\",deleteResponse);\n      }\n      if (scratch == null) scratch = new CharsRefBuilder();\n      idField.getType().indexedToReadable(cmd.getIndexedId(), scratch);\n      deleteResponse.add(scratch.toString(), cmd.getVersion());  \r\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/update/processor/DistributedUpdateProcessor.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":687,"status":"M"}],"commitId":"5b7866b0851eff66cb7e929beef5249e3c72ac36","commitMessage":"@@@SOLR-12955: Refactored DistributedUpdateProcessor to put SolrCloud specifics into a subclass\nCloses #528\n","date":"2019-03-20 01:26:31","modifiedFileCount":"8","status":"M","submitter":"Bar Rotstein"}]
