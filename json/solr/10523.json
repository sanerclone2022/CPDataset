[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2016-07-06 00:14:47","commitOrder":2,"curCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","date":"2016-07-07 17:03:21","endLine":563,"groupId":"31348","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSingleServer","params":"(NamedList<Object>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/12036b300685acf1a5bdb5f40896cae0835767.src","preCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":2,"curCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final RouteResponse rr = (RouteResponse) response;\n    final Map<String,LBSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","date":"2019-03-04 17:41:45","endLine":863,"groupId":"31348","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSingleServer","params":"(NamedList<Object>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final RouteResponse rr = (RouteResponse) response;\n    final Map<String,LBSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":853,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2016-07-06 00:14:47","commitOrder":3,"curCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","date":"2016-07-07 17:03:21","endLine":563,"groupId":"31348","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSingleServer","params":"(NamedList<Object>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/12036b300685acf1a5bdb5f40896cae0835767.src","preCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    @SuppressWarnings({\"rawtypes\"})\n    final RouteResponse rr = (RouteResponse) response;\n    @SuppressWarnings({\"unchecked\"})\n    final Map<String,LBSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":960,"groupId":"31348","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSingleServer","params":"(NamedList<Object>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/76cb83739b589a06e3faeacfdcbb4a3b836016.src","preCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final RouteResponse rr = (RouteResponse) response;\n    final Map<String,LBSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":948,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2016-07-06 00:14:47","commitOrder":4,"curCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","date":"2016-07-07 17:03:21","endLine":563,"groupId":"10523","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"checkSingleServer","params":"(NamedList<Object>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/12036b300685acf1a5bdb5f40896cae0835767.src","preCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final CloudSolrClient.RouteResponse rr = (CloudSolrClient.RouteResponse) response;\n    final Map<String,LBHttpSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBHttpSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBHttpSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"},{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    final RouteResponse<?> rr = (RouteResponse<?>) response;\n    final Map<String,? extends LBSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<? extends Map.Entry<String,? extends LBSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,? extends LBSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":945,"groupId":"10523","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"checkSingleServer","params":"(NamedList<Object>response)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/96eb25255c58f4d6362ea8cda2f0a1dd926902.src","preCode":"  private static void checkSingleServer(NamedList<Object> response) {\n    @SuppressWarnings({\"rawtypes\"})\n    final RouteResponse rr = (RouteResponse) response;\n    @SuppressWarnings({\"unchecked\"})\n    final Map<String,LBSolrClient.Req> routes = rr.getRoutes();\n    final Iterator<Map.Entry<String,LBSolrClient.Req>> it =\n        routes.entrySet().iterator();\n    while (it.hasNext()) {\n      Map.Entry<String,LBSolrClient.Req> entry = it.next();\n        assertEquals(\"wrong number of servers: \"+entry.getValue().getServers(),\n            1, entry.getValue().getServers().size());\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":935,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
