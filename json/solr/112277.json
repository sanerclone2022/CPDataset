[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":727,"groupId":"6885","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":683,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":914,"groupId":"35032","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-08-27 21:27:01","commitOrder":2,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-08-27 21:27:01","endLine":763,"groupId":"6885","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1f/b1649276fcf4f0b5eecbebbe0bce36af597cfb.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          Fieldable field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":719,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":2,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":914,"groupId":"35032","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"N"}],"commitId":"4dad0ba89f1d663939999be9005433dd629955f1","commitMessage":"@@@LUCENE-2308: cutover to FieldType\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1162347 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-08-27 21:27:01","modifiedFileCount":"363","status":"M","submitter":"Michael McCandless"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2012-08-05 06:34:29","commitOrder":3,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue, 1.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2012-08-05 06:34:29","endLine":798,"groupId":"6885","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/4c612f973f8f7b4fb6571f559eacbda98abc57.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue, 0.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":754,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":3,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":914,"groupId":"35032","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"N"}],"commitId":"41d4ef2b084fe5fd04858a988915997096e3f0f7","commitMessage":"@@@fix broken.  untested 0.0f boost on unindexed field\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1369500 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-08-05 06:34:29","modifiedFileCount":"1","status":"M","submitter":"Robert Muir"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2012-09-02 22:35:35","commitOrder":4,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          StorableField field = schemaField.createField(readableValue, 1.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2012-09-02 22:35:35","endLine":799,"groupId":"6885","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c7/35dad3cd4bca2f61aa7484a7de64d12ec81128.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue, 1.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":755,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":4,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":914,"groupId":"35032","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"N"}],"commitId":"bde79d433c9aad46e62c457a613a41be78513a02","commitMessage":"@@@LUCENE-3312:  The API of oal.document was restructured to differentiate between stored documents and indexed documents\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1379982 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-02 22:35:35","modifiedFileCount":"176","status":"M","submitter":"Uwe Schindler"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2016-01-18 03:54:50","commitOrder":5,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue, 1.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2016-01-18 03:54:50","endLine":831,"groupId":"6885","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/346f7394c3285e3ff22804fba0e2f5313a6495.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          StorableField field = schemaField.createField(readableValue, 1.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":787,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":5,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":914,"groupId":"35032","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"N"}],"commitId":"24c46305bd8f335c3d0e501a33dd3da82732c49e","commitMessage":"@@@LUCENE-6971: remove StorableField.  StoredDocument\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1725117 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-18 03:54:50","modifiedFileCount":"167","status":"M","submitter":"Michael McCandless"},{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2017-03-03 02:18:16","commitOrder":6,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2017-03-03 02:18:16","endLine":830,"groupId":"6885","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/7e5bb6e44feb2064c966266eebafb08e1e81fc.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue, 1.0f);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":786,"status":"M"},{"authorDate":"2011-07-10 07:01:53","commitOrder":6,"curCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2011-07-10 07:01:53","endLine":914,"groupId":"35032","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/e4c809fb090c6a1becb5b7888917f67b54672e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":884,"status":"N"}],"commitId":"8ed2b764ed4d4d5203b5df1e16fdc1ffd640322c","commitMessage":"@@@LUCENE-6819: Remove index-time boosts.\n","date":"2017-03-03 02:18:16","modifiedFileCount":"113","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-23 15:05:02","codes":[{"authorDate":"2018-07-23 15:05:02","commitOrder":7,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2018-07-23 15:06:49","endLine":823,"groupId":"6885","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/7dccd26ac6db58f69d6f792e96587cdc71667e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":776,"status":"M"},{"authorDate":"2018-07-23 15:05:02","commitOrder":7,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2018-07-23 15:06:49","endLine":1017,"groupId":"35032","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/7dccd26ac6db58f69d6f792e96587cdc71667e.src","preCode":"    protected void finish() throws IOException {\n      result = secondPass != null ? secondPass.getTopGroups(0) : null;\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":984,"status":"M"}],"commitId":"55bfadbce115a825a75686fe0bfe71406bc3ee44","commitMessage":"@@@LUCENE-8412: TopFieldCollector no longer takes a trackDocScores option.\n","date":"2018-07-23 15:06:49","modifiedFileCount":"30","status":"M","submitter":"Adrien Grand"},{"authorTime":"2018-07-23 15:05:02","codes":[{"authorDate":"2019-04-29 01:31:58","commitOrder":8,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          \r\n          \r\n          \r\n          List<IndexableField> fields = schemaField.createFields(group.groupValue.utf8ToString());\n          if (CollectionUtils.isNotEmpty(fields)) {\n            nl.add(\"groupValue\", fieldType.toObject(fields.get(0)));\n          } else {\n            throw new SolrException(ErrorCode.INVALID_STATE,\n                \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                + \", field: \" + schemaField);\n          }\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2019-04-29 01:31:58","endLine":835,"groupId":"6885","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/a7ed0bdcefe5bb3ac6d90c1d7c3b7a90fc13d4.src","preCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          String readableValue = fieldType.indexedToReadable(group.groupValue.utf8ToString());\n          IndexableField field = schemaField.createField(readableValue);\n          nl.add(\"groupValue\", fieldType.toObject(field));\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":780,"status":"M"},{"authorDate":"2018-07-23 15:05:02","commitOrder":8,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2018-07-23 15:06:49","endLine":1017,"groupId":"35032","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/7dccd26ac6db58f69d6f792e96587cdc71667e.src","preCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":984,"status":"N"}],"commitId":"4b49bd99ca20cee2263a3cd3c115c7d00b98f043","commitMessage":"@@@SOLR-12248.  SOLR-4647: Grouping is broken on docValues-only fields\n","date":"2019-04-29 01:31:58","modifiedFileCount":"5","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2020-06-08 09:20:25","codes":[{"authorDate":"2020-06-08 09:20:25","commitOrder":9,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          \r\n          \r\n          \r\n          List<IndexableField> fields = schemaField.createFields(group.groupValue.utf8ToString());\n          if (CollectionUtils.isNotEmpty(fields)) {\n            nl.add(\"groupValue\", fieldType.toObject(fields.get(0)));\n          } else {\n            throw new SolrException(ErrorCode.INVALID_STATE,\n                \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                + \", field: \" + schemaField);\n          }\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2020-06-08 09:20:25","endLine":838,"groupId":"6885","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/0038843fb3a78a94b1a2452d5bad72b4e3d3e1.src","preCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          \r\n          \r\n          \r\n          List<IndexableField> fields = schemaField.createFields(group.groupValue.utf8ToString());\n          if (CollectionUtils.isNotEmpty(fields)) {\n            nl.add(\"groupValue\", fieldType.toObject(fields.get(0)));\n          } else {\n            throw new SolrException(ErrorCode.INVALID_STATE,\n                \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                + \", field: \" + schemaField);\n          }\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":780,"status":"M"},{"authorDate":"2020-06-08 09:20:25","commitOrder":9,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2020-06-08 09:20:25","endLine":1039,"groupId":"28586","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/0038843fb3a78a94b1a2452d5bad72b4e3d3e1.src","preCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1003,"status":"M"}],"commitId":"04ba04c29d5079d74231aa5a54d5f0a93bd16f2b","commitMessage":"@@@SOLR-14543: Fix or suppress warnings in apache/solr/search\n","date":"2020-06-08 09:20:25","modifiedFileCount":"42","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":10,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList<Object> groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List<NamedList<Object>> groupList = new ArrayList<>();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        NamedList<Object> nl = new SimpleOrderedMap<>();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          \r\n          \r\n          \r\n          List<IndexableField> fields = schemaField.createFields(group.groupValue.utf8ToString());\n          if (CollectionUtils.isNotEmpty(fields)) {\n            nl.add(\"groupValue\", fieldType.toObject(fields.get(0)));\n          } else {\n            throw new SolrException(ErrorCode.INVALID_STATE,\n                \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                + \", field: \" + schemaField);\n          }\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","date":"2021-07-13 23:49:56","endLine":827,"groupId":"112277","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/9c68f8a1106f9a7e39f111009ecde3f313a13b.src","preCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<BytesRef> group : result.groups) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n\n\n        \r\n        \r\n        \r\n        if (group.groupValue != null) {\n          SchemaField schemaField = searcher.getSchema().getField(groupBy);\n          FieldType fieldType = schemaField.getType();\n          \r\n          \r\n          \r\n          List<IndexableField> fields = schemaField.createFields(group.groupValue.utf8ToString());\n          if (CollectionUtils.isNotEmpty(fields)) {\n            nl.add(\"groupValue\", fieldType.toObject(fields.get(0)));\n          } else {\n            throw new SolrException(ErrorCode.INVALID_STATE,\n                \"Couldn't create schema field for grouping, group value: \" + group.groupValue.utf8ToString()\n                + \", field: \" + schemaField);\n          }\n        } else {\n          nl.add(\"groupValue\", null);\n        }\n\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":772,"status":"M"},{"authorDate":"2021-07-13 23:49:56","commitOrder":10,"curCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      NamedList<Object> groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      List<NamedList<Object>> groupList = new ArrayList<>();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        NamedList<Object> nl = new SimpleOrderedMap<>();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","date":"2021-07-13 23:49:56","endLine":1023,"groupId":"112277","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"finish","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/9c68f8a1106f9a7e39f111009ecde3f313a13b.src","preCode":"    protected void finish() throws IOException {\n      if (secondPass != null) {\n        result = secondPass.getTopGroups(0);\n        populateScoresIfNecessary();\n      }\n      if (main) {\n        mainResult = createSimpleResponse();\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList groupResult = commonResponse();\n\n      if (format == Format.simple) {\n        groupResult.add(\"doclist\", createSimpleResponse());\n        return;\n      }\n\n      @SuppressWarnings({\"rawtypes\"})\n      List groupList = new ArrayList();\n      groupResult.add(\"groups\", groupList);        \r\n\n      if (result == null) {\n        return;\n      }\n\n      \r\n      if (numGroups == 0) return;\n\n      for (GroupDocs<MutableValue> group : result.groups) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList nl = new SimpleOrderedMap();\n        groupList.add(nl);                         \r\n        nl.add(\"groupValue\", group.groupValue.toObject());\n        addDocList(nl, group);\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/Grouping.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":990,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
