[{"authorTime":"2019-12-10 06:11:58","codes":[{"authorDate":"2019-12-10 06:11:58","commitOrder":1,"curCode":"  private void queryReplicaType(CloudSolrClient cloudClient,\n                                          Replica.Type typeToQuery,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","date":"2019-12-10 06:11:58","endLine":544,"groupId":"51665","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"queryReplicaType","params":"(CloudSolrClientcloudClient@Replica.TypetypeToQuery@StringcollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/050ce2e4389009ec369e48da5fbb38e8bc2889.src","preCode":"  private void queryReplicaType(CloudSolrClient cloudClient,\n                                          Replica.Type typeToQuery,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":508,"status":"B"},{"authorDate":"2019-12-10 06:11:58","commitOrder":1,"curCode":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","date":"2019-12-10 06:11:58","endLine":558,"groupId":"51665","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"queryReplicaType","params":"(CloudHttp2SolrClientcloudClient@Replica.TypetypeToQuery@StringcollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/b02cb4da794bce0ef4bd7d95af0b7b7cf43480.src","preCode":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":522,"status":"B"}],"commitId":"1c78d2c63731d8b4b3b7ec313ac65ddd55761f6a","commitMessage":"@@@SOLR-12217: Support shards.preference in SolrJ for individual shard requests (#984)\n\n","date":"2019-12-10 06:11:58","modifiedFileCount":"13","status":"B","submitter":"Houston Putman"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  private void queryReplicaType(CloudSolrClient cloudClient,\n                                          Replica.Type typeToQuery,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    @SuppressWarnings({\"unchecked\"})\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","date":"2020-06-17 01:27:53","endLine":550,"groupId":"10495","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"queryReplicaType","params":"(CloudSolrClientcloudClient@Replica.TypetypeToQuery@StringcollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fb/363589300707a5ba887ca8307c8502d1a624b8.src","preCode":"  private void queryReplicaType(CloudSolrClient cloudClient,\n                                          Replica.Type typeToQuery,\n                                          String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":513,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":2,"curCode":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    @SuppressWarnings({\"unchecked\"})\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","date":"2020-06-17 01:27:53","endLine":566,"groupId":"10495","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"queryReplicaType","params":"(CloudHttp2SolrClientcloudClient@Replica.TypetypeToQuery@StringcollectionName)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/76cb83739b589a06e3faeacfdcbb4a3b836016.src","preCode":"  private void queryReplicaType(CloudHttp2SolrClient cloudClient,\n                                Replica.Type typeToQuery,\n                                String collectionName)\n      throws Exception\n  {\n    SolrQuery qRequest = new SolrQuery(\"*:*\");\n\n    ModifiableSolrParams qParams = new ModifiableSolrParams();\n    qParams.add(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":\" + typeToQuery.toString());\n    qParams.add(ShardParams.SHARDS_INFO, \"true\");\n    qRequest.add(qParams);\n\n    Map<String, String> replicaTypeToReplicas = mapReplicasToReplicaType(getCollectionState(collectionName));\n\n    QueryResponse qResponse = cloudClient.query(collectionName, qRequest);\n\n    Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);\n    assertNotNull(\"Unable to obtain \"+ShardParams.SHARDS_INFO, shardsInfo);\n\n    \r\n    SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;\n    Iterator<Map.Entry<String, ?>> itr = shardsInfoMap.asMap(100).entrySet().iterator();\n    List<String> shardAddresses = new ArrayList<String>();\n    while (itr.hasNext()) {\n      Map.Entry<String, ?> e = itr.next();\n      assertTrue(\"Did not find map-type value in \"+ShardParams.SHARDS_INFO, e.getValue() instanceof Map);\n      String shardAddress = (String)((Map)e.getValue()).get(\"shardAddress\");\n      if (shardAddress.endsWith(\"/\")) {\n        shardAddress = shardAddress.substring(0, shardAddress.length() - 1);\n      }\n      assertNotNull(ShardParams.SHARDS_INFO+\" did not return 'shardAddress' parameter\", shardAddress);\n      shardAddresses.add(shardAddress);\n    }\n    assertEquals(\"Shard addresses must be of size 1, since there is only 1 shard in the collection\", 1, shardAddresses.size());\n\n    assertEquals(\"Make sure that the replica queried was the replicaType desired\", typeToQuery.toString().toUpperCase(Locale.ROOT), replicaTypeToReplicas.get(shardAddresses.get(0)).toUpperCase(Locale.ROOT));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":529,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
