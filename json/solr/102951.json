[{"authorTime":"2014-04-18 06:46:38","codes":[{"authorDate":"2014-04-18 06:46:38","commitOrder":1,"curCode":"  public void testSet() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"6\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", ImmutableMap.of(\"set\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n  }\n","date":"2014-04-18 06:46:38","endLine":170,"groupId":"35631","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/22031a1908d823fce57fc0402618b1ef87a884.src","preCode":"  public void testSet() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"6\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", ImmutableMap.of(\"set\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":139,"status":"B"},{"authorDate":"2014-04-18 06:46:38","commitOrder":1,"curCode":"  public void testInvalidOperation() {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n  }\n","date":"2014-04-18 06:46:38","endLine":196,"groupId":"47934","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/22031a1908d823fce57fc0402618b1ef87a884.src","preCode":"  public void testInvalidOperation() {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"B"}],"commitId":"c8bf11d20243c136900444f48627c4a158474436","commitMessage":"@@@add 'remove' as update option for atomically removing a value from a multivalued field\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1588385 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-04-18 06:46:38","modifiedFileCount":"1","status":"B","submitter":"Erick Erickson"},{"authorTime":"2019-04-24 18:50:10","codes":[{"authorDate":"2019-04-24 18:50:10","commitOrder":2,"curCode":"  public void testSet() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"6\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", ImmutableMap.of(\"set\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", ImmutableMap.of(\"set\", \"1001\"));\n    assertFailedU(adoc(doc));\n  }\n","date":"2019-04-24 18:50:10","endLine":1014,"groupId":"35631","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/798a12718d1449b4d45e9d6b0c746d9db9148f.src","preCode":"  public void testSet() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"6\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", ImmutableMap.of(\"set\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":978,"status":"M"},{"authorDate":"2019-04-24 18:50:10","commitOrder":2,"curCode":"  public void testInvalidOperation() {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"bbb\"));\n    assertFailedU( adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"123\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"ddd\"));\n\n    SolrInputDocument childDoc = new SolrInputDocument();\n    childDoc.setField(\"id\", \"1231\");\n    childDoc.setField(\"title\", \"title_nested\");\n    doc.addChildDocument(childDoc);\n    assertFailedU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ddd\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"title:title_nested\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"id:123\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"id:1231\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"123\");\n    doc.setField(\"title\", \"title_parent\");\n\n    childDoc = new SolrInputDocument();\n    childDoc.setField(\"id\", \"12311\");\n    childDoc.setField(\"cat\", \"ddd\");\n    childDoc.setField(\"title\", \"title_nested\");\n    doc.addChildDocument(childDoc);\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ddd\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"title:title_nested\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"id:123\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"id:12311\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n  }\n","date":"2019-04-24 18:50:10","endLine":1245,"groupId":"47934","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/798a12718d1449b4d45e9d6b0c746d9db9148f.src","preCode":"  public void testInvalidOperation() {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1183,"status":"M"}],"commitId":"33c94562a630eacad12ab0a94a2a6b3d683f5417","commitMessage":"@@@SOLR-12167: Throw an exception.  instead of just a warning.  upon unknown atomic update\n","date":"2019-04-24 18:50:10","modifiedFileCount":"2","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2021-01-07 23:14:48","codes":[{"authorDate":"2019-04-24 18:50:10","commitOrder":3,"curCode":"  public void testSet() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"6\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", ImmutableMap.of(\"set\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", ImmutableMap.of(\"set\", \"1001\"));\n    assertFailedU(adoc(doc));\n  }\n","date":"2019-04-24 18:50:10","endLine":1014,"groupId":"102951","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/798a12718d1449b4d45e9d6b0c746d9db9148f.src","preCode":"  public void testSet() throws Exception {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"6\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"5\");\n    doc.setField(\"cat\", ImmutableMap.of(\"set\", \"bbb\"));\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '2']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", ImmutableMap.of(\"set\", \"1001\"));\n    assertFailedU(adoc(doc));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":978,"status":"N"},{"authorDate":"2021-01-07 23:14:48","commitOrder":3,"curCode":"  public void testInvalidOperation() {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"bbb\"));\n    assertFailedU( adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"123\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"ddd\"));\n\n    SolrInputDocument childDoc = new SolrInputDocument();\n    childDoc.setField(\"id\", \"1231\");\n    childDoc.setField(\"title\", \"title_nested\");\n    doc.addChildDocument(childDoc);\n    assertFailedU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ddd\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"title:title_nested\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"id:123\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"id:1231\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"123\");\n    doc.setField(\"title\", \"title_parent\");\n\n    childDoc = new SolrInputDocument();\n    childDoc.setField(\"id\", \"12311\");\n    childDoc.setField(\"cat\", \"ddd\");\n    childDoc.setField(\"title\", \"title_nested\");\n    doc.addChildDocument(childDoc);\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ddd\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"title:title_nested\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"id:123\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"id:12311\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    SolrInputDocument invalidDoc = new SolrInputDocument();\n    invalidDoc.setField(\"id\", \"7\");\n    invalidDoc.setField(\"cat\", ImmutableMap.of(\"inc\", \"bbb\"));\n\n    SolrException e = expectThrows(SolrException.class, () -> assertU(adoc(invalidDoc)));\n    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());\n    MatcherAssert.assertThat(e.getMessage(), containsString(\"'inc' is not supported on non-numeric field cat\"));\n  }\n","date":"2021-01-07 23:14:48","endLine":1436,"groupId":"102951","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testInvalidOperation","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/c1402e12b68989fb9370c9cbef54ddbf2dca8e.src","preCode":"  public void testInvalidOperation() {\n    SolrInputDocument doc;\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", new String[]{\"aaa\", \"ccc\"});\n    assertU(adoc(doc));\n\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"7\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"bbb\"));\n    assertFailedU( adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:bbb\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    \r\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"123\");\n    doc.setField(\"cat\", ImmutableMap.of(\"whatever\", \"ddd\"));\n\n    SolrInputDocument childDoc = new SolrInputDocument();\n    childDoc.setField(\"id\", \"1231\");\n    childDoc.setField(\"title\", \"title_nested\");\n    doc.addChildDocument(childDoc);\n    assertFailedU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"cat:*\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ddd\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"title:title_nested\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"id:123\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"id:1231\", \"indent\", \"true\"), \"//result[@numFound = '0']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"123\");\n    doc.setField(\"title\", \"title_parent\");\n\n    childDoc = new SolrInputDocument();\n    childDoc.setField(\"id\", \"12311\");\n    childDoc.setField(\"cat\", \"ddd\");\n    childDoc.setField(\"title\", \"title_nested\");\n    doc.addChildDocument(childDoc);\n    assertU(adoc(doc));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"*:*\", \"indent\", \"true\"), \"//result[@numFound = '3']\");\n    assertQ(req(\"q\", \"cat:aaa\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ddd\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"title:title_nested\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"id:123\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"id:12311\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n    assertQ(req(\"q\", \"cat:ccc\", \"indent\", \"true\"), \"//result[@numFound = '1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/processor/AtomicUpdatesTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1365,"status":"M"}],"commitId":"d4fa1aae213a4750d1b9834753ac400b93b58cd8","commitMessage":"@@@SOLR-10860: Return proper error code for bad input incase of inplace updates (#2121)\n\nReturn proper error code on invalid value with in-place update.\nHandle invalid value for inc op with the in-place update.  uses toNativeType to convert increment value instead of direct parsing. Also.  return an error when inc operation is specified for the non-numeric field\n","date":"2021-01-07 23:14:48","modifiedFileCount":"4","status":"M","submitter":"S N Munendra"}]
