[{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-12-11 10:28:25","commitOrder":4,"curCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","date":"2015-12-11 10:28:25","endLine":67,"groupId":"46422","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"GroupOperation","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/f7e94bb2b1998fc0ac37e2ddb38d59f287a83f.src","preCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"},{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n","date":"2015-06-24 21:07:09","endLine":94,"groupId":"48571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"RankStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d5/a25cf05020c58d037d0216f50e283deed992cc.src","preCode":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":58,"status":"NB"}],"commitId":"60dca1b4f988e0a839ceb5e54ad85df70cc1f1f9","commitMessage":"@@@SOLR-8337: Add ReduceOperation and wire it into the ReducerStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719246 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-11 10:28:25","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-03-23 15:42:20","codes":[{"authorDate":"2017-03-23 15:42:20","commitOrder":5,"curCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","date":"2017-03-23 15:42:20","endLine":73,"groupId":"10122","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"GroupOperation","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4a/28cc1e0fd80072adb1c0613286ecfc48b57ff3.src","preCode":"  public GroupOperation(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n\n    StreamComparator streamComparator = factory.constructComparator(((StreamExpressionValue) sortExpression.getParameter()).getValue(), FieldComparator.class);\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    } catch(NumberFormatException e) {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }\n\n    init(streamComparator, nInt);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/ops/GroupOperation.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2017-03-23 15:42:20","commitOrder":5,"curCode":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, SORT);\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n","date":"2017-03-23 15:42:20","endLine":98,"groupId":"10122","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"RankStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/fb1afd2c8a52c5f724a1a9e6e43d7a064a30fe.src","preCode":"  public RankStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    \r\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n    StreamExpressionNamedParameter nParam = factory.getNamedOperand(expression, \"n\");\n    StreamExpressionNamedParameter sortExpression = factory.getNamedOperand(expression, \"sort\");\n    \n    \r\n    if(expression.getParameters().size() != streamExpressions.size() + 2){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - unknown operands found\", expression));\n    }\n    \n    if(null == nParam || null == nParam.getParameter() || !(nParam.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single 'n' parameter of type positive integer but didn't find one\",expression));\n    }\n    String nStr = ((StreamExpressionValue)nParam.getParameter()).getValue();\n    int nInt = 0;\n    try{\n      nInt = Integer.parseInt(nStr);\n      if(nInt <= 0){\n        throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' must be greater than 0.\",expression, nStr));\n      }\n    }\n    catch(NumberFormatException e){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - topN '%s' is not a valid integer.\",expression, nStr));\n    }    \n    if(1 != streamExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a single stream but found %d\",expression, streamExpressions.size()));\n    }    \n    if(null == sortExpression || !(sortExpression.getParameter() instanceof StreamExpressionValue)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting single 'over' parameter listing fields to unique over but didn't find one\",expression));\n    }\n    \n    TupleStream stream = factory.constructStream(streamExpressions.get(0));\n    StreamComparator comp = factory.constructComparator(((StreamExpressionValue)sortExpression.getParameter()).getValue(), FieldComparator.class);\n    \n    init(stream,nInt,comp);    \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/RankStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"}],"commitId":"4edfc1a9c7b877a23cffbf5f73a2728173fa663d","commitMessage":"@@@SOLR-6615: use constants for 'sort'.  'distrib'\n","date":"2017-03-23 15:42:20","modifiedFileCount":"37","status":"M","submitter":"Noble Paul"}]
