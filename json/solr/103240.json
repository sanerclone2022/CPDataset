[{"authorTime":"2015-08-05 19:40:12","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":2,"curCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","date":"2016-11-02 01:50:14","endLine":146,"groupId":"57921","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@intnumShards@intnumReplicas@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/01a644f157f1a593818f85c1d67ad3ee2d0a65.src","preCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"B"},{"authorDate":"2015-08-05 19:40:12","commitOrder":2,"curCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","date":"2015-08-05 19:40:12","endLine":171,"groupId":"57921","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@Stringrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6a/f890de44f3be268b65fb63cb519d2f7570e715.src","preCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":145,"status":"NB"}],"commitId":"5a66b3bc089e4b3e73b1c41c4cdcd89b183b85e7","commitMessage":"@@@SOLR-8542: Adds Solr Learning to Rank (LTR) plugin for reranking results with machine learning models. (Michael Nilsson.  Diego Ceccarelli.  Joshua Pantony.  Jon Dorando.  Naveen Santhapuri.  Alessandro Benedetti.  David Grohmann.  Christine Poerschke)\n","date":"2016-11-02 01:50:14","modifiedFileCount":"0","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-06-01 03:04:40","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":3,"curCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","date":"2016-11-02 01:50:14","endLine":146,"groupId":"57921","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@intnumShards@intnumReplicas@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/01a644f157f1a593818f85c1d67ad3ee2d0a65.src","preCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"},{"authorDate":"2017-06-01 03:04:40","commitOrder":3,"curCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","date":"2017-06-01 03:04:40","endLine":213,"groupId":"57921","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@Stringrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c3/5593221efaccb8b6279fef49fcf842dcf03fa9.src","preCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      create.setRouterName(router);\n      create.setShards(\"a,b,c\");\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = new CollectionAdminRequest.Create();\n      create.setConfigName(config);\n      create.setCollectionName(name);\n      create.setNumShards(2);\n      create.setReplicationFactor(1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"3291ef884d26e3f8cb43707f2acdf674f3e51c01","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-01 03:04:40","modifiedFileCount":"29","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n","date":"2018-11-30 01:58:51","endLine":235,"groupId":"57921","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@intnumShards@intnumReplicas@intmaxShardsPerNode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/85/563e68a2eb3dae2a4ef396c88633933704a484.src","preCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":213,"groupId":"40293","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@Stringrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c2/31ec327ef15265d6d839864a9c2fc120230370.src","preCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(name, zkStateReader, false, true, 100);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":5,"curCode":"  private void createCollection(String name, String config, int numShards, int numReplicas)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n","date":"2020-07-08 23:57:24","endLine":233,"groupId":"57921","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@intnumShards@intnumReplicas)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/21/b71c3e5ec2bab1693ce0adc996d0a007d8ae89.src","preCode":"  private void createCollection(String name, String config, int numShards, int numReplicas, int maxShardsPerNode)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    create.setMaxShardsPerNode(maxShardsPerNode);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2020-07-08 23:57:24","commitOrder":5,"curCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n","date":"2020-07-08 23:57:24","endLine":211,"groupId":"40293","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@Stringrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4f/c1f3a747657afe4ee15a3f09b205325347cbfb.src","preCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      create.setMaxShardsPerNode(1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":196,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2021-01-18 23:59:41","codes":[{"authorDate":"2020-07-08 23:57:24","commitOrder":6,"curCode":"  private void createCollection(String name, String config, int numShards, int numReplicas)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n","date":"2020-07-08 23:57:24","endLine":233,"groupId":"103240","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createCollection","params":"(Stringname@Stringconfig@intnumShards@intnumReplicas)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/21/b71c3e5ec2bab1693ce0adc996d0a007d8ae89.src","preCode":"  private void createCollection(String name, String config, int numShards, int numReplicas)\n      throws Exception {\n    CollectionAdminResponse response;\n    CollectionAdminRequest.Create create =\n        CollectionAdminRequest.createCollection(name, config, numShards, numReplicas);\n    response = create.process(solrCluster.getSolrClient());\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n    ZkStateReader zkStateReader = solrCluster.getSolrClient().getZkStateReader();\n    solrCluster.waitForActiveCollection(name, numShards, numShards * numReplicas);\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/TestLTROnSolrCloud.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"},{"authorDate":"2021-01-18 23:59:41","commitOrder":6,"curCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1).setPerReplicaState(SolrCloudTestCase.USE_PER_REPLICA_STATE);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n","date":"2021-01-18 23:59:41","endLine":212,"groupId":"103240","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"createCollection","params":"(Stringname@Stringconfig@Stringrouter)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/0ac7e9ae13d4b9970cbc250c3f14aa4e551c1f.src","preCode":"  private void createCollection(String name, String config, String router) throws Exception {\n    CollectionAdminResponse response;\n    if (router.equals(ImplicitDocRouter.NAME)) {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollectionWithImplicitRouter(name,config,\"a,b,c\",1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 3, 3);\n    } else {\n      CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(name,config,2,1);\n      response = create.process(solrCluster.getSolrClient());\n      solrCluster.waitForActiveCollection(name, 2, 2);\n    }\n\n    if (response.getStatus() != 0 || response.getErrorMessages() != null) {\n      fail(\"Could not create collection. Response\" + response.toString());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":197,"status":"M"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
