[{"authorTime":"2015-08-05 21:30:53","codes":[{"authorDate":"2015-08-05 19:40:12","commitOrder":2,"curCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\");\n      QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n      query = new SolrQuery(\"cat:football\");\n      query.setShowDebugInfo(true);\n      query.setFields(\"*,score\");\n      queryResponse = solrClient_local.query(\"onecollection_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n","date":"2015-08-05 19:40:12","endLine":139,"groupId":"52398","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6a/f890de44f3be268b65fb63cb519d2f7570e715.src","preCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\");\n      QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n      query = new SolrQuery(\"cat:football\");\n      query.setShowDebugInfo(true);\n      query.setFields(\"*,score\");\n      queryResponse = solrClient_local.query(\"onecollection_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"NB"},{"authorDate":"2015-08-05 21:30:53","commitOrder":2,"curCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n      QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n\n      query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n      queryResponse = solrClient_local.query(\"collection1_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n","date":"2015-08-05 21:30:53","endLine":183,"groupId":"57800","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiCollectionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/f73caf0f9e2797300a415d6b94bef87f69bfd6.src","preCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n      QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n\n      query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n      queryResponse = solrClient_local.query(\"collection1_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"}],"commitId":"23762d50150e61715c6dc07cca626ad790dbec4a","commitMessage":"@@@SOLR-7818: Distributed stats is only calculated with the terms that are present in the last shard of a distributed request\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1694210 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-08-05 21:30:53","modifiedFileCount":"2","status":"M","submitter":"Varun Thacker"},{"authorTime":"2016-04-02 00:21:59","codes":[{"authorDate":"2016-04-02 00:21:59","commitOrder":3,"curCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\");\n          QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setShowDebugInfo(true);\n          query.setFields(\"*,score\");\n          queryResponse = solrClient_local.query(\"onecollection_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n      }\n    }\n  }\n","date":"2016-04-02 00:21:59","endLine":145,"groupId":"8722","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/7742b8b7daed2fff1509eb3b4c71ad1decad5e.src","preCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\");\n      QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n      query = new SolrQuery(\"cat:football\");\n      query.setShowDebugInfo(true);\n      query.setFields(\"*,score\");\n      queryResponse = solrClient_local.query(\"onecollection_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2016-04-02 00:21:59","commitOrder":3,"curCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n","date":"2016-04-02 00:21:59","endLine":194,"groupId":"57800","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiCollectionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/7742b8b7daed2fff1509eb3b4c71ad1decad5e.src","preCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n      SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString());\n\n      SolrQuery query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n      QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n\n      query = new SolrQuery(\"cat:football\");\n      query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n      queryResponse = solrClient_local.query(\"collection1_local\", query);\n      assertEquals(2, queryResponse.getResults().getNumFound());\n      assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n      assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n      float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n      float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n      assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1, Float.compare(score1_local, score2_local));\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"ce172acb8fec6c3bbb18837a4d640da6c5aad649","commitMessage":"@@@SOLR-4509: Move to non deprecated HttpClient impl classes to remove stale connection check on every request and move connection lifecycle management towards the client.\n","date":"2016-04-02 00:21:59","modifiedFileCount":"67","status":"M","submitter":"markrmiller"},{"authorTime":"2016-04-08 18:07:13","codes":[{"authorDate":"2016-04-08 18:07:13","commitOrder":4,"curCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\");\n          QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setShowDebugInfo(true);\n          query.setFields(\"*,score\");\n          queryResponse = solrClient_local.query(\"onecollection_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n      }\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":145,"groupId":"8722","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/1c1047af845158cec9ca86df4539deb1ce6849.src","preCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\");\n          QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setShowDebugInfo(true);\n          query.setFields(\"*,score\");\n          queryResponse = solrClient_local.query(\"onecollection_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2016-04-08 18:07:13","commitOrder":4,"curCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n","date":"2016-04-08 18:07:13","endLine":194,"groupId":"57800","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiCollectionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4c/1c1047af845158cec9ca86df4539deb1ce6849.src","preCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = new HttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":148,"status":"M"}],"commitId":"9b65416e60d1183e0d145646c36e5eb9018603f8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-08 18:07:13","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":5,"curCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", \"\" + (3 + i));\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\");\n          QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setShowDebugInfo(true);\n          query.setFields(\"*,score\");\n          queryResponse = solrClient_local.query(\"onecollection_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n      }\n    }\n  }\n","date":"2017-06-29 17:00:17","endLine":141,"groupId":"103239","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testSimpleQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/c2dc532633a4d7f0ab4bdf496e2248ff69160d.src","preCode":"  public void testSimpleQuery() throws Exception {\n    \r\n    createCollection(\"onecollection\", \"conf1\", ImplicitDocRouter.NAME);\n    createCollection(\"onecollection_local\", \"conf2\", ImplicitDocRouter.NAME);\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", 1);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"a\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", 2);\n    doc.setField(\"cat\", \"football\");\n    doc.addField(ShardParams._ROUTE_, \"b\");\n    solrCluster.getSolrClient().add(\"onecollection\", doc);\n    solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n\n    int nDocs = TestUtil.nextInt(random(), 10, 100);\n    for (int i=0; i<nDocs; i++) {\n      doc = new SolrInputDocument();\n      doc.setField(\"id\", 3 + i);\n      String cat = TestUtil.randomSimpleString(random());\n      if (!cat.equals(\"football\")) { \r\n        doc.setField(\"cat\", cat);\n        if (rarely()) { \r\n          doc.addField(ShardParams._ROUTE_, \"a\");\n        } else {\n          doc.addField(ShardParams._ROUTE_, \"b\");\n        }\n        solrCluster.getSolrClient().add(\"onecollection\", doc);\n        solrCluster.getSolrClient().add(\"onecollection_local\", doc);\n      }\n    }\n\n    solrCluster.getSolrClient().commit(\"onecollection\");\n    solrCluster.getSolrClient().commit(\"onecollection_local\");\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\");\n          QueryResponse queryResponse = solrClient.query(\"onecollection\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setShowDebugInfo(true);\n          query.setFields(\"*,score\");\n          queryResponse = solrClient_local.query(\"onecollection_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":5,"curCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(\"2\", queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(\"1\", queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n","date":"2017-06-29 17:00:17","endLine":190,"groupId":"103239","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiCollectionQuery","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ca/c2dc532633a4d7f0ab4bdf496e2248ff69160d.src","preCode":"  public void testMultiCollectionQuery() throws Exception {\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n\n    createCollection(\"collection1\", \"conf1\");\n    createCollection(\"collection1_local\", \"conf2\");\n    createCollection(\"collection2\", \"conf1\");\n    createCollection(\"collection2_local\", \"conf2\");\n\n    addDocsRandomly();\n\n    \r\n    for (JettySolrRunner jettySolrRunner : solrCluster.getJettySolrRunners()) {\n\n      try (SolrClient solrClient = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n\n        try (SolrClient solrClient_local = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {\n          SolrQuery query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1,collection2\");\n          QueryResponse queryResponse = solrClient.query(\"collection1\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          float score1 = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2 = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1 + \" Doc2 score=\" + score2, 0, Float.compare(score1, score2));\n\n          query = new SolrQuery(\"cat:football\");\n          query.setFields(\"*,score\").add(\"collection\", \"collection1_local,collection2_local\");\n          queryResponse = solrClient_local.query(\"collection1_local\", query);\n          assertEquals(2, queryResponse.getResults().getNumFound());\n          assertEquals(2, queryResponse.getResults().get(0).get(\"id\"));\n          assertEquals(1, queryResponse.getResults().get(1).get(\"id\"));\n          float score1_local = (float) queryResponse.getResults().get(0).get(\"score\");\n          float score2_local = (float) queryResponse.getResults().get(1).get(\"score\");\n          assertEquals(\"Doc1 score=\" + score1_local + \" Doc2 score=\" + score2_local, 1,\n              Float.compare(score1_local, score2_local));\n        }\n\n      }\n    }\n    \n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/stats/TestDistribIDF.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"}]
