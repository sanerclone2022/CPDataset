[{"authorTime":"2013-05-28 20:09:13","codes":[{"authorDate":"2013-05-13 05:23:37","commitOrder":2,"curCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","date":"2013-05-13 05:23:37","endLine":93,"groupId":"60162","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTie","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/e1483609836cdfd56e05c74f557e78be0e9cb2.src","preCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"NB"},{"authorDate":"2013-05-28 20:09:13","commitOrder":2,"curCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n","date":"2013-05-28 20:09:13","endLine":129,"groupId":"53343","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/23e5b118756d96f02eb9e7069f263ad93ff48a.src","preCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"B"}],"commitId":"d7f397056bcb52564bf5cbffa96152aa74c0fa1f","commitMessage":"@@@SOLR-4785: Fixed bug with missing boost on toplevel query\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1486898 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-05-28 20:09:13","modifiedFileCount":"2","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2015-06-18 15:14:05","codes":[{"authorDate":"2013-05-13 05:23:37","commitOrder":3,"curCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","date":"2013-05-13 05:23:37","endLine":93,"groupId":"60162","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTie","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/e1483609836cdfd56e05c74f557e78be0e9cb2.src","preCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2015-06-18 15:14:05","commitOrder":3,"curCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n","date":"2015-06-18 15:14:05","endLine":129,"groupId":"53343","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/4a8cd2ce2342f631c6b74e05afc72b97e731e3.src","preCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().get(0).getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().get(0).getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"}],"commitId":"4aafacfbef423a25a349dd8c6e5e6178ac1ba334","commitMessage":"@@@LUCENE-6570: Make BooleanQuery immutable.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686145 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-18 15:14:05","modifiedFileCount":"184","status":"M","submitter":"Adrien Grand"},{"authorTime":"2015-09-07 21:34:46","codes":[{"authorDate":"2013-05-13 05:23:37","commitOrder":4,"curCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","date":"2013-05-13 05:23:37","endLine":93,"groupId":"60162","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTie","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/e1483609836cdfd56e05c74f557e78be0e9cb2.src","preCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2015-09-07 21:34:46","commitOrder":4,"curCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertTrue(q instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery();\n    assertEquals(5.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery();\n    assertEquals(6.0, ((BoostQuery) barClause).getBoost(), 1e-15);\n    assertEquals(7.0, ((BoostQuery) clauses[1].getQuery()).getBoost(), 1e-15);\n    assertFalse(q instanceof BoostQuery);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery();\n    assertEquals(2.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery();\n    assertFalse(barClause instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n  }\n","date":"2015-09-07 21:34:46","endLine":131,"groupId":"60162","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/2a86404e8c016469f3e35836b95ebe501adef9.src","preCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertEquals(3.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    float fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(5.0, fooClause, 1e-15);\n    float barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(6.0, barClause, 1e-15);\n    assertEquals(7.0, clauses[1].getQuery().getBoost(), 1e-15);\n    assertEquals(1.0, q.getBoost(), 1e-15);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(2.0, fooClause, 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery().getBoost();\n    assertEquals(1.0, barClause, 1e-15);\n    assertEquals(3.0, q.getBoost(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"}],"commitId":"962313b83ba9c69379e1f84dffc881a361713ce9","commitMessage":"@@@LUCENE-6590: Replace Query.getBoost.  setBoost and clone with a new BoostQuery.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1701621 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-07 21:34:46","modifiedFileCount":"226","status":"M","submitter":"Adrien Grand"},{"authorTime":"2021-04-29 23:36:50","codes":[{"authorDate":"2013-05-13 05:23:37","commitOrder":5,"curCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","date":"2013-05-13 05:23:37","endLine":93,"groupId":"103317","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTie","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/e1483609836cdfd56e05c74f557e78be0e9cb2.src","preCode":"  public void testTie() {\n    q = parse(\"foo bar\", \"tie\", \"0.5\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    assertEquals(0.5, ((DisjunctionMaxQuery) clauses[0].getQuery()).getTieBreakerMultiplier(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"N"},{"authorDate":"2021-04-29 23:36:50","commitOrder":5,"curCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertTrue(q instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    Query fooClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(q -> q.toString().contains(\"foo\")).findFirst().get())\n            .clauses().iterator().next().getQuery();\n    assertEquals(5.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    Query barClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(q -> q.toString().contains(\"bar\")).findFirst().get())\n            .clauses().iterator().next().getQuery();\n    assertEquals(6.0, ((BoostQuery) barClause).getBoost(), 1e-15);\n    assertEquals(7.0, ((BoostQuery) clauses[1].getQuery()).getBoost(), 1e-15);\n    assertFalse(q instanceof BoostQuery);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(q -> q.toString().contains(\"foo\")).findFirst().get())\n            .clauses().iterator().next().getQuery();\n    assertEquals(2.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().stream().filter(q -> q.toString().contains(\"bar\")).findFirst().get())\n            .clauses().iterator().next().getQuery();\n    assertFalse(barClause instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n  }\n","date":"2021-04-29 23:36:50","endLine":157,"groupId":"103317","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testBoost","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/82/ed69c65a69f315a6de3e82c1857d7739458ddd.src","preCode":"  public void testBoost() {\n    \r\n    q = parse(\"foo^3.0\");\n    assertTrue(q instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n\n    \r\n    q = parse(\"foo^5.0 bar^6.0 +baz^7\");\n    clauses = clauses(q);\n    assertEquals(2, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    DisjunctionMaxQuery dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    Query fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery();\n    assertEquals(5.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    Query barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery();\n    assertEquals(6.0, ((BoostQuery) barClause).getBoost(), 1e-15);\n    assertEquals(7.0, ((BoostQuery) clauses[1].getQuery()).getBoost(), 1e-15);\n    assertFalse(q instanceof BoostQuery);\n\n    \r\n    q = parse(\"(foo^2.0 bar)^3.0\");\n    clauses = clauses(q);\n    assertEquals(1, clauses.length);\n    assertTrue(clauses[0].getQuery() instanceof DisjunctionMaxQuery);\n    dmq = ((DisjunctionMaxQuery) clauses[0].getQuery());\n    fooClause = ((BooleanQuery)dmq.getDisjuncts().get(0)).clauses().iterator().next().getQuery();\n    assertEquals(2.0, ((BoostQuery) fooClause).getBoost(), 1e-15);\n    barClause = ((BooleanQuery)dmq.getDisjuncts().get(1)).clauses().iterator().next().getQuery();\n    assertFalse(barClause instanceof BoostQuery);\n    assertEquals(3.0, ((BoostQuery) q).getBoost(), 1e-15);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"}],"commitId":"9ca0d5dc45399ffe38561ae45ebd5b25febffb95","commitMessage":"@@@Update type assumptions in TestMaxScoreQueryParser (#106)\n\nThis updates Solr to address an underlying change that widened the\nreturn type of DisjunctionMaxQuery from List to Collection.\n\nPrecommit/check should now pass.","date":"2021-04-29 23:36:50","modifiedFileCount":"1","status":"M","submitter":"Jason Gerlowski"}]
