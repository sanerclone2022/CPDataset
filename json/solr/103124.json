[{"authorTime":"2012-09-13 23:05:56","codes":[{"authorDate":"2012-05-26 01:24:58","commitOrder":4,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2012-05-26 01:24:58","endLine":836,"groupId":"20695","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/54fbf6a7c9cb23781a5fb308cf10af6c8674ee.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":769,"status":"NB"},{"authorDate":"2012-09-13 23:05:56","commitOrder":4,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.release(1);\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2012-09-13 23:05:56","endLine":940,"groupId":"49690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/df4b2c96a14ad845d5c721564697dcc0676715.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.release(1);\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"B"}],"commitId":"6104078c44cb043124b6049a084ef2df633aa2a6","commitMessage":"@@@tests: additional corrupt tlog test\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1384358 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-13 23:05:56","modifiedFileCount":"1","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-09-14 00:24:03","codes":[{"authorDate":"2012-05-26 01:24:58","commitOrder":5,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2012-05-26 01:24:58","endLine":836,"groupId":"20695","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/54fbf6a7c9cb23781a5fb308cf10af6c8674ee.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":769,"status":"N"},{"authorDate":"2012-09-14 00:24:03","commitOrder":5,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2012-09-14 00:24:03","endLine":923,"groupId":"49690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/1879a00166a2f662bd9b50fb8eba710b720af9.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.release(1);\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"}],"commitId":"0e33ea10fe0c3479e183b1b97b89f5543ddde5ba","commitMessage":"@@@tests: additional corrupt tlog test\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1384394 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-14 00:24:03","modifiedFileCount":"1","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-09-14 01:36:51","codes":[{"authorDate":"2012-05-26 01:24:58","commitOrder":6,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2012-05-26 01:24:58","endLine":836,"groupId":"20695","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/54fbf6a7c9cb23781a5fb308cf10af6c8674ee.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":769,"status":"N"},{"authorDate":"2012-09-14 01:36:51","commitOrder":6,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2012-09-14 01:36:51","endLine":927,"groupId":"49690","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/49f76c71edd045ac0e4ba7ea11daab5ef21d06.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"}],"commitId":"e494b8841b59b7acbe4b89cc4719260550432d0a","commitMessage":"@@@tests: try to prevent corrupt tlog test from failing other methods on windows\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1384420 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-09-14 01:36:51","modifiedFileCount":"1","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2013-06-27 04:18:33","codes":[{"authorDate":"2013-06-27 04:18:33","commitOrder":7,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2013-06-27 04:18:33","endLine":912,"groupId":"20695","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/5ed59259d23ff0e4b0d5a613afd05a1b639a8c.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":844,"status":"M"},{"authorDate":"2013-06-27 04:18:33","commitOrder":7,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2013-06-27 04:18:33","endLine":977,"groupId":"49690","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/5ed59259d23ff0e4b0d5a613afd05a1b639a8c.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      File logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = UpdateLog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"M"}],"commitId":"b9e1537a7e12e6c15622452e48d8ca8c23aa98c4","commitMessage":"@@@SOLR-4916: Add support to write and read Solr index files and transaction log files to and from HDFS.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1497072 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-27 04:18:33","modifiedFileCount":"42","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2013-06-27 04:18:33","codes":[{"authorDate":"2016-03-04 21:23:47","commitOrder":8,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2016-03-04 21:23:47","endLine":968,"groupId":"20695","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/7492f53b602d299d6e1c3dfd2f814145a8aa99.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":908,"status":"M"},{"authorDate":"2013-06-27 04:18:33","commitOrder":8,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2013-06-27 04:18:33","endLine":977,"groupId":"49690","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4b/5ed59259d23ff0e4b0d5a613afd05a1b639a8c.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":919,"status":"N"}],"commitId":"c27dd8e03866082686ab3d17f7350f91975a8efc","commitMessage":"@@@SOLR-8750 : Use lambdas in code where SAM type interfaces are used\n","date":"2016-03-04 21:23:47","modifiedFileCount":"45","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-04-14 13:17:03","codes":[{"authorDate":"2017-04-14 13:17:03","commitOrder":9,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2017-04-14 13:17:03","endLine":1311,"groupId":"20695","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/ec6b16f391a143bf4fc3b73743f8a3a0e16a41.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1247,"status":"M"},{"authorDate":"2017-04-14 13:17:03","commitOrder":9,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2017-04-14 13:17:03","endLine":1378,"groupId":"5443","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/ec6b16f391a143bf4fc3b73743f8a3a0e16a41.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",\"104\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",\"105\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",\"106\")), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[106,105,104]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1318,"status":"M"}],"commitId":"4dc367414fbaa6451a6ef0c5786adebf108c7608","commitMessage":"@@@SOLR-10151: Use monotonically incrementing counter for doc ids in TestRecovery.\n","date":"2017-04-14 13:17:03","modifiedFileCount":"1","status":"M","submitter":"markrmiller"},{"authorTime":"2019-08-10 16:21:11","codes":[{"authorDate":"2019-08-10 16:21:11","commitOrder":10,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length - 1]), \"rw\")) {\n        raf.seek(raf.length());  \r\n        raf.writeLong(0xffffffffffffffffL);\n        raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2019-08-10 16:21:11","endLine":1375,"groupId":"20695","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/09/b9b2f15e2a9f50a5444c2d978ce6378500e0f5.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      raf.seek(raf.length());  \r\n      raf.writeLong(0xffffffffffffffffL);\n      raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      raf.close();\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1311,"status":"M"},{"authorDate":"2019-08-10 16:21:11","commitOrder":10,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length - 1]), \"rw\")) {\n        long len = raf.length();\n        raf.seek(0);  \r\n        raf.write(new byte[(int) len]);  \r\n      }\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2019-08-10 16:21:11","endLine":1442,"groupId":"5443","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/09/b9b2f15e2a9f50a5444c2d978ce6378500e0f5.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length-1]), \"rw\");\n      long len = raf.length();\n      raf.seek(0);  \r\n      raf.write(new byte[(int)len]);  \r\n      raf.close();\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1382,"status":"M"}],"commitId":"9546d8612ca050021db894fc8001134a6fdbf654","commitMessage":"@@@SOLR-13680: use try-with-resource to close closeable resources\n\ncloses #822\n","date":"2019-08-10 16:21:11","modifiedFileCount":"11","status":"M","submitter":"Munendra S N"},{"authorTime":"2020-01-17 02:47:06","codes":[{"authorDate":"2020-01-17 02:47:06","commitOrder":11,"curCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length - 1]), \"rw\")) {\n        raf.seek(raf.length());  \r\n        raf.writeLong(0xffffffffffffffffL);\n        raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2020-01-17 02:47:06","endLine":1364,"groupId":"103124","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testTruncatedLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testTruncatedLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"F1\"));\n      assertU(adoc(\"id\",\"F2\"));\n      assertU(adoc(\"id\",\"F3\"));\n\n      h.close();\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length - 1]), \"rw\")) {\n        raf.seek(raf.length());  \r\n        raf.writeLong(0xffffffffffffffffL);\n        raf.writeChars(\"This should be appended to a good log file, representing a bad partially written record.\");\n      }\n\n      logReplay.release(1000);\n      logReplayFinish.drainPermits();\n      ignoreException(\"OutOfBoundsException\");  \r\n      createCore();\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      resetExceptionIgnores();\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      \r\n\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n      \n      updateJ(jsonAdd(sdoc(\"id\",\"F4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"F6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1301,"status":"M"},{"authorDate":"2020-01-17 02:47:06","commitOrder":11,"curCode":"  public void testCorruptLog() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length - 1]), \"rw\")) {\n        long len = raf.length();\n        raf.seek(0);  \r\n        raf.write(new byte[(int) len]);  \r\n      }\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2020-01-17 02:47:06","endLine":1430,"groupId":"103124","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testCorruptLog","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testCorruptLog() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n\n      UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();\n      File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());\n\n      clearIndex();\n      assertU(commit());\n\n      assertU(adoc(\"id\",\"G1\"));\n      assertU(adoc(\"id\",\"G2\"));\n      assertU(adoc(\"id\",\"G3\"));\n\n      h.close();\n\n\n      String[] files = ulog.getLogList(logDir);\n      Arrays.sort(files);\n      try (RandomAccessFile raf = new RandomAccessFile(new File(logDir, files[files.length - 1]), \"rw\")) {\n        long len = raf.length();\n        raf.seek(0);  \r\n        raf.write(new byte[(int) len]);  \r\n      }\n\n\n      ignoreException(\"Failure to open existing log file\");  \r\n      createCore();\n      resetExceptionIgnores();\n\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      \r\n      \r\n      String v104 = getNextVersion();\n      String v105 = getNextVersion();\n      String v106 = getNextVersion();\n\n      updateJ(jsonAdd(sdoc(\"id\",\"G4\", \"_version_\",v104)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G5\", \"_version_\",v105)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n      updateJ(jsonAdd(sdoc(\"id\",\"G6\", \"_version_\",v106)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"3\"), \"/versions==[\"+v106+\",\"+v105+\",\"+v104+\"]\");\n\n      assertU(commit());\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      \r\n      deleteLogs();\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1371,"status":"M"}],"commitId":"5f2d7c4855987670489d68884c787e4cfb377fa9","commitMessage":"@@@SOLR-14184: Internal 'test' variable DirectUpdateHandler2.commitOnClose has been removed and replaced with TestInjection.skipIndexWriterCommitOnClose\n","date":"2020-01-17 02:47:06","modifiedFileCount":"13","status":"M","submitter":"Chris Hostetter"}]
