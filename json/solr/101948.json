[{"authorTime":"2020-12-06 21:51:10","codes":[{"authorDate":"2020-12-02 03:07:08","commitOrder":2,"curCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      \r\n      TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n      Set<Node> nodes = request.getTargetNodes();\n\n      attributeFetcher.requestNodeCoreCount();\n      attributeFetcher.fetchFrom(nodes);\n      AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n      \r\n      for (Node node : nodes) {\n        if (attrValues.getCoresCount(node).isEmpty()) {\n          throw new PlacementException(\"Can't get number of cores in \" + node);\n        }\n        nodesByCores.put(attrValues.getCoresCount(node).get(), node);\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      \r\n      \r\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        \r\n        \r\n        ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n        Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n        for (int i = 0; i < totalReplicasPerShard; i++) {\n          nodeEntriesToAssign.add(treeIterator.next());\n        }\n\n        \r\n        \r\n        for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n          int coreCount = e.getKey();\n          Node node = e.getValue();\n          nodesByCores.remove(coreCount, node);\n          nodesByCores.put(coreCount + 1, node);\n        }\n\n        for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n          placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","date":"2020-12-02 03:07:08","endLine":113,"groupId":"26153","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"computePlacement","params":"(Clustercluster@PlacementRequestrequest@AttributeFetcherattributeFetcher@PlacementPlanFactoryplacementPlanFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b7/3b692c68fb6853c182925fd40b6429625ca2a8.src","preCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      \r\n      TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n      Set<Node> nodes = request.getTargetNodes();\n\n      attributeFetcher.requestNodeCoreCount();\n      attributeFetcher.fetchFrom(nodes);\n      AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n      \r\n      for (Node node : nodes) {\n        if (attrValues.getCoresCount(node).isEmpty()) {\n          throw new PlacementException(\"Can't get number of cores in \" + node);\n        }\n        nodesByCores.put(attrValues.getCoresCount(node).get(), node);\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      \r\n      \r\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        \r\n        \r\n        ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n        Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n        for (int i = 0; i < totalReplicasPerShard; i++) {\n          nodeEntriesToAssign.add(treeIterator.next());\n        }\n\n        \r\n        \r\n        for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n          int coreCount = e.getKey();\n          Node node = e.getValue();\n          nodesByCores.remove(coreCount, node);\n          nodesByCores.put(coreCount + 1, node);\n        }\n\n        for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n          placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/MinimizeCoresPlacementFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"NB"},{"authorDate":"2020-12-06 21:51:10","commitOrder":2,"curCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n        Collections.shuffle(nodesToAssign, replicaPlacementRandom);\n\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","date":"2020-12-06 21:51:10","endLine":81,"groupId":"41291","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"computePlacement","params":"(Clustercluster@PlacementRequestrequest@AttributeFetcherattributeFetcher@PlacementPlanFactoryplacementPlanFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/27d21795705db5c717808e242d72f926bcc214.src","preCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n        Collections.shuffle(nodesToAssign, replicaPlacementRandom);\n\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/RandomPlacementFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"B"}],"commitId":"cced5078ea13797a49658cdf76f693a79788c533","commitMessage":"@@@SOLR-15016: Replica placement plugins should use container plugins API / configs.\n","date":"2020-12-06 21:51:10","modifiedFileCount":"23","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-12-06 21:51:10","codes":[{"authorDate":"2021-01-04 22:24:25","commitOrder":3,"curCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      \r\n      TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n      Set<Node> nodes = request.getTargetNodes();\n\n      attributeFetcher.requestNodeMetric(NodeMetricImpl.NUM_CORES);\n      attributeFetcher.fetchFrom(nodes);\n      AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n      \r\n      for (Node node : nodes) {\n        if (attrValues.getNodeMetric(node, NodeMetricImpl.NUM_CORES).isEmpty()) {\n          throw new PlacementException(\"Can't get number of cores in \" + node);\n        }\n        nodesByCores.put(attrValues.getNodeMetric(node, NodeMetricImpl.NUM_CORES).get(), node);\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      \r\n      \r\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        \r\n        \r\n        ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n        Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n        for (int i = 0; i < totalReplicasPerShard; i++) {\n          nodeEntriesToAssign.add(treeIterator.next());\n        }\n\n        \r\n        \r\n        for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n          int coreCount = e.getKey();\n          Node node = e.getValue();\n          nodesByCores.remove(coreCount, node);\n          nodesByCores.put(coreCount + 1, node);\n        }\n\n        for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n          placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","date":"2021-01-04 22:24:25","endLine":114,"groupId":"26153","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"computePlacement","params":"(Clustercluster@PlacementRequestrequest@AttributeFetcherattributeFetcher@PlacementPlanFactoryplacementPlanFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/1e762d12c87832360ce38327f7340b1812d01d.src","preCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      \r\n      TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n      Set<Node> nodes = request.getTargetNodes();\n\n      attributeFetcher.requestNodeCoreCount();\n      attributeFetcher.fetchFrom(nodes);\n      AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n      \r\n      for (Node node : nodes) {\n        if (attrValues.getCoresCount(node).isEmpty()) {\n          throw new PlacementException(\"Can't get number of cores in \" + node);\n        }\n        nodesByCores.put(attrValues.getCoresCount(node).get(), node);\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      \r\n      \r\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        \r\n        \r\n        ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n        Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n        for (int i = 0; i < totalReplicasPerShard; i++) {\n          nodeEntriesToAssign.add(treeIterator.next());\n        }\n\n        \r\n        \r\n        for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n          int coreCount = e.getKey();\n          Node node = e.getValue();\n          nodesByCores.remove(coreCount, node);\n          nodesByCores.put(coreCount + 1, node);\n        }\n\n        for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n          placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/MinimizeCoresPlacementFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2020-12-06 21:51:10","commitOrder":3,"curCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n        Collections.shuffle(nodesToAssign, replicaPlacementRandom);\n\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","date":"2020-12-06 21:51:10","endLine":81,"groupId":"41291","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"computePlacement","params":"(Clustercluster@PlacementRequestrequest@AttributeFetcherattributeFetcher@PlacementPlanFactoryplacementPlanFactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0b/27d21795705db5c717808e242d72f926bcc214.src","preCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n        Collections.shuffle(nodesToAssign, replicaPlacementRandom);\n\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/RandomPlacementFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"2695624a9f2d11a63f3640dd7f3bb30c2e6f938e","commitMessage":"@@@SOLR-15019: Replica placement API needs a way to fetch existing replica metrics.\n","date":"2021-01-04 22:24:25","modifiedFileCount":"14","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2021-01-26 22:16:04","codes":[{"authorDate":"2021-01-26 22:16:04","commitOrder":4,"curCode":"    public PlacementPlan computePlacement(PlacementRequest request, PlacementContext placementContext) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (placementContext.getCluster().getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      \r\n      TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n      Set<Node> nodes = request.getTargetNodes();\n\n      AttributeFetcher attributeFetcher = placementContext.getAttributeFetcher();\n      attributeFetcher.requestNodeMetric(NodeMetricImpl.NUM_CORES);\n      attributeFetcher.fetchFrom(nodes);\n      AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n      \r\n      for (Node node : nodes) {\n        if (attrValues.getNodeMetric(node, NodeMetricImpl.NUM_CORES).isEmpty()) {\n          throw new PlacementException(\"Can't get number of cores in \" + node);\n        }\n        nodesByCores.put(attrValues.getNodeMetric(node, NodeMetricImpl.NUM_CORES).get(), node);\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      \r\n      \r\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        \r\n        \r\n        ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n        Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n        for (int i = 0; i < totalReplicasPerShard; i++) {\n          nodeEntriesToAssign.add(treeIterator.next());\n        }\n\n        \r\n        \r\n        for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n          int coreCount = e.getKey();\n          Node node = e.getValue();\n          nodesByCores.remove(coreCount, node);\n          nodesByCores.put(coreCount + 1, node);\n        }\n\n        for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n          placeReplicas(request.getCollection(), nodeEntriesToAssign, placementContext.getPlacementPlanFactory(), replicaPlacements, shardName, request, replicaType);\n        }\n      }\n\n      return placementContext.getPlacementPlanFactory().createPlacementPlan(request, replicaPlacements);\n    }\n","date":"2021-01-26 22:16:33","endLine":114,"groupId":"101948","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"computePlacement","params":"(PlacementRequestrequest@PlacementContextplacementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/7735ecdd86173a8849f9eeaa00693809fd2d6f.src","preCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      \r\n      TreeMultimap<Integer, Node> nodesByCores = TreeMultimap.create(Comparator.naturalOrder(), Ordering.arbitrary());\n\n      Set<Node> nodes = request.getTargetNodes();\n\n      attributeFetcher.requestNodeMetric(NodeMetricImpl.NUM_CORES);\n      attributeFetcher.fetchFrom(nodes);\n      AttributeValues attrValues = attributeFetcher.fetchAttributes();\n\n\n      \r\n      for (Node node : nodes) {\n        if (attrValues.getNodeMetric(node, NodeMetricImpl.NUM_CORES).isEmpty()) {\n          throw new PlacementException(\"Can't get number of cores in \" + node);\n        }\n        nodesByCores.put(attrValues.getNodeMetric(node, NodeMetricImpl.NUM_CORES).get(), node);\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      \r\n      \r\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        \r\n        \r\n        ArrayList<Map.Entry<Integer, Node>> nodeEntriesToAssign = new ArrayList<>(totalReplicasPerShard);\n        Iterator<Map.Entry<Integer, Node>> treeIterator = nodesByCores.entries().iterator();\n        for (int i = 0; i < totalReplicasPerShard; i++) {\n          nodeEntriesToAssign.add(treeIterator.next());\n        }\n\n        \r\n        \r\n        for (Map.Entry<Integer, Node> e : nodeEntriesToAssign) {\n          int coreCount = e.getKey();\n          Node node = e.getValue();\n          nodesByCores.remove(coreCount, node);\n          nodesByCores.put(coreCount + 1, node);\n        }\n\n        for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n          placeReplicas(request.getCollection(), nodeEntriesToAssign, placementPlanFactory, replicaPlacements, shardName, request, replicaType);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/MinimizeCoresPlacementFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"},{"authorDate":"2021-01-26 22:16:04","commitOrder":4,"curCode":"    public PlacementPlan computePlacement(PlacementRequest request, PlacementContext placementContext) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (placementContext.getCluster().getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        ArrayList<Node> nodesToAssign = new ArrayList<>(placementContext.getCluster().getLiveNodes());\n        Collections.shuffle(nodesToAssign, replicaPlacementRandom);\n\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          placeForReplicaType(request.getCollection(), nodesToAssign, placementContext.getPlacementPlanFactory(), replicaPlacements, shardName, request, rt);\n        }\n      }\n\n      return placementContext.getPlacementPlanFactory().createPlacementPlan(request, replicaPlacements);\n    }\n","date":"2021-01-26 22:16:33","endLine":80,"groupId":"101948","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"computePlacement","params":"(PlacementRequestrequest@PlacementContextplacementContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/22e14f82bfa797c769eee5286220efa001a120.src","preCode":"    public PlacementPlan computePlacement(Cluster cluster, PlacementRequest request, AttributeFetcher attributeFetcher,\n                                          PlacementPlanFactory placementPlanFactory) throws PlacementException {\n      int totalReplicasPerShard = 0;\n      for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n        totalReplicasPerShard += request.getCountReplicasToCreate(rt);\n      }\n\n      if (cluster.getLiveNodes().size() < totalReplicasPerShard) {\n        throw new PlacementException(\"Cluster size too small for number of replicas per shard\");\n      }\n\n      Set<ReplicaPlacement> replicaPlacements = new HashSet<>(totalReplicasPerShard * request.getShardNames().size());\n\n      \r\n      for (String shardName : request.getShardNames()) {\n        \r\n        ArrayList<Node> nodesToAssign = new ArrayList<>(cluster.getLiveNodes());\n        Collections.shuffle(nodesToAssign, replicaPlacementRandom);\n\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          placeForReplicaType(request.getCollection(), nodesToAssign, placementPlanFactory, replicaPlacements, shardName, request, rt);\n        }\n      }\n\n      return placementPlanFactory.createPlacementPlan(request, replicaPlacements);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/RandomPlacementFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"}],"commitId":"6e9185a33aefa039934adb4c14764030f8e702ea","commitMessage":"@@@SOLR-15055: Re-implement 'withCollection'.\n","date":"2021-01-26 22:16:33","modifiedFileCount":"28","status":"M","submitter":"Andrzej Bialecki"}]
