[{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-09-10 07:37:35","commitOrder":4,"curCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-09-10 07:37:35","endLine":964,"groupId":"48435","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/c72b26e545b80beedfb8fe606f3a4db8fe762b.src","preCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"B"},{"authorDate":"2015-06-24 21:07:09","commitOrder":4,"curCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":773,"groupId":"48435","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"NB"}],"commitId":"087154a0d8e1d1ba77e3e08c63bc512647253c61","commitMessage":"@@@SOLR-7903: Add the FacetStream to the Streaming API and wire it into the SQLHandler\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1702132 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-10 07:37:35","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-11-08 11:05:13","codes":[{"authorDate":"2015-09-10 07:37:35","commitOrder":5,"curCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-09-10 07:37:35","endLine":964,"groupId":"48435","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/c72b26e545b80beedfb8fe606f3a4db8fe762b.src","preCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"N"},{"authorDate":"2015-11-08 11:05:13","commitOrder":5,"curCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldEqualitor(\"a_s\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-11-08 11:05:13","endLine":1505,"groupId":"48435","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/bccbbcfc65968a8c758152ea2b5c51f3e73a48.src","preCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1478,"status":"M"}],"commitId":"4f00eb8300c1d7427c588def41bc6945bfa5ea01","commitMessage":"@@@SOLR-8198: Change ReducerStream to use StreamEqualitor instead of StreamComparator\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713204 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-08 11:05:13","modifiedFileCount":"4","status":"M","submitter":"Dennis Gove"},{"authorTime":"2015-12-10 03:52:28","codes":[{"authorDate":"2015-09-10 07:37:35","commitOrder":6,"curCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-09-10 07:37:35","endLine":964,"groupId":"48435","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/c72b26e545b80beedfb8fe606f3a4db8fe762b.src","preCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"N"},{"authorDate":"2015-12-10 03:52:28","commitOrder":6,"curCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldEqualitor(\"a_s\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-12-10 03:52:28","endLine":1510,"groupId":"48435","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/9acab9fbe43bdf605cca5729e7ef7c3d98f4ea.src","preCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldEqualitor(\"a_s\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1482,"status":"M"}],"commitId":"e04981edc7995280b488197611847f9a7b201e2e","commitMessage":"@@@SOLR-8266: Remove Java Serialization from the Streaming API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1718947 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-10 03:52:28","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-12-11 10:28:25","codes":[{"authorDate":"2015-09-10 07:37:35","commitOrder":7,"curCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-09-10 07:37:35","endLine":964,"groupId":"48435","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/60/c72b26e545b80beedfb8fe606f3a4db8fe762b.src","preCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":578,"status":"N"},{"authorDate":"2015-12-11 10:28:25","commitOrder":7,"curCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-12-11 10:28:25","endLine":1521,"groupId":"48435","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/6d3bf1f6bc4d3e38076f5720d19cff1c936daf.src","preCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\",\"blah\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream, new FieldEqualitor(\"a_s\"));\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1490,"status":"M"}],"commitId":"60dca1b4f988e0a839ceb5e54ad85df70cc1f1f9","commitMessage":"@@@SOLR-8337: Add ReduceOperation and wire it into the ReducerStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719246 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-11 10:28:25","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":8,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":934,"groupId":"48435","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testFacetStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost,\n                                              \"collection1\",\n                                              paramsA,\n                                              buckets,\n                                              metrics,\n                                              sorts,\n                                              100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost,\n                                  \"collection1\",\n                                  paramsA,\n                                  buckets,\n                                  metrics,\n                                  sorts,\n                                  100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":581,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":8,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":1490,"groupId":"32958","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testZeroParallelReducerStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map paramsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n\n    ParallelStream pstream = new ParallelStream(zkHost, \"collection1\", rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1463,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":9,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":960,"groupId":"48435","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, paramsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":9,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1511,"groupId":"60687","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\",\"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1484,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-05-27 02:39:37","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":10,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":960,"groupId":"48435","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":607,"status":"N"},{"authorDate":"2016-05-27 02:39:37","commitOrder":10,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n    ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","date":"2016-05-27 02:39:37","endLine":1509,"groupId":"60687","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/ea31126212eca3af35418c2d2da7d922cecc93.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, rstream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1484,"status":"M"}],"commitId":"4d4030350b79303d6f358612473f4e68570858cc","commitMessage":"@@@SOLR-9141: Fix ClassCastException when using the /sql handler count() function with single-shard collections\n","date":"2016-05-27 02:39:37","modifiedFileCount":"2","status":"M","submitter":"jdyer1"},{"authorTime":"2016-05-27 02:39:37","codes":[{"authorDate":"2016-11-14 15:03:37","commitOrder":11,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), .01);\n    assertEquals(18, sumf.doubleValue(), .01);\n    assertEquals(0.0, mini.doubleValue(), .01);\n    assertEquals(1.0, minf.doubleValue(), .01);\n    assertEquals(14.0, maxi.doubleValue(), .01);\n    assertEquals(10.0, maxf.doubleValue(), .01);\n    assertEquals(4.25, avgi.doubleValue(), .01);\n    assertEquals(4.5, avgf.doubleValue(), .01);\n    assertEquals(4, count.doubleValue(), .01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38.0, sumi.doubleValue(), 0.01);\n    assertEquals(26.0, sumf.doubleValue(), 0.01);\n    assertEquals(3.0, mini.doubleValue(), 0.01);\n    assertEquals(3.0, minf.doubleValue(), 0.01);\n    assertEquals(13.0, maxi.doubleValue(), 0.01);\n    assertEquals(9.0, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.1);\n    assertEquals(26, sumf.doubleValue(), 0.1);\n    assertEquals(3, mini.doubleValue(), 0.1);\n    assertEquals(3, minf.doubleValue(), 0.1);\n    assertEquals(13, maxi.doubleValue(), 0.1);\n    assertEquals(9, maxf.doubleValue(), 0.1);\n    assertEquals(9.5, avgi.doubleValue(), 0.1);\n    assertEquals(6.5, avgf.doubleValue(), 0.1);\n    assertEquals(4, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4, mini.doubleValue(), 0.01);\n    assertEquals(4, minf.doubleValue(), 0.01);\n    assertEquals(11, maxi.doubleValue(), 0.01);\n    assertEquals(7, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.0001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.01);\n    assertEquals(26, sumf.doubleValue(), 0.01);\n    assertEquals(3, mini.doubleValue(), 0.01);\n    assertEquals(3, minf.doubleValue(), 0.01);\n    assertEquals(13, maxi.doubleValue(), 0.01);\n    assertEquals(9, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.1);\n    assertEquals(4.0, mini.doubleValue(), 0.1);\n    assertEquals(4.0, minf.doubleValue(), 0.1);\n    assertEquals(11.0, maxi.doubleValue(), 0.1);\n    assertEquals(7.0, maxf.doubleValue(), 0.1);\n    assertEquals(7.5, avgi.doubleValue(), 0.1);\n    assertEquals(5.5, avgf.doubleValue(), 0.1);\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":962,"groupId":"40524","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello0\"));\n    assertTrue(sumi.doubleValue() == 17.0D);\n    assertTrue(sumf.doubleValue() == 18.0D);\n    assertTrue(mini.doubleValue() == 0.0D);\n    assertTrue(minf.doubleValue() == 1.0D);\n    assertTrue(maxi.doubleValue() == 14.0D);\n    assertTrue(maxf.doubleValue() == 10.0D);\n    assertTrue(avgi.doubleValue() == 4.25D);\n    assertTrue(avgf.doubleValue() == 4.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello4\"));\n    assertTrue(sumi.longValue() == 15);\n    assertTrue(sumf.doubleValue() == 11.0D);\n    assertTrue(mini.doubleValue() == 4.0D);\n    assertTrue(minf.doubleValue() == 4.0D);\n    assertTrue(maxi.doubleValue() == 11.0D);\n    assertTrue(maxf.doubleValue() == 7.0D);\n    assertTrue(avgi.doubleValue() == 7.5D);\n    assertTrue(avgf.doubleValue() == 5.5D);\n    assertTrue(count.doubleValue() == 2);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":609,"status":"M"},{"authorDate":"2016-05-27 02:39:37","commitOrder":11,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n    ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","date":"2016-05-27 02:39:37","endLine":1509,"groupId":"60687","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/ea31126212eca3af35418c2d2da7d922cecc93.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n    ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1484,"status":"N"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":12,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), .01);\n    assertEquals(18, sumf.doubleValue(), .01);\n    assertEquals(0.0, mini.doubleValue(), .01);\n    assertEquals(1.0, minf.doubleValue(), .01);\n    assertEquals(14.0, maxi.doubleValue(), .01);\n    assertEquals(10.0, maxf.doubleValue(), .01);\n    assertEquals(4.25, avgi.doubleValue(), .01);\n    assertEquals(4.5, avgf.doubleValue(), .01);\n    assertEquals(4, count.doubleValue(), .01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38.0, sumi.doubleValue(), 0.01);\n    assertEquals(26.0, sumf.doubleValue(), 0.01);\n    assertEquals(3.0, mini.doubleValue(), 0.01);\n    assertEquals(3.0, minf.doubleValue(), 0.01);\n    assertEquals(13.0, maxi.doubleValue(), 0.01);\n    assertEquals(9.0, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.1);\n    assertEquals(26, sumf.doubleValue(), 0.1);\n    assertEquals(3, mini.doubleValue(), 0.1);\n    assertEquals(3, minf.doubleValue(), 0.1);\n    assertEquals(13, maxi.doubleValue(), 0.1);\n    assertEquals(9, maxf.doubleValue(), 0.1);\n    assertEquals(9.5, avgi.doubleValue(), 0.1);\n    assertEquals(6.5, avgf.doubleValue(), 0.1);\n    assertEquals(4, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4, mini.doubleValue(), 0.01);\n    assertEquals(4, minf.doubleValue(), 0.01);\n    assertEquals(11, maxi.doubleValue(), 0.01);\n    assertEquals(7, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.0001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.01);\n    assertEquals(26, sumf.doubleValue(), 0.01);\n    assertEquals(3, mini.doubleValue(), 0.01);\n    assertEquals(3, minf.doubleValue(), 0.01);\n    assertEquals(13, maxi.doubleValue(), 0.01);\n    assertEquals(9, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.1);\n    assertEquals(4.0, mini.doubleValue(), 0.1);\n    assertEquals(4.0, minf.doubleValue(), 0.1);\n    assertEquals(11.0, maxi.doubleValue(), 0.1);\n    assertEquals(7.0, maxf.doubleValue(), 0.1);\n    assertEquals(7.5, avgi.doubleValue(), 0.1);\n    assertEquals(5.5, avgf.doubleValue(), 0.1);\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":976,"groupId":"40524","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), .01);\n    assertEquals(18, sumf.doubleValue(), .01);\n    assertEquals(0.0, mini.doubleValue(), .01);\n    assertEquals(1.0, minf.doubleValue(), .01);\n    assertEquals(14.0, maxi.doubleValue(), .01);\n    assertEquals(10.0, maxf.doubleValue(), .01);\n    assertEquals(4.25, avgi.doubleValue(), .01);\n    assertEquals(4.5, avgf.doubleValue(), .01);\n    assertEquals(4, count.doubleValue(), .01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38.0, sumi.doubleValue(), 0.01);\n    assertEquals(26.0, sumf.doubleValue(), 0.01);\n    assertEquals(3.0, mini.doubleValue(), 0.01);\n    assertEquals(3.0, minf.doubleValue(), 0.01);\n    assertEquals(13.0, maxi.doubleValue(), 0.01);\n    assertEquals(9.0, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.1);\n    assertEquals(26, sumf.doubleValue(), 0.1);\n    assertEquals(3, mini.doubleValue(), 0.1);\n    assertEquals(3, minf.doubleValue(), 0.1);\n    assertEquals(13, maxi.doubleValue(), 0.1);\n    assertEquals(9, maxf.doubleValue(), 0.1);\n    assertEquals(9.5, avgi.doubleValue(), 0.1);\n    assertEquals(6.5, avgf.doubleValue(), 0.1);\n    assertEquals(4, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4, mini.doubleValue(), 0.01);\n    assertEquals(4, minf.doubleValue(), 0.01);\n    assertEquals(11, maxi.doubleValue(), 0.01);\n    assertEquals(7, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTION, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.0001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.01);\n    assertEquals(26, sumf.doubleValue(), 0.01);\n    assertEquals(3, mini.doubleValue(), 0.01);\n    assertEquals(3, minf.doubleValue(), 0.01);\n    assertEquals(13, maxi.doubleValue(), 0.01);\n    assertEquals(9, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.1);\n    assertEquals(4.0, mini.doubleValue(), 0.1);\n    assertEquals(4.0, minf.doubleValue(), 0.1);\n    assertEquals(11.0, maxi.doubleValue(), 0.1);\n    assertEquals(7.0, maxf.doubleValue(), 0.1);\n    assertEquals(7.5, avgi.doubleValue(), 0.1);\n    assertEquals(5.5, avgf.doubleValue(), 0.1);\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":623,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":12,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n    ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":1767,"groupId":"60687","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n    ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1742,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":13,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":1081,"groupId":"40524","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n    Bucket[] buckets =  {new Bucket(\"a_s\")};\n\n    Metric[] metrics = {new SumMetric(\"a_i\"),\n                        new SumMetric(\"a_f\"),\n                        new MinMetric(\"a_i\"),\n                        new MinMetric(\"a_f\"),\n                        new MaxMetric(\"a_i\"),\n                        new MaxMetric(\"a_f\"),\n                        new MeanMetric(\"a_i\"),\n                        new MeanMetric(\"a_f\"),\n                        new CountMetric()};\n\n    FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n                                                   ComparatorOrder.ASCENDING)};\n\n    FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    List<Tuple> tuples = getTuples(facetStream);\n\n    assert(tuples.size() == 3);\n\n    \r\n\n    Tuple tuple = tuples.get(0);\n    String bucket = tuple.getString(\"a_s\");\n    Double sumi = tuple.getDouble(\"sum(a_i)\");\n    Double sumf = tuple.getDouble(\"sum(a_f)\");\n    Double mini = tuple.getDouble(\"min(a_i)\");\n    Double minf = tuple.getDouble(\"min(a_f)\");\n    Double maxi = tuple.getDouble(\"max(a_i)\");\n    Double maxf = tuple.getDouble(\"max(a_f)\");\n    Double avgi = tuple.getDouble(\"avg(a_i)\");\n    Double avgf = tuple.getDouble(\"avg(a_f)\");\n    Double count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), .01);\n    assertEquals(18, sumf.doubleValue(), .01);\n    assertEquals(0.0, mini.doubleValue(), .01);\n    assertEquals(1.0, minf.doubleValue(), .01);\n    assertEquals(14.0, maxi.doubleValue(), .01);\n    assertEquals(10.0, maxf.doubleValue(), .01);\n    assertEquals(4.25, avgi.doubleValue(), .01);\n    assertEquals(4.5, avgf.doubleValue(), .01);\n    assertEquals(4, count.doubleValue(), .01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38.0, sumi.doubleValue(), 0.01);\n    assertEquals(26.0, sumf.doubleValue(), 0.01);\n    assertEquals(3.0, mini.doubleValue(), 0.01);\n    assertEquals(3.0, minf.doubleValue(), 0.01);\n    assertEquals(13.0, maxi.doubleValue(), 0.01);\n    assertEquals(9.0, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    \r\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.1);\n    assertEquals(26, sumf.doubleValue(), 0.1);\n    assertEquals(3, mini.doubleValue(), 0.1);\n    assertEquals(3, minf.doubleValue(), 0.1);\n    assertEquals(13, maxi.doubleValue(), 0.1);\n    assertEquals(9, maxf.doubleValue(), 0.1);\n    assertEquals(9.5, avgi.doubleValue(), 0.1);\n    assertEquals(6.5, avgf.doubleValue(), 0.1);\n    assertEquals(4, count.doubleValue(), 0.1);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4.0, mini.doubleValue(), 0.01);\n    assertEquals(4.0, minf.doubleValue(), 0.01);\n    assertEquals(11.0, maxi.doubleValue(), 0.01);\n    assertEquals(7.0, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n    facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11, sumf.doubleValue(), 0.01);\n    assertEquals(4, mini.doubleValue(), 0.01);\n    assertEquals(4, minf.doubleValue(), 0.01);\n    assertEquals(11, maxi.doubleValue(), 0.01);\n    assertEquals(7, maxf.doubleValue(), 0.01);\n    assertEquals(7.5, avgi.doubleValue(), 0.01);\n    assertEquals(5.5, avgf.doubleValue(), 0.01);\n    assertEquals(2, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertTrue(bucket.equals(\"hello3\"));\n    assertTrue(sumi.doubleValue() == 38.0D);\n    assertTrue(sumf.doubleValue() == 26.0D);\n    assertTrue(mini.doubleValue() == 3.0D);\n    assertTrue(minf.doubleValue() == 3.0D);\n    assertTrue(maxi.doubleValue() == 13.0D);\n    assertTrue(maxf.doubleValue() == 9.0D);\n    assertTrue(avgi.doubleValue() == 9.5D);\n    assertTrue(avgf.doubleValue() == 6.5D);\n    assertTrue(count.doubleValue() == 4);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.01);\n    assertEquals(4.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    \r\n\n    sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n    facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n    tuples = getTuples(facetStream);\n\n    assertEquals(3, tuples.size());\n\n    tuple = tuples.get(0);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello0\", bucket);\n    assertEquals(17, sumi.doubleValue(), 0.01);\n    assertEquals(18, sumf.doubleValue(), 0.01);\n    assertEquals(0, mini.doubleValue(), 0.01);\n    assertEquals(1, minf.doubleValue(), 0.01);\n    assertEquals(14, maxi.doubleValue(), 0.01);\n    assertEquals(10, maxf.doubleValue(), 0.01);\n    assertEquals(4.25, avgi.doubleValue(), 0.0001);\n    assertEquals(4.5, avgf.doubleValue(), 0.001);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(1);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello3\", bucket);\n    assertEquals(38, sumi.doubleValue(), 0.01);\n    assertEquals(26, sumf.doubleValue(), 0.01);\n    assertEquals(3, mini.doubleValue(), 0.01);\n    assertEquals(3, minf.doubleValue(), 0.01);\n    assertEquals(13, maxi.doubleValue(), 0.01);\n    assertEquals(9, maxf.doubleValue(), 0.01);\n    assertEquals(9.5, avgi.doubleValue(), 0.01);\n    assertEquals(6.5, avgf.doubleValue(), 0.01);\n    assertEquals(4, count.doubleValue(), 0.01);\n\n    tuple = tuples.get(2);\n    bucket = tuple.getString(\"a_s\");\n    sumi = tuple.getDouble(\"sum(a_i)\");\n    sumf = tuple.getDouble(\"sum(a_f)\");\n    mini = tuple.getDouble(\"min(a_i)\");\n    minf = tuple.getDouble(\"min(a_f)\");\n    maxi = tuple.getDouble(\"max(a_i)\");\n    maxf = tuple.getDouble(\"max(a_f)\");\n    avgi = tuple.getDouble(\"avg(a_i)\");\n    avgf = tuple.getDouble(\"avg(a_f)\");\n    count = tuple.getDouble(\"count(*)\");\n\n    assertEquals(\"hello4\", bucket);\n    assertEquals(15, sumi.longValue());\n    assertEquals(11.0, sumf.doubleValue(), 0.1);\n    assertEquals(4.0, mini.doubleValue(), 0.1);\n    assertEquals(4.0, minf.doubleValue(), 0.1);\n    assertEquals(11.0, maxi.doubleValue(), 0.1);\n    assertEquals(7.0, maxf.doubleValue(), 0.1);\n    assertEquals(7.5, avgi.doubleValue(), 0.1);\n    assertEquals(5.5, avgf.doubleValue(), 0.1);\n    assertEquals(2, count.doubleValue(), 0.1);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":720,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":13,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n      ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n","date":"2017-04-12 03:24:42","endLine":1939,"groupId":"19591","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ReducerStream rstream = new ReducerStream(stream,\n                                              new FieldEqualitor(\"a_s\"),\n                                              new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n    ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    attachStreamFactory(pstream);\n    List<Tuple> tuples = getTuples(pstream);\n    assert(tuples.size() == 0);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1906,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2018-09-12 01:58:04","commitOrder":14,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, -1);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-09-12 01:58:04","endLine":1091,"groupId":"40524","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/3ec36a69d72f33c6ab6be240a77ac4b92eb476.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":14,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n      ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n","date":"2017-04-12 03:24:42","endLine":1939,"groupId":"19591","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n      ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1906,"status":"N"}],"commitId":"d35d2063a817b4b4a6975115860624686afe8964","commitMessage":"@@@SOLR-11836: FacetStream works with bucketSizeLimit of -1 which will fetch all the buckets\n","date":"2018-09-12 01:58:04","modifiedFileCount":"2","status":"M","submitter":"Varun Thacker"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-09-12 01:58:04","commitOrder":15,"curCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, -1);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2018-09-12 01:58:04","endLine":1091,"groupId":"10867","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"testFacetStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ea/3ec36a69d72f33c6ab6be240a77ac4b92eb476.src","preCode":"  public void testFacetStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f\", \"sort\", \"a_s asc\");\n\n      Bucket[] buckets = {new Bucket(\"a_s\")};\n\n      Metric[] metrics = {new SumMetric(\"a_i\"),\n          new SumMetric(\"a_f\"),\n          new MinMetric(\"a_i\"),\n          new MinMetric(\"a_f\"),\n          new MaxMetric(\"a_i\"),\n          new MaxMetric(\"a_f\"),\n          new MeanMetric(\"a_i\"),\n          new MeanMetric(\"a_f\"),\n          new CountMetric()};\n\n      FieldComparator[] sorts = {new FieldComparator(\"sum(a_i)\",\n          ComparatorOrder.ASCENDING)};\n\n      FacetStream facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      List<Tuple> tuples = getTuples(facetStream);\n\n      assert (tuples.size() == 3);\n\n      \r\n\n      Tuple tuple = tuples.get(0);\n      String bucket = tuple.getString(\"a_s\");\n      Double sumi = tuple.getDouble(\"sum(a_i)\");\n      Double sumf = tuple.getDouble(\"sum(a_f)\");\n      Double mini = tuple.getDouble(\"min(a_i)\");\n      Double minf = tuple.getDouble(\"min(a_f)\");\n      Double maxi = tuple.getDouble(\"max(a_i)\");\n      Double maxf = tuple.getDouble(\"max(a_f)\");\n      Double avgi = tuple.getDouble(\"avg(a_i)\");\n      Double avgf = tuple.getDouble(\"avg(a_f)\");\n      Double count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), .01);\n      assertEquals(18, sumf.doubleValue(), .01);\n      assertEquals(0.0, mini.doubleValue(), .01);\n      assertEquals(1.0, minf.doubleValue(), .01);\n      assertEquals(14.0, maxi.doubleValue(), .01);\n      assertEquals(10.0, maxf.doubleValue(), .01);\n      assertEquals(4.25, avgi.doubleValue(), .01);\n      assertEquals(4.5, avgf.doubleValue(), .01);\n      assertEquals(4, count.doubleValue(), .01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38.0, sumi.doubleValue(), 0.01);\n      assertEquals(26.0, sumf.doubleValue(), 0.01);\n      assertEquals(3.0, mini.doubleValue(), 0.01);\n      assertEquals(3.0, minf.doubleValue(), 0.01);\n      assertEquals(13.0, maxi.doubleValue(), 0.01);\n      assertEquals(9.0, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"sum(a_i)\", ComparatorOrder.DESCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      \r\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.1);\n      assertEquals(26, sumf.doubleValue(), 0.1);\n      assertEquals(3, mini.doubleValue(), 0.1);\n      assertEquals(3, minf.doubleValue(), 0.1);\n      assertEquals(13, maxi.doubleValue(), 0.1);\n      assertEquals(9, maxf.doubleValue(), 0.1);\n      assertEquals(9.5, avgi.doubleValue(), 0.1);\n      assertEquals(6.5, avgf.doubleValue(), 0.1);\n      assertEquals(4, count.doubleValue(), 0.1);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4.0, mini.doubleValue(), 0.01);\n      assertEquals(4.0, minf.doubleValue(), 0.01);\n      assertEquals(11.0, maxi.doubleValue(), 0.01);\n      assertEquals(7.0, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.DESCENDING);\n\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11, sumf.doubleValue(), 0.01);\n      assertEquals(4, mini.doubleValue(), 0.01);\n      assertEquals(4, minf.doubleValue(), 0.01);\n      assertEquals(11, maxi.doubleValue(), 0.01);\n      assertEquals(7, maxf.doubleValue(), 0.01);\n      assertEquals(7.5, avgi.doubleValue(), 0.01);\n      assertEquals(5.5, avgf.doubleValue(), 0.01);\n      assertEquals(2, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertTrue(bucket.equals(\"hello3\"));\n      assertTrue(sumi.doubleValue() == 38.0D);\n      assertTrue(sumf.doubleValue() == 26.0D);\n      assertTrue(mini.doubleValue() == 3.0D);\n      assertTrue(minf.doubleValue() == 3.0D);\n      assertTrue(maxi.doubleValue() == 13.0D);\n      assertTrue(maxf.doubleValue() == 9.0D);\n      assertTrue(avgi.doubleValue() == 9.5D);\n      assertTrue(avgf.doubleValue() == 6.5D);\n      assertTrue(count.doubleValue() == 4);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.01);\n      assertEquals(4.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      \r\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, 100);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n      tuple = tuples.get(0);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello0\", bucket);\n      assertEquals(17, sumi.doubleValue(), 0.01);\n      assertEquals(18, sumf.doubleValue(), 0.01);\n      assertEquals(0, mini.doubleValue(), 0.01);\n      assertEquals(1, minf.doubleValue(), 0.01);\n      assertEquals(14, maxi.doubleValue(), 0.01);\n      assertEquals(10, maxf.doubleValue(), 0.01);\n      assertEquals(4.25, avgi.doubleValue(), 0.0001);\n      assertEquals(4.5, avgf.doubleValue(), 0.001);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(1);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello3\", bucket);\n      assertEquals(38, sumi.doubleValue(), 0.01);\n      assertEquals(26, sumf.doubleValue(), 0.01);\n      assertEquals(3, mini.doubleValue(), 0.01);\n      assertEquals(3, minf.doubleValue(), 0.01);\n      assertEquals(13, maxi.doubleValue(), 0.01);\n      assertEquals(9, maxf.doubleValue(), 0.01);\n      assertEquals(9.5, avgi.doubleValue(), 0.01);\n      assertEquals(6.5, avgf.doubleValue(), 0.01);\n      assertEquals(4, count.doubleValue(), 0.01);\n\n      tuple = tuples.get(2);\n      bucket = tuple.getString(\"a_s\");\n      sumi = tuple.getDouble(\"sum(a_i)\");\n      sumf = tuple.getDouble(\"sum(a_f)\");\n      mini = tuple.getDouble(\"min(a_i)\");\n      minf = tuple.getDouble(\"min(a_f)\");\n      maxi = tuple.getDouble(\"max(a_i)\");\n      maxf = tuple.getDouble(\"max(a_f)\");\n      avgi = tuple.getDouble(\"avg(a_i)\");\n      avgf = tuple.getDouble(\"avg(a_f)\");\n      count = tuple.getDouble(\"count(*)\");\n\n      assertEquals(\"hello4\", bucket);\n      assertEquals(15, sumi.longValue());\n      assertEquals(11.0, sumf.doubleValue(), 0.1);\n      assertEquals(4.0, mini.doubleValue(), 0.1);\n      assertEquals(4.0, minf.doubleValue(), 0.1);\n      assertEquals(11.0, maxi.doubleValue(), 0.1);\n      assertEquals(7.0, maxf.doubleValue(), 0.1);\n      assertEquals(7.5, avgi.doubleValue(), 0.1);\n      assertEquals(5.5, avgf.doubleValue(), 0.1);\n      assertEquals(2, count.doubleValue(), 0.1);\n\n      sorts[0] = new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING);\n\n      facetStream = new FacetStream(zkHost, COLLECTIONORALIAS, sParamsA, buckets, metrics, sorts, -1);\n      facetStream.setStreamContext(streamContext);\n      tuples = getTuples(facetStream);\n\n      assertEquals(3, tuples.size());\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":721,"status":"N"},{"authorDate":"2018-11-28 00:21:42","commitOrder":15,"curCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"a_s:blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\", \"qt\", \"/export\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n      ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n","date":"2018-11-28 00:22:02","endLine":2007,"groupId":"10867","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"testZeroParallelReducerStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/85f2ce458e9299a8c12edad6d0e2bcf87128db.src","preCode":"  public void testZeroParallelReducerStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    try {\n      SolrParams sParamsA = mapParams(\"q\", \"blah\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_s asc,a_f asc\", \"partitionKeys\", \"a_s\");\n      CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n      ReducerStream rstream = new ReducerStream(stream,\n          new FieldEqualitor(\"a_s\"),\n          new GroupOperation(new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING), 2));\n      ParallelStream pstream = parallelStream(rstream, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n      attachStreamFactory(pstream);\n      pstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(pstream);\n      assert (tuples.size() == 0);\n    } finally {\n      solrClientCache.close();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1974,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"}]
