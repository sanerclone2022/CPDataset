[{"authorTime":"2016-08-11 07:59:31","codes":[{"authorDate":"2016-08-11 07:59:31","commitOrder":2,"curCode":"  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","date":"2016-10-18 01:55:26","endLine":67,"groupId":"47312","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteSnapshotIndexFiles","params":"(SolrCorecore@Directorydir@finallonggen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/57baf56e50fa727e3709535003b2483595542c.src","preCode":"  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2016-08-11 07:59:31","commitOrder":2,"curCode":"  public static void deleteNonSnapshotIndexFiles(SolrCore core, Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    final Set<Long> genNumbers = new HashSet<>();\n    for (SnapshotMetaData m : snapshots) {\n      genNumbers.add(m.getGenerationNumber());\n    }\n\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (!genNumbers.contains(ic.getGeneration())) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","date":"2016-10-18 01:55:26","endLine":98,"groupId":"10208","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteNonSnapshotIndexFiles","params":"(SolrCorecore@Directorydir@Collection<SnapshotMetaData>snapshots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/57baf56e50fa727e3709535003b2483595542c.src","preCode":"  public static void deleteNonSnapshotIndexFiles(SolrCore core, Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    final Set<Long> genNumbers = new HashSet<>();\n    for (SnapshotMetaData m : snapshots) {\n      genNumbers.add(m.getGenerationNumber());\n    }\n\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (!genNumbers.contains(ic.getGeneration())) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"MB"}],"commitId":"46aeb52588c6ecf298ee894a79fb162e4e3437fe","commitMessage":"@@@SOLR-9642: Refactor the snapshot cleanup mechanism to rely on Lucene\n\nThe current snapshot cleanup mechanism is based on reference counting\nthe index files shared between multiple segments. Since this mechanism\ncompletely skips the Lucene APIs.  it is not portable (e.g. it doesn't\nwork on 4.10.x version).\n\nThis patch provides an alternate implementation which relies exclusively\non Lucene IndexWriter (+ IndexDeletionPolicy) for cleanup.\n\nmend\n","date":"2016-10-18 01:55:26","modifiedFileCount":"7","status":"M","submitter":"Hrishikesh Gadre"},{"authorTime":"2020-04-18 08:40:32","codes":[{"authorDate":"2020-04-18 08:40:32","commitOrder":3,"curCode":"  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            }\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","date":"2020-04-18 08:40:32","endLine":242,"groupId":"122598","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"deleteSnapshotIndexFiles","params":"(SolrCorecore@Directorydir@finallonggen)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/0bea805589d15c79fa0927bff0b5a4400cab31.src","preCode":"  public static void deleteSnapshotIndexFiles(SolrCore core, Directory dir, final long gen) throws IOException {\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (gen == ic.getGeneration()) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"},{"authorDate":"2020-04-18 08:40:32","commitOrder":3,"curCode":"  public static void deleteNonSnapshotIndexFiles(SolrCore core, Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    final Set<Long> genNumbers = new HashSet<>();\n    for (SnapshotMetaData m : snapshots) {\n      genNumbers.add(m.getGenerationNumber());\n    }\n\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (!genNumbers.contains(ic.getGeneration())) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            }\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","date":"2020-04-18 08:40:32","endLine":275,"groupId":"122598","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"deleteNonSnapshotIndexFiles","params":"(SolrCorecore@Directorydir@Collection<SnapshotMetaData>snapshots)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/0bea805589d15c79fa0927bff0b5a4400cab31.src","preCode":"  public static void deleteNonSnapshotIndexFiles(SolrCore core, Directory dir, Collection<SnapshotMetaData> snapshots) throws IOException {\n    final Set<Long> genNumbers = new HashSet<>();\n    for (SnapshotMetaData m : snapshots) {\n      genNumbers.add(m.getGenerationNumber());\n    }\n\n    deleteSnapshotIndexFiles(core, dir, new IndexDeletionPolicy() {\n      @Override\n      public void onInit(List<? extends IndexCommit> commits) throws IOException {\n        for (IndexCommit ic : commits) {\n          if (!genNumbers.contains(ic.getGeneration())) {\n            log.info(\"Deleting non-snapshotted index commit with generation {}\", ic.getGeneration());\n            ic.delete();\n          }\n        }\n      }\n\n      @Override\n      public void onCommit(List<? extends IndexCommit> commits)\n          throws IOException {}\n    });\n  }\n","realPath":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":252,"status":"M"}],"commitId":"3af165b32ac8028a6c01ac9c9a6d2c808efa0e85","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-18 08:40:32","modifiedFileCount":"37","status":"M","submitter":"Erick Erickson"}]
