[{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public void missingFeatureWeightTest() {\n    final ModelException expectedException =\n        new ModelException(\"Model test5 lacks weight(s) for [constant5]\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5missing\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      createLinearModel(\"test5\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","date":"2016-11-02 01:50:14","endLine":180,"groupId":"22391","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"missingFeatureWeightTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/ee22482cbf1318220274a64aaaa89f66ed3864.src","preCode":"  public void missingFeatureWeightTest() {\n    final ModelException expectedException =\n        new ModelException(\"Model test5 lacks weight(s) for [constant5]\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5missing\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      createLinearModel(\"test5\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":158,"status":"B"},{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"  public void emptyFeaturesTest() {\n    final ModelException expectedException =\n        new ModelException(\"no features declared for model test6\");\n    try {\n      final List<Feature> features = getFeatures(new String[] {});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5missing\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test6\",\n          features, norms, \"test\", fstore.getFeatures(),\n          params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","date":"2016-11-02 01:50:14","endLine":205,"groupId":"9567","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyFeaturesTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/ee22482cbf1318220274a64aaaa89f66ed3864.src","preCode":"  public void emptyFeaturesTest() {\n    final ModelException expectedException =\n        new ModelException(\"no features declared for model test6\");\n    try {\n      final List<Feature> features = getFeatures(new String[] {});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5missing\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test6\",\n          features, norms, \"test\", fstore.getFeatures(),\n          params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"B"}],"commitId":"5a66b3bc089e4b3e73b1c41c4cdcd89b183b85e7","commitMessage":"@@@SOLR-8542: Adds Solr Learning to Rank (LTR) plugin for reranking results with machine learning models. (Michael Nilsson.  Diego Ceccarelli.  Joshua Pantony.  Jon Dorando.  Naveen Santhapuri.  Alessandro Benedetti.  David Grohmann.  Christine Poerschke)\n","date":"2016-11-02 01:50:14","modifiedFileCount":"0","status":"B","submitter":"Christine Poerschke"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void missingFeatureWeightTest() {\n    final ModelException expectedException =\n        new ModelException(\"Model test5 lacks weight(s) for [constant5]\");\n    final List<Feature> features = getFeatures(new String[]\n        {\"constant1\", \"constant5\"});\n    final List<Normalizer> norms =\n        new ArrayList<>(Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n\n    final Map<String,Object> weights = new HashMap<>();\n    weights.put(\"constant1\", 1d);\n    weights.put(\"constant5missing\", 1d);\n\n    Map<String,Object> params = new HashMap<>();\n    params.put(\"weights\", weights);\n    ModelException ex = expectThrows(ModelException.class, () -> {\n      createLinearModel(\"test5\",\n          features, norms, \"test\", fstore.getFeatures(), params);\n    });\n    assertEquals(expectedException.toString(), ex.toString());\n  }\n","date":"2019-08-03 15:30:49","endLine":178,"groupId":"101307","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"missingFeatureWeightTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/bba9105bfa9deb87fd18e017f57c694685a0dc.src","preCode":"  public void missingFeatureWeightTest() {\n    final ModelException expectedException =\n        new ModelException(\"Model test5 lacks weight(s) for [constant5]\");\n    try {\n      final List<Feature> features = getFeatures(new String[]\n          {\"constant1\", \"constant5\"});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5missing\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      createLinearModel(\"test5\",\n          features, norms, \"test\", fstore.getFeatures(),\n              params);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":159,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":2,"curCode":"  public void emptyFeaturesTest() {\n    final ModelException expectedException =\n        new ModelException(\"no features declared for model test6\");\n    final List<Feature> features = getFeatures(new String[] {});\n    final List<Normalizer> norms =\n        new ArrayList<>(Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n    final Map<String,Object> weights = new HashMap<>();\n    weights.put(\"constant1\", 1d);\n    weights.put(\"constant5missing\", 1d);\n\n    Map<String,Object> params = new HashMap<>();\n    params.put(\"weights\", weights);\n    ModelException ex = expectThrows(ModelException.class, () -> {\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test6\",\n          features, norms, \"test\", fstore.getFeatures(),\n          params);\n      store.addModel(ltrScoringModel);\n    });\n    assertEquals(expectedException.toString(), ex.toString());\n  }\n","date":"2019-08-03 15:30:49","endLine":200,"groupId":"101307","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"emptyFeaturesTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/bba9105bfa9deb87fd18e017f57c694685a0dc.src","preCode":"  public void emptyFeaturesTest() {\n    final ModelException expectedException =\n        new ModelException(\"no features declared for model test6\");\n    try {\n      final List<Feature> features = getFeatures(new String[] {});\n      final List<Normalizer> norms =\n        new ArrayList<Normalizer>(\n            Collections.nCopies(features.size(),IdentityNormalizer.INSTANCE));\n      final Map<String,Object> weights = new HashMap<>();\n      weights.put(\"constant1\", 1d);\n      weights.put(\"constant5missing\", 1d);\n\n      Map<String,Object> params = new HashMap<String,Object>();\n      params.put(\"weights\", weights);\n      final LTRScoringModel ltrScoringModel = createLinearModel(\"test6\",\n          features, norms, \"test\", fstore.getFeatures(),\n          params);\n      store.addModel(ltrScoringModel);\n      fail(\"unexpectedly got here instead of catching \"+expectedException);\n    } catch (ModelException actualException) {\n      assertEquals(expectedException.toString(), actualException.toString());\n    }\n  }\n","realPath":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestLinearModel.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"}]
