[{"authorTime":"2018-12-13 17:51:56","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":2,"curCode":"  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        if (cores.getAuthenticationPlugin() == null) {\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n","date":"2018-12-17 00:58:20","endLine":246,"groupId":"15825","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"(Http2SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0e70087248a30fe837ba874aa2feb4c8f4a000.src","preCode":"  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        if (cores.getAuthenticationPlugin() == null) {\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"},{"authorDate":"2018-12-13 17:51:56","commitOrder":2,"curCode":"    public void process(HttpRequest httpRequest, HttpContext httpContext) throws HttpException, IOException {\n      if (cores.getAuthenticationPlugin() == null) {\n        return;\n      }\n      if (!cores.getAuthenticationPlugin().interceptInternodeRequest(httpRequest, httpContext)) {\n        log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n        setHeader(httpRequest);\n      } else {\n        log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n      }\n    }\n","date":"2018-12-13 17:51:56","endLine":253,"groupId":"28690","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"process","params":"(HttpRequesthttpRequest@HttpContexthttpContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/b96d5c002e41e1444ab671a49901447d7ed745.src","preCode":"    public void process(HttpRequest httpRequest, HttpContext httpContext) throws HttpException, IOException {\n      if (cores.getAuthenticationPlugin() == null) {\n        return;\n      }\n      if (!cores.getAuthenticationPlugin().interceptInternodeRequest(httpRequest, httpContext)) {\n        log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n        setHeader(httpRequest);\n      } else {\n        log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"NB"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2018-12-13 17:51:56","codes":[{"authorDate":"2020-01-23 00:32:25","commitOrder":3,"curCode":"  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        log.trace(\"onQueued: {}\", request);\n        if (cores.getAuthenticationPlugin() == null) {\n          log.trace(\"no authentication plugin, skipping\");\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n","date":"2020-01-23 00:32:25","endLine":248,"groupId":"15825","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"(Http2SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/8334a6c84632566ef5fc899998e4a578799e9f.src","preCode":"  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        if (cores.getAuthenticationPlugin() == null) {\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"},{"authorDate":"2018-12-13 17:51:56","commitOrder":3,"curCode":"    public void process(HttpRequest httpRequest, HttpContext httpContext) throws HttpException, IOException {\n      if (cores.getAuthenticationPlugin() == null) {\n        return;\n      }\n      if (!cores.getAuthenticationPlugin().interceptInternodeRequest(httpRequest, httpContext)) {\n        log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n        setHeader(httpRequest);\n      } else {\n        log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n      }\n    }\n","date":"2018-12-13 17:51:56","endLine":253,"groupId":"28690","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"process","params":"(HttpRequesthttpRequest@HttpContexthttpContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/b96d5c002e41e1444ab671a49901447d7ed745.src","preCode":"    public void process(HttpRequest httpRequest, HttpContext httpContext) throws HttpException, IOException {\n      if (cores.getAuthenticationPlugin() == null) {\n        return;\n      }\n      if (!cores.getAuthenticationPlugin().interceptInternodeRequest(httpRequest, httpContext)) {\n        log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n        setHeader(httpRequest);\n      } else {\n        log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":243,"status":"N"}],"commitId":"95dfddc7d4eaaa5997ccd69797dbe1fd966f32ac","commitMessage":"@@@SOLR-12859: Fixed DocExpirationUpdateProcessorFactory to work with BasicAuth and other auth plugins that delegate to PKI for server initiated node-to-node communication.\n","date":"2020-01-23 00:32:25","modifiedFileCount":"4","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2020-04-19 07:08:15","codes":[{"authorDate":"2020-04-19 07:08:15","commitOrder":4,"curCode":"  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        log.trace(\"onQueued: {}\", request);\n        if (cores.getAuthenticationPlugin() == null) {\n          log.trace(\"no authentication plugin, skipping\");\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          if (log.isDebugEnabled()) {\n            log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          }\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n          }\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n","date":"2020-04-19 07:08:15","endLine":252,"groupId":"102026","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setup","params":"(Http2SolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/7c04a09fd508a1d097a33237eb975ee23aa996.src","preCode":"  public void setup(Http2SolrClient client) {\n    final HttpListenerFactory.RequestResponseListener listener = new HttpListenerFactory.RequestResponseListener() {\n      @Override\n      public void onQueued(Request request) {\n        log.trace(\"onQueued: {}\", request);\n        if (cores.getAuthenticationPlugin() == null) {\n          log.trace(\"no authentication plugin, skipping\");\n          return;\n        }\n        if (!cores.getAuthenticationPlugin().interceptInternodeRequest(request)) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n          generateToken().ifPresent(s -> request.header(HEADER, myNodeName + \" \" + s));\n        } else {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    };\n    client.addListenerFactory(() -> listener);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"M"},{"authorDate":"2020-04-19 07:08:15","commitOrder":4,"curCode":"    public void process(HttpRequest httpRequest, HttpContext httpContext) throws HttpException, IOException {\n      if (cores.getAuthenticationPlugin() == null) {\n        return;\n      }\n      if (!cores.getAuthenticationPlugin().interceptInternodeRequest(httpRequest, httpContext)) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n        }\n        setHeader(httpRequest);\n      } else {\n        if (log.isDebugEnabled()) {\n          log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n        }\n      }\n    }\n","date":"2020-04-19 07:08:15","endLine":285,"groupId":"102026","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"process","params":"(HttpRequesthttpRequest@HttpContexthttpContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/7c04a09fd508a1d097a33237eb975ee23aa996.src","preCode":"    public void process(HttpRequest httpRequest, HttpContext httpContext) throws HttpException, IOException {\n      if (cores.getAuthenticationPlugin() == null) {\n        return;\n      }\n      if (!cores.getAuthenticationPlugin().interceptInternodeRequest(httpRequest, httpContext)) {\n        log.debug(\"{} secures this internode request\", this.getClass().getSimpleName());\n        setHeader(httpRequest);\n      } else {\n        log.debug(\"{} secures this internode request\", cores.getAuthenticationPlugin().getClass().getSimpleName());\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":271,"status":"M"}],"commitId":"1f1cdbffdf607db961049d1417b18dc6cbf53d7a","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-19 07:08:15","modifiedFileCount":"56","status":"M","submitter":"Erick Erickson"}]
