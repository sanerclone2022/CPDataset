[{"authorTime":"2019-01-23 20:03:01","codes":[{"authorDate":"2019-01-23 20:03:01","commitOrder":3,"curCode":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","date":"2019-01-23 20:03:01","endLine":255,"groupId":"934","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"executeCommand","params":"(Stringurl@HttpClientcl@Stringpayload@JsonWebSignaturejws)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/621e8a9d2d9c2baf231f5c560707583fcdd020.src","preCode":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"},{"authorDate":"2019-01-23 20:03:01","commitOrder":3,"curCode":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","date":"2019-01-23 20:03:01","endLine":365,"groupId":"934","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"executeCommand","params":"(Stringurl@HttpClientcl@Stringpayload@Stringuser@Stringpwd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/33703767fe5f69036642917fa57b3db391f96a.src","preCode":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":352,"status":"MB"}],"commitId":"ea2c8ba38e32a9f1e7d11cf3687c5469bfd6414c","commitMessage":"@@@SOLR-12121: JWT Token authentication plugin with OpenID Connect implicit flow login through Admin UI\n","date":"2019-01-23 20:03:01","modifiedFileCount":"5","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2019-08-07 06:08:26","codes":[{"authorDate":"2019-01-23 20:03:01","commitOrder":4,"curCode":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","date":"2019-01-23 20:03:01","endLine":255,"groupId":"934","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"executeCommand","params":"(Stringurl@HttpClientcl@Stringpayload@JsonWebSignaturejws)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/621e8a9d2d9c2baf231f5c560707583fcdd020.src","preCode":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"N"},{"authorDate":"2019-08-07 06:08:26","commitOrder":4,"curCode":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    final Set<Map.Entry<String,Object>> initialPlugins = getAuthPlugins(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    \r\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet = getAuthPlugins(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n","date":"2019-08-07 06:08:26","endLine":397,"groupId":"934","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"executeCommand","params":"(Stringurl@HttpClientcl@Stringpayload@Stringuser@Stringpwd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/5677fdba902cbe9016ad65e5b059a4045e3601.src","preCode":"  public static void executeCommand(String url, HttpClient cl, String payload, String user, String pwd)\n      throws IOException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":367,"status":"M"}],"commitId":"878d332a0bd7374190a85a23d3a6241d930289f3","commitMessage":"@@@Harden BasicAuthIntegrationTest w/work around for SOLR-13464\n","date":"2019-08-07 06:08:26","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2019-08-13 05:03:27","codes":[{"authorDate":"2019-08-13 05:03:27","commitOrder":5,"curCode":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws)\n    throws Exception {\n    \n    \r\n    \r\n    \r\n    \r\n    \r\n    final Set<Map.Entry<String,Object>> initialPlugins\n      = getAuthPluginsInUseForCluster(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    \r\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet\n                        = getAuthPluginsInUseForCluster(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n    \n  }\n","date":"2019-08-13 05:03:54","endLine":279,"groupId":"102790","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"executeCommand","params":"(Stringurl@HttpClientcl@Stringpayload@JsonWebSignaturejws)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/0f655f1c358d50540178931fc8a75cbfa6045e.src","preCode":"  private void executeCommand(String url, HttpClient cl, String payload, JsonWebSignature jws) throws IOException, JoseException {\n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    if (jws != null)\n      setAuthorizationHeader(httpPost, \"Bearer \" + jws.getCompactSerialization());\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2019-08-13 05:03:27","commitOrder":5,"curCode":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    final Set<Map.Entry<String,Object>> initialPlugins\n      = getAuthPluginsInUseForCluster(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    \r\n    final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet\n                        = getAuthPluginsInUseForCluster(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n","date":"2019-08-13 05:03:54","endLine":381,"groupId":"102790","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"executeCommand","params":"(Stringurl@HttpClientcl@Stringpayload@Stringuser@Stringpwd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/97/5c25262279406287192601c42fc7145f53a4c7.src","preCode":"  public static void executeCommand(String url, HttpClient cl, String payload,\n                                    String user, String pwd) throws Exception {\n\n    \r\n    \r\n    \r\n    \r\n    \r\n    final Set<Map.Entry<String,Object>> initialPlugins = getAuthPlugins(url).entrySet();\n    \n    HttpPost httpPost;\n    HttpResponse r;\n    httpPost = new HttpPost(url);\n    setAuthorizationHeader(httpPost, makeBasicAuthHeader(user, pwd));\n    httpPost.setEntity(new ByteArrayEntity(payload.getBytes(UTF_8)));\n    httpPost.addHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n    r = cl.execute(httpPost);\n    String response = IOUtils.toString(r.getEntity().getContent(), StandardCharsets.UTF_8);\n    assertEquals(\"Non-200 response code. Response was \" + response, 200, r.getStatusLine().getStatusCode());\n    assertFalse(\"Response contained errors: \" + response, response.contains(\"errorMessages\"));\n    Utils.consumeFully(r.getEntity());\n\n    \r\n    final TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n    timeout.waitFor(\"core containers never fully updated their auth plugins\",\n                    () -> {\n                      final Set<Map.Entry<String,Object>> tmpSet = getAuthPlugins(url).entrySet();\n                      tmpSet.retainAll(initialPlugins);\n                      return tmpSet.isEmpty();\n                    });\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/BasicAuthIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"c7822c393e6affa77c233f9e8e9bf9d8aeb12578","commitMessage":"@@@SOLR-13464: Test work arounds\n\n * Refactor existing work around in BasicAuthIntegrationTest up into SolrCloudAuthTestCase for re-use in JWTAuthPluginIntegrationTest\n\n * Simplify BasicAuthOnSingleNodeTest and PKIAuthenticationIntegrationTest to use their existing (static) security settings on creation of MiniSolrCloud.  Since they no longer modify security.json once the nodes are alive.  the issue no longer affects them\n","date":"2019-08-13 05:03:54","modifiedFileCount":"5","status":"M","submitter":"Chris Hostetter"}]
