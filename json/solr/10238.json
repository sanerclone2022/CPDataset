[{"authorTime":"2019-06-19 10:09:13","codes":[{"authorDate":"2019-06-19 10:09:13","commitOrder":1,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","date":"2019-06-19 10:33:40","endLine":49,"groupId":"28013","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/9a9b10b87095bceb35c4f10daee1bba51f57ee.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NotNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"},{"authorDate":"2019-06-19 10:09:13","commitOrder":1,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2019-06-19 10:33:40","endLine":49,"groupId":"28013","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/dc/912fd3a7bae84a3e21cb2ec8b96dc791547de8.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IsNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"B"}],"commitId":"1dd98ca65dd90db6998fe54b56860e90d8f398d1","commitMessage":"@@@SOLR-13560: Add isNull and notNull Stream Evaluators\n","date":"2019-06-19 10:33:40","modifiedFileCount":"5","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2019-08-03 03:25:34","codes":[{"authorDate":"2019-08-03 03:25:34","commitOrder":2,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return false;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","date":"2019-08-03 03:38:26","endLine":53,"groupId":"28013","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/26/4135e579b7ba0d761193d1e7d307a551c8bb22.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NotNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2019-08-03 03:25:34","commitOrder":2,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return true;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2019-08-03 03:38:26","endLine":53,"groupId":"28013","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/778c399f37365aadc8b6a4bdee04d148c3914b.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IsNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"03a39666c0bd7969e267332fb282f1ba5f7a0866","commitMessage":"@@@SOLR-13667: Add upper.  lower.  trim and split Stream Evaluators\n","date":"2019-08-03 03:38:26","modifiedFileCount":"30","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":3,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return false;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      @SuppressWarnings({\"rawtypes\"})\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","date":"2020-06-08 09:31:51","endLine":54,"groupId":"28013","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/282d19ed6fa4472cfeb6aa589e468b59c8af26.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return false;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NotNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":3,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return true;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      @SuppressWarnings({\"rawtypes\"})\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2020-06-08 09:31:51","endLine":54,"groupId":"28013","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/0792227ad73b77d82be12a0efc5b4b0e1e8f56.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return true;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IsNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":37,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":4,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return false;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      String nullField = getStreamContext().getTupleContext().get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","date":"2021-06-03 06:17:26","endLine":51,"groupId":"10238","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/0cb74b71f21f4ba8b9f2d85af17d1103165984.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return false;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      @SuppressWarnings({\"rawtypes\"})\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/NotNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":4,"curCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return true;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      String nullField = getStreamContext().getTupleContext().get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2021-06-03 06:17:26","endLine":51,"groupId":"10238","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Object...values)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9b/a71ae07f9a97c37ac6d8212f06b4c13a5f0fc9.src","preCode":"  public Object doWork(Object ... values) throws IOException {\n\n    if(values[0] == null) {\n      return true;\n    }\n\n    if(values[0] instanceof String) {\n      \r\n      @SuppressWarnings({\"rawtypes\"})\n      Map tupleContext = getStreamContext().getTupleContext();\n      String nullField = (String)tupleContext.get(\"null\");\n      if(nullField != null && nullField.equals(values[0])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/IsNullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
