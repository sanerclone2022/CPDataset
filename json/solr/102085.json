[{"authorTime":"2014-05-17 00:39:56","codes":[{"authorDate":"2014-05-17 00:39:56","commitOrder":1,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2014-05-17 00:39:56","endLine":140,"groupId":"50086","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/1aa151f7e37959e40be2f2662b662d5355a9ae.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2014-05-17 00:39:56","commitOrder":1,"curCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n","date":"2014-05-17 00:39:56","endLine":109,"groupId":"9069","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@AtomicReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/65/67735d7ab332f744211fe4de9954ba987a2a2c.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"B"}],"commitId":"e2ba693a6ee11127897a25de1dbb7549ebe6ea3a","commitMessage":"@@@LUCENE-5666: Add UninvertingReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1595259 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-17 00:39:56","modifiedFileCount":"155","status":"B","submitter":"Robert Muir"},{"authorTime":"2014-09-24 07:51:55","codes":[{"authorDate":"2014-09-24 07:51:55","commitOrder":2,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":140,"groupId":"50086","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/745c814e724ccb6665c6d6cbca4d242e326685.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2014-09-24 07:51:55","commitOrder":2,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n","date":"2014-09-24 07:51:55","endLine":108,"groupId":"9069","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7b/6adbff1e7c632c42d1f89d4b14027c64b53bbd.src","preCode":"  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final AtomicReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<AtomicReaderContext> leaves = is.getIndexReader().leaves();\n        AtomicReader insaneLeaves[] = new AtomicReader[leaves.size()];\n        int upto = 0;\n        for (AtomicReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"85bf3181737a34e2d357f0c926d7ae8d07b9ae39","commitMessage":"@@@LUCENE-5569: *AtomicReader/AtomicReaderContext have been renamed to *LeafReader/LeafReaderContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1627178 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-24 07:51:55","modifiedFileCount":"459","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":3,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":156,"groupId":"9069","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/40/d9948b4f954b0113e655b9477a062b763411a9.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) {\n        return sindex.getOrd(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) {\n        return sindex.getOrd(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) {\n            mval.value = sindex.getOrd(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":3,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2016-10-03 03:18:22","endLine":114,"groupId":"9069","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/1700075118c72680a8d6d47d3ca2389f0e4e7e.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n     @Override\n      public int intVal(int doc) {\n        return (end - sindex.getOrd(doc+off) - 1);\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-06 03:10:22","codes":[{"authorDate":"2016-10-06 03:10:22","commitOrder":4,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2016-10-06 03:10:29","endLine":156,"groupId":"9069","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/75/6a1a690586d03713af589333c98cc664c29e29.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2016-10-06 03:10:22","commitOrder":4,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2016-10-06 03:10:29","endLine":114,"groupId":"9069","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/d13f032f52e9602936bf313ed6946aa58eed02.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getLeafReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"cae6b49a065bfbc5789d8bdcf3706c158c0fc10d","commitMessage":"@@@SOLR-9592: use correct leaf reader rather than top-level reader in SolrIndexReaderm.decorateDocValues\n","date":"2016-10-06 03:10:29","modifiedFileCount":"25","status":"M","submitter":"yonik"},{"authorTime":"2017-02-08 02:38:22","codes":[{"authorDate":"2017-02-08 02:38:22","commitOrder":5,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2017-02-08 02:38:22","endLine":156,"groupId":"9069","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/46/37df64517e0670cf8e4c25329493af505d5c4a.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2017-02-08 02:38:22","commitOrder":5,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2017-02-08 02:38:22","endLine":114,"groupId":"9069","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/79913184b6872e4d0027b404330b19f8440a75.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumericType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"}],"commitId":"59c41e2a6c685dd9ac943c69d12e9bfe2a7d380e","commitMessage":"@@@SOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n\nModify references to getNumericType() to use the new getNumberType(). NumberType is shared for the different numeric implementations supported in Solr (TrieFields and PointFields).\nCC SOLR-8396\n","date":"2017-02-08 02:38:22","modifiedFileCount":"27","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-08-01 02:24:11","codes":[{"authorDate":"2017-08-01 02:24:11","commitOrder":6,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2017-08-01 02:24:11","endLine":161,"groupId":"9069","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7c/d81426c1188cc35fc59996870e898ce2c97656.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2017-08-01 02:24:11","commitOrder":6,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2017-08-01 02:24:11","endLine":119,"groupId":"9069","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0a/da4d5aba19266785904439c498703fe3da32d8.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"88614dd15f80e832c90528e8b9b6d9abbaddbb93","commitMessage":"@@@SOLR-10919: ord & rord functions give confusing errors with PointFields\n","date":"2017-08-01 02:24:11","modifiedFileCount":"3","status":"M","submitter":"Steve Rowe"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":7,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2018-02-26 14:13:47","endLine":161,"groupId":"9069","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/819956e299d25845499b01a2fc082d1809d7af.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":7,"curCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\")  final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2018-02-26 14:13:47","endLine":119,"groupId":"9069","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Mapcontext@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/5dca3772c47adc0b7ffbb2a5222fb3b4000c97.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":8,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":161,"groupId":"9069","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/7a7f51b4b8a5023d8f1b4d9c3975c0f5f1dbb1.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-06-03 06:17:26","commitOrder":8,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\")  final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2021-06-03 06:17:26","endLine":119,"groupId":"9069","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/51213576a7b10e806bad15f6307b145f57e102.src","preCode":"  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\")  final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-09-07 21:28:06","codes":[{"authorDate":"2021-09-07 21:28:06","commitOrder":9,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader hidingLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          hidingLeaves[upto++] = NumericHidingLeafReader.wrap(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(hidingLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","date":"2021-09-07 21:28:06","endLine":161,"groupId":"102085","id":17,"instanceNumber":1,"isCurCommit":1,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/acf7f2aa4311194486dfd9f6f0af527d5237d3.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\") final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            \"ord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    return new IntDocValues(this) {\n\n      private int lastDocID;\n\n      private int getOrdForDoc(int docID) throws IOException {\n        if (docID < lastDocID) {\n          throw new IllegalArgumentException(\"docs out of order: lastDocID=\" + lastDocID + \" docID=\" + docID);\n        }\n        if (docID > sindex.docID()) {\n          sindex.advance(docID);\n        }\n        if (docID == sindex.docID()) {\n          return sindex.ordValue();\n        } else {\n          return -1;\n        }\n      }\n      \n      protected String toTerm(String readableValue) {\n        return readableValue;\n      }\n      @Override\n      public int intVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int ordVal(int doc) throws IOException {\n        return getOrdForDoc(doc+off);\n      }\n      @Override\n      public int numOrd() {\n        return sindex.getValueCount();\n      }\n\n      @Override\n      public boolean exists(int doc) throws IOException {\n        return getOrdForDoc(doc+off) != 0;\n      }\n\n      @Override\n      public ValueFiller getValueFiller() {\n        return new ValueFiller() {\n          private final MutableValueInt mval = new MutableValueInt();\n\n          @Override\n          public MutableValue getValue() {\n            return mval;\n          }\n\n          @Override\n          public void fillValue(int doc) throws IOException {\n            mval.value = getOrdForDoc(doc);\n            mval.exists = mval.value!=0;\n          }\n        };\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/OrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2021-09-07 21:28:06","commitOrder":9,"curCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\")  final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader hidingLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          hidingLeaves[upto++] = NumericHidingLeafReader.wrap(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(hidingLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","date":"2021-09-07 21:28:06","endLine":119,"groupId":"102085","id":18,"instanceNumber":2,"isCurCommit":1,"methodName":"getValues","params":"(Map<Object@Object>context@LeafReaderContextreaderContext)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/c3b23b9be9be0dc6e98f0a1af8f717c66e3d19.src","preCode":"  public FunctionValues getValues(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final int off = readerContext.docBase;\n    final LeafReader r;\n    Object o = context.get(\"searcher\");\n    if (o instanceof SolrIndexSearcher) {\n      @SuppressWarnings(\"resource\")  final SolrIndexSearcher is = (SolrIndexSearcher) o;\n      SchemaField sf = is.getSchema().getFieldOrNull(field);\n      if (sf != null && sf.getType().isPointField()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"rord() is not supported over Points based field \" + field);\n      }\n      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {\n        \r\n        List<LeafReaderContext> leaves = is.getIndexReader().leaves();\n        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];\n        int upto = 0;\n        for (LeafReaderContext raw : leaves) {\n          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);\n        }\n        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));\n      } else {\n        \r\n        r = ((SolrIndexSearcher)o).getSlowAtomicReader();\n      }\n    } else {\n      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();\n      r = SlowCompositeReaderWrapper.wrap(topReader);\n    }\n    \r\n    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);\n    final int end = sindex.getValueCount();\n\n    return new IntDocValues(this) {\n      @Override\n      public int intVal(int doc) throws IOException {\n        if (doc+off > sindex.docID()) {\n          sindex.advance(doc+off);\n        }\n        if (doc+off == sindex.docID()) {\n          return (end - sindex.ordValue() - 1);\n        } else {\n          return end;\n        }\n      }\n    };\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/function/ReverseOrdFieldSource.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"}],"commitId":"3f634f97161d719683cbb0f1e8a56481b77979a3","commitMessage":"@@@SOLR-15606: rename (deprecated) Insanity.java to NumericHidingLeafReader.java (#276)\n\n","date":"2021-09-07 21:28:06","modifiedFileCount":"3","status":"M","submitter":"Christine Poerschke"}]
