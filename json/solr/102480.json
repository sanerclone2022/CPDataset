[{"authorTime":"2011-07-10 07:01:53","codes":[{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2011-07-10 07:01:53","endLine":191,"groupId":"23378","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(ResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/5960cfe2e4ff619c3b07786d74fac11a79c80c.src","preCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"B"},{"authorDate":"2011-07-10 07:01:53","commitOrder":1,"curCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2011-07-10 07:01:53","endLine":253,"groupId":"25140","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(ResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/5960cfe2e4ff619c3b07786d74fac11a79c80c.src","preCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":208,"status":"B"}],"commitId":"429093b236e30940d69edc8869346819c337cd10","commitMessage":"@@@SOLR-2452: Rewrote Solr build system (tighter integration with the Lucene build system) and restructured Solr internal and contrib modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1144761 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2011-07-10 07:01:53","modifiedFileCount":"0","status":"B","submitter":"Steven Rowe"},{"authorTime":"2012-01-17 06:07:13","codes":[{"authorDate":"2012-01-17 06:07:13","commitOrder":2,"curCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2012-01-17 06:07:13","endLine":187,"groupId":"23378","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(ResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/f1800aca9e00ca192e7e7a55f06b4b01ef1789.src","preCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          SolrConfig.severeErrors.add( e );\n          SolrException.logOnce(log,null,e);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2012-01-17 06:07:13","commitOrder":2,"curCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2012-01-17 06:07:13","endLine":245,"groupId":"25140","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(ResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/f1800aca9e00ca192e7e7a55f06b4b01ef1789.src","preCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      SolrConfig.severeErrors.add( e );\n      SolrException.logOnce(log,null,e);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        SolrConfig.severeErrors.add( e );\n        SolrException.logOnce(log,null,e);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"23bd21c968bd407207f585c2630cc27e7e1d946d","commitMessage":"@@@Fixes for SOLR-3032. Removed all the conditional logging for exceptions.  we'll rely on the top levels to log the errors appropriately.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1232192 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-01-17 06:07:13","modifiedFileCount":"27","status":"M","submitter":"Erick Erickson"},{"authorTime":"2012-02-28 00:48:19","codes":[{"authorDate":"2012-02-28 00:48:19","commitOrder":3,"curCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2012-02-28 00:48:19","endLine":187,"groupId":"53247","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(ResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/2091a61e764d773f592e87576840fc4a80ce6c.src","preCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.info(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2012-02-28 00:48:19","commitOrder":3,"curCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2012-02-28 00:48:19","endLine":245,"groupId":"25140","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(ResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/2091a61e764d773f592e87576840fc4a80ce6c.src","preCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.info(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"M"}],"commitId":"ec52a8704659c48910c081eddc71ffc88a02273b","commitMessage":"@@@SOLR-3157: improve test logging\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1294212 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-02-28 00:48:19","modifiedFileCount":"9","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2012-02-28 00:48:19","codes":[{"authorDate":"2012-05-25 10:18:33","commitOrder":4,"curCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2012-05-25 10:18:33","endLine":190,"groupId":"53247","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(ResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/d6906bf68aad156d860066ed44689812b6174e.src","preCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        \r\n        \r\n        try {\n          String name       = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \":\" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2012-02-28 00:48:19","commitOrder":4,"curCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2012-02-28 00:48:19","endLine":245,"groupId":"25140","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(ResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f2/2091a61e764d773f592e87576840fc4a80ce6c.src","preCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":204,"status":"N"}],"commitId":"92f3b3aee2b2be481147212705353ea88fa43639","commitMessage":"@@@SOLR-3446: Better errors when PatternTokenizerFactory is configured with an invalid pattern.  and include the 'name' whenever possible in plugin init error messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1342489 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-05-25 10:18:33","modifiedFileCount":"5","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2012-07-27 20:15:03","codes":[{"authorDate":"2012-07-27 20:15:03","commitOrder":5,"curCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2012-07-27 20:15:03","endLine":190,"groupId":"53247","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/e23f6e8d3d4980bc73391ee3beb63acca67ff5.src","preCode":"  public T load( ResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"},{"authorDate":"2012-07-27 20:15:03","commitOrder":5,"curCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2012-07-27 20:15:03","endLine":248,"groupId":"25140","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/91/e23f6e8d3d4980bc73391ee3beb63acca67ff5.src","preCode":"  public T loadSingle(ResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":207,"status":"M"}],"commitId":"467faeaae08773a2f4b1e6d29fd349ead693f7be","commitMessage":"@@@LUCENE-4260: factor subPackages out of the resourceloader interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1366360 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-07-27 20:15:03","modifiedFileCount":"10","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":6,"curCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2014-03-12 22:39:17","endLine":199,"groupId":"53247","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/c5c4c3b8d8cd5f65cd4289bc06358e31ea7ebc.src","preCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":6,"curCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2014-03-12 22:39:17","endLine":261,"groupId":"25140","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/c5c4c3b8d8cd5f65cd4289bc06358e31ea7ebc.src","preCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<PluginInitInfo>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":220,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2015-04-02 12:08:05","codes":[{"authorDate":"2015-04-02 12:08:05","commitOrder":7,"curCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2015-04-02 12:08:05","endLine":200,"groupId":"53247","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/610bf942015e6cc82edbd3830f6cd3f12a2a81.src","preCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name              = DOMUtil.getAttr(node,\"name\", requireName?type:null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2015-04-02 12:08:05","commitOrder":7,"curCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2015-04-02 12:08:05","endLine":262,"groupId":"25140","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/610bf942015e6cc82edbd3830f6cd3f12a2a81.src","preCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, \"name\", requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"}],"commitId":"9baabd177c8a63873ac4f3dbead4edae87a8bd25","commitMessage":"@@@SOLR-6615: Refactor code to use String constants\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1670813 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-04-02 12:08:05","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"},{"authorTime":"2015-04-02 12:08:05","codes":[{"authorDate":"2019-08-11 15:35:25","commitOrder":8,"curCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2019-08-11 15:35:25","endLine":205,"groupId":"53247","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/43017777a72ac159b4044fb1a9eed67350a818.src","preCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", type);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n            \n          T plugin = create(loader, name, className, node );\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2015-04-02 12:08:05","commitOrder":8,"curCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2015-04-02 12:08:05","endLine":262,"groupId":"25140","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/610bf942015e6cc82edbd3830f6cd3f12a2a81.src","preCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"N"}],"commitId":"9b986d268f3618d2137bbc8bd068a3db0d772049","commitMessage":"@@@SOLR-13593: Allow to look up analyzer components by their SPI names in field type configuration.\n","date":"2019-08-11 15:35:25","modifiedFileCount":"9","status":"M","submitter":"Tomoko Uchida"},{"authorTime":"2020-04-19 07:08:15","codes":[{"authorDate":"2020-04-19 07:08:15","commitOrder":9,"curCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2020-04-19 07:08:15","endLine":207,"groupId":"3608","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrResourceLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/8f80600db751e15d9225ff7d83bb3ab6695456.src","preCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          log.debug(\"created \" + ((name != null) ? name : \"\") + \": \" + plugin.getClass().getName());\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-04-19 07:08:15","commitOrder":9,"curCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2020-04-19 07:08:15","endLine":271,"groupId":"3609","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrResourceLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/8f80600db751e15d9225ff7d83bb3ab6695456.src","preCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      log.debug(\"created \" + name + \": \" + plugin.getClass().getName());\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"1f1cdbffdf607db961049d1417b18dc6cbf53d7a","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-19 07:08:15","modifiedFileCount":"56","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-07-16 14:05:24","codes":[{"authorDate":"2020-07-16 14:05:24","commitOrder":10,"curCode":"  public T load(SolrClassLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2020-07-16 14:05:24","endLine":207,"groupId":"3608","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrClassLoaderloader@NodeListnodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/8338ac209122803131a809672c58a4bd7c3b86.src","preCode":"  public T load( SolrResourceLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"},{"authorDate":"2020-07-16 14:05:24","commitOrder":10,"curCode":"  public T loadSingle(SolrClassLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2020-07-16 14:05:24","endLine":271,"groupId":"3609","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrClassLoaderloader@Nodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/8338ac209122803131a809672c58a4bd7c3b86.src","preCode":"  public T loadSingle(SolrResourceLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"03d658a7bc306370cfce6ef92f34f151db7ad3dc","commitMessage":"@@@SOLR-14151 Make schema components load from packages (#1669)\n\n","date":"2020-07-16 14:05:24","modifiedFileCount":"26","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-12-11 12:27:47","codes":[{"authorDate":"2020-12-11 12:27:47","commitOrder":11,"curCode":"  public T load(SolrClassLoader loader, List<ConfigNode> nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (ConfigNode node : nodes) {\n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","date":"2020-12-11 12:27:47","endLine":204,"groupId":"102480","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"load","params":"(SolrClassLoaderloader@List<ConfigNode>nodes)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/10/77f14af059ceaea1db52d3d2769cf42eecab5b.src","preCode":"  public T load(SolrClassLoader loader, NodeList nodes )\n  {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T defaultPlugin = null;\n    \n    if (nodes !=null ) {\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n  \n        String name = null;\n        try {\n          name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n          String className  = DOMUtil.getAttr(node,\"class\", null);\n          String defaultStr = DOMUtil.getAttr(node,\"default\", null );\n\n          if (Objects.isNull(className) && Objects.isNull(name)) {\n            throw new RuntimeException(type + \": missing mandatory attribute 'class' or 'name'\");\n          }\n\n          T plugin = create(loader, name, className, node);\n          if (log.isDebugEnabled()) {\n            log.debug(\"created {}: {}\", ((name != null) ? name : \"\"), plugin.getClass().getName());\n          }\n          \n          \r\n          if( preRegister ) {\n            info.add( new PluginInitInfo( plugin, node ) );\n          }\n          else {\n            init( plugin, node );\n          }\n          \n          T old = register( name, plugin );\n          if( old != null && !( name == null && !requireName ) ) {\n            throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple \"+type+\" registered to the same name: \"+name+\" ignoring: \"+old );\n          }\n          \n          if( defaultStr != null && Boolean.parseBoolean( defaultStr ) ) {\n            if( defaultPlugin != null ) {\n              throw new SolrException( ErrorCode.SERVER_ERROR, \n                \"Multiple default \"+type+\" plugins: \"+defaultPlugin + \" AND \" + name );\n            }\n            defaultPlugin = plugin;\n          }\n        }\n        catch (Exception ex) {\n          SolrException e = new SolrException\n            (ErrorCode.SERVER_ERROR,\n             \"Plugin init failure for \" + type + \n             (null != name ? (\" \\\"\" + name + \"\\\"\") : \"\") +\n             \": \" + ex.getMessage(), ex);\n          throw e;\n        }\n      }\n    }\n      \n    \r\n    for( PluginInitInfo pinfo : info ) {\n      try {\n        init( pinfo.plugin, pinfo.node );\n      }\n      catch( Exception ex ) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin Initializing failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return defaultPlugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"M"},{"authorDate":"2020-12-11 12:27:47","commitOrder":11,"curCode":"  public T loadSingle(SolrClassLoader loader, ConfigNode node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","date":"2020-12-11 12:27:47","endLine":268,"groupId":"102480","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"loadSingle","params":"(SolrClassLoaderloader@ConfigNodenode)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/10/77f14af059ceaea1db52d3d2769cf42eecab5b.src","preCode":"  public T loadSingle(SolrClassLoader loader, Node node) {\n    List<PluginInitInfo> info = new ArrayList<>();\n    T plugin = null;\n\n    try {\n      String name = DOMUtil.getAttr(node, NAME, requireName ? type : null);\n      String className = DOMUtil.getAttr(node, \"class\", type);\n      plugin = create(loader, name, className, node);\n      if (log.isDebugEnabled()) {\n        log.debug(\"created {}: {}\", name, plugin.getClass().getName());\n      }\n\n      \r\n      if (preRegister) {\n        info.add(new PluginInitInfo(plugin, node));\n      } else {\n        init(plugin, node);\n      }\n\n      T old = register(name, plugin);\n      if (old != null && !(name == null && !requireName)) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Multiple \" + type + \" registered to the same name: \" + name\n                + \" ignoring: \" + old);\n      }\n\n    } catch (Exception ex) {\n      SolrException e = new SolrException\n        (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n      throw e;\n    }\n\n    \r\n    for (PluginInitInfo pinfo : info) {\n      try {\n        init(pinfo.plugin, pinfo.node);\n      } catch (Exception ex) {\n        SolrException e = new SolrException\n          (ErrorCode.SERVER_ERROR, \"Plugin init failure for \" + type, ex);\n        throw e;\n      }\n    }\n    return plugin;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/plugin/AbstractPluginLoader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"a95ce0d4224539094dc602ba8afa1ff796009a2b","commitMessage":"@@@SOLR-14827: Refactor schema loading to not use XPath (#1963)\n\n","date":"2020-12-11 12:27:47","modifiedFileCount":"18","status":"M","submitter":"Noble Paul"}]
