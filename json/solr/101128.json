[{"authorTime":"2019-02-07 08:52:22","codes":[{"authorDate":"2019-02-07 08:52:22","commitOrder":1,"curCode":"  public void testQueryFacetSimple() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n  }\n","date":"2019-02-07 10:09:13","endLine":534,"groupId":"34438","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryFacetSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/64c3f0f6e9a23454cf8ba2fa8ecbe1b6e2862e.src","preCode":"  public void testQueryFacetSimple() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"B"},{"authorDate":"2019-02-07 08:52:22","commitOrder":1,"curCode":"  public void testQueryFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\")\n        .withStatSubFacet(\"average_price\", \"avg(price)\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n    assertEquals(199.5, topLevelFacetingData.getQueryFacet(\"high_popularity\").getStatFacetValue(\"average_price\"));\n  }\n","date":"2019-02-07 10:09:13","endLine":555,"groupId":"34438","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryFacetExpanded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/64c3f0f6e9a23454cf8ba2fa8ecbe1b6e2862e.src","preCode":"  public void testQueryFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\")\n        .withStatSubFacet(\"average_price\", \"avg(price)\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n    assertEquals(199.5, topLevelFacetingData.getQueryFacet(\"high_popularity\").getStatFacetValue(\"average_price\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":537,"status":"B"}],"commitId":"f30f9b49bfe9bcf745886e045cc53d6aa111a15c","commitMessage":"@@@SOLR-13042: Miscellaneous JSON Faceting ref-guide improvements\n","date":"2019-02-07 10:09:13","modifiedFileCount":"1","status":"B","submitter":"Jason Gerlowski"},{"authorTime":"2019-09-28 14:21:34","codes":[{"authorDate":"2019-02-07 08:52:22","commitOrder":2,"curCode":"  public void testQueryFacetSimple() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n  }\n","date":"2019-02-07 10:09:13","endLine":534,"groupId":"101128","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testQueryFacetSimple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/64c3f0f6e9a23454cf8ba2fa8ecbe1b6e2862e.src","preCode":"  public void testQueryFacetSimple() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"N"},{"authorDate":"2019-09-28 14:21:34","commitOrder":2,"curCode":"  public void testQueryFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\")\n        .withStatSubFacet(\"average_price\", \"avg(price)\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n    assertEquals(199.5, topLevelFacetingData.getQueryFacet(\"high_popularity\").getStatValue(\"average_price\"));\n  }\n","date":"2019-09-28 14:38:55","endLine":565,"groupId":"101128","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testQueryFacetExpanded","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/78d069a31e9ab7fdba2f4d428bfdd1baa22bf3.src","preCode":"  public void testQueryFacetExpanded() throws Exception {\n    SolrClient solrClient = cluster.getSolrClient();\n\n    \r\n    QueryFacetMap queryFacet = new QueryFacetMap(\"popularity:[8 TO 10]\")\n        .withStatSubFacet(\"average_price\", \"avg(price)\");\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"high_popularity\", queryFacet);\n    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);\n    \r\n\n    assertEquals(0, queryResponse.getStatus());\n    assertEquals(32, queryResponse.getResults().getNumFound());\n    assertEquals(10, queryResponse.getResults().size());\n    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();\n    assertEquals(2, topLevelFacetingData.getQueryFacet(\"high_popularity\").getCount());\n    assertEquals(199.5, topLevelFacetingData.getQueryFacet(\"high_popularity\").getStatFacetValue(\"average_price\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/ref_guide_examples/JsonRequestApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":547,"status":"M"}],"commitId":"e5d95011f06ba6a1daa986e95762cbcfc79d8f98","commitMessage":"@@@SOLR-13417: handle stats on date/str fields in solrj's JSON facet resp\n\n* Except for min/max aggregation in all other cases values woudl be\n  number. As for same data/string field.  value can vary based on\n  aggregation used.  capture response in Map<String.  Object>\n","date":"2019-09-28 14:38:55","modifiedFileCount":"4","status":"M","submitter":"Munendra S N"}]
