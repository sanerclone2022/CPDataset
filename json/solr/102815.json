[{"authorTime":"2019-01-23 20:03:01","codes":[{"authorDate":"2019-09-10 19:01:47","commitOrder":2,"curCode":"    public JsonWebSignature getJws() {\n      JsonWebSignature jws = new JsonWebSignature();\n      jws.setPayload(JWTAuthPluginTest.generateClaims().toJson());\n      jws.setKey(getRsaKey().getPrivateKey());\n      jws.setKeyIdHeaderValue(getRsaKey().getKeyId());\n      jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n      return jws;\n    }\n","date":"2019-09-10 19:01:47","endLine":148,"groupId":"25774","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getJws","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/660c570139055df3e7eb58cbf21217681e6912.src","preCode":"    public JsonWebSignature getJws() {\n      JsonWebSignature jws = new JsonWebSignature();\n      jws.setPayload(JWTAuthPluginTest.generateClaims().toJson());\n      jws.setKey(getRsaKey().getPrivateKey());\n      jws.setKeyIdHeaderValue(getRsaKey().getKeyId());\n      jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n      return jws;\n    }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"B"},{"authorDate":"2019-01-23 20:03:01","commitOrder":2,"curCode":"  public static void beforeAll() throws Exception {\n    \r\n    rsaJsonWebKey = RsaJwkGenerator.generateJwk(2048);\n    rsaJsonWebKey.setKeyId(\"k1\");\n\n    JwtClaims claims = generateClaims();\n    JsonWebSignature jws = new JsonWebSignature();\n    jws.setPayload(claims.toJson());\n    jws.setKey(rsaJsonWebKey.getPrivateKey());\n    jws.setKeyIdHeaderValue(rsaJsonWebKey.getKeyId());\n    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n\n    String testJwt = jws.getCompactSerialization();\n    testHeader = \"Bearer\" + \" \" + testJwt;\n    \n    claims.unsetClaim(\"iss\");\n    claims.unsetClaim(\"aud\");\n    claims.unsetClaim(\"exp\");\n    jws.setPayload(claims.toJson());\n    String slimJwt = jws.getCompactSerialization();\n    slimHeader = \"Bearer\" + \" \" + slimJwt;\n  }\n","date":"2019-01-23 20:03:01","endLine":85,"groupId":"33714","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/72/a908edbb3298a1e8a5f94091b7ffebb17a7a2d.src","preCode":"  public static void beforeAll() throws Exception {\n    \r\n    rsaJsonWebKey = RsaJwkGenerator.generateJwk(2048);\n    rsaJsonWebKey.setKeyId(\"k1\");\n\n    JwtClaims claims = generateClaims();\n    JsonWebSignature jws = new JsonWebSignature();\n    jws.setPayload(claims.toJson());\n    jws.setKey(rsaJsonWebKey.getPrivateKey());\n    jws.setKeyIdHeaderValue(rsaJsonWebKey.getKeyId());\n    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n\n    String testJwt = jws.getCompactSerialization();\n    testHeader = \"Bearer\" + \" \" + testJwt;\n    \n    claims.unsetClaim(\"iss\");\n    claims.unsetClaim(\"aud\");\n    claims.unsetClaim(\"exp\");\n    jws.setPayload(claims.toJson());\n    String slimJwt = jws.getCompactSerialization();\n    slimHeader = \"Bearer\" + \" \" + slimJwt;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"NB"}],"commitId":"4599f6e9ee2a647c1d6861adfedb12e5cf74783d","commitMessage":"@@@SOLR-13713: JWTAuthPlugin to support multiple JWKS endpoints\n","date":"2019-09-10 19:01:47","modifiedFileCount":"2","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2019-09-19 15:50:20","codes":[{"authorDate":"2019-09-10 19:01:47","commitOrder":3,"curCode":"    public JsonWebSignature getJws() {\n      JsonWebSignature jws = new JsonWebSignature();\n      jws.setPayload(JWTAuthPluginTest.generateClaims().toJson());\n      jws.setKey(getRsaKey().getPrivateKey());\n      jws.setKeyIdHeaderValue(getRsaKey().getKeyId());\n      jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n      return jws;\n    }\n","date":"2019-09-10 19:01:47","endLine":148,"groupId":"25774","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getJws","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/660c570139055df3e7eb58cbf21217681e6912.src","preCode":"    public JsonWebSignature getJws() {\n      JsonWebSignature jws = new JsonWebSignature();\n      jws.setPayload(JWTAuthPluginTest.generateClaims().toJson());\n      jws.setKey(getRsaKey().getPrivateKey());\n      jws.setKeyIdHeaderValue(getRsaKey().getKeyId());\n      jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n      return jws;\n    }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"},{"authorDate":"2019-09-19 15:50:20","commitOrder":3,"curCode":"  public static void beforeAll() throws Exception {\n    JwtClaims claims = generateClaims();\n    JsonWebSignature jws = new JsonWebSignature();\n    jws.setPayload(claims.toJson());\n    jws.setKey(rsaJsonWebKey.getPrivateKey());\n    jws.setKeyIdHeaderValue(rsaJsonWebKey.getKeyId());\n    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n\n    String testJwt = jws.getCompactSerialization();\n    testHeader = \"Bearer\" + \" \" + testJwt;\n\n    claims.unsetClaim(\"iss\");\n    claims.unsetClaim(\"aud\");\n    claims.unsetClaim(\"exp\");\n    jws.setPayload(claims.toJson());\n    String slimJwt = jws.getCompactSerialization();\n    slimHeader = \"Bearer\" + \" \" + slimJwt;\n  }\n","date":"2019-09-19 15:50:20","endLine":99,"groupId":"33714","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/d1032c2f34557c824f9f211d3ca8cc4f252c7e.src","preCode":"  public static void beforeAll() throws Exception {\n    \r\n    rsaJsonWebKey = RsaJwkGenerator.generateJwk(2048);\n    rsaJsonWebKey.setKeyId(\"k1\");\n\n    JwtClaims claims = generateClaims();\n    JsonWebSignature jws = new JsonWebSignature();\n    jws.setPayload(claims.toJson());\n    jws.setKey(rsaJsonWebKey.getPrivateKey());\n    jws.setKeyIdHeaderValue(rsaJsonWebKey.getKeyId());\n    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n\n    String testJwt = jws.getCompactSerialization();\n    testHeader = \"Bearer\" + \" \" + testJwt;\n    \n    claims.unsetClaim(\"iss\");\n    claims.unsetClaim(\"aud\");\n    claims.unsetClaim(\"exp\");\n    jws.setPayload(claims.toJson());\n    String slimJwt = jws.getCompactSerialization();\n    slimHeader = \"Bearer\" + \" \" + slimJwt;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"dd729549b563f01e707bf6991675f80922981265","commitMessage":"@@@SOLR-13734 JWTAuthPlugin to support multiple issuers (#860)\n\n","date":"2019-09-19 15:50:20","modifiedFileCount":"5","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2020-09-17 07:06:48","codes":[{"authorDate":"2019-09-10 19:01:47","commitOrder":4,"curCode":"    public JsonWebSignature getJws() {\n      JsonWebSignature jws = new JsonWebSignature();\n      jws.setPayload(JWTAuthPluginTest.generateClaims().toJson());\n      jws.setKey(getRsaKey().getPrivateKey());\n      jws.setKeyIdHeaderValue(getRsaKey().getKeyId());\n      jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n      return jws;\n    }\n","date":"2019-09-10 19:01:47","endLine":148,"groupId":"102815","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getJws","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/660c570139055df3e7eb58cbf21217681e6912.src","preCode":"    public JsonWebSignature getJws() {\n      JsonWebSignature jws = new JsonWebSignature();\n      jws.setPayload(JWTAuthPluginTest.generateClaims().toJson());\n      jws.setKey(getRsaKey().getPrivateKey());\n      jws.setKeyIdHeaderValue(getRsaKey().getKeyId());\n      jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n      return jws;\n    }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTVerificationkeyResolverTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":141,"status":"N"},{"authorDate":"2020-09-17 07:06:48","commitOrder":4,"curCode":"  public static void beforeAll() throws Exception {\n    JwtClaims claims = generateClaims();\n    JsonWebSignature jws = new JsonWebSignature();\n    jws.setPayload(claims.toJson());\n    jws.setKey(rsaJsonWebKey.getPrivateKey());\n    jws.setKeyIdHeaderValue(rsaJsonWebKey.getKeyId());\n    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n\n    String testJwt = jws.getCompactSerialization();\n    testHeader = \"Bearer\" + \" \" + testJwt;\n\n    claims.unsetClaim(\"iss\");\n    claims.unsetClaim(\"aud\");\n    claims.unsetClaim(\"exp\");\n    claims.setSubject(null);\n    jws.setPayload(claims.toJson());\n    String slimJwt = jws.getCompactSerialization();\n    slimHeader = \"Bearer\" + \" \" + slimJwt;\n  }\n","date":"2020-09-17 07:06:48","endLine":100,"groupId":"102815","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"beforeAll","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/90/713417022f8f9dce3d37f1c5966b8af4dba903.src","preCode":"  public static void beforeAll() throws Exception {\n    JwtClaims claims = generateClaims();\n    JsonWebSignature jws = new JsonWebSignature();\n    jws.setPayload(claims.toJson());\n    jws.setKey(rsaJsonWebKey.getPrivateKey());\n    jws.setKeyIdHeaderValue(rsaJsonWebKey.getKeyId());\n    jws.setAlgorithmHeaderValue(AlgorithmIdentifiers.RSA_USING_SHA256);\n\n    String testJwt = jws.getCompactSerialization();\n    testHeader = \"Bearer\" + \" \" + testJwt;\n\n    claims.unsetClaim(\"iss\");\n    claims.unsetClaim(\"aud\");\n    claims.unsetClaim(\"exp\");\n    jws.setPayload(claims.toJson());\n    String slimJwt = jws.getCompactSerialization();\n    slimHeader = \"Bearer\" + \" \" + slimJwt;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/JWTAuthPluginTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":82,"status":"M"}],"commitId":"e5d3e4d56744521ca0b9d2f2cd7c6161483fde31","commitMessage":"@@@Merge branch 'master' of github.com:apache/lucene-solr\n","date":"2020-09-17 07:06:48","modifiedFileCount":"16","status":"M","submitter":"noblepaul"}]
