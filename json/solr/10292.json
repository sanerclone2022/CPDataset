[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-12-14 05:21:52","commitOrder":2,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2015-12-14 05:21:52","endLine":266,"groupId":"7598","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/26bcd4cd5eca22d0a8a97328a74cd220e2b710.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":2,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2015-05-11 20:37:18","endLine":183,"groupId":"58708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/63/b5aa006d5fc64918b3c847a2bb5e7cfc074e8e.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":152,"status":"NB"}],"commitId":"1fc12ffd41afe510046bdd18dd534b417429e5bd","commitMessage":"@@@SOLR-7904: Add StreamExpression Support to FacetStream\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1719838 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-12-14 05:21:52","modifiedFileCount":"4","status":"M","submitter":"Dennis Gove"},{"authorTime":"2016-02-04 09:17:29","codes":[{"authorDate":"2015-12-14 05:21:52","commitOrder":3,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2015-12-14 05:21:52","endLine":266,"groupId":"7598","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/26bcd4cd5eca22d0a8a97328a74cd220e2b710.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"},{"authorDate":"2016-02-04 09:17:29","commitOrder":3,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2016-02-04 09:42:48","endLine":194,"groupId":"49896","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/3c6427c133dc59dc71564faf7ca88b2f12aa05.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"3528cc32cb634137cf389beaa9ecdc2036588d96","commitMessage":"@@@SOLR-8409: Ensures that quotes in solr params (eg. q param) are properly handled\n","date":"2016-02-04 09:42:48","modifiedFileCount":"4","status":"M","submitter":"Dennis Gove"},{"authorTime":"2016-04-20 00:06:32","codes":[{"authorDate":"2015-12-14 05:21:52","commitOrder":4,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2015-12-14 05:21:52","endLine":266,"groupId":"7598","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3c/26bcd4cd5eca22d0a8a97328a74cd220e2b710.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"N"},{"authorDate":"2016-04-20 00:06:32","commitOrder":4,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":198,"groupId":"49896","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b6/19f2facfd6726bdd4d0fcc4b6b8f7e79a57fc1.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"8ba1a3880bdcfb0a8764e997fae7a79cc29142a4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-20 00:06:32","modifiedFileCount":"43","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":292,"groupId":"7598","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/124dedf3cdbe25e3aba1ae6b265a7c1827c65f.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : props.entrySet()){\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), param.getValue()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":225,"groupId":"49896","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/ba89c2e6627a6894f483d275fcdc2a4a085940.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    for(Entry<String,String> param : params.entrySet()){\n      String value = param.getValue();\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n      \n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":185,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-04-06 05:57:11","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":6,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":292,"groupId":"7598","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/124dedf3cdbe25e3aba1ae6b265a7c1827c65f.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"N"},{"authorDate":"2017-04-06 05:57:11","commitOrder":6,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2017-04-06 05:57:24","endLine":230,"groupId":"49896","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/71/61dc4029750f25597be6694c7b21651525b9a6.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"M"}],"commitId":"37b6c60548f3288ee057dbd8ce1e1594ab48d314","commitMessage":"@@@SOLR-10426: Add shuffle Streaming Expression\n","date":"2017-04-06 05:57:24","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-07-14 01:48:22","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":7,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2016-05-23 14:35:53","endLine":292,"groupId":"7598","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/86/124dedf3cdbe25e3aba1ae6b265a7c1827c65f.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":245,"status":"N"},{"authorDate":"2017-07-14 01:48:22","commitOrder":7,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n\n      if(param.getKey().equals(\"fq\")) {\n        for(String fqParam : param.getValue()) {\n          \r\n          expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), \n              fqParam.replace(\"\\\"\", \"\\\\\\\"\")));\n        }\n       } else {\n        String value = String.join(\",\", param.getValue());\n\n        \r\n        \r\n        \r\n        value = value.replace(\"\\\"\", \"\\\\\\\"\");\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2017-07-14 02:29:46","endLine":212,"groupId":"49896","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/e98a3a06f203d3c33e7a62ccda14f9b186b7e4.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n      \n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"19fd95b46cf40fa0b91b7dcf0b157706ea718efb","commitMessage":"@@@commit 4241a13beb0a14e8bd81a520bd8e04ab6c7465aa\nAuthor: Erick Erickson <erick@apache.org>\nDate:   Thu Jul 13 10:39:33 2017 -0700\n\n    SOLR-10908: CloudSolrStream.toExpression incorrectly handles fq clauses\n","date":"2017-07-14 02:29:46","modifiedFileCount":"2","status":"M","submitter":"Erick Erickson"},{"authorTime":"2017-07-17 00:05:07","codes":[{"authorDate":"2017-07-17 00:05:07","commitOrder":8,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2017-07-17 00:05:07","endLine":284,"groupId":"7598","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/1bf023276370e4a470e4500231b1791a16eaad.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":237,"status":"M"},{"authorDate":"2017-07-17 00:05:07","commitOrder":8,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2017-07-17 00:05:07","endLine":202,"groupId":"7598","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/bceb07b99e53ee9b5008b66b6bd323b4e8b9dc.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    ModifiableSolrParams mParams = new ModifiableSolrParams(SolrParams.toMultiMap(params.toNamedList()));\n    for (Entry<String, String[]> param : mParams.getMap().entrySet()) {\n\n      if(param.getKey().equals(\"fq\")) {\n        for(String fqParam : param.getValue()) {\n          \r\n          expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), \n              fqParam.replace(\"\\\"\", \"\\\\\\\"\")));\n        }\n       } else {\n        String value = String.join(\",\", param.getValue());\n\n        \r\n        \r\n        \r\n        value = value.replace(\"\\\"\", \"\\\\\\\"\");\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"b17ec1445dd58a8e13c7718d17d1ee6467cde799","commitMessage":"@@@SOLR-11075: Refactor handling of params in CloudSolrStream and FacetStream\n","date":"2017-07-17 00:05:07","modifiedFileCount":"2","status":"M","submitter":"Erick"},{"authorTime":"2017-07-17 00:05:07","codes":[{"authorDate":"2018-11-07 00:22:51","commitOrder":9,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2018-11-07 00:23:40","endLine":445,"groupId":"7598","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/23a3b2e18cb10b80210bb84480689933eac513.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"M"},{"authorDate":"2017-07-17 00:05:07","commitOrder":9,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2017-07-17 00:05:07","endLine":202,"groupId":"7598","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/bceb07b99e53ee9b5008b66b6bd323b4e8b9dc.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"N"}],"commitId":"3d942131104a38a470b21020bfeb4a12c2dcd99b","commitMessage":"@@@SOLR-12795: Introduce 'rows' and 'offset' parameter in FacetStream\n","date":"2018-11-07 00:23:40","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-11-28 00:21:42","codes":[{"authorDate":"2018-11-07 00:22:51","commitOrder":10,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2018-11-07 00:23:40","endLine":445,"groupId":"7598","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/69/23a3b2e18cb10b80210bb84480689933eac513.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":375,"status":"N"},{"authorDate":"2018-11-28 00:21:42","commitOrder":10,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    \r\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2018-11-28 00:22:02","endLine":202,"groupId":"7598","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/ff0a7620a7f02577f3d78a53a824153e4d2a66.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"c2cac887702f9efc0a6bf75cd9f1e78f730c2c4f","commitMessage":"@@@SOLR-12984: The search Streaming Expression should properly support and push down paging when using the /select handler\n","date":"2018-11-28 00:22:02","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-12-12 22:15:41","codes":[{"authorDate":"2018-12-12 22:15:41","commitOrder":11,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","date":"2018-12-12 22:16:08","endLine":455,"groupId":"10292","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/d09042b8ffb8de880524dcfb32653ba9c2a4a3.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    expression.addParameter(collection);\n    \n    \r\n\n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), val));\n      }\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(Bucket bucket : buckets){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(bucket.toString());\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"buckets\", builder.toString()));\n    }\n    \n    \r\n    {\n      StringBuilder builder = new StringBuilder();\n      for(FieldComparator sort : bucketSorts){\n        if(0 != builder.length()){ builder.append(\",\"); }\n        builder.append(sort.toExpression(factory));\n      }\n      expression.addParameter(new StreamExpressionNamedParameter(\"bucketSorts\", builder.toString()));\n    }\n    \n    \r\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n    \n    if(serializeBucketSizeLimit) {\n      if(bucketSizeLimit == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"bucketSizeLimit\", Integer.toString(bucketSizeLimit)));\n      }\n    } else {\n      if (rows == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(-1)));\n      } else{\n        expression.addParameter(new StreamExpressionNamedParameter(\"rows\", Integer.toString(rows)));\n      }\n\n      expression.addParameter(new StreamExpressionNamedParameter(\"offset\", Integer.toString(offset)));\n\n      if(overfetch == Integer.MAX_VALUE) {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(-1)));\n      } else {\n        expression.addParameter(new StreamExpressionNamedParameter(\"overfetch\", Integer.toString(overfetch)));\n      }\n    }\n\n    if(method != null) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"method\", this.method));\n    }\n        \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":381,"status":"M"},{"authorDate":"2018-12-12 22:15:41","commitOrder":11,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    \r\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","date":"2018-12-12 22:16:08","endLine":206,"groupId":"10292","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/71473eefe45e97e6f5c6cd82998799068d58d5.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    \n    \r\n    StreamExpression expression = new StreamExpression(\"search\");\n    \n    \r\n    expression.addParameter(collection);\n    \n    for (Entry<String, String[]> param : params.getMap().entrySet()) {\n      for (String val : param.getValue()) {\n        \r\n        \r\n        \r\n        expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n            val.replace(\"\\\"\", \"\\\\\\\"\")));\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    \n    \r\n    if(null != fieldMappings && 0 != fieldMappings.size()){\n      StringBuilder sb = new StringBuilder();\n      for(Entry<String,String> mapping : fieldMappings.entrySet()){\n        if(sb.length() > 0){ sb.append(\",\"); }\n        sb.append(mapping.getKey());\n        sb.append(\"=\");\n        sb.append(mapping.getValue());\n      }\n      \n      expression.addParameter(new StreamExpressionNamedParameter(\"aliases\", sb.toString()));\n    }\n        \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CloudSolrStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"}],"commitId":"7e4555a2fdb863d6aac2f785116f8f13e51bf16b","commitMessage":"@@@SOLR-13057: Allow search.  facet and timeseries Streaming Expressions to accept a comma delimited list of collections\n","date":"2018-12-12 22:16:08","modifiedFileCount":"6","status":"M","submitter":"Joel Bernstein"}]
