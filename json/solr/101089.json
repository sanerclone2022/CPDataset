[{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":9,"curCode":"  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n\r\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , \n                        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , \n                        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n  }\n","date":"2014-03-12 22:39:17","endLine":113,"groupId":"34302","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"simple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/126d36e5f29ee73ecf91349e6f9b9e52f9716e.src","preCode":"  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n\r\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , \n                        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , \n                        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"MB"},{"authorDate":"2014-03-12 22:39:17","commitOrder":9,"curCode":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n","date":"2014-03-12 22:39:17","endLine":232,"groupId":"34303","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackCompat4_5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/126d36e5f29ee73ecf91349e6f9b9e52f9716e.src","preCode":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"MB"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2017-03-03 02:18:16","codes":[{"authorDate":"2017-03-03 02:18:16","commitOrder":10,"curCode":"  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n\r\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , \n                        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , \n                        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n  }\n","date":"2017-03-03 02:18:16","endLine":110,"groupId":"60013","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"simple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/7beeaebfec29da2381c27cafa774e986fe6158.src","preCode":"  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n\r\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , \n                        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , \n                        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2017-03-03 02:18:16","commitOrder":10,"curCode":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n","date":"2017-03-03 02:18:16","endLine":228,"groupId":"429","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackCompat4_5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/7beeaebfec29da2381c27cafa774e986fe6158.src","preCode":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"}],"commitId":"8ed2b764ed4d4d5203b5df1e16fdc1ffd640322c","commitMessage":"@@@LUCENE-6819: Remove index-time boosts.\n","date":"2017-03-03 02:18:16","modifiedFileCount":"113","status":"M","submitter":"Adrien Grand"},{"authorTime":"2019-10-14 08:07:38","codes":[{"authorDate":"2019-10-14 08:07:38","commitOrder":11,"curCode":"  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\", foobar);\n    updateRequest.add(doc);\n\n\r\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = (document, req, commitWithin, overwrite) -> {\n      Assert.assertNotNull(req.getParams());\n      docs.add(document);\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()), handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\" + i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0),\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0),\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n  }\n","date":"2019-10-14 08:07:38","endLine":113,"groupId":"101089","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"simple","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/f2cce1c9f5f964a769bcf24535bb26ada8df62.src","preCode":"  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n\r\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , \n                        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , \n                        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2019-10-14 08:07:38","commitOrder":11,"curCode":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\", foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, (document, req, commitWithin, override) -> {\n      if (commitWithin == null) {\n        req.add(document);\n      }\n      System.err.println(\"Doc\" + document + \" ,commitWithin:\" + commitWithin + \" , override:\" + override);\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\" + i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0),\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0),\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n","date":"2019-10-14 08:07:38","endLine":261,"groupId":"101089","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testBackCompat4_5","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/f2cce1c9f5f964a769bcf24535bb26ada8df62.src","preCode":"  public void testBackCompat4_5() throws IOException {\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    updateRequest.setParam(\"a\", \"b\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"desc\", \"two\");\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\");\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n\n    doc = new SolrInputDocument();\n    Collection<String> foobar = new HashSet<>();\n    foobar.add(\"baz1\");\n    foobar.add(\"baz2\");\n    doc.addField(\"foobar\",foobar);\n    updateRequest.add(doc);\n\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n\n\n\n    InputStream is = getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\");\n    assertNotNull(\"updateReq_4_5.bin was not found\", is);\n    UpdateRequest updateUnmarshalled = new JavaBinUpdateRequestCodec().unmarshal(is, new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean override) {\n        if(commitWithin == null ){\n                    req.add(document);\n        }\n        System.err.println(\"Doc\" + document + \" ,commitWithin:\"+commitWithin+ \" , override:\"+ override);\n      }\n    });\n\n    System.err.println(updateUnmarshalled.getDocumentsMap());\n    System.err.println(updateUnmarshalled.getDocuments());\n\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(\"doc#\"+i, inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) ,\n        updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) ,\n        updateRequest.getDeleteQuery().get(0));\n\n    assertEquals(\"b\", updateUnmarshalled.getParams().get(\"a\"));\n    is.close();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":200,"status":"M"}],"commitId":"b6ea7d60b7005d29400161eae291e51697a11b05","commitMessage":"@@@SOLR-13731: javabin must support a 1:1 mapping of the JSON update format \n\n","date":"2019-10-14 08:07:38","modifiedFileCount":"6","status":"M","submitter":"Noble Paul"}]
