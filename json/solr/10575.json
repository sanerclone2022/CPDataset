[{"authorTime":"2019-04-18 07:02:06","codes":[{"authorDate":"2016-04-01 04:23:59","commitOrder":2,"curCode":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n","date":"2016-04-01 04:24:51","endLine":312,"groupId":"32597","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getTuples","params":"(TupleStreamtupleStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/f04e7941906b4b57af308bf23c86b0eac471a7.src","preCode":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":299,"status":"NB"},{"authorDate":"2019-04-18 07:02:06","commitOrder":2,"curCode":"  private List<Tuple> getTuples(final SolrParams params, String ofInterest) throws IOException {\n    \r\n    TupleStream tupleStream = new SolrStream(url, params);\n\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList<>();\n    for (; ; ) {\n      Tuple t = tupleStream.read();\n      \r\n      if (t.EOF) {\n        break;\n      } else if (ofInterest == null || t.getString(\"id\").equals(ofInterest) || t.getString(ofInterest).equals(\"null\") == false) {\n        \r\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    Collections.sort(tuples, (o1, o2) -> (o1.getString(\"id\").compareTo(o2.getString(\"id\"))));\n    return tuples;\n  }\n","date":"2019-04-18 07:02:06","endLine":296,"groupId":"32597","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuples","params":"(finalSolrParamsparams@StringofInterest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/4b7490454a1c850d994aa31ee171c4725ac4fe.src","preCode":"  private List<Tuple> getTuples(final SolrParams params, String ofInterest) throws IOException {\n    \r\n    TupleStream tupleStream = new SolrStream(url, params);\n\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList<>();\n    for (; ; ) {\n      Tuple t = tupleStream.read();\n      \r\n      if (t.EOF) {\n        break;\n      } else if (ofInterest == null || t.getString(\"id\").equals(ofInterest) || t.getString(ofInterest).equals(\"null\") == false) {\n        \r\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    Collections.sort(tuples, (o1, o2) -> (o1.getString(\"id\").compareTo(o2.getString(\"id\"))));\n    return tuples;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"B"}],"commitId":"a9771a58495b319b36b32381c786d9d9801e64ea","commitMessage":"@@@SOLR-13408: Cannot start/stop DaemonStream repeatedly.  other API improvements\n","date":"2019-04-18 07:02:06","modifiedFileCount":"3","status":"M","submitter":"erick"},{"authorTime":"2019-04-18 07:02:06","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList<>();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n","date":"2020-06-17 01:27:53","endLine":240,"groupId":"10575","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getTuples","params":"(TupleStreamtupleStream)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/03/8bd0ea005d4e7cc745bbc64f548e31f8f50e0c.src","preCode":"  protected List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList();\n    for(;;) {\n      Tuple t = tupleStream.read();\n      if(t.EOF) {\n        break;\n      } else {\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    return tuples;\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"},{"authorDate":"2019-04-18 07:02:06","commitOrder":3,"curCode":"  private List<Tuple> getTuples(final SolrParams params, String ofInterest) throws IOException {\n    \r\n    TupleStream tupleStream = new SolrStream(url, params);\n\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList<>();\n    for (; ; ) {\n      Tuple t = tupleStream.read();\n      \r\n      if (t.EOF) {\n        break;\n      } else if (ofInterest == null || t.getString(\"id\").equals(ofInterest) || t.getString(ofInterest).equals(\"null\") == false) {\n        \r\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    Collections.sort(tuples, (o1, o2) -> (o1.getString(\"id\").compareTo(o2.getString(\"id\"))));\n    return tuples;\n  }\n","date":"2019-04-18 07:02:06","endLine":296,"groupId":"10575","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getTuples","params":"(finalSolrParamsparams@StringofInterest)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/4b7490454a1c850d994aa31ee171c4725ac4fe.src","preCode":"  private List<Tuple> getTuples(final SolrParams params, String ofInterest) throws IOException {\n    \r\n    TupleStream tupleStream = new SolrStream(url, params);\n\n    tupleStream.open();\n    List<Tuple> tuples = new ArrayList<>();\n    for (; ; ) {\n      Tuple t = tupleStream.read();\n      \r\n      if (t.EOF) {\n        break;\n      } else if (ofInterest == null || t.getString(\"id\").equals(ofInterest) || t.getString(ofInterest).equals(\"null\") == false) {\n        \r\n        tuples.add(t);\n      }\n    }\n    tupleStream.close();\n    Collections.sort(tuples, (o1, o2) -> (o1.getString(\"id\").compareTo(o2.getString(\"id\"))));\n    return tuples;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/admin/DaemonStreamApiTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":277,"status":"N"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
