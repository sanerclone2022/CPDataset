[{"authorTime":"2017-08-01 23:01:17","codes":[{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue comp = new TestAnalyticsValue();\n    TestAnalyticsValue fill = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n\n    \r\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"doesn't matter\").setExists(true);\n    fill.setValue(\"won't show up\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setValue(\"asdfs\").setExists(true);\n    fill.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setValue(new Date(12312)).setExists(true);\n    fill.setValue(new Boolean(false)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(\"asdfs\", new Boolean(false), new Long(213123L), new Boolean(false)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n","date":"2017-10-18 01:52:02","endLine":989,"groupId":"18377","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"multiValueObjectTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c6/2546d9ec3ca93d9f6fa3409b0c70fd2cd9b9c0.src","preCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue comp = new TestAnalyticsValue();\n    TestAnalyticsValue fill = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n\n    \r\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"doesn't matter\").setExists(true);\n    fill.setValue(\"won't show up\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setValue(\"asdfs\").setExists(true);\n    fill.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setValue(new Date(12312)).setExists(true);\n    fill.setValue(new Boolean(false)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(\"asdfs\", new Boolean(false), new Long(213123L), new Boolean(false)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":936,"status":"B"},{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue remover = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, remover});\n\n    \r\n    val.setValues();\n    remover.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    remover.setValue(\"doesn't matter\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    remover.setValue(new Date(12312)).setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Long(213123L)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    remover.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    remover.setValue(new Date(4)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n\n    val.setValues(new Date(4));\n    remover.setValue(new Date(4)).setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n","date":"2017-10-18 01:52:02","endLine":848,"groupId":"39917","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"multiValueObjectTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/05/226f9cc4458527bc8e20b3f980c2c444c0818b.src","preCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue remover = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, remover});\n\n    \r\n    val.setValues();\n    remover.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    remover.setValue(\"doesn't matter\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    remover.setValue(new Date(12312)).setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Long(213123L)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    remover.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    remover.setValue(new Date(4)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n\n    val.setValues(new Date(4));\n    remover.setValue(new Date(4)).setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/RemoveFunctionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"B"}],"commitId":"86d84bff82ff8c7a1f6cadfe307685a4dce2f8d9","commitMessage":"@@@SOLR-11145.  SOLR-11146: Added comprehensive unit tests for Analytics Component 2.0 as well as analytics bug fixes.\n","date":"2017-10-18 01:52:02","modifiedFileCount":"41","status":"B","submitter":"Houston Putman"},{"authorTime":"2018-07-16 18:24:45","codes":[{"authorDate":"2018-07-16 18:24:45","commitOrder":2,"curCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue comp = new TestAnalyticsValue();\n    TestAnalyticsValue fill = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n\n    \r\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"doesn't matter\").setExists(true);\n    fill.setValue(\"won't show up\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), 213123L, new Date(12312));\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Date(12312), 213123L, new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), 213123L, new Date(12312));\n    comp.setValue(\"asdfs\").setExists(true);\n    fill.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(new Date(12312), 213123L, new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), 213123L, new Date(12312));\n    comp.setValue(new Date(12312)).setExists(true);\n    fill.setValue(Boolean.FALSE).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(\"asdfs\", Boolean.FALSE, 213123L, Boolean.FALSE).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n","date":"2018-07-16 18:24:45","endLine":989,"groupId":"101534","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"multiValueObjectTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/f1bb24175fe843f3934c86c33ac54f80a0848c.src","preCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue comp = new TestAnalyticsValue();\n    TestAnalyticsValue fill = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});\n\n    \r\n    val.setValues();\n    comp.setExists(false);\n    fill.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    comp.setValue(\"doesn't matter\").setExists(true);\n    fill.setValue(\"won't show up\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setExists(false);\n    fill.setValue(\"won't show up\").setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setValue(\"asdfs\").setExists(true);\n    fill.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    comp.setValue(new Date(12312)).setExists(true);\n    fill.setValue(new Boolean(false)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(\"asdfs\", new Boolean(false), new Long(213123L), new Boolean(false)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/ReplaceFunctionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":936,"status":"M"},{"authorDate":"2018-07-16 18:24:45","commitOrder":2,"curCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue remover = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, remover});\n\n    \r\n    val.setValues();\n    remover.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    remover.setValue(\"doesn't matter\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), 213123L, new Date(12312));\n    remover.setValue(new Date(12312)).setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", 213123L).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), 213123L, new Date(12312));\n    remover.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(\"asdfs\", new Date(12312), 213123L, new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", 3F);\n    remover.setValue(new Date(4)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", 3F).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n\n    val.setValues(new Date(4));\n    remover.setValue(new Date(4)).setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n","date":"2018-07-16 18:24:45","endLine":848,"groupId":"101534","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"multiValueObjectTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/15/c3e6ef30f10960958ce386590e1e1f9335339f.src","preCode":"  public void multiValueObjectTest() {\n    TestAnalyticsValueStream val = new TestAnalyticsValueStream();\n    TestAnalyticsValue remover = new TestAnalyticsValue();\n\n    AnalyticsValueStream func = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, remover});\n\n    \r\n    val.setValues();\n    remover.setExists(false);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    remover.setValue(\"doesn't matter\").setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    \r\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    remover.setValue(new Date(12312)).setExists(true);\n    Iterator<Object> values1 = Arrays.<Object>asList(\"asdfs\", new Long(213123L)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    val.setValues(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312));\n    remover.setExists(false);\n    Iterator<Object> values2 = Arrays.<Object>asList(\"asdfs\", new Date(12312), new Long(213123L), new Date(12312)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    val.setValues(new Date(3), \"3\", new Float(3F));\n    remover.setValue(new Date(4)).setExists(true);\n    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), \"3\", new Float(3F)).iterator();\n    func.streamObjects( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next(), value);\n    });\n    assertFalse(values3.hasNext());\n\n    val.setValues(new Date(4));\n    remover.setValue(new Date(4)).setExists(true);\n    func.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/RemoveFunctionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":796,"status":"M"}],"commitId":"c97f27b06c1d7c250e9596a9bc7bf5ca11ef6ad3","commitMessage":"@@@Merge branch 'remove-constructor-wrapper-classes' of https://github.com/michaelbraun/lucene-solr:\nLUCENE-8345.  GitHub PR #392: Remove instantiation of redundant wrapper classes for primitives; add wrapper class constructors to forbiddenapis.\nThis closes #392\n","date":"2018-07-16 18:24:45","modifiedFileCount":"96","status":"M","submitter":"Uwe Schindler"}]
