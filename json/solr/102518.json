[{"authorTime":"2016-10-20 22:37:15","codes":[{"authorDate":"2016-10-20 22:37:15","commitOrder":1,"curCode":"    public int archiveGcLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {\n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" old GC log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","date":"2016-10-20 22:37:15","endLine":3462,"groupId":"21304","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"archiveGcLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/bf548e72c09c1739ca1459343acaa7705edb8f.src","preCode":"    public int archiveGcLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {\n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" old GC log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/util/SolrCLI.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3440,"status":"B"},{"authorDate":"2016-10-20 22:37:15","commitOrder":1,"curCode":"    public int archiveConsoleLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {        \n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" console log files\");\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","date":"2016-10-20 22:37:15","endLine":3491,"groupId":"16636","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"archiveConsoleLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/bf548e72c09c1739ca1459343acaa7705edb8f.src","preCode":"    public int archiveConsoleLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {        \n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" console log files\");\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/util/SolrCLI.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3469,"status":"B"}],"commitId":"a4952b11fec9e366cd97010d3cc96ef2ce6e953a","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-10-20 22:37:15","modifiedFileCount":"2","status":"B","submitter":"Noble Paul"},{"authorTime":"2016-10-21 02:58:52","codes":[{"authorDate":"2016-10-20 22:37:15","commitOrder":2,"curCode":"    public int archiveGcLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {\n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" old GC log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","date":"2016-10-20 22:37:15","endLine":3462,"groupId":"21304","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"archiveGcLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/bf548e72c09c1739ca1459343acaa7705edb8f.src","preCode":"    public int archiveGcLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {\n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" old GC log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/util/SolrCLI.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3440,"status":"N"},{"authorDate":"2016-10-21 02:58:52","commitOrder":2,"curCode":"    public int archiveConsoleLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {        \n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" console log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","date":"2016-10-21 02:58:52","endLine":3491,"groupId":"16636","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"archiveConsoleLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/a359e08e4d99492d6ccb1e446f2beed72ba596.src","preCode":"    public int archiveConsoleLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {        \n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" console log files\");\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/util/SolrCLI.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3469,"status":"M"}],"commitId":"af88e7f54d2042a2ff5c3bef7b6016084ad15cec","commitMessage":"@@@SOLR-9570: Fix test failures and start using SolrTestCaseJ4's createTempDir mm\n","date":"2016-10-21 02:58:52","modifiedFileCount":"2","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2016-10-21 02:58:52","codes":[{"authorDate":"2016-10-26 04:34:41","commitOrder":3,"curCode":"    public int archiveGcLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).matches(\"^solr_gc[_.].+\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {\n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).matches(\"^solr_gc[_.].+\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" old GC log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","date":"2016-10-26 04:34:41","endLine":3462,"groupId":"102518","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"archiveGcLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/aeda808fa7e5163b64fa3885643f6babf40383.src","preCode":"    public int archiveGcLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {\n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).startsWith(\"solr_gc_\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" old GC log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/util/SolrCLI.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3440,"status":"M"},{"authorDate":"2016-10-21 02:58:52","commitOrder":3,"curCode":"    public int archiveConsoleLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {        \n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" console log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","date":"2016-10-21 02:58:52","endLine":3491,"groupId":"102518","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"archiveConsoleLogs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/a359e08e4d99492d6ccb1e446f2beed72ba596.src","preCode":"    public int archiveConsoleLogs() throws Exception {\n      prepareLogsPath();\n      Path archivePath = logsPath.resolve(\"archived\");\n      if (!archivePath.toFile().exists()) {\n        Files.createDirectories(archivePath);\n      }\n      List<Path> archived = Files.find(archivePath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      for (Path p : archived) {        \n        Files.delete(p);\n      }\n      List<Path> files = Files.find(logsPath, 1, (f, a) \n          -> a.isRegularFile() && String.valueOf(f.getFileName()).endsWith(\"-console.log\"))\n          .collect(Collectors.toList());\n      if (files.size() > 0) {\n        out(\"Archiving \" + files.size() + \" console log files to \" + archivePath);\n        for (Path p : files) {\n          Files.move(p, archivePath.resolve(p.getFileName()), StandardCopyOption.REPLACE_EXISTING);\n        }\n      }\n      return 0;\n    }\n","realPath":"solr/core/src/java/org/apache/solr/util/SolrCLI.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3469,"status":"N"}],"commitId":"a916877f3877e416f26a4b5f9c8914ccca649766","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-10-26 04:34:41","modifiedFileCount":"22","status":"M","submitter":"Noble Paul"}]
