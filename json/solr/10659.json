[{"authorTime":"2016-01-08 23:56:33","codes":[{"authorDate":"2016-01-23 03:07:15","commitOrder":2,"curCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","date":"2016-01-23 03:07:15","endLine":123,"groupId":"4685","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDaemonStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/aba9037db95428bbaaecef8164307955fc3a05.src","preCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"B"},{"authorDate":"2016-01-08 23:56:33","commitOrder":2,"curCode":"  public void testJDBCStream() throws Exception {\n\n    JDBCStream stream;\n    String expressionString;\n    \n    \r\n    stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n    assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n  }\n","date":"2016-01-08 23:56:33","endLine":255,"groupId":"4685","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/f173877fb39452656f2b8a085c2e0aadf05463.src","preCode":"  public void testJDBCStream() throws Exception {\n\n    JDBCStream stream;\n    String expressionString;\n    \n    \r\n    stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n    assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":244,"status":"NB"}],"commitId":"077e78f417ac461b2be2e6da71ee391cd08f137f","commitMessage":"@@@SOLR-8550: Add asynchronous DaemonStreams to the Streaming API\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1726291 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2016-01-23 03:07:15","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testDaemonStream() throws Exception {\n    String expressionString;\n\n    \r\n    try (DaemonStream stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"id=blah\"));\n      assertTrue(expressionString.contains(\"queueSize=100\"));\n      assertTrue(expressionString.contains(\"runInterval=1000\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":124,"groupId":"10659","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDaemonStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testDaemonStream() throws Exception {\n\n    DaemonStream stream;\n    String expressionString;\n\n    \r\n    stream = new DaemonStream(StreamExpressionParser.parse(\"daemon(search(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\"), id=\\\"blah\\\", runInterval=\\\"1000\\\", queueSize=\\\"100\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"daemon(search(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"id=blah\"));\n    assertTrue(expressionString.contains(\"queueSize=100\"));\n    assertTrue(expressionString.contains(\"runInterval=1000\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":110,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testJDBCStream() throws Exception {\n    String expressionString;\n    \n    \r\n    try (JDBCStream stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n      assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":288,"groupId":"10659","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testJDBCStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testJDBCStream() throws Exception {\n\n    JDBCStream stream;\n    String expressionString;\n    \n    \r\n    stream = new JDBCStream(StreamExpressionParser.parse(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\", sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\", sort=\\\"ID asc\\\")\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"jdbc(connection=\\\"jdbc:hsqldb:mem:.\\\",\"));\n    assertTrue(expressionString.contains(\"sql=\\\"select PEOPLE.ID, PEOPLE.NAME, COUNTRIES.COUNTRY_NAME from PEOPLE inner join COUNTRIES on PEOPLE.COUNTRY_CODE = COUNTRIES.CODE order by PEOPLE.ID\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"ID asc\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":278,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
