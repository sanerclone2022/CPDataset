[{"authorTime":"2015-03-09 23:01:56","codes":[{"authorDate":"2015-03-09 18:31:48","commitOrder":2,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2015-03-09 18:31:48","endLine":62,"groupId":"24051","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/50/eba1909992ff1d1abcfd9d6305215eda1d2017.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"NB"},{"authorDate":"2015-03-09 23:01:56","commitOrder":2,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2015-03-09 23:01:56","endLine":93,"groupId":"22416","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/e65518b353439b65a2c74ca3df8141644a0e98.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":67,"status":"B"}],"commitId":"4fbb2b36e8b93bad2f333b9915136d8ec1200c0a","commitMessage":"@@@SOLR-7125: Call process() before trying to upload/download configs\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1665254 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-03-09 23:01:56","modifiedFileCount":"2","status":"M","submitter":"Alan Woodward"},{"authorTime":"2015-10-28 23:43:51","codes":[{"authorDate":"2015-10-28 23:43:51","commitOrder":3,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir());\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2015-10-28 23:43:51","endLine":61,"groupId":"24051","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/a7a1590a65cc697cc7ab2557a0617cc8c62a6d.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2015-10-28 23:43:51","commitOrder":3,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir());\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2015-10-28 23:43:51","endLine":89,"groupId":"22416","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/a7a1590a65cc697cc7ab2557a0617cc8c62a6d.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    File solrXml = getFile(\"solrj\").toPath().resolve(\"solr/solr.xml\").toFile();\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"cb234d3c6b0829fd487c276715832aee5aed798e","commitMessage":"@@@SOLR-8221: MiniSolrCloudCluster creates subdirectories for its child nodes\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1711041 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-28 23:43:51","modifiedFileCount":"15","status":"M","submitter":"Alan Woodward"},{"authorTime":"2015-10-29 03:57:58","codes":[{"authorDate":"2015-10-29 03:57:58","commitOrder":4,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2015-10-29 03:57:58","endLine":61,"groupId":"24051","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/089b945deded79f9e1f9cd90a0f68ae2db0a96.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir());\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"M"},{"authorDate":"2015-10-29 03:57:58","commitOrder":4,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2015-10-29 03:57:58","endLine":89,"groupId":"22416","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/089b945deded79f9e1f9cd90a0f68ae2db0a96.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir());\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"2018b052db888d5f624561ad8b44b20999ee6f8a","commitMessage":"@@@SOLR-8221: Ensure that SSL config is passed to MiniSolrCloudCluster\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1711112 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-29 03:57:58","modifiedFileCount":"6","status":"M","submitter":"Alan Woodward"},{"authorTime":"2016-11-26 15:09:50","codes":[{"authorDate":"2015-10-29 03:57:58","commitOrder":5,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2015-10-29 03:57:58","endLine":61,"groupId":"24051","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8a/089b945deded79f9e1f9cd90a0f68ae2db0a96.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":33,"status":"N"},{"authorDate":"2016-11-26 15:09:50","commitOrder":5,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2016-11-26 15:23:32","endLine":88,"groupId":"22416","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4f/a6d9a5dfdf72499261a86fc415cba5c538c8c8.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        client.uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      client.uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":63,"status":"M"}],"commitId":"2ec97165204a9e4b55419816fc10eaaab6c9095f","commitMessage":"@@@SOLR-9784: deprecated uploadconfig\n","date":"2016-11-26 15:23:32","modifiedFileCount":"4","status":"M","submitter":"Noble Paul"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":6,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2018-11-30 01:58:51","endLine":61,"groupId":"24051","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/12022664688a6128d5f7dc08a465ca81834c80.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":6,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2018-11-30 01:58:51","endLine":90,"groupId":"22416","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2e/12022664688a6128d5f7dc08a465ca81834c80.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      client.connect(20, TimeUnit.SECONDS);\n\n      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2019-08-03 15:30:49","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":7,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2019-08-03 15:30:49","endLine":58,"groupId":"24051","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/89ebffcaacdb5c5472ee70efcfdc0eabd41214.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      try {\n        client.request(listReq);\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      }\n      catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"M"},{"authorDate":"2019-08-03 15:30:49","commitOrder":7,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      SolrException e = expectThrows(SolrException.class, () -> {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n      });\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2019-08-03 15:30:49","endLine":85,"groupId":"10289","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/89ebffcaacdb5c5472ee70efcfdc0eabd41214.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      try {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n        fail(\"Requests to a non-running cluster should throw a SolrException\");\n      } catch (SolrException e) {\n        assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n      }\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"8c4fde94fe93c70b95ed3563fb65972bb303e0af","commitMessage":"@@@SOLR-12555: use expectThrows() to verify the ex thrown in tests\n","date":"2019-08-03 15:30:49","modifiedFileCount":"89","status":"M","submitter":"Munendra S N"},{"authorTime":"2021-04-04 03:55:56","codes":[{"authorDate":"2019-08-03 15:30:49","commitOrder":8,"curCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","date":"2019-08-03 15:30:49","endLine":58,"groupId":"10518","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudClientCanConnectAfterClusterComesUp","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/89ebffcaacdb5c5472ee70efcfdc0eabd41214.src","preCode":"  public void testCloudClientCanConnectAfterClusterComesUp() throws Exception {\n\n    \r\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n\n      CloudSolrClient client = cluster.getSolrClient();\n      CollectionAdminRequest.List listReq = new CollectionAdminRequest.List();\n\n      SolrException e = expectThrows(SolrException.class, () -> client.request(listReq));\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      \r\n      client.request(listReq);\n\n    }\n    finally {\n      cluster.shutdown();\n    }\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":34,"status":"N"},{"authorDate":"2021-04-04 03:55:56","commitOrder":8,"curCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      SolrException e = expectThrows(SolrException.class, () -> {\n        cluster.getZkClient().upConfig(configPath, \"testconfig\");\n      });\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      cluster.getZkClient().upConfig(configPath, \"testconfig\");\n\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", cluster.getZkClient().exists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + \"testconfig\", true));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2021-04-04 03:55:56","endLine":83,"groupId":"10518","id":14,"instanceNumber":2,"isCurCommit":1,"methodName":"testCloudClientUploads","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/6575c6e15b72af204ada907c9cdba3fe5490e8.src","preCode":"  public void testCloudClientUploads() throws Exception {\n\n    Path configPath = getFile(\"solrj\").toPath().resolve(\"solr/configsets/configset-2/conf\");\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(0, createTempDir(), buildJettyConfig(\"/solr\"));\n    try {\n      CloudSolrClient client = cluster.getSolrClient();\n      SolrException e = expectThrows(SolrException.class, () -> {\n        ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n      });\n      assertTrue(\"Unexpected message: \" + e.getMessage(), e.getMessage().contains(\"cluster not found/not ready\"));\n\n      cluster.startJettySolrRunner();\n      cluster.waitForAllNodes(30);\n      client.connect(20, TimeUnit.SECONDS);\n\n      ((ZkClientClusterStateProvider)client.getClusterStateProvider()).uploadConfig(configPath, \"testconfig\");\n\n      ZkConfigManager configManager = new ZkConfigManager(client.getZkStateReader().getZkClient());\n      assertTrue(\"List of uploaded configs does not contain 'testconfig'\", configManager.listConfigs().contains(\"testconfig\"));\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/TestCloudSolrClientConnections.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"1a922dc99aa252177f361a9832f901a9fdf55fb0","commitMessage":"@@@SOLR-15258: ConfigSetService add CRUD operations.  subsume ZkConfigManager (#23)\n\nTo allow for viable alternative implementations of where ConfigSets come from.\n\nCo-authored-by: Nazerke Seidan <nseidan@salesforce.com>\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-04-04 03:55:56","modifiedFileCount":"46","status":"M","submitter":"Nazerke Seidan"}]
