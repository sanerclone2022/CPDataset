[{"authorTime":"2017-05-31 19:56:14","codes":[{"authorDate":"2017-07-04 12:44:18","commitOrder":3,"curCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .sendUpdatesOnlyToShardLeaders()\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .sendUpdatesToAllReplicasInShard()\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n","date":"2017-07-04 12:44:18","endLine":2316,"groupId":"845","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost@booleanshardLeadersOnly@intsocketTimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/34f325564be1b55073121b4aada6200a24805f.src","preCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .sendUpdatesOnlyToShardLeaders()\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .sendUpdatesToAllReplicasInShard()\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2303,"status":"B"},{"authorDate":"2017-05-31 19:56:14","commitOrder":3,"curCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n","date":"2017-05-31 19:56:14","endLine":2336,"groupId":"847","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost@booleanshardLeadersOnly@HttpClienthttpClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/9f94f0cf3a9f7a2e356ebc16e578ef9f12bc95.src","preCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2323,"status":"NB"}],"commitId":"6c163658bbca15b1e4ff81d16b25e07df78468e8","commitMessage":"@@@SOLR-10456: Deprecate timeout related setters from SolrClients.  and replace with Builder based implementation\n","date":"2017-07-04 12:44:18","modifiedFileCount":"48","status":"M","submitter":"Anshum Gupta"},{"authorTime":"2018-03-10 22:30:57","codes":[{"authorDate":"2018-03-10 22:30:57","commitOrder":4,"curCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n          .sendUpdatesOnlyToShardLeaders()\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n        .sendUpdatesToAllReplicasInShard()\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n","date":"2018-03-10 23:45:43","endLine":2345,"groupId":"111872","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost@booleanshardLeadersOnly@intsocketTimeoutMillis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/90246d5f21a3eb8d4b7a040a70eb27c80b5060.src","preCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, int socketTimeoutMillis) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .sendUpdatesOnlyToShardLeaders()\n          .withSocketTimeout(socketTimeoutMillis)\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .sendUpdatesToAllReplicasInShard()\n        .withSocketTimeout(socketTimeoutMillis)\n        .build();\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2334,"status":"M"},{"authorDate":"2018-03-10 22:30:57","commitOrder":4,"curCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder(Collections.singletonList(zkHost), Optional.empty())\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n","date":"2018-03-10 23:45:43","endLine":2385,"groupId":"111872","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCloudSolrClient","params":"(StringzkHost@booleanshardLeadersOnly@HttpClienthttpClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/90246d5f21a3eb8d4b7a040a70eb27c80b5060.src","preCode":"  public static CloudSolrClient getCloudSolrClient(String zkHost, boolean shardLeadersOnly, HttpClient httpClient) {\n    if (shardLeadersOnly) {\n      return new CloudSolrClientBuilder()\n          .withZkHost(zkHost)\n          .withHttpClient(httpClient)\n          .sendUpdatesOnlyToShardLeaders()\n          .build();\n    }\n    return new CloudSolrClientBuilder()\n        .withZkHost(zkHost)\n        .withHttpClient(httpClient)\n        .sendUpdatesToAllReplicasInShard()\n        .build();\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2374,"status":"M"}],"commitId":"971bd26df6ecfa9c266910a8008a2dad52d4443a","commitMessage":"@@@SOLR-11629: Add new CloudSolrClient.Builder ctors\n\nCloudSolrClient.Builder can be pointed at a Solr cluster in two ways: a\nZK connection string.  or one or more Solr base URLs.  One of these two\nvalues must be provided to create a working CloudSolrClient.\n\nSince these values are required.  this commit introduces two new ctors. \none for each means of CloudSolrClient setup.  It deprecates the existing\nno-arg CloudSolrClient ctor.\n\nTogether.  these changes make it clearer to our users that these options\nare required (and mutually exclusive).\n","date":"2018-03-10 23:45:43","modifiedFileCount":"24","status":"M","submitter":"Jason Gerlowski"}]
