[{"authorTime":"2020-05-21 02:16:05","codes":[{"authorDate":"2020-05-21 02:16:05","commitOrder":2,"curCode":"    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); \r\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { \r\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            \r\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n","date":"2020-05-21 02:16:05","endLine":763,"groupId":"19239","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"buildRandomFacets","params":"(AtomicIntegerkeyCounter@intmaxDepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/75/e961155460b62496b59c9e5832b9ec200b4f19.src","preCode":"    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); \r\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { \r\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            \r\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"MB"},{"authorDate":"2020-05-21 02:16:05","commitOrder":2,"curCode":"    public static TermFacet buildRandom() {\n      final String sort = randomSortParam(random());\n      final String facetField = randomFacetField(random());\n      return new TermFacet(facetField,\n                           map(\"limit\", randomLimitParam(random()),\n                               \"overrequest\", randomOverrequestParam(random()),\n                               \"prefix\", randomPrefixParam(random(), facetField),\n                               \"perSeg\", randomPerSegParam(random()),\n                               \"sort\", sort,\n                               \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                               \r\n                               \"refine\", randomRefineParam(random())));\n    }\n","date":"2020-05-21 02:16:05","endLine":727,"groupId":"17599","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"buildRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/a16e03331a7bbbaa458288b489efa9adc29f3e.src","preCode":"    public static TermFacet buildRandom() {\n      final String sort = randomSortParam(random());\n      final String facetField = randomFacetField(random());\n      return new TermFacet(facetField,\n                           map(\"limit\", randomLimitParam(random()),\n                               \"overrequest\", randomOverrequestParam(random()),\n                               \"prefix\", randomPrefixParam(random(), facetField),\n                               \"perSeg\", randomPerSegParam(random()),\n                               \"sort\", sort,\n                               \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                               \r\n                               \"refine\", randomRefineParam(random())));\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"B"}],"commitId":"28209cb8b1fe2a4d8050e4877c4df2ad5d85509b","commitMessage":"@@@SOLR-14492: Fix ArrayIndexOutOfBoundsException in json.facet 'terms' when FacetFieldProcessorByHashDV is used with aggregations over multivalued numeric fields\n\nSOLR-14477: Fix incorrect 'relatedness()' calculations in json.facet 'terms' when 'prefix' option is used\n","date":"2020-05-21 02:16:05","modifiedFileCount":"8","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2020-06-05 23:58:59","codes":[{"authorDate":"2020-06-05 23:58:59","commitOrder":3,"curCode":"    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); \r\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { \r\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"allBuckets\", randomAllBucketsParam(random(), sort),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            \r\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n","date":"2020-06-05 23:58:59","endLine":816,"groupId":"19239","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"buildRandomFacets","params":"(AtomicIntegerkeyCounter@intmaxDepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/ce3badb5d91f2ab0e5e49a6d93d14c575f79d2.src","preCode":"    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); \r\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { \r\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            \r\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"M"},{"authorDate":"2020-06-05 23:58:59","commitOrder":3,"curCode":"    public static TermFacet buildRandom() {\n      final String sort = randomSortParam(random());\n      final String facetField = randomFacetField(random());\n      return new TermFacet(facetField,\n                           map(\"limit\", randomLimitParam(random()),\n                               \"overrequest\", randomOverrequestParam(random()),\n                               \"prefix\", randomPrefixParam(random(), facetField),\n                               \"perSeg\", randomPerSegParam(random()),\n                               \"sort\", sort,\n                               \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                               \"allBuckets\", randomAllBucketsParam(random(), sort),\n                               \"refine\", randomRefineParam(random())));\n    }\n","date":"2020-06-05 23:58:59","endLine":722,"groupId":"17599","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"buildRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/793c2f1b4695e80bac1e461ad051965375d8a6.src","preCode":"    public static TermFacet buildRandom() {\n      final String sort = randomSortParam(random());\n      final String facetField = randomFacetField(random());\n      return new TermFacet(facetField,\n                           map(\"limit\", randomLimitParam(random()),\n                               \"overrequest\", randomOverrequestParam(random()),\n                               \"prefix\", randomPrefixParam(random(), facetField),\n                               \"perSeg\", randomPerSegParam(random()),\n                               \"sort\", sort,\n                               \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                               \r\n                               \"refine\", randomRefineParam(random())));\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":710,"status":"M"}],"commitId":"b055c7489fca05fd9e065d6a76b5bba749252b68","commitMessage":"@@@SOLR-14467: Fix relatedness() stat in json.facets to no longer cause server errors (or nonsense results) when combined with allBuckets:true\n","date":"2020-06-05 23:58:59","modifiedFileCount":"8","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2020-07-06 04:28:08","codes":[{"authorDate":"2020-06-05 23:58:59","commitOrder":4,"curCode":"    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); \r\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { \r\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"allBuckets\", randomAllBucketsParam(random(), sort),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            \r\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n","date":"2020-06-05 23:58:59","endLine":816,"groupId":"123196","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"buildRandomFacets","params":"(AtomicIntegerkeyCounter@intmaxDepth)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/ce3badb5d91f2ab0e5e49a6d93d14c575f79d2.src","preCode":"    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {\n      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); \r\n      Map<String,TermFacet> results = new LinkedHashMap<>();\n      for (int i = 0; i < numFacets; i++) {\n        if (keyCounter.get() < 3) { \r\n          \n          final String sort = randomSortParam(random());\n          final String facetField = randomFacetField(random());\n          final TermFacet facet =  new TermFacet(facetField,\n                                                 map(\"sort\", sort,\n                                                     \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                                                     \"limit\", randomLimitParam(random(), sort),\n                                                     \"overrequest\", randomOverrequestParam(random()),\n                                                     \"prefix\", randomPrefixParam(random(), facetField),\n                                                     \"allBuckets\", randomAllBucketsParam(random(), sort),\n                                                     \"perSeg\", randomPerSegParam(random())));\n                                                     \n\n                                                 \n          results.put(\"facet_\" + keyCounter.incrementAndGet(), facet);\n          if (0 < maxDepth) {\n            \r\n            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);\n            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));\n          }\n        }\n      }\n      return results;\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKG.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":788,"status":"N"},{"authorDate":"2020-07-06 04:28:08","commitOrder":4,"curCode":"    public static TermFacet buildRandom() {\n      final String sort = randomSortParam(random());\n      final String facetField = randomFacetField(random());\n      return new TermFacet(facetField,\n                           map(\"limit\", randomLimitParam(random()),\n                               \"overrequest\", randomOverrequestParam(random(), sort),\n                               \"prefix\", randomPrefixParam(random(), facetField),\n                               \"perSeg\", randomPerSegParam(random()),\n                               \"sort\", sort,\n                               \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                               \"allBuckets\", randomAllBucketsParam(random(), sort),\n                               \"refine\", randomRefineParam(random())));\n    }\n","date":"2020-07-06 04:28:08","endLine":727,"groupId":"123196","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"buildRandom","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/6dcb9f7b093fa3580c5dbd74736289b18b878b.src","preCode":"    public static TermFacet buildRandom() {\n      final String sort = randomSortParam(random());\n      final String facetField = randomFacetField(random());\n      return new TermFacet(facetField,\n                           map(\"limit\", randomLimitParam(random()),\n                               \"overrequest\", randomOverrequestParam(random()),\n                               \"prefix\", randomPrefixParam(random(), facetField),\n                               \"perSeg\", randomPerSegParam(random()),\n                               \"sort\", sort,\n                               \"prelim_sort\", randomPrelimSortParam(random(), sort),\n                               \"allBuckets\", randomAllBucketsParam(random(), sort),\n                               \"refine\", randomRefineParam(random())));\n    }\n","realPath":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetSKGEquiv.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":715,"status":"M"}],"commitId":"fea6c1b9daa243e48297b4ba5a1ece68b8790a5b","commitMessage":"@@@SOLR-14595: add AwaitsFix test to TestJsonFacetRefinement demonstrating problem.  and work around to randomized testing in TestCloudJSONFacetSKGEquiv\n","date":"2020-07-06 04:28:08","modifiedFileCount":"2","status":"M","submitter":"Chris Hostetter"}]
