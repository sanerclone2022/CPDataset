[{"authorTime":"2016-07-29 02:23:09","codes":[{"authorDate":"2016-06-24 02:19:14","commitOrder":2,"curCode":"  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        \r\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            \r\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)\r\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n\n    docsSeed = random().nextLong();\n  }\n","date":"2016-06-24 02:19:28","endLine":139,"groupId":"63407","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/88/7ebfe79c859fec9d3819497c7308d55958ff53.src","preCode":"  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        \r\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            \r\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)\r\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n\n    docsSeed = random().nextLong();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":102,"status":"NB"},{"authorDate":"2016-07-29 02:23:09","commitOrder":2,"curCode":"  public static void setupClass() throws Exception {\n    useFactory(\"solr.StandardDirectoryFactory\");\n    configureCluster(1)\r\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    docsSeed = random().nextLong();\n  }\n","date":"2016-07-29 02:23:09","endLine":76,"groupId":"61379","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/cac5242cb33c222bdffd6e41f132e9a450899b.src","preCode":"  public static void setupClass() throws Exception {\n    useFactory(\"solr.StandardDirectoryFactory\");\n    configureCluster(1)\r\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    docsSeed = random().nextLong();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"B"}],"commitId":"b7aa0b56bebcc22e63f0602a4ef15a728a799fc6","commitMessage":"@@@SOLR-9269: Snapshots (Solr core level)\n","date":"2016-07-29 02:23:09","modifiedFileCount":"12","status":"M","submitter":"David Smiley"},{"authorTime":"2016-07-29 02:23:09","codes":[{"authorDate":"2019-03-13 01:06:19","commitOrder":3,"curCode":"  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        \r\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            \r\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)\r\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n","date":"2019-03-19 03:25:36","endLine":141,"groupId":"63407","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/1c4acfd3ca5898652b978a9b5890502d60b57e.src","preCode":"  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      conf.setBoolean(\"fs.hdfs.impl.disable.cache\", true);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        \r\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            \r\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)\r\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"},{"authorDate":"2016-07-29 02:23:09","commitOrder":3,"curCode":"  public static void setupClass() throws Exception {\n    useFactory(\"solr.StandardDirectoryFactory\");\n    configureCluster(1)\r\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    docsSeed = random().nextLong();\n  }\n","date":"2016-07-29 02:23:09","endLine":76,"groupId":"61379","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/cac5242cb33c222bdffd6e41f132e9a450899b.src","preCode":"  public static void setupClass() throws Exception {\n    useFactory(\"solr.StandardDirectoryFactory\");\n    configureCluster(1)\r\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n\n    docsSeed = random().nextLong();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":69,"status":"N"}],"commitId":"cf828163bdfa010c87f1171b6919e444bd0ff01c","commitMessage":"@@@SOLR-13330: Improve HDFS tests\n\nRelated JIRAs:\n* SOLR-11010\n* SOLR-11381\n* SOLR-12040\n* SOLR-13297\n\nChanges:\n* Consolidate hdfs configuration into HdfsTestUtil\n* Ensure socketTimeout long enough for HDFS tests\n* Ensure HdfsTestUtil.getClientConfiguration used in tests\n* Replace deprecated HDFS calls\n* Use try-with-resources to ensure closing of HDFS resources\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2019-03-19 03:25:36","modifiedFileCount":"23","status":"M","submitter":"Kevin Risden"},{"authorTime":"2020-06-29 19:18:24","codes":[{"authorDate":"2019-03-13 01:06:19","commitOrder":4,"curCode":"  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        \r\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            \r\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)\r\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n","date":"2019-03-19 03:25:36","endLine":141,"groupId":"103367","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/1c4acfd3ca5898652b978a9b5890502d60b57e.src","preCode":"  public static void setupClass() throws Exception {\n    dfsCluster = HdfsTestUtil.setupClass(createTempDir().toFile().getAbsolutePath());\n    hdfsUri = HdfsTestUtil.getURI(dfsCluster);\n    try {\n      URI uri = new URI(hdfsUri);\n      Configuration conf = HdfsTestUtil.getClientConfiguration(dfsCluster);\n      fs = FileSystem.get(uri, conf);\n\n      if (fs instanceof DistributedFileSystem) {\n        \r\n        while (((DistributedFileSystem) fs).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n          log.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e) {\n            Thread.interrupted();\n            \r\n          }\n        }\n      }\n\n      fs.mkdirs(new org.apache.hadoop.fs.Path(\"/backup\"));\n    } catch (IOException | URISyntaxException e) {\n      throw new RuntimeException(e);\n    }\n\n    System.setProperty(\"solr.hdfs.default.backup.path\", \"/backup\");\n    System.setProperty(\"solr.hdfs.home\", hdfsUri + \"/solr\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n\n    configureCluster(1)\r\n    .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n    .withSolrXml(HDFS_REPO_SOLR_XML)\n    .configure();\n    \n    docsSeed = random().nextLong();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestHdfsBackupRestoreCore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"N"},{"authorDate":"2020-06-29 19:18:24","commitOrder":4,"curCode":"  public static void setupClass() throws Exception {\n    System.setProperty(\"solr.allowPaths\", \"*\");\n    useFactory(\"solr.StandardDirectoryFactory\");\n    configureCluster(1)\r\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n    docsSeed = random().nextLong();\n  }\n","date":"2020-06-29 19:18:24","endLine":75,"groupId":"103367","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"setupClass","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/fed680837acfd6f726deb4a1d50d85c936f1a8.src","preCode":"  public static void setupClass() throws Exception {\n    useFactory(\"solr.StandardDirectoryFactory\");\n    configureCluster(1)\r\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .configure();\n    docsSeed = random().nextLong();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/core/snapshots/TestSolrCoreSnapshots.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":68,"status":"M"}],"commitId":"49a3f0a11d41f7124b893a08dc9e67594c32e2ee","commitMessage":"@@@SOLR-14561 Followup - validate params for more core operations  (#1629)\n\nAdd template to solr.in scripts\nAlso testes Windows paths\nAdded RefGuide documentation to some params","date":"2020-06-29 19:18:24","modifiedFileCount":"15","status":"M","submitter":"Jan H?ydahl"}]
