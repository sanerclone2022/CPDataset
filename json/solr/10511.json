[{"authorTime":"2016-04-08 18:07:13","codes":[{"authorDate":"2016-04-08 18:07:13","commitOrder":1,"curCode":"  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    try (CloudSolrClient createdClient = new Builder()\n        .withZkHost(ANY_ZK_HOST)\n        .withZkHost(ANY_OTHER_ZK_HOST)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":63,"groupId":"40086","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSeveralZkHostsSpecifiedSingly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/692c75e3f61bee61d6bcf28873c30028f9610c.src","preCode":"  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    try (CloudSolrClient createdClient = new Builder()\n        .withZkHost(ANY_ZK_HOST)\n        .withZkHost(ANY_OTHER_ZK_HOST)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"B"},{"authorDate":"2016-04-08 18:07:13","commitOrder":1,"curCode":"  public void testSeveralZkHostsSpecifiedTogether() throws IOException {\n    final ArrayList<String> zkHosts = new ArrayList<String>();\n    zkHosts.add(ANY_ZK_HOST);\n    zkHosts.add(ANY_OTHER_ZK_HOST);\n    try(CloudSolrClient createdClient = new Builder()\n        .withZkHost(zkHosts)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","date":"2016-04-08 18:07:13","endLine":79,"groupId":"40084","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testSeveralZkHostsSpecifiedTogether","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/57/692c75e3f61bee61d6bcf28873c30028f9610c.src","preCode":"  public void testSeveralZkHostsSpecifiedTogether() throws IOException {\n    final ArrayList<String> zkHosts = new ArrayList<String>();\n    zkHosts.add(ANY_ZK_HOST);\n    zkHosts.add(ANY_OTHER_ZK_HOST);\n    try(CloudSolrClient createdClient = new Builder()\n        .withZkHost(zkHosts)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"B"}],"commitId":"9b65416e60d1183e0d145646c36e5eb9018603f8","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-08 18:07:13","modifiedFileCount":"119","status":"B","submitter":"Karl Wright"},{"authorTime":"2018-03-10 22:30:57","codes":[{"authorDate":"2018-03-10 22:30:57","commitOrder":2,"curCode":"  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    final List<String> zkHostList = new ArrayList<>();\n    zkHostList.add(ANY_ZK_HOST); zkHostList.add(ANY_OTHER_ZK_HOST);\n    try (CloudSolrClient createdClient = new Builder(zkHostList, Optional.of(ANY_CHROOT))\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","date":"2018-03-10 23:45:43","endLine":63,"groupId":"10511","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSeveralZkHostsSpecifiedSingly","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/6660c684faff4d5bf6cf518d745f6607a650e3.src","preCode":"  public void testSeveralZkHostsSpecifiedSingly() throws IOException {\n    try (CloudSolrClient createdClient = new Builder()\n        .withZkHost(ANY_ZK_HOST)\n        .withZkHost(ANY_OTHER_ZK_HOST)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2018-03-10 22:30:57","commitOrder":2,"curCode":"  public void testSeveralZkHostsSpecifiedTogether() throws IOException {\n    final ArrayList<String> zkHosts = new ArrayList<String>();\n    zkHosts.add(ANY_ZK_HOST);\n    zkHosts.add(ANY_OTHER_ZK_HOST);\n    try(CloudSolrClient createdClient = new Builder(zkHosts, Optional.of(ANY_CHROOT)).build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","date":"2018-03-10 23:45:43","endLine":76,"groupId":"10511","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testSeveralZkHostsSpecifiedTogether","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/6660c684faff4d5bf6cf518d745f6607a650e3.src","preCode":"  public void testSeveralZkHostsSpecifiedTogether() throws IOException {\n    final ArrayList<String> zkHosts = new ArrayList<String>();\n    zkHosts.add(ANY_ZK_HOST);\n    zkHosts.add(ANY_OTHER_ZK_HOST);\n    try(CloudSolrClient createdClient = new Builder()\n        .withZkHost(zkHosts)\n        .withZkChroot(ANY_CHROOT)\n        .build()) {\n      final String clientZkHost = createdClient.getZkHost();\n    \n      assertTrue(clientZkHost.contains(ANY_ZK_HOST));\n      assertTrue(clientZkHost.contains(ANY_OTHER_ZK_HOST));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientBuilderTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"}],"commitId":"971bd26df6ecfa9c266910a8008a2dad52d4443a","commitMessage":"@@@SOLR-11629: Add new CloudSolrClient.Builder ctors\n\nCloudSolrClient.Builder can be pointed at a Solr cluster in two ways: a\nZK connection string.  or one or more Solr base URLs.  One of these two\nvalues must be provided to create a working CloudSolrClient.\n\nSince these values are required.  this commit introduces two new ctors. \none for each means of CloudSolrClient setup.  It deprecates the existing\nno-arg CloudSolrClient ctor.\n\nTogether.  these changes make it clearer to our users that these options\nare required (and mutually exclusive).\n","date":"2018-03-10 23:45:43","modifiedFileCount":"24","status":"M","submitter":"Jason Gerlowski"}]
