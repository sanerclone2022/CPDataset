[{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":8,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2020-06-18 05:51:41","endLine":172,"groupId":"56405","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/aa/f938a436491dbcd9c0767b2d25e65262fb317e.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":72,"status":"NB"},{"authorDate":"2020-06-25 11:08:51","commitOrder":8,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"B"}],"commitId":"57a892f896f543913d6b22a81577f69184cd94b6","commitMessage":"@@@SOLR-14404 CoreContainer level custom requesthandlers (#1432)\n\nSOLR-14404 CoreContainer level custom requesthandlers","date":"2020-06-25 11:08:51","modifiedFileCount":"12","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2020-07-31 16:23:18","commitOrder":9,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2020-07-31 16:23:18","endLine":171,"groupId":"56405","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/811561ca007f62cd402bd74a5a6d927c43db71.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n\n      );\n      waitForAllNodesHaveFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n\n\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      }\n\n\n\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":9,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"f443edebd207f93398b35520b24e2b66eba3609a","commitMessage":"@@@SOLR-14681: Introduce ability to delete .jar stored in the Package Store (#1702)\n\n","date":"2020-07-31 16:23:18","modifiedFileCount":"7","status":"M","submitter":"Marcus"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2020-10-22 09:35:47","commitOrder":10,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .GET()\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .GET()\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2020-10-22 09:35:47","endLine":171,"groupId":"18476","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/ef63dd06d7b006b57ba9202631d764d1d7e313.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":10,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"e826b1f3446cf5ac2e95b205dfec442f6719ec25","commitMessage":"@@@refactor method names\n","date":"2020-10-22 09:35:47","modifiedFileCount":"13","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2020-10-22 12:25:31","commitOrder":11,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2020-10-22 12:25:31","endLine":171,"groupId":"56405","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/930d064df1468d9d439b54a43d1c0365c23d50.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .GET()\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .GET()\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":11,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"052efd62aec3262744049a9b6002348df1d6e1c4","commitMessage":"@@@Revert \"refactor method names\"\n\nThis reverts commit e826b1f3446cf5ac2e95b205dfec442f6719ec25.\n\naccidental commite reverted\n","date":"2020-10-22 12:25:31","modifiedFileCount":"13","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2021-06-03 06:17:26","commitOrder":12,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map<String,Object> expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2021-06-03 06:17:26","endLine":174,"groupId":"18476","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/07/a177980175400ebef22c5e16f8603e32ed228e.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Utils.makeMap(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Utils.makeMap(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":12,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2021-06-18 14:43:28","commitOrder":13,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map<String,Object> expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2021-06-18 14:43:28","endLine":171,"groupId":"18476","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6f/d4f7be90a73a0c113b0fe9afdb23e01316b35e.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\r\n\r\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map<String,Object> expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0[0]:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":13,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"2733babf689b1ebd2881548abdc51faead826325","commitMessage":"@@@SOLR-15448: fixed test failures\n","date":"2021-06-18 14:43:28","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":14,"curCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map<String,Object> expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            List<?> l = (List<?>) o;\n            assertEquals(2, l.size());\n            Set<String> expectedKeys = Set.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","date":"2021-07-13 23:49:56","endLine":168,"groupId":"102636","id":13,"instanceNumber":1,"isCurCommit":1,"methodName":"testPackageStoreManagement","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/5be647f980f58507cbd9c34fb8bde7fc591a61.src","preCode":"  public void testPackageStoreManagement() throws Exception {\n    MiniSolrCloudCluster cluster =\n        configureCluster(4)\n        .withJettyConfig(jetty -> jetty.enableV2(true))\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    try {\n\n      byte[] derFile = readFile(\"cryptokeys/pub_key512.der\");\n      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+\"/pub_key512.der\", cluster);\n\n      try {\n        postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n            \"/package/mypkg/v1.0/runtimelibs.jar\",\n            \"j+Rflxi64tXdqosIhbusqi6GTwZq8znunC/dzwcWW0/dHlFGKDurOaE1Nz9FSPJuXbHkVLj638yZ0Lp1ssnoYA==\"\n        );\n        fail(\"should have failed because of wrong signature \");\n      } catch (RemoteExecutionException e) {\n        assertThat(e.getMessage(), containsString(\"Signature does not match\"));\n      }\n\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs.jar\",\n          \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg/v1.0\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg/v1.0[0]:name\", \"runtimelibs.jar\",\n              \":files:/package/mypkg/v1.0[0]:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              \":files:/package/mypkg/v1.0[0]:sig[0]\", \"L3q/qIGs4NaF6JiO0ZkMUFa88j0OmYc+I6O7BOdNuMct/xoZ4h73aZHZGc0+nmI1f/U3bOlMPINlSOM6LK3JpQ==\"\n          )\n      );\n\n      assertResponseValues(10,\n          cluster.getSolrClient(),\n          new V2Request.Builder(\"/node/files/package/mypkg\")\n              .withMethod(SolrRequest.METHOD.GET)\n              .build(),\n          Map.of(\n              \":files:/package/mypkg[0]:name\", \"v1.0\",\n              \":files:/package/mypkg[0]:dir\", \"true\"\n          )\n      );\n\n      Map<String,Object> expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:name\", \"runtimelibs.jar\",\n          \":files:/package/mypkg/v1.0/runtimelibs.jar:sha512\", \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, true);\n      postFile(cluster.getSolrClient(), getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\"),\n          \"/package/mypkg/v1.0/runtimelibs_v2.jar\",\n          null\n      );\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:name\", \"runtimelibs_v2.jar\",\n          \":files:/package/mypkg/v1.0/runtimelibs_v2.jar:sha512\",\n          \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\"\n      );\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs_v2.jar\", expected, false);\n      expected = Map.of(\n          \":files:/package/mypkg/v1.0\", (Predicate<Object>) o -> {\n            @SuppressWarnings({\"rawtypes\"})\n            List l = (List) o;\n            assertEquals(2, l.size());\n            @SuppressWarnings({\"rawtypes\"})\n            Set expectedKeys = ImmutableSet.of(\"runtimelibs_v2.jar\", \"runtimelibs.jar\");\n            for (Object file : l) {\n              if(! expectedKeys.contains(Utils.getObjectByPath(file, true, \"name\"))) return false;\n            }\n            return true;\n          }\n      );\n      for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n        String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n        String url = baseUrl + \"/node/files/package/mypkg/v1.0?wt=javabin\";\n        assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n      }\n      \r\n      DistribPackageStore.deleteZKFileEntry(cluster.getZkClient(), \"/package/mypkg/v1.0/runtimelibs.jar\");\n      JettySolrRunner j = cluster.getRandomJetty(random());\n      String path = j.getBaseURLV2() + \"/cluster/files\" + \"/package/mypkg/v1.0/runtimelibs.jar\";\n      HttpDelete del = new HttpDelete(path);\n      try(HttpSolrClient cl = (HttpSolrClient) j.newClient()) {\n        Utils.executeHttpMethod(cl.getHttpClient(), path, Utils.JSONCONSUMER, del);\n      }\n      expected = Collections.singletonMap(\":files:/package/mypkg/v1.0/runtimelibs.jar\", null);\n      checkAllNodesForFile(cluster,\"/package/mypkg/v1.0/runtimelibs.jar\", expected, false);\n    } finally {\n      cluster.shutdown();\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":14,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"102636","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
