[{"authorTime":"2016-06-18 07:49:48","codes":[{"authorDate":"2016-12-19 23:15:04","commitOrder":2,"curCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","date":"2016-12-19 23:15:04","endLine":121,"groupId":"30784","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"renewDelegationToken","params":"(finalStringtoken@finalintexpectedStatusCode@finalStringuser@HttpSolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/c6b8cbe9bf7d85467f93c291fbbef13b5a757a.src","preCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"},{"authorDate":"2016-06-18 07:49:48","commitOrder":2,"curCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(USER_PARAM, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(USER_PARAM);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","date":"2016-07-29 00:59:05","endLine":133,"groupId":"31467","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"renewDelegationToken","params":"(finalStringtoken@finalintexpectedStatusCode@finalStringuser@HttpSolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ae/1c4393b88e53480b041e93b6387afe2907d30a.src","preCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(USER_PARAM, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(USER_PARAM);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":108,"status":"NB"}],"commitId":"a1a8b2864e621c18aa86b21d4a244233e991a47d","commitMessage":"@@@SOLR-9513: Generic Hadoop authentication plugins.  GenericHadoopAuthPlugin and ConfigurableInternodeAuthHadoopPlugin\n","date":"2016-12-19 23:15:04","modifiedFileCount":"7","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2020-03-28 14:06:06","codes":[{"authorDate":"2020-03-28 14:06:06","commitOrder":3,"curCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (BaseHttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","date":"2020-03-28 14:06:06","endLine":123,"groupId":"102844","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"renewDelegationToken","params":"(finalStringtoken@finalintexpectedStatusCode@finalStringuser@HttpSolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/98/51710f817ed3f696254b28541d4bfed9f44a7c.src","preCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(PseudoAuthenticator.USER_NAME, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(PseudoAuthenticator.USER_NAME);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/hadoop/TestDelegationWithHadoopAuth.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2020-03-28 14:06:06","commitOrder":3,"curCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(USER_PARAM, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(USER_PARAM);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (BaseHttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","date":"2020-03-28 14:06:06","endLine":141,"groupId":"102844","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"renewDelegationToken","params":"(finalStringtoken@finalintexpectedStatusCode@finalStringuser@HttpSolrClientclient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b1/ec4aaf88901ff183df69f84bf83751ec9a8afa.src","preCode":"  private long renewDelegationToken(final String token, final int expectedStatusCode,\n      final String user, HttpSolrClient client) throws Exception {\n    DelegationTokenRequest.Renew renew = new DelegationTokenRequest.Renew(token) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = new ModifiableSolrParams(super.getParams());\n        params.set(USER_PARAM, user);\n        return params;\n      }\n\n      @Override\n      public Set<String> getQueryParams() {\n        Set<String> queryParams = super.getQueryParams();\n        queryParams.add(USER_PARAM);\n        return queryParams;\n      }\n    };\n    try {\n      DelegationTokenResponse.Renew renewResponse = renew.process(client);\n      assertEquals(HttpStatus.SC_OK, expectedStatusCode);\n      return renewResponse.getExpirationTime();\n    } catch (HttpSolrClient.RemoteSolrException ex) {\n      assertEquals(expectedStatusCode, ex.code());\n      return -1;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/TestSolrCloudWithDelegationTokens.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"}],"commitId":"132228d4503bf5760d25180fd4c2366900fc7da0","commitMessage":"@@@SOLR-14344: remove deprecated HttpSolrClient's Remote*Exception\n\n* All usages are replaced by BaseHttpSolrClient's Remote*Exception\n","date":"2020-03-28 14:06:06","modifiedFileCount":"37","status":"M","submitter":"Munendra S N"}]
