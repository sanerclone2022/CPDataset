[{"authorTime":"2013-07-04 06:07:51","codes":[{"authorDate":"2013-04-23 05:25:52","commitOrder":3,"curCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","date":"2013-04-23 05:25:52","endLine":187,"groupId":"46865","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddFieldPersistence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7f/b8a31dfe6df3ecf4946472dd2f5c2d04987393.src","preCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":162,"status":"NB"},{"authorDate":"2013-07-04 06:07:51","commitOrder":3,"curCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","date":"2013-07-04 06:07:51","endLine":424,"groupId":"46865","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistUniqueKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/c29c9f8ac1fc65449ccce208432184491ecbe9.src","preCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":390,"status":"B"}],"commitId":"e76d6599d96ef31baebb7de3c4473a9cf0830cd6","commitMessage":"@@@SOLR-5000: ManagedIndexSchema doesn't persist uniqueKey tag after calling addFields method\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1499578 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-07-04 06:07:51","modifiedFileCount":"3","status":"M","submitter":"Steven Rowe"},{"authorTime":"2013-08-14 02:37:26","codes":[{"authorDate":"2013-08-14 02:37:26","commitOrder":4,"curCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","date":"2013-08-14 02:37:26","endLine":193,"groupId":"46865","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddFieldPersistence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/27b67c6b1ec6841d6e1d0cdb37419b375f6c80.src","preCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2013-08-14 02:37:26","commitOrder":4,"curCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","date":"2013-08-14 02:37:26","endLine":435,"groupId":"46865","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistUniqueKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/27b67c6b1ec6841d6e1d0cdb37419b375f6c80.src","preCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    initCore(\"solrconfig-mutable-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"960e49b28843ab845117725800cb2cde6254f400","commitMessage":"@@@SOLR-4952: get all manged schema tests using solrconfig.snippet.randomindexconfig.xml - mainly by removing several solrconfig-*-managed-schema.xml files and using sys props in solrconfig-managed-schema.xml\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1513611 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-08-14 02:37:26","modifiedFileCount":"5","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":5,"curCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","date":"2014-03-12 22:39:17","endLine":193,"groupId":"39428","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddFieldPersistence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/95ef6c86dc408f0448bc34c197b11449c01195.src","preCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":166,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":5,"curCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","date":"2014-03-12 22:39:17","endLine":435,"groupId":"274","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistUniqueKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/95ef6c86dc408f0448bc34c197b11449c01195.src","preCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-09-04 23:56:25","codes":[{"authorDate":"2014-09-04 23:56:25","commitOrder":6,"curCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","date":"2014-09-04 23:56:25","endLine":190,"groupId":"39428","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testAddFieldPersistence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/36606af4135f348c7607f636cf1289ce878f05.src","preCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":163,"status":"M"},{"authorDate":"2014-09-04 23:56:25","commitOrder":6,"curCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","date":"2014-09-04 23:56:25","endLine":432,"groupId":"274","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testPersistUniqueKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/36606af4135f348c7607f636cf1289ce878f05.src","preCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":397,"status":"M"}],"commitId":"3604769c3abad5b41a84fdd390ec3493b5804abc","commitMessage":"@@@LUCENE-5906: Use Files.delete everywhere instead of File.delete\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1622506 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-04 23:56:25","modifiedFileCount":"72","status":"M","submitter":"Robert Muir"},{"authorTime":"2021-09-16 20:43:31","codes":[{"authorDate":"2021-09-16 20:43:31","commitOrder":7,"curCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema.xml\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema.xml\");\n    Files.delete(managedSchemaFile.toPath()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","date":"2021-09-16 20:43:31","endLine":209,"groupId":"102713","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"testAddFieldPersistence","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/a5a79a321defc265288209deb339419792b44d.src","preCode":"  public void testAddFieldPersistence() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); \r\n\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n    \n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n    \n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"M"},{"authorDate":"2021-09-16 20:43:31","commitOrder":7,"curCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema.xml\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema.xml\");\n    Files.delete(managedSchemaFile.toPath()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","date":"2021-09-16 20:43:31","endLine":451,"groupId":"102713","id":10,"instanceNumber":2,"isCurCommit":1,"methodName":"testPersistUniqueKey","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/a5a79a321defc265288209deb339419792b44d.src","preCode":"  public void testPersistUniqueKey() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field-unique-key.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    assertEquals(\"str\", oldSchema.getUniqueKeyField().getName());\n    String fieldName = \"new_field\";\n    String fieldType = \"string\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    assertEquals(\"str\", newSchema.getUniqueKeyField().getName());\n    h.getCore().setLatestSchema(newSchema);\n    log.info(\"####close harness\");\n    h.close();\n    log.info(\"####close harness end\");\n    initCore();\n\n    assertTrue(managedSchemaFile.exists());\n    FileInputStream stream = new FileInputStream(managedSchemaFile);\n    managedSchemaContents = IOUtils.toString(stream, \"UTF-8\");\n    stream.close(); \r\n    assertTrue(managedSchemaContents.contains(\"<field name=\\\"new_field\\\" type=\\\"string\\\" stored=\\\"false\\\"/>\"));\n    IndexSchema newNewSchema = h.getCore().getLatestSchema();\n    assertNotNull(newNewSchema.getUniqueKeyField());\n    assertEquals(\"str\", newNewSchema.getUniqueKeyField().getName());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"df903cbdc1de7fb2c3469b9773d6f9d23d591a5d","commitMessage":"@@@ SOLR-10887: Append .xml to managed-schema file VERSION 2 (#279)\n\nManaged schema file is now called \"managed-schema.xml\".  however there is a fallback to \"managed-schema\" since that is a common legacy name for the file.   Updated the name of the files used in running tests.","date":"2021-09-16 20:43:31","modifiedFileCount":"9","status":"M","submitter":"Eric Pugh"}]
