[{"authorTime":"2017-03-14 15:37:47","codes":[{"authorDate":"2017-03-14 15:37:47","commitOrder":1,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2017-03-14 15:37:47","endLine":765,"groupId":"29312","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/73/328cf85368e64ecec8735265e332dc54da4798.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/TransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":736,"status":"B"},{"authorDate":"2017-03-14 15:37:47","commitOrder":1,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2017-03-14 15:37:47","endLine":527,"groupId":"29312","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/78935d1ec3d547310cce81e337dcc733331d4e.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":498,"status":"B"}],"commitId":"7830462d4b7da3acefff6353419e71cde62d5fee","commitMessage":"@@@SOLR-9835: Create another replication mode for SolrCloud\n","date":"2017-03-14 15:37:47","modifiedFileCount":"35","status":"B","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-09 07:03:34","codes":[{"authorDate":"2020-06-09 07:03:34","commitOrder":2,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ((o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2020-06-09 07:03:34","endLine":776,"groupId":"29312","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/55/5f0eafd0b8479f4f8429f4995dc71aef5d005b.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ((o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/TransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"M"},{"authorDate":"2020-06-09 07:03:34","commitOrder":2,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2020-06-09 07:03:34","endLine":514,"groupId":"29312","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/95/7a1cacc7a683a6c77d2b2512710bf6d94eda05.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":484,"status":"M"}],"commitId":"4dcdd750f2dc892c88a98cc350941e7b8869d67f","commitMessage":"@@@SOLR-14545: Fix or suppress warnings in apache/solr/update\n","date":"2020-06-09 07:03:34","modifiedFileCount":"56","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2020-06-09 07:03:34","commitOrder":3,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ((o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2020-06-09 07:03:34","endLine":776,"groupId":"29312","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/55/5f0eafd0b8479f4f8429f4995dc71aef5d005b.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ((o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/TransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":746,"status":"N"},{"authorDate":"2021-07-08 04:15:36","commitOrder":3,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List<?> entry = (List<?>) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2021-07-08 04:15:36","endLine":515,"groupId":"29312","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/82b6fe3239afaadd6294fe099708414d4f83fc.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":486,"status":"M"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":4,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ((o = super.next()) != null) {\n          List<?> entry = (List<?>) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2021-07-13 23:49:56","endLine":772,"groupId":"122040","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/65/1a0fb04829fe423d5f94f172ac1e0806d16a40.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ((o = super.next()) != null) {\n          @SuppressWarnings({\"rawtypes\"})\n          List entry = (List) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/TransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"M"},{"authorDate":"2021-07-08 04:15:36","commitOrder":4,"curCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List<?> entry = (List<?>) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","date":"2021-07-08 04:15:36","endLine":515,"groupId":"122040","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"next","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/82b6fe3239afaadd6294fe099708414d4f83fc.src","preCode":"    public Object next() throws IOException, InterruptedException {\n      if (versionToPos == null) {\n        versionToPos = new TreeMap<>();\n        Object o;\n        long pos = startingPos;\n\n        long lastVersion = Long.MIN_VALUE;\n        while ( (o = super.next()) != null) {\n          List<?> entry = (List<?>) o;\n          long version = (Long) entry.get(UpdateLog.VERSION_IDX);\n          version = Math.abs(version);\n          versionToPos.put(version, pos);\n          pos = currentPos();\n\n          if (version < lastVersion) inOrder = false;\n          lastVersion = version;\n        }\n        fis.seek(startingPos);\n      }\n\n      if (inOrder) {\n        return super.next();\n      } else {\n        if (iterator == null) iterator = versionToPos.values().iterator();\n        if (!iterator.hasNext()) return null;\n        long pos = iterator.next();\n        if (pos != currentPos()) fis.seek(pos);\n        return super.next();\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/update/HdfsTransactionLog.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":486,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
