[{"authorTime":"2017-09-09 13:02:51","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    EuclideanDistance distance = new EuclideanDistance();\n    return distance.compute(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","date":"2017-08-26 17:07:19","endLine":55,"groupId":"17467","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3f/a0c121892e40321add7e2002e96a48fa7e0716.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    EuclideanDistance distance = new EuclideanDistance();\n    return distance.compute(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EuclideanDistanceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"NB"},{"authorDate":"2017-09-09 13:02:51","commitOrder":2,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    return StatUtils.meanDifference(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n  }\n","date":"2017-09-09 13:02:51","endLine":54,"groupId":"40708","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c9/3c97a4a9088fd670b7ec843e0fbfd51c256f89.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    return StatUtils.meanDifference(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MeanDifferenceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"B"}],"commitId":"8452edb1306a3c146e6d132ad97c5882f7d9d023","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-09-09 13:02:51","modifiedFileCount":"2","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-12-05 10:08:58","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    EuclideanDistance distance = new EuclideanDistance();\n    return distance.compute(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","date":"2017-08-26 17:07:19","endLine":55,"groupId":"17467","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3f/a0c121892e40321add7e2002e96a48fa7e0716.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    EuclideanDistance distance = new EuclideanDistance();\n    return distance.compute(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EuclideanDistanceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"N"},{"authorDate":"2017-12-05 10:08:58","commitOrder":3,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    return StatUtils.meanDifference(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n  }\n","date":"2017-12-05 10:09:41","endLine":54,"groupId":"40708","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ff/9ddb1d877f6058bbf31ac547bf91e3969572b9.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    return StatUtils.meanDifference(\n        ((List) first).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((BigDecimal) value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MeanDifferenceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"}],"commitId":"8750e5f2a97e2011da7a3c821dca38a31d0f9bf1","commitMessage":"@@@SOLR-11485: Add olsRegress.  spline and derivative Stream Evaluators\n","date":"2017-12-05 10:09:41","modifiedFileCount":"46","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    EuclideanDistance distance = new EuclideanDistance();\n    return distance.compute(\n      ((List<?>)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List<?>)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","date":"2021-06-22 00:19:37","endLine":55,"groupId":"10233","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/a572e6dfbb3b846a0430879dcf83aa61403fe6.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    EuclideanDistance distance = new EuclideanDistance();\n    return distance.compute(\n      ((List)first).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray(),\n      ((List)second).stream().mapToDouble(value -> ((BigDecimal)value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EuclideanDistanceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":36,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    return StatUtils.meanDifference(\n        ((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List<?>) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n  }\n","date":"2021-06-22 00:19:37","endLine":53,"groupId":"10233","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"doWork","params":"(Objectfirst@Objectsecond)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/75/a4a68eb248df2d2ac0aafe5b5f099b482164d8.src","preCode":"  public Object doWork(Object first, Object second) throws IOException{\n    if(null == first){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the first value\",toExpression(constructingFactory)));\n    }\n    if(null == second){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null found for the second value\",toExpression(constructingFactory)));\n    }\n    if(!(first instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n    if(!(second instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list of numbers\",toExpression(constructingFactory), first.getClass().getSimpleName()));\n    }\n\n    return StatUtils.meanDifference(\n        ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),\n        ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()\n    );\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MeanDifferenceEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":35,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
