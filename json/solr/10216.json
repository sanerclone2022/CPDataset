[{"authorTime":"2018-10-04 22:27:32","codes":[{"authorDate":"2018-10-01 08:56:03","commitOrder":2,"curCode":"  public static ConvexHull2D getConvexHull(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      MonotoneChain monotoneChain = new MonotoneChain();\n      ConvexHull2D convexHull2D = monotoneChain.generate(points);\n      return convexHull2D;\n    } else {\n      throw new IOException(\"The convexHull function operates on a matrix of 2D vectors\");\n    }\n  }\n","date":"2018-10-01 08:56:03","endLine":60,"groupId":"8929","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getConvexHull","params":"(Matrixmatrix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2b/e2ee382f1a7a778cf0307302cb1cf29bff4709.src","preCode":"  public static ConvexHull2D getConvexHull(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      MonotoneChain monotoneChain = new MonotoneChain();\n      ConvexHull2D convexHull2D = monotoneChain.generate(points);\n      return convexHull2D;\n    } else {\n      throw new IOException(\"The convexHull function operates on a matrix of 2D vectors\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConvexHullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"NB"},{"authorDate":"2018-10-04 22:27:32","commitOrder":2,"curCode":"  public static EnclosingBall getEnclosingDisk(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      WelzlEncloser<Euclidean2D, Vector2D> welzlEncloser = new WelzlEncloser(.001, new DiskGenerator());\n      EnclosingBall enclosingBall = welzlEncloser.enclose(points);\n      return enclosingBall;\n    } else {\n      throw new IOException(\"The enclosingDisk function operates on a matrix of 2D vectors\");\n    }\n  }\n","date":"2018-10-04 22:36:27","endLine":62,"groupId":"8929","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getEnclosingDisk","params":"(Matrixmatrix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/5d33f9064789984506777700c127735a963673.src","preCode":"  public static EnclosingBall getEnclosingDisk(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      WelzlEncloser<Euclidean2D, Vector2D> welzlEncloser = new WelzlEncloser(.001, new DiskGenerator());\n      EnclosingBall enclosingBall = welzlEncloser.enclose(points);\n      return enclosingBall;\n    } else {\n      throw new IOException(\"The enclosingDisk function operates on a matrix of 2D vectors\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnclosingDiskEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"a0487b04ea0b676e3732e49de1ca0e38a91aab3c","commitMessage":"@@@SOLR-12811: Add enclosingDisk and associated geometric Stream Evaluators\n","date":"2018-10-04 22:36:27","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":3,"curCode":"  public static ConvexHull2D getConvexHull(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList<>(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      MonotoneChain monotoneChain = new MonotoneChain();\n      ConvexHull2D convexHull2D = monotoneChain.generate(points);\n      return convexHull2D;\n    } else {\n      throw new IOException(\"The convexHull function operates on a matrix of 2D vectors\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":60,"groupId":"8929","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"getConvexHull","params":"(Matrixmatrix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ef/ff30b45678370cddb9b735917ac1da30207463.src","preCode":"  public static ConvexHull2D getConvexHull(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      MonotoneChain monotoneChain = new MonotoneChain();\n      ConvexHull2D convexHull2D = monotoneChain.generate(points);\n      return convexHull2D;\n    } else {\n      throw new IOException(\"The convexHull function operates on a matrix of 2D vectors\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConvexHullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-06-08 09:31:51","commitOrder":3,"curCode":"  public static EnclosingBall getEnclosingDisk(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList<>(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n\n      @SuppressWarnings({\"unchecked\"})\n      WelzlEncloser<Euclidean2D, Vector2D> welzlEncloser = new WelzlEncloser(.001, new DiskGenerator());\n      EnclosingBall enclosingBall = welzlEncloser.enclose(points);\n      return enclosingBall;\n    } else {\n      throw new IOException(\"The enclosingDisk function operates on a matrix of 2D vectors\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":65,"groupId":"8929","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getEnclosingDisk","params":"(Matrixmatrix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1d/bf183bf629bcc634e61ffa917a7d283d6c7667.src","preCode":"  public static EnclosingBall getEnclosingDisk(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      WelzlEncloser<Euclidean2D, Vector2D> welzlEncloser = new WelzlEncloser(.001, new DiskGenerator());\n      EnclosingBall enclosingBall = welzlEncloser.enclose(points);\n      return enclosingBall;\n    } else {\n      throw new IOException(\"The enclosingDisk function operates on a matrix of 2D vectors\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnclosingDiskEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":49,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2020-06-08 09:31:51","commitOrder":4,"curCode":"  public static ConvexHull2D getConvexHull(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList<>(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      MonotoneChain monotoneChain = new MonotoneChain();\n      ConvexHull2D convexHull2D = monotoneChain.generate(points);\n      return convexHull2D;\n    } else {\n      throw new IOException(\"The convexHull function operates on a matrix of 2D vectors\");\n    }\n  }\n","date":"2020-06-08 09:31:51","endLine":60,"groupId":"10216","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getConvexHull","params":"(Matrixmatrix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ef/ff30b45678370cddb9b735917ac1da30207463.src","preCode":"  public static ConvexHull2D getConvexHull(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList<>(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      MonotoneChain monotoneChain = new MonotoneChain();\n      ConvexHull2D convexHull2D = monotoneChain.generate(points);\n      return convexHull2D;\n    } else {\n      throw new IOException(\"The convexHull function operates on a matrix of 2D vectors\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ConvexHullEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public static EnclosingBall<Euclidean2D, Vector2D> getEnclosingDisk(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList<>(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n      WelzlEncloser<Euclidean2D, Vector2D> welzlEncloser = new WelzlEncloser<>(.001, new DiskGenerator());\n      EnclosingBall<Euclidean2D, Vector2D> enclosingBall = welzlEncloser.enclose(points);\n      return enclosingBall;\n    } else {\n      throw new IOException(\"The enclosingDisk function operates on a matrix of 2D vectors\");\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":62,"groupId":"10216","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"getEnclosingDisk","params":"(Matrixmatrix)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/be/8ed1c0d6ceb1470521d41fe1030f30343727e2.src","preCode":"  public static EnclosingBall getEnclosingDisk(Matrix matrix) throws IOException {\n    double[][] data = matrix.getData();\n    List<Vector2D> points = new ArrayList<>(data.length);\n    if(data[0].length == 2) {\n      for(double[] row : data) {\n        points.add(new Vector2D(row[0], row[1]));\n      }\n\n\n      @SuppressWarnings({\"unchecked\"})\n      WelzlEncloser<Euclidean2D, Vector2D> welzlEncloser = new WelzlEncloser(.001, new DiskGenerator());\n      EnclosingBall enclosingBall = welzlEncloser.enclose(points);\n      return enclosingBall;\n    } else {\n      throw new IOException(\"The enclosingDisk function operates on a matrix of 2D vectors\");\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EnclosingDiskEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
