[{"authorTime":"2017-04-28 04:30:46","codes":[{"authorDate":"2017-04-29 09:45:56","commitOrder":2,"curCode":"  public boolean isStream(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && TupleStream.class.isAssignableFrom(clazz)){\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2017-04-29 09:45:56","endLine":390,"groupId":"1633","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"isStream","params":"(StreamExpressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/70/3acf4118d058d25bd4978e4cd7ad8adab7b18b.src","preCode":"  public boolean isStream(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && TupleStream.class.isAssignableFrom(clazz)){\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"B"},{"authorDate":"2017-04-28 04:30:46","commitOrder":2,"curCode":"  public boolean isEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2017-04-28 05:03:29","endLine":390,"groupId":"1632","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isEvaluator","params":"(StreamExpressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f0/3bf489c8b461258de7472f5617e51755ff7aba.src","preCode":"  public boolean isEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":380,"status":"NB"}],"commitId":"460b3b36e9544b4be75cf1d25c89d8bde8ec5c74","commitMessage":"@@@SOLR-10559: Updates TupStream and enhances evaluators to work over values in the SteamContext\n","date":"2017-04-29 09:45:56","modifiedFileCount":"8","status":"M","submitter":"Dennis Gove"},{"authorTime":"2019-12-23 12:20:26","codes":[{"authorDate":"2019-12-23 12:20:26","commitOrder":3,"curCode":"  public boolean isStream(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && TupleStream.class.isAssignableFrom(clazz)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2019-12-23 12:20:26","endLine":414,"groupId":"10361","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"isStream","params":"(StreamExpressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/176dd212c3e82fd07c7479b3863fedaf18857d.src","preCode":"  public boolean isStream(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && TupleStream.class.isAssignableFrom(clazz)){\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":403,"status":"M"},{"authorDate":"2019-12-23 12:20:26","commitOrder":3,"curCode":"  public boolean isEvaluator(StreamExpression expression) throws IOException {\n    String function = expression.getFunctionName();\n    Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(function);\n    if (classSupplier != null) {\n      Class<? extends Expressible> clazz = classSupplier.get();\n      if (Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n","date":"2019-12-23 12:20:26","endLine":427,"groupId":"10361","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isEvaluator","params":"(StreamExpressionexpression)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/176dd212c3e82fd07c7479b3863fedaf18857d.src","preCode":"  public boolean isEvaluator(StreamExpression expression) throws IOException{\n    String function = expression.getFunctionName();\n    if(functionNames.containsKey(function)){\n      Class<? extends Expressible> clazz = functionNames.get(function);\n      if(Expressible.class.isAssignableFrom(clazz) && StreamEvaluator.class.isAssignableFrom(clazz)){\n        return true;\n      }\n    }\n\n    return false;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":416,"status":"M"}],"commitId":"ef15ae9805557685874c2a3269dae15ef7f58ccf","commitMessage":"@@@SOLR-14125 : Streaming expressions to be loadable from packages (#1108)\n\n SOLR-14125: Make <expressible> plugins work with packages","date":"2019-12-23 12:20:26","modifiedFileCount":"8","status":"M","submitter":"Noble Paul"}]
