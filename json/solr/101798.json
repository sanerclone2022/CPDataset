[{"authorTime":"2017-08-01 23:01:17","codes":[{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","date":"2017-10-18 01:52:02","endLine":202,"groupId":"43720","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"constantIntTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/df7da50292170a6b45341095e115101df2152c.src","preCode":"  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"B"},{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public void constantFloatTest() {\n    ConstantFloatValue val = new ConstantFloatValue(24F);\n    \n    assertTrue(val.exists());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24.0\", val.getString());\n    assertEquals(new Float(24F), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24.0\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Float(24F), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","date":"2017-10-18 01:52:02","endLine":276,"groupId":"43721","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constantFloatTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/df7da50292170a6b45341095e115101df2152c.src","preCode":"  public void constantFloatTest() {\n    ConstantFloatValue val = new ConstantFloatValue(24F);\n    \n    assertTrue(val.exists());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24.0\", val.getString());\n    assertEquals(new Float(24F), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24.0\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Float(24F), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"B"}],"commitId":"86d84bff82ff8c7a1f6cadfe307685a4dce2f8d9","commitMessage":"@@@SOLR-11145.  SOLR-11146: Added comprehensive unit tests for Analytics Component 2.0 as well as analytics bug fixes.\n","date":"2017-10-18 01:52:02","modifiedFileCount":"41","status":"B","submitter":"Houston Putman"},{"authorTime":"2018-07-16 18:24:45","codes":[{"authorDate":"2018-07-16 18:24:45","commitOrder":2,"curCode":"  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(24, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","date":"2018-07-16 18:24:45","endLine":202,"groupId":"101798","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"constantIntTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/ccd1fe3f30709ee1850e8daf9fea056fa6ce40.src","preCode":"  public void constantIntTest() {\n    ConstantIntValue val = new ConstantIntValue(24);\n    \n    assertTrue(val.exists());\n    assertEquals(24, val.getInt());\n    assertEquals(24L, val.getLong());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24\", val.getString());\n    assertEquals(new Integer(24), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamInts( value -> {\n      assertEquals(24, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamLongs( value -> {\n      assertEquals(24L, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Integer(24), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":154,"status":"M"},{"authorDate":"2018-07-16 18:24:45","commitOrder":2,"curCode":"  public void constantFloatTest() {\n    ConstantFloatValue val = new ConstantFloatValue(24F);\n    \n    assertTrue(val.exists());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24.0\", val.getString());\n    assertEquals(24F, val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24.0\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(24F, value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","date":"2018-07-16 18:24:45","endLine":276,"groupId":"101798","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"constantFloatTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/ccd1fe3f30709ee1850e8daf9fea056fa6ce40.src","preCode":"  public void constantFloatTest() {\n    ConstantFloatValue val = new ConstantFloatValue(24F);\n    \n    assertTrue(val.exists());\n    assertEquals(24F, val.getFloat(), .00001);\n    assertEquals(24.0, val.getDouble(), .00001);\n    assertEquals(\"24.0\", val.getString());\n    assertEquals(new Float(24F), val.getObject());\n    \n    TestIntValue counter = new TestIntValue();\n    counter.setValue(0);\n    val.streamFloats( value -> {\n      assertEquals(24F, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamDoubles( value -> {\n      assertEquals(24.0, value, .00001);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamStrings( value -> {\n      assertEquals(\"24.0\", value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n    counter.setValue(0);\n    val.streamObjects( value -> {\n      assertEquals(new Float(24F), value);\n      assertEquals(0, counter.getInt());\n      counter.setValue(1);\n    });\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/ConstantValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":242,"status":"M"}],"commitId":"c97f27b06c1d7c250e9596a9bc7bf5ca11ef6ad3","commitMessage":"@@@Merge branch 'remove-constructor-wrapper-classes' of https://github.com/michaelbraun/lucene-solr:\nLUCENE-8345.  GitHub PR #392: Remove instantiation of redundant wrapper classes for primitives; add wrapper class constructors to forbiddenapis.\nThis closes #392\n","date":"2018-07-16 18:24:45","modifiedFileCount":"96","status":"M","submitter":"Uwe Schindler"}]
