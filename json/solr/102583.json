[{"authorTime":"2011-12-02 05:49:27","codes":[{"authorDate":"2012-10-21 11:31:29","commitOrder":3,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n","date":"2012-10-21 11:31:29","endLine":112,"groupId":"2930","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/a71ce8ade6c51c2d14a3b8ee14864c292b8362.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"B"},{"authorDate":"2011-12-02 05:49:27","commitOrder":3,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","date":"2011-12-02 05:49:27","endLine":58,"groupId":"50766","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/7d86e2391c4cb0de6124df05b504bdb36d23af.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"NB"}],"commitId":"49a4f8b07c035a4444b59989b429de5ea79dcffc","commitMessage":"@@@SOLR-3906: add factory for AnalyzingSuggester\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1400565 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2012-10-21 11:31:29","modifiedFileCount":"3","status":"M","submitter":"Robert Muir"},{"authorTime":"2011-12-02 05:49:27","codes":[{"authorDate":"2013-04-22 22:26:55","commitOrder":4,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n","date":"2013-04-22 22:26:55","endLine":112,"groupId":"2930","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/bcb51b4edc15c06869c4abab8a541164c22993.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"M"},{"authorDate":"2011-12-02 05:49:27","commitOrder":4,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","date":"2011-12-02 05:49:27","endLine":58,"groupId":"50766","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/7d86e2391c4cb0de6124df05b504bdb36d23af.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"28b7111dc79fb0095814d617a5879fb93e70fb9c","commitMessage":"@@@SOLR-3251: Dynamically add fields to schema.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1470539 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-04-22 22:26:55","modifiedFileCount":"120","status":"M","submitter":"Steven Rowe"},{"authorTime":"2011-12-02 05:49:27","codes":[{"authorDate":"2013-10-30 19:11:17","commitOrder":5,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","date":"2013-10-30 19:11:17","endLine":122,"groupId":"2930","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/d4a186d7dc23df507ce6ebd7ddca19e7c80470.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm, maxGraphExpansions);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2011-12-02 05:49:27","commitOrder":5,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","date":"2011-12-02 05:49:27","endLine":58,"groupId":"50766","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/7d86e2391c4cb0de6124df05b504bdb36d23af.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"9ba1122f5545e158a115e264bf1517337feb9695","commitMessage":"@@@LUCENE-5313: move preservePositionIncrements from setter to ctor\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1537038 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-10-30 19:11:17","modifiedFileCount":"6","status":"M","submitter":"Michael McCandless"},{"authorTime":"2011-12-02 05:49:27","codes":[{"authorDate":"2013-11-23 21:46:12","commitOrder":6,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","date":"2013-11-23 21:46:12","endLine":126,"groupId":"2930","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/a9d3a661bd161867af6e0b4c4393adc7e6405a.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2011-12-02 05:49:27","commitOrder":6,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","date":"2011-12-02 05:49:27","endLine":58,"groupId":"50766","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/7d86e2391c4cb0de6124df05b504bdb36d23af.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"7763793c55dd62b8655e524e185bb8ef5f1405db","commitMessage":"@@@SOLR-5378: A new SuggestComponent that fully utilizes the Lucene suggester module and adds pluggable dictionaries.  payloads and better distributed support\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1544793 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-11-23 21:46:12","modifiedFileCount":"6","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2011-12-02 05:49:27","codes":[{"authorDate":"2014-05-03 06:34:25","commitOrder":7,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","date":"2014-05-03 06:34:25","endLine":126,"groupId":"2930","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/8ac8db916f05306e75d26e610c1b943b2bba01.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2011-12-02 05:49:27","commitOrder":7,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","date":"2011-12-02 05:49:27","endLine":58,"groupId":"50766","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/7d86e2391c4cb0de6124df05b504bdb36d23af.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"}],"commitId":"ad37014a3ac6dcd53de14680ddb63b99c25b1f86","commitMessage":"@@@SOLR-6022: Rename getAnalyzer() to getIndexAnalyzer()\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1592076 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-05-03 06:34:25","modifiedFileCount":"31","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2015-10-15 17:58:18","codes":[{"authorDate":"2015-10-15 17:58:18","commitOrder":8,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","date":"2015-10-15 17:58:18","endLine":125,"groupId":"2930","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c3/71c5d33df921405cd886890e62f472790d8a15.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    \n    return new AnalyzingSuggester(indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"},{"authorDate":"2015-10-15 17:58:18","commitOrder":8,"curCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(getTempDir(), \"suggester\", buckets, exactMatchFirst);\n  }\n","date":"2015-10-15 17:58:18","endLine":64,"groupId":"50766","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/12516dca2c5c4621baebe6e3b976ddf82cacfc.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"c855dd5a33f6d80dd5da2a888e4ae19fb27ad97c","commitMessage":"@@@LUCENE-6829: OfflineSorter now uses Directory API; add Directory.createTempOutput and IndexOutput.getName\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1708760 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-10-15 17:58:18","modifiedFileCount":"74","status":"M","submitter":"Michael McCandless"},{"authorTime":"2020-06-13 23:00:58","codes":[{"authorDate":"2020-06-13 23:00:58","commitOrder":9,"curCode":"  public Lookup create(@SuppressWarnings({\"rawtypes\"})NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","date":"2020-06-13 23:00:58","endLine":124,"groupId":"2930","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"create","params":"(@SuppressWarnings({\"rawtypes\"})NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/63cff248613f39afea798e2ffa8bf14cfb46c8.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2020-06-13 23:00:58","commitOrder":9,"curCode":"  public Lookup create(@SuppressWarnings({\"rawtypes\"})NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(getTempDir(), \"suggester\", buckets, exactMatchFirst);\n  }\n","date":"2020-06-13 23:00:58","endLine":63,"groupId":"50766","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"create","params":"(@SuppressWarnings({\"rawtypes\"})NamedListparams@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7b/4d4d8597338937ab89f4dcccc7311e08ca721c.src","preCode":"  public Lookup create(NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(getTempDir(), \"suggester\", buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"a41aa20b0afaadf47ec6e58476a947c6936c1921","commitMessage":"@@@SOLR-14564: Fix or suppress remaining warnings in solr/core\n","date":"2020-06-13 23:00:58","modifiedFileCount":"91","status":"M","submitter":"Erick Erickson"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2021-07-08 04:15:36","commitOrder":10,"curCode":"  public Lookup create(NamedList<?> params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","date":"2021-07-08 04:15:36","endLine":124,"groupId":"102583","id":15,"instanceNumber":1,"isCurCommit":1,"methodName":"create","params":"(NamedList<?>params@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/126fcb02b03d5ad33098176bcc2999c974870a.src","preCode":"  public Lookup create(@SuppressWarnings({\"rawtypes\"})NamedList params, SolrCore core) {\n    \r\n    Object fieldTypeName = params.get(QUERY_ANALYZER);\n    if (fieldTypeName == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + QUERY_ANALYZER + \" parameter is mandatory\");\n    }\n    FieldType ft = core.getLatestSchema().getFieldTypeByName(fieldTypeName.toString());\n    if (ft == null) {\n      throw new IllegalArgumentException(\"Error in configuration: \" + fieldTypeName.toString() + \" is not defined in the schema\");\n    }\n    \n    Analyzer indexAnalyzer = ft.getIndexAnalyzer();\n    Analyzer queryAnalyzer = ft.getQueryAnalyzer();\n    \n    \r\n    \n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n    \n    boolean preserveSep = params.get(PRESERVE_SEP) != null\n    ? Boolean.valueOf(params.get(PRESERVE_SEP).toString())\n    : true;\n    \n    int flags = 0;\n    if (exactMatchFirst) {\n      flags |= AnalyzingSuggester.EXACT_FIRST;\n    }\n    if (preserveSep) {\n      flags |= AnalyzingSuggester.PRESERVE_SEP;\n    }\n    \n    int maxSurfaceFormsPerAnalyzedForm = params.get(MAX_SURFACE_FORMS) != null\n    ? Integer.parseInt(params.get(MAX_SURFACE_FORMS).toString())\n    : 256;\n    \n    int maxGraphExpansions = params.get(MAX_EXPANSIONS) != null\n    ? Integer.parseInt(params.get(MAX_EXPANSIONS).toString())\n    : -1;\n    \n    boolean preservePositionIncrements = params.get(PRESERVE_POSITION_INCREMENTS) != null\n    ? Boolean.valueOf(params.get(PRESERVE_POSITION_INCREMENTS).toString())\n    : false;\n\n    return new AnalyzingSuggester(getTempDir(), \"suggester\", indexAnalyzer, queryAnalyzer, flags, maxSurfaceFormsPerAnalyzedForm,\n        maxGraphExpansions, preservePositionIncrements);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/AnalyzingLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":78,"status":"M"},{"authorDate":"2021-07-08 04:15:36","commitOrder":10,"curCode":"  public Lookup create(NamedList<?> params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(getTempDir(), \"suggester\", buckets, exactMatchFirst);\n  }\n","date":"2021-07-08 04:15:36","endLine":63,"groupId":"102583","id":16,"instanceNumber":2,"isCurCommit":1,"methodName":"create","params":"(NamedList<?>params@SolrCorecore)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e8/643ce488016e87584bf917d6ba7ba28ddeedbe.src","preCode":"  public Lookup create(@SuppressWarnings({\"rawtypes\"})NamedList params, SolrCore core) {\n    int buckets = params.get(WEIGHT_BUCKETS) != null\n    ? Integer.parseInt(params.get(WEIGHT_BUCKETS).toString())\n    : 10;\n\n    boolean exactMatchFirst = params.get(EXACT_MATCH_FIRST) != null\n    ? Boolean.valueOf(params.get(EXACT_MATCH_FIRST).toString())\n    : true;\n\n    return new FSTCompletionLookup(getTempDir(), \"suggester\", buckets, exactMatchFirst);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/spelling/suggest/fst/FSTLookupFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"}]
