[{"authorTime":"2017-08-01 23:01:17","codes":[{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public void objectStreamCastingTest() throws DateTimeParseException {\n    Date date = Date.from(Instant.parse(\"1800-01-01T10:30:15Z\"));\n    TestDateValue val = new TestDateValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(date).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","date":"2017-10-18 01:52:02","endLine":140,"groupId":"8099","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"objectStreamCastingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/fd9511691332a5d1fca1ece9f07fa0c0ebfd1b.src","preCode":"  public void objectStreamCastingTest() throws DateTimeParseException {\n    Date date = Date.from(Instant.parse(\"1800-01-01T10:30:15Z\"));\n    TestDateValue val = new TestDateValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(date).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/CastingDateValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"B"},{"authorDate":"2017-08-01 23:01:17","commitOrder":1,"curCode":"  public void objectStreamCastingTest() {\n    TestBooleanValue val = new TestBooleanValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(false).setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(new Boolean(false)).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","date":"2017-10-18 01:52:02","endLine":129,"groupId":"42993","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"objectStreamCastingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/bfe85adf0cbb82dd1a139521a10311ace0f11d.src","preCode":"  public void objectStreamCastingTest() {\n    TestBooleanValue val = new TestBooleanValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(false).setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(new Boolean(false)).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/CastingBooleanValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"B"}],"commitId":"86d84bff82ff8c7a1f6cadfe307685a4dce2f8d9","commitMessage":"@@@SOLR-11145.  SOLR-11146: Added comprehensive unit tests for Analytics Component 2.0 as well as analytics bug fixes.\n","date":"2017-10-18 01:52:02","modifiedFileCount":"41","status":"B","submitter":"Houston Putman"},{"authorTime":"2018-07-16 18:24:45","codes":[{"authorDate":"2017-08-01 23:01:17","commitOrder":2,"curCode":"  public void objectStreamCastingTest() throws DateTimeParseException {\n    Date date = Date.from(Instant.parse(\"1800-01-01T10:30:15Z\"));\n    TestDateValue val = new TestDateValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(date).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","date":"2017-10-18 01:52:02","endLine":140,"groupId":"101783","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"objectStreamCastingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/fd9511691332a5d1fca1ece9f07fa0c0ebfd1b.src","preCode":"  public void objectStreamCastingTest() throws DateTimeParseException {\n    Date date = Date.from(Instant.parse(\"1800-01-01T10:30:15Z\"));\n    TestDateValue val = new TestDateValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(\"1800-01-01T10:30:15Z\").setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(date).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/CastingDateValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":119,"status":"N"},{"authorDate":"2018-07-16 18:24:45","commitOrder":2,"curCode":"  public void objectStreamCastingTest() {\n    TestBooleanValue val = new TestBooleanValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(false).setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(Boolean.FALSE).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","date":"2018-07-16 18:24:45","endLine":129,"groupId":"101783","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"objectStreamCastingTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/39f7e6a29bfe04d644425d7e1c54f760937234.src","preCode":"  public void objectStreamCastingTest() {\n    TestBooleanValue val = new TestBooleanValue();\n    \n    assertTrue(val instanceof AnalyticsValueStream);\n    AnalyticsValueStream casted = (AnalyticsValueStream)val;\n    \n    \r\n    val.setExists(false);\n    casted.streamObjects( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    \r\n    val.setValue(false).setExists(true);\n    Iterator<Object> values = Arrays.<Object>asList(new Boolean(false)).iterator();\n    casted.streamObjects( value -> {\n      assertTrue(values.hasNext());\n      assertEquals(values.next(), value);\n    });\n    assertFalse(values.hasNext());\n  }\n","realPath":"solr/contrib/analytics/src/test/org/apache/solr/analytics/value/CastingBooleanValueTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"c97f27b06c1d7c250e9596a9bc7bf5ca11ef6ad3","commitMessage":"@@@Merge branch 'remove-constructor-wrapper-classes' of https://github.com/michaelbraun/lucene-solr:\nLUCENE-8345.  GitHub PR #392: Remove instantiation of redundant wrapper classes for primitives; add wrapper class constructors to forbiddenapis.\nThis closes #392\n","date":"2018-07-16 18:24:45","modifiedFileCount":"96","status":"M","submitter":"Uwe Schindler"}]
