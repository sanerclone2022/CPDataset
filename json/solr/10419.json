[{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":5,"curCode":"  public static void doDecodePerf(String[] args) throws Exception {\n    int arg=0;\n    int nThreads = Integer.parseInt(args[arg++]);\n    int nBuffers = Integer.parseInt(args[arg++]);\n    final long iter = Long.parseLong(args[arg++]);\n    int cacheSz = Integer.parseInt(args[arg++]);\n\n    Random r = new Random(0);\n\n    final byte[][] buffers = new byte[nBuffers][];\n\n    for (int bufnum=0; bufnum<nBuffers; bufnum++) {\n      SolrDocument sdoc = new SolrDocument();\n      sdoc.put(\"id\", \"my_id_\" + bufnum);\n      sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n      sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n      sdoc.put(\"license\", str(r, 10));\n      sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n      sdoc.put(\"modified_dt\", r.nextInt(1000000));\n      sdoc.put(\"creation_dt\", r.nextInt(1000000));\n      sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n      sdoc.put(\"clean\", r.nextBoolean());\n      sdoc.put(\"dirty\", r.nextBoolean());\n      sdoc.put(\"employed\", r.nextBoolean());\n      sdoc.put(\"priority\", r.nextInt(100));\n      sdoc.put(\"dependents\", r.nextInt(6));\n      sdoc.put(\"level\", r.nextInt(101));\n      sdoc.put(\"education_level\", r.nextInt(10));\n      \r\n      sdoc.put(\"state\", \"S\"+r.nextInt(50));\n      sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n      sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n      sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n\n      buffers[bufnum] = getBytes(sdoc);\n    }\n\n    int ret = 0;\n    final RTimer timer = new RTimer();\n    ConcurrentLRUCache underlyingCache = cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz-cacheSz/10,cacheSz,cacheSz/10,false,true,null) : null;  \r\n    final JavaBinCodec.StringCache stringCache = underlyingCache==null ? null : new JavaBinCodec.StringCache(underlyingCache);\n    if (nThreads <= 0) {\n      ret += doDecode(buffers, iter, stringCache);\n    } else {\n      runInThreads(nThreads, () -> {\n        try {\n          doDecode(buffers, iter, stringCache);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      });\n    }\n\n    long n = iter * Math.max(1,nThreads);\n    System.out.println(\"ret=\" + ret + \" THROUGHPUT=\" + (n*1000 / timer.getTime()));\n    if (underlyingCache != null) System.out.println(\"cache: hits=\" + underlyingCache.getStats().getCumulativeHits() + \" lookups=\" + underlyingCache.getStats().getCumulativeLookups() + \" size=\" + underlyingCache.getStats().getCurrentSize());\n  }\n","date":"2016-10-03 03:18:22","endLine":591,"groupId":"30782","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doDecodePerf","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/96/ddc8b223f27d3e90d504f69897a32f928b4779.src","preCode":"  public static void doDecodePerf(String[] args) throws Exception {\n    int arg=0;\n    int nThreads = Integer.parseInt(args[arg++]);\n    int nBuffers = Integer.parseInt(args[arg++]);\n    final long iter = Long.parseLong(args[arg++]);\n    int cacheSz = Integer.parseInt(args[arg++]);\n\n    Random r = new Random(0);\n\n    final byte[][] buffers = new byte[nBuffers][];\n\n    for (int bufnum=0; bufnum<nBuffers; bufnum++) {\n      SolrDocument sdoc = new SolrDocument();\n      sdoc.put(\"id\", \"my_id_\" + bufnum);\n      sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n      sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n      sdoc.put(\"license\", str(r, 10));\n      sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n      sdoc.put(\"modified_dt\", r.nextInt(1000000));\n      sdoc.put(\"creation_dt\", r.nextInt(1000000));\n      sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n      sdoc.put(\"clean\", r.nextBoolean());\n      sdoc.put(\"dirty\", r.nextBoolean());\n      sdoc.put(\"employed\", r.nextBoolean());\n      sdoc.put(\"priority\", r.nextInt(100));\n      sdoc.put(\"dependents\", r.nextInt(6));\n      sdoc.put(\"level\", r.nextInt(101));\n      sdoc.put(\"education_level\", r.nextInt(10));\n      \r\n      sdoc.put(\"state\", \"S\"+r.nextInt(50));\n      sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n      sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n      sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n\n      buffers[bufnum] = getBytes(sdoc);\n    }\n\n    int ret = 0;\n    final RTimer timer = new RTimer();\n    ConcurrentLRUCache underlyingCache = cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz-cacheSz/10,cacheSz,cacheSz/10,false,true,null) : null;  \r\n    final JavaBinCodec.StringCache stringCache = underlyingCache==null ? null : new JavaBinCodec.StringCache(underlyingCache);\n    if (nThreads <= 0) {\n      ret += doDecode(buffers, iter, stringCache);\n    } else {\n      runInThreads(nThreads, () -> {\n        try {\n          doDecode(buffers, iter, stringCache);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      });\n    }\n\n    long n = iter * Math.max(1,nThreads);\n    System.out.println(\"ret=\" + ret + \" THROUGHPUT=\" + (n*1000 / timer.getTime()));\n    if (underlyingCache != null) System.out.println(\"cache: hits=\" + underlyingCache.getStats().getCumulativeHits() + \" lookups=\" + underlyingCache.getStats().getCumulativeLookups() + \" size=\" + underlyingCache.getStats().getCurrentSize());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"MB"},{"authorDate":"2016-10-03 03:18:22","commitOrder":5,"curCode":"  public static SolrDocument sampleDoc(Random r, int bufnum) {\n    SolrDocument sdoc = new SolrDocument();\n    sdoc.put(\"id\", \"my_id_\" + bufnum);\n    sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n    sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n    sdoc.put(\"license\", str(r, 10));\n    sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n    sdoc.put(\"title_bin\", str(r, 5 + r.nextInt(10)).getBytes(StandardCharsets.UTF_8));\n    sdoc.put(\"modified_dt\", r.nextInt(1000000));\n    sdoc.put(\"creation_dt\", r.nextInt(1000000));\n    sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n    sdoc.put(\"clean\", r.nextBoolean());\n    sdoc.put(\"dirty\", r.nextBoolean());\n    sdoc.put(\"employed\", r.nextBoolean());\n    sdoc.put(\"priority\", r.nextInt(100));\n    sdoc.put(\"dependents\", r.nextInt(6));\n    sdoc.put(\"level\", r.nextInt(101));\n    sdoc.put(\"education_level\", r.nextInt(10));\n    \r\n    sdoc.put(\"state\", \"S\"+r.nextInt(50));\n    sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n    sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n    sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n    return sdoc;\n  }\n","date":"2016-10-03 03:18:22","endLine":198,"groupId":"56730","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"sampleDoc","params":"(Randomr@intbufnum)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/c263a0e6bbfad18f6d3a599e68725b7cc384f6.src","preCode":"  public static SolrDocument sampleDoc(Random r, int bufnum) {\n    SolrDocument sdoc = new SolrDocument();\n    sdoc.put(\"id\", \"my_id_\" + bufnum);\n    sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n    sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n    sdoc.put(\"license\", str(r, 10));\n    sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n    sdoc.put(\"title_bin\", str(r, 5 + r.nextInt(10)).getBytes(StandardCharsets.UTF_8));\n    sdoc.put(\"modified_dt\", r.nextInt(1000000));\n    sdoc.put(\"creation_dt\", r.nextInt(1000000));\n    sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n    sdoc.put(\"clean\", r.nextBoolean());\n    sdoc.put(\"dirty\", r.nextBoolean());\n    sdoc.put(\"employed\", r.nextBoolean());\n    sdoc.put(\"priority\", r.nextInt(100));\n    sdoc.put(\"dependents\", r.nextInt(6));\n    sdoc.put(\"level\", r.nextInt(101));\n    sdoc.put(\"education_level\", r.nextInt(10));\n    \r\n    sdoc.put(\"state\", \"S\"+r.nextInt(50));\n    sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n    sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n    sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n    return sdoc;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/response/SmileWriterTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":6,"curCode":"  public static void doDecodePerf(String[] args) throws Exception {\n    int arg=0;\n    int nThreads = Integer.parseInt(args[arg++]);\n    int nBuffers = Integer.parseInt(args[arg++]);\n    final long iter = Long.parseLong(args[arg++]);\n    int cacheSz = Integer.parseInt(args[arg++]);\n\n    Random r = new Random(0);\n\n    final byte[][] buffers = new byte[nBuffers][];\n\n    for (int bufnum=0; bufnum<nBuffers; bufnum++) {\n      SolrDocument sdoc = new SolrDocument();\n      sdoc.put(\"id\", \"my_id_\" + bufnum);\n      sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n      sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n      sdoc.put(\"license\", str(r, 10));\n      sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n      sdoc.put(\"modified_dt\", r.nextInt(1000000));\n      sdoc.put(\"creation_dt\", r.nextInt(1000000));\n      sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n      sdoc.put(\"clean\", r.nextBoolean());\n      sdoc.put(\"dirty\", r.nextBoolean());\n      sdoc.put(\"employed\", r.nextBoolean());\n      sdoc.put(\"priority\", r.nextInt(100));\n      sdoc.put(\"dependents\", r.nextInt(6));\n      sdoc.put(\"level\", r.nextInt(101));\n      sdoc.put(\"education_level\", r.nextInt(10));\n      \r\n      sdoc.put(\"state\", \"S\"+r.nextInt(50));\n      sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n      sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n      sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n\n      buffers[bufnum] = getBytes(sdoc);\n    }\n\n    int ret = 0;\n    final RTimer timer = new RTimer();\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentLRUCache underlyingCache = cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz-cacheSz/10,cacheSz,cacheSz/10,false,true,null) : null;  \r\n    final JavaBinCodec.StringCache stringCache = underlyingCache==null ? null : new JavaBinCodec.StringCache(underlyingCache);\n    if (nThreads <= 0) {\n      ret += doDecode(buffers, iter, stringCache);\n    } else {\n      runInThreads(nThreads, () -> {\n        try {\n          doDecode(buffers, iter, stringCache);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      });\n    }\n\n    long n = iter * Math.max(1,nThreads);\n    System.out.println(\"ret=\" + ret + \" THROUGHPUT=\" + (n*1000 / timer.getTime()));\n    if (underlyingCache != null) System.out.println(\"cache: hits=\" + underlyingCache.getStats().getCumulativeHits() + \" lookups=\" + underlyingCache.getStats().getCumulativeLookups() + \" size=\" + underlyingCache.getStats().getCurrentSize());\n  }\n","date":"2020-06-17 01:27:53","endLine":624,"groupId":"56730","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doDecodePerf","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/db14fb2a396536ffd6b1a669617a6e20675eb3.src","preCode":"  public static void doDecodePerf(String[] args) throws Exception {\n    int arg=0;\n    int nThreads = Integer.parseInt(args[arg++]);\n    int nBuffers = Integer.parseInt(args[arg++]);\n    final long iter = Long.parseLong(args[arg++]);\n    int cacheSz = Integer.parseInt(args[arg++]);\n\n    Random r = new Random(0);\n\n    final byte[][] buffers = new byte[nBuffers][];\n\n    for (int bufnum=0; bufnum<nBuffers; bufnum++) {\n      SolrDocument sdoc = new SolrDocument();\n      sdoc.put(\"id\", \"my_id_\" + bufnum);\n      sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n      sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n      sdoc.put(\"license\", str(r, 10));\n      sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n      sdoc.put(\"modified_dt\", r.nextInt(1000000));\n      sdoc.put(\"creation_dt\", r.nextInt(1000000));\n      sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n      sdoc.put(\"clean\", r.nextBoolean());\n      sdoc.put(\"dirty\", r.nextBoolean());\n      sdoc.put(\"employed\", r.nextBoolean());\n      sdoc.put(\"priority\", r.nextInt(100));\n      sdoc.put(\"dependents\", r.nextInt(6));\n      sdoc.put(\"level\", r.nextInt(101));\n      sdoc.put(\"education_level\", r.nextInt(10));\n      \r\n      sdoc.put(\"state\", \"S\"+r.nextInt(50));\n      sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n      sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n      sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n\n      buffers[bufnum] = getBytes(sdoc);\n    }\n\n    int ret = 0;\n    final RTimer timer = new RTimer();\n    ConcurrentLRUCache underlyingCache = cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz-cacheSz/10,cacheSz,cacheSz/10,false,true,null) : null;  \r\n    final JavaBinCodec.StringCache stringCache = underlyingCache==null ? null : new JavaBinCodec.StringCache(underlyingCache);\n    if (nThreads <= 0) {\n      ret += doDecode(buffers, iter, stringCache);\n    } else {\n      runInThreads(nThreads, () -> {\n        try {\n          doDecode(buffers, iter, stringCache);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      });\n    }\n\n    long n = iter * Math.max(1,nThreads);\n    System.out.println(\"ret=\" + ret + \" THROUGHPUT=\" + (n*1000 / timer.getTime()));\n    if (underlyingCache != null) System.out.println(\"cache: hits=\" + underlyingCache.getStats().getCumulativeHits() + \" lookups=\" + underlyingCache.getStats().getCumulativeLookups() + \" size=\" + underlyingCache.getStats().getCurrentSize());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":567,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":6,"curCode":"  public static SolrDocument sampleDoc(Random r, int bufnum) {\n    SolrDocument sdoc = new SolrDocument();\n    sdoc.put(\"id\", \"my_id_\" + bufnum);\n    sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n    sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n    sdoc.put(\"license\", str(r, 10));\n    sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n    sdoc.put(\"title_bin\", str(r, 5 + r.nextInt(10)).getBytes(StandardCharsets.UTF_8));\n    sdoc.put(\"modified_dt\", r.nextInt(1000000));\n    sdoc.put(\"creation_dt\", r.nextInt(1000000));\n    sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n    sdoc.put(\"clean\", r.nextBoolean());\n    sdoc.put(\"dirty\", r.nextBoolean());\n    sdoc.put(\"employed\", r.nextBoolean());\n    sdoc.put(\"priority\", r.nextInt(100));\n    sdoc.put(\"dependents\", r.nextInt(6));\n    sdoc.put(\"level\", r.nextInt(101));\n    sdoc.put(\"education_level\", r.nextInt(10));\n    \r\n    sdoc.put(\"state\", \"S\"+r.nextInt(50));\n    sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n    sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n    sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n    return sdoc;\n  }\n","date":"2016-10-03 03:18:22","endLine":198,"groupId":"56730","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"sampleDoc","params":"(Randomr@intbufnum)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/c263a0e6bbfad18f6d3a599e68725b7cc384f6.src","preCode":"  public static SolrDocument sampleDoc(Random r, int bufnum) {\n    SolrDocument sdoc = new SolrDocument();\n    sdoc.put(\"id\", \"my_id_\" + bufnum);\n    sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n    sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n    sdoc.put(\"license\", str(r, 10));\n    sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n    sdoc.put(\"title_bin\", str(r, 5 + r.nextInt(10)).getBytes(StandardCharsets.UTF_8));\n    sdoc.put(\"modified_dt\", r.nextInt(1000000));\n    sdoc.put(\"creation_dt\", r.nextInt(1000000));\n    sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n    sdoc.put(\"clean\", r.nextBoolean());\n    sdoc.put(\"dirty\", r.nextBoolean());\n    sdoc.put(\"employed\", r.nextBoolean());\n    sdoc.put(\"priority\", r.nextInt(100));\n    sdoc.put(\"dependents\", r.nextInt(6));\n    sdoc.put(\"level\", r.nextInt(101));\n    sdoc.put(\"education_level\", r.nextInt(10));\n    \r\n    sdoc.put(\"state\", \"S\"+r.nextInt(50));\n    sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n    sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n    sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n    return sdoc;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/response/SmileWriterTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":7,"curCode":"  public static void doDecodePerf(String[] args) throws Exception {\n    int arg=0;\n    int nThreads = Integer.parseInt(args[arg++]);\n    int nBuffers = Integer.parseInt(args[arg++]);\n    final long iter = Long.parseLong(args[arg++]);\n    int cacheSz = Integer.parseInt(args[arg++]);\n\n    Random r = new Random(0);\n\n    final byte[][] buffers = new byte[nBuffers][];\n\n    for (int bufnum=0; bufnum<nBuffers; bufnum++) {\n      SolrDocument sdoc = new SolrDocument();\n      sdoc.put(\"id\", \"my_id_\" + bufnum);\n      sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n      sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n      sdoc.put(\"license\", str(r, 10));\n      sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n      sdoc.put(\"modified_dt\", r.nextInt(1000000));\n      sdoc.put(\"creation_dt\", r.nextInt(1000000));\n      sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n      sdoc.put(\"clean\", r.nextBoolean());\n      sdoc.put(\"dirty\", r.nextBoolean());\n      sdoc.put(\"employed\", r.nextBoolean());\n      sdoc.put(\"priority\", r.nextInt(100));\n      sdoc.put(\"dependents\", r.nextInt(6));\n      sdoc.put(\"level\", r.nextInt(101));\n      sdoc.put(\"education_level\", r.nextInt(10));\n      \r\n      sdoc.put(\"state\", \"S\"+r.nextInt(50));\n      sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n      sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n      sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n\n      buffers[bufnum] = getBytes(sdoc);\n    }\n\n    int ret = 0;\n    final RTimer timer = new RTimer();\n    ConcurrentLRUCache<StringBytes, String> underlyingCache = cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz-cacheSz/10,cacheSz,cacheSz/10,false,true,null) : null;  \r\n    final JavaBinCodec.StringCache stringCache = underlyingCache==null ? null : new JavaBinCodec.StringCache(underlyingCache);\n    if (nThreads <= 0) {\n      ret += doDecode(buffers, iter, stringCache);\n    } else {\n      runInThreads(nThreads, () -> {\n        try {\n          doDecode(buffers, iter, stringCache);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      });\n    }\n\n    long n = iter * Math.max(1,nThreads);\n    System.out.println(\"ret=\" + ret + \" THROUGHPUT=\" + (n*1000 / timer.getTime()));\n    if (underlyingCache != null) System.out.println(\"cache: hits=\" + underlyingCache.getStats().getCumulativeHits() + \" lookups=\" + underlyingCache.getStats().getCumulativeLookups() + \" size=\" + underlyingCache.getStats().getCurrentSize());\n  }\n","date":"2021-06-22 00:19:37","endLine":616,"groupId":"10419","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"doDecodePerf","params":"(String[]args)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9f/789215ba274ca3ae85122fe3ad032533635d1d.src","preCode":"  public static void doDecodePerf(String[] args) throws Exception {\n    int arg=0;\n    int nThreads = Integer.parseInt(args[arg++]);\n    int nBuffers = Integer.parseInt(args[arg++]);\n    final long iter = Long.parseLong(args[arg++]);\n    int cacheSz = Integer.parseInt(args[arg++]);\n\n    Random r = new Random(0);\n\n    final byte[][] buffers = new byte[nBuffers][];\n\n    for (int bufnum=0; bufnum<nBuffers; bufnum++) {\n      SolrDocument sdoc = new SolrDocument();\n      sdoc.put(\"id\", \"my_id_\" + bufnum);\n      sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n      sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n      sdoc.put(\"license\", str(r, 10));\n      sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n      sdoc.put(\"modified_dt\", r.nextInt(1000000));\n      sdoc.put(\"creation_dt\", r.nextInt(1000000));\n      sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n      sdoc.put(\"clean\", r.nextBoolean());\n      sdoc.put(\"dirty\", r.nextBoolean());\n      sdoc.put(\"employed\", r.nextBoolean());\n      sdoc.put(\"priority\", r.nextInt(100));\n      sdoc.put(\"dependents\", r.nextInt(6));\n      sdoc.put(\"level\", r.nextInt(101));\n      sdoc.put(\"education_level\", r.nextInt(10));\n      \r\n      sdoc.put(\"state\", \"S\"+r.nextInt(50));\n      sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n      sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n      sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n\n      buffers[bufnum] = getBytes(sdoc);\n    }\n\n    int ret = 0;\n    final RTimer timer = new RTimer();\n    @SuppressWarnings({\"rawtypes\"})\n    ConcurrentLRUCache underlyingCache = cacheSz > 0 ? new ConcurrentLRUCache<>(cacheSz,cacheSz-cacheSz/10,cacheSz,cacheSz/10,false,true,null) : null;  \r\n    final JavaBinCodec.StringCache stringCache = underlyingCache==null ? null : new JavaBinCodec.StringCache(underlyingCache);\n    if (nThreads <= 0) {\n      ret += doDecode(buffers, iter, stringCache);\n    } else {\n      runInThreads(nThreads, () -> {\n        try {\n          doDecode(buffers, iter, stringCache);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      });\n    }\n\n    long n = iter * Math.max(1,nThreads);\n    System.out.println(\"ret=\" + ret + \" THROUGHPUT=\" + (n*1000 / timer.getTime()));\n    if (underlyingCache != null) System.out.println(\"cache: hits=\" + underlyingCache.getStats().getCumulativeHits() + \" lookups=\" + underlyingCache.getStats().getCumulativeLookups() + \" size=\" + underlyingCache.getStats().getCurrentSize());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/common/util/TestJavaBinCodec.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":560,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":7,"curCode":"  public static SolrDocument sampleDoc(Random r, int bufnum) {\n    SolrDocument sdoc = new SolrDocument();\n    sdoc.put(\"id\", \"my_id_\" + bufnum);\n    sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n    sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n    sdoc.put(\"license\", str(r, 10));\n    sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n    sdoc.put(\"title_bin\", str(r, 5 + r.nextInt(10)).getBytes(StandardCharsets.UTF_8));\n    sdoc.put(\"modified_dt\", r.nextInt(1000000));\n    sdoc.put(\"creation_dt\", r.nextInt(1000000));\n    sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n    sdoc.put(\"clean\", r.nextBoolean());\n    sdoc.put(\"dirty\", r.nextBoolean());\n    sdoc.put(\"employed\", r.nextBoolean());\n    sdoc.put(\"priority\", r.nextInt(100));\n    sdoc.put(\"dependents\", r.nextInt(6));\n    sdoc.put(\"level\", r.nextInt(101));\n    sdoc.put(\"education_level\", r.nextInt(10));\n    \r\n    sdoc.put(\"state\", \"S\"+r.nextInt(50));\n    sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n    sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n    sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n    return sdoc;\n  }\n","date":"2016-10-03 03:18:22","endLine":198,"groupId":"10419","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"sampleDoc","params":"(Randomr@intbufnum)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/c263a0e6bbfad18f6d3a599e68725b7cc384f6.src","preCode":"  public static SolrDocument sampleDoc(Random r, int bufnum) {\n    SolrDocument sdoc = new SolrDocument();\n    sdoc.put(\"id\", \"my_id_\" + bufnum);\n    sdoc.put(\"author\", str(r, 10 + r.nextInt(10)));\n    sdoc.put(\"address\", str(r, 20 + r.nextInt(20)));\n    sdoc.put(\"license\", str(r, 10));\n    sdoc.put(\"title\", str(r, 5 + r.nextInt(10)));\n    sdoc.put(\"title_bin\", str(r, 5 + r.nextInt(10)).getBytes(StandardCharsets.UTF_8));\n    sdoc.put(\"modified_dt\", r.nextInt(1000000));\n    sdoc.put(\"creation_dt\", r.nextInt(1000000));\n    sdoc.put(\"birthdate_dt\", r.nextInt(1000000));\n    sdoc.put(\"clean\", r.nextBoolean());\n    sdoc.put(\"dirty\", r.nextBoolean());\n    sdoc.put(\"employed\", r.nextBoolean());\n    sdoc.put(\"priority\", r.nextInt(100));\n    sdoc.put(\"dependents\", r.nextInt(6));\n    sdoc.put(\"level\", r.nextInt(101));\n    sdoc.put(\"education_level\", r.nextInt(10));\n    \r\n    sdoc.put(\"state\", \"S\"+r.nextInt(50));\n    sdoc.put(\"country\", \"Country\"+r.nextInt(20));\n    sdoc.put(\"some_boolean\", \"\"+r.nextBoolean());\n    sdoc.put(\"another_boolean\", \"\"+r.nextBoolean());\n    return sdoc;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/response/SmileWriterTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"N"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
