[{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2016-10-11 23:00:05","commitOrder":10,"curCode":"  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n","date":"2016-10-11 23:17:55","endLine":408,"groupId":"58884","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createField","params":"(SchemaFieldfield@Objectvalue@floatboost)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/16/c695931974331eefeb4f5d1bc81b0556d6ee66.src","preCode":"  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/EnumField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":376,"status":"NB"},{"authorDate":"2017-01-19 09:27:21","commitOrder":10,"curCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","date":"2017-01-19 09:27:21","endLine":194,"groupId":"15035","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"isFieldUsed","params":"(SchemaFieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/dd8a8aaf6338e056a2df174d0fd47a20471ba3.src","preCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/PointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"B"}],"commitId":"57934ba4480d71218c7f60d0417dbae9d26188d0","commitMessage":"@@@SOLR-8396: Add support for PointFields in Solr\n","date":"2017-01-19 09:27:21","modifiedFileCount":"33","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-03-03 02:18:16","commitOrder":11,"curCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","date":"2017-03-03 02:18:16","endLine":422,"groupId":"58884","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createField","params":"(SchemaFieldfield@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/83db4d7057e45900bf19fdce0a4b6ae7e08fc9.src","preCode":"  public IndexableField createField(SchemaField field, Object value, float boost) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    final org.apache.lucene.document.Field f;\n    f = new LegacyIntField(field.getName(), intValue.intValue(), newType);\n\n    f.setBoost(boost);\n    return f;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/EnumField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":394,"status":"M"},{"authorDate":"2017-01-19 09:27:21","commitOrder":11,"curCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","date":"2017-01-19 09:27:21","endLine":194,"groupId":"15035","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"isFieldUsed","params":"(SchemaFieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/dd8a8aaf6338e056a2df174d0fd47a20471ba3.src","preCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/PointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"8ed2b764ed4d4d5203b5df1e16fdc1ffd640322c","commitMessage":"@@@LUCENE-6819: Remove index-time boosts.\n","date":"2017-03-03 02:18:16","modifiedFileCount":"113","status":"M","submitter":"Adrien Grand"},{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-07-14 20:55:00","commitOrder":12,"curCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE)) {\n      String exceptionMessage = String.format(Locale.ENGLISH, \"Unknown value for enum field: %s, value: %s\",\n          field.getName(), value.toString());\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  exceptionMessage);\n    }\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","date":"2017-07-14 20:55:00","endLine":409,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createField","params":"(SchemaFieldfield@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0cd807421afbda5d0bfb70ea80853621f56d2c.src","preCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE))\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown value for enum field: \" + value.toString());\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/EnumField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":378,"status":"M"},{"authorDate":"2017-01-19 09:27:21","commitOrder":12,"curCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","date":"2017-01-19 09:27:21","endLine":194,"groupId":"15035","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"isFieldUsed","params":"(SchemaFieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/dd8a8aaf6338e056a2df174d0fd47a20471ba3.src","preCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/PointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"76363e50d9e3d39030fb18235c1c64c76d56f833","commitMessage":"@@@SOLR-8984: EnumField's error reporting to indicate the name of the field\n","date":"2017-07-14 20:55:00","modifiedFileCount":"2","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-08-05 07:32:46","commitOrder":13,"curCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = enumMapping.stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(EnumMapping.DEFAULT_VALUE)) {\n      String exceptionMessage = String.format(Locale.ENGLISH, \"Unknown value for enum field: %s, value: %s\",\n          field.getName(), value.toString());\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  exceptionMessage);\n    }\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","date":"2017-08-05 07:32:46","endLine":180,"groupId":"37135","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createField","params":"(SchemaFieldfield@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/ec185bfb4212e8344d1ea17b8ad2960392394e.src","preCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(DEFAULT_VALUE)) {\n      String exceptionMessage = String.format(Locale.ENGLISH, \"Unknown value for enum field: %s, value: %s\",\n          field.getName(), value.toString());\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  exceptionMessage);\n    }\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/EnumField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2017-01-19 09:27:21","commitOrder":13,"curCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","date":"2017-01-19 09:27:21","endLine":194,"groupId":"15035","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"isFieldUsed","params":"(SchemaFieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a2/dd8a8aaf6338e056a2df174d0fd47a20471ba3.src","preCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/PointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":182,"status":"N"}],"commitId":"9627d1db5dccd6dc9c0c307065628efea621d8e5","commitMessage":"@@@SOLR-11023: Added EnumFieldType.  a non-Trie-based version of EnumField.  and deprecated EnumField in favor of EnumFieldType.\n","date":"2017-08-05 07:32:46","modifiedFileCount":"7","status":"M","submitter":"Steve Rowe"},{"authorTime":"2020-04-23 10:32:49","codes":[{"authorDate":"2020-04-23 10:32:49","commitOrder":14,"curCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return null;\n    }\n    final Integer intValue = enumMapping.stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(EnumMapping.DEFAULT_VALUE)) {\n      String exceptionMessage = String.format(Locale.ENGLISH, \"Unknown value for enum field: %s, value: %s\",\n          field.getName(), value.toString());\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  exceptionMessage);\n    }\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","date":"2020-04-23 10:32:49","endLine":180,"groupId":"101996","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"createField","params":"(SchemaFieldfield@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/28/c98f08231f2a64298e6a1ccebbbe8855dd32d3.src","preCode":"  public IndexableField createField(SchemaField field, Object value) {\n    final boolean indexed = field.indexed();\n    final boolean stored = field.stored();\n    final boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n    final Integer intValue = enumMapping.stringValueToIntValue(value.toString());\n    if (intValue == null || intValue.equals(EnumMapping.DEFAULT_VALUE)) {\n      String exceptionMessage = String.format(Locale.ENGLISH, \"Unknown value for enum field: %s, value: %s\",\n          field.getName(), value.toString());\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  exceptionMessage);\n    }\n\n    final LegacyFieldType newType = new LegacyFieldType();\n\n    newType.setTokenized(field.isTokenized());\n    newType.setStored(field.stored());\n    newType.setOmitNorms(field.omitNorms());\n    newType.setIndexOptions(field.indexOptions());\n    newType.setStoreTermVectors(field.storeTermVector());\n    newType.setStoreTermVectorOffsets(field.storeTermOffsets());\n    newType.setStoreTermVectorPositions(field.storeTermPositions());\n    newType.setStoreTermVectorPayloads(field.storeTermPayloads());\n    newType.setNumericType(LegacyNumericType.INT);\n    newType.setNumericPrecisionStep(DEFAULT_PRECISION_STEP);\n\n    return new LegacyIntField(field.getName(), intValue.intValue(), newType);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/EnumField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"},{"authorDate":"2020-04-23 10:32:49","commitOrder":14,"curCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      log.trace(\"Ignoring unindexed/unstored field: {}\", field);\n      return false;\n    }\n    return true;\n  }\n","date":"2020-04-23 10:32:49","endLine":241,"groupId":"101996","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"isFieldUsed","params":"(SchemaFieldfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/45436323b4531edc9c12b24224ff18faf5436e.src","preCode":"  protected boolean isFieldUsed(SchemaField field) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n    boolean docValues = field.hasDocValues();\n\n    if (!indexed && !stored && !docValues) {\n      if (log.isTraceEnabled()) {\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      }\n      return false;\n    }\n    return true;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/schema/PointField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":231,"status":"M"}],"commitId":"e43b17962a116111af4348cf7548ee2e7a2375b8","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-04-23 10:32:49","modifiedFileCount":"102","status":"M","submitter":"Erick Erickson"}]
