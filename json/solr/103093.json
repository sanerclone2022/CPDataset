[{"authorTime":"2012-07-05 02:21:12","codes":[{"authorDate":"2013-11-01 03:13:35","commitOrder":3,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(field) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2013-11-01 03:13:35","endLine":319,"groupId":"43537","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/78051d8a555a85f8fc0205d7df0bb1a66aa931.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(field) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressUserVersions.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"B"},{"authorDate":"2012-07-05 02:21:12","commitOrder":3,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<Integer,DocInfo>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2012-07-05 02:21:12","endLine":333,"groupId":"30945","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/5fcf0bfff97547064aa3cca5e8b59562c08af2.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<Integer,DocInfo>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressReorder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"NB"}],"commitId":"d18a6f1e03948f9ce7d0af3bcdaba6af23d82c6b","commitMessage":"@@@SOLR-5374: user version update processor\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1537587 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-11-01 03:13:35","modifiedFileCount":"2","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(field) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2014-03-12 22:39:17","endLine":319,"groupId":"43537","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/7221a930fc99502353012d1f05b075a8fed69a.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<Integer,DocInfo>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(field) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressUserVersions.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":62,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2014-03-12 22:39:17","endLine":333,"groupId":"30945","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/3ce31a1e021eb4f3db99e1639f843daebab0c4.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;   \r\n\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<Thread>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<Integer,DocInfo>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressReorder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":59,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2017-03-31 22:22:45","codes":[{"authorDate":"2017-03-31 22:22:45","commitOrder":5,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2017-03-31 23:28:21","endLine":323,"groupId":"43537","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/72734a9991c82da206fd8ad363a83e98c5b5a8.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(field) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressUserVersions.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2017-03-31 22:22:45","commitOrder":5,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2017-03-31 23:28:21","endLine":333,"groupId":"30945","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e5/3fed0b48717b5080bbdc3039a6a89cf0da311c.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), field, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(field));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressReorder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"e80643e5a77297ba7ee29c7297e37af6ffb73ac2","commitMessage":"@@@LUCENE-7753: Make fields static when possible.\n","date":"2017-03-31 23:28:21","modifiedFileCount":"40","status":"M","submitter":"Adrien Grand"},{"authorTime":"2019-05-03 05:20:05","codes":[{"authorDate":"2019-05-03 05:20:05","commitOrder":6,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2019-05-03 05:20:05","endLine":323,"groupId":"43537","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/4fa429a2662309eccbc1aa6e6953f15123cac3.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressUserVersions.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2019-05-03 05:20:05","commitOrder":6,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2019-05-03 05:20:05","endLine":333,"groupId":"30945","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/cde83f4bf2d920353e04540789a7aa59bbee6c.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map)ObjectBuilder.fromJSON(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressReorder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"8908205b428f2ae68bcef0f22a944a62cfcd93d5","commitMessage":"@@@SOLR-13441: Refactor code to minimize direct use of noggit\n","date":"2019-05-03 05:20:05","modifiedFileCount":"58","status":"M","submitter":"noble"},{"authorTime":"2020-05-01 07:50:31","codes":[{"authorDate":"2020-05-01 07:50:31","commitOrder":7,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2020-05-01 07:50:31","endLine":323,"groupId":"43537","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/f49304245583da06f4a1020e3370e444a646e3.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressUserVersions.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-05-01 07:50:31","commitOrder":7,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2020-05-01 07:50:31","endLine":333,"groupId":"30945","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/db/3c01f6f24d66f789a70f545f77f04f14501878.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id=\" + id + \" found=\" + response + \" model\" + info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressReorder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"9ae05e9b4f318dc0bbb352a6a65573614d0be26d","commitMessage":"@@@LUCENE-7788: fail precommit on unparameterised log messages and examine for wasted work/objects\n","date":"2020-05-01 07:50:31","modifiedFileCount":"170","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-18 05:51:41","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":8,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              @SuppressWarnings({\"rawtypes\"})\n              Map rsp = (Map) Utils.fromJSONString(response);\n              @SuppressWarnings({\"rawtypes\"})\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2020-06-18 05:51:41","endLine":325,"groupId":"103093","id":11,"instanceNumber":1,"isCurCommit":1,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/50b17f313657af9512e7a7609537191d19b1a5.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n\n    \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(10000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.get() > 0) {\n              int oper = rand.nextInt(100);\n\n              if (oper < commitPercent) {\n                if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                  Map<Integer,DocInfo> newCommittedModel;\n                  long version;\n\n                  synchronized(TestStressUserVersions.this) {\n                    newCommittedModel = new HashMap<>(model);  \r\n                    version = snapshotCount++;\n                  }\n\n                  if (rand.nextInt(100) < softCommitPercent) {\n                    verbose(\"softCommit start\");\n                    assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                    verbose(\"softCommit end\");\n                  } else {\n                    verbose(\"hardCommit start\");\n                    assertU(commit());\n                    verbose(\"hardCommit end\");\n                  }\n\n                  synchronized(TestStressUserVersions.this) {\n                    \r\n                    if (version >= committedModelClock) {\n                      if (VERBOSE) {\n                        verbose(\"installing new committedModel version=\"+committedModelClock);\n                      }\n                      committedModel = newCommittedModel;\n                      committedModelClock = version;\n                    }\n                  }\n                }\n                numCommitting.decrementAndGet();\n                continue;\n              }\n\n\n              int id;\n\n              if (rand.nextBoolean()) {\n                id = rand.nextInt(ndocs);\n              } else {\n                id = lastId;  \r\n              }\n\n              \r\n              \r\n              boolean before = rand.nextBoolean();\n              if (before) {\n                lastId = id;\n              }\n\n              DocInfo info = model.get(id);\n\n              long val = info.val;\n              long nextVal = Math.abs(val)+1;\n\n              \r\n              \r\n              \r\n              long version = testVersion.incrementAndGet();\n\n              \r\n              if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(dversion, Long.toString(version)));\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), vfield, Long.toString(version)), null);\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n              \r\n\n              if (!before) {\n                lastId = id;\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressUserVersions.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                boolean isLive = (Boolean)(((Map)doclist.get(0)).get(lfield));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(vfield));\n\n                if (isLive) {\n                  long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                  if (foundVer < Math.abs(info.version)\n                      || (foundVer == info.version && foundVal != info.val) ) {    \r\n                    log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                    assertTrue(false);\n                  }\n                } else {\n                  \r\n                  assertNull( ((Map)doclist.get(0)).get(FIELD) );\n\n                  if (foundVer < Math.abs(info.version)) {\n                    log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                    assertTrue(false);\n                  }\n                }\n\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressUserVersions.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":66,"status":"M"},{"authorDate":"2020-06-18 05:51:41","commitOrder":8,"curCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              @SuppressWarnings({\"rawtypes\"})\n              Map rsp = (Map) Utils.fromJSONString(response);\n              @SuppressWarnings({\"rawtypes\"})\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","date":"2020-06-18 05:51:41","endLine":335,"groupId":"103093","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"testStressReorderVersions","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/3106efb8d9b066adb3d6e61168d681a026fbdc.src","preCode":"  public void testStressReorderVersions() throws Exception {\n    clearIndex();\n    assertU(commit());\n\n    final int commitPercent = 5 + random().nextInt(20);\n    final int softCommitPercent = 30+random().nextInt(75); \r\n    final int deletePercent = 4+random().nextInt(25);\n    final int deleteByQueryPercent = random().nextInt(8);\n    final int ndocs = 5 + (random().nextBoolean() ? random().nextInt(25) : random().nextInt(200));\n    int nWriteThreads = 5 + random().nextInt(25);\n\n    final int maxConcurrentCommits = nWriteThreads;\n        \r\n    final int percentRealtimeQuery = 75;\n    final AtomicLong operations = new AtomicLong(50000);  \r\n    int nReadThreads = 5 + random().nextInt(25);\n\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n    verbose(\"commitPercent\",commitPercent, \"softCommitPercent\",softCommitPercent, \"deletePercent\",deletePercent, \"deleteByQueryPercent\",deleteByQueryPercent\n        , \"ndocs\",ndocs,\"nWriteThreads\",nWriteThreads,\"percentRealtimeQuery\",percentRealtimeQuery,\"operations\",operations, \"nReadThreads\",nReadThreads);\n\n    initModel(ndocs);\n\n    final AtomicInteger numCommitting = new AtomicInteger();\n\n    List<Thread> threads = new ArrayList<>();\n\n\n    final AtomicLong testVersion = new AtomicLong(0);\n\n    for (int i=0; i<nWriteThreads; i++) {\n      Thread thread = new Thread(\"WRITER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n          while (operations.get() > 0) {\n            int oper = rand.nextInt(100);\n\n            if (oper < commitPercent) {\n              if (numCommitting.incrementAndGet() <= maxConcurrentCommits) {\n                Map<Integer,DocInfo> newCommittedModel;\n                long version;\n\n                synchronized(TestStressReorder.this) {\n                  newCommittedModel = new HashMap<>(model);  \r\n                  version = snapshotCount++;\n                }\n\n                if (rand.nextInt(100) < softCommitPercent) {\n                  verbose(\"softCommit start\");\n                  assertU(TestHarness.commit(\"softCommit\",\"true\"));\n                  verbose(\"softCommit end\");\n                } else {\n                  verbose(\"hardCommit start\");\n                  assertU(commit());\n                  verbose(\"hardCommit end\");\n                }\n\n                synchronized(TestStressReorder.this) {\n                  \r\n                  if (version >= committedModelClock) {\n                    if (VERBOSE) {\n                      verbose(\"installing new committedModel version=\"+committedModelClock);\n                    }\n                    committedModel = newCommittedModel;\n                    committedModelClock = version;\n                  }\n                }\n              }\n              numCommitting.decrementAndGet();\n              continue;\n            }\n\n\n            int id;\n\n            if (rand.nextBoolean()) {\n              id = rand.nextInt(ndocs);\n            } else {\n              id = lastId;  \r\n            }\n\n            \r\n            \r\n            boolean before = rand.nextBoolean();\n            if (before) {\n              lastId = id;\n            }\n\n            DocInfo info = model.get(id);\n\n            long val = info.val;\n            long nextVal = Math.abs(val)+1;\n\n            \r\n            \r\n            \r\n            long version = testVersion.incrementAndGet();\n\n            \r\n            if (rand.nextBoolean()) Thread.yield();\n\n              if (oper < commitPercent + deletePercent) {\n                verbose(\"deleting id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteAndGetVersion(Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleting id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n              } else if (oper < commitPercent + deletePercent + deleteByQueryPercent) {\n\n                verbose(\"deleteByQuery id\",id,\"val=\",nextVal,\"version\",version);\n\n                Long returnedVersion = deleteByQueryAndGetVersion(\"id:\"+Integer.toString(id), params(\"_version_\",Long.toString(-version), DISTRIB_UPDATE_PARAM,FROM_LEADER));\n\n                \r\n                \r\n                if (returnedVersion != null) {\n                  assertEquals(-version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (Math.abs(version) > Math.abs(currInfo.version)) {\n                    model.put(id, new DocInfo(version, -nextVal));\n                  }\n                }\n\n                verbose(\"deleteByQuery id\", id, \"val=\",nextVal,\"version\",version,\"DONE\");\n\n              } else {\n                verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version);\n\n                Long returnedVersion = addAndGetVersion(sdoc(\"id\", Integer.toString(id), FIELD, Long.toString(nextVal), \"_version_\",Long.toString(version)), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));\n                if (returnedVersion != null) {\n                  assertEquals(version, returnedVersion.longValue());\n                }\n\n                \r\n                synchronized (model) {\n                  DocInfo currInfo = model.get(id);\n                  if (version > currInfo.version) {\n                    model.put(id, new DocInfo(version, nextVal));\n                  }\n                }\n\n                if (VERBOSE) {\n                  verbose(\"adding id\", id, \"val=\", nextVal,\"version\",version,\"DONE\");\n                }\n\n              }\n            \r\n\n            if (!before) {\n              lastId = id;\n            }\n          }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (int i=0; i<nReadThreads; i++) {\n      Thread thread = new Thread(\"READER\"+i) {\n        Random rand = new Random(random().nextInt());\n\n        @Override\n        public void run() {\n          try {\n            while (operations.decrementAndGet() >= 0) {\n              \r\n              int id = rand.nextInt(100) < 25 ? lastId : rand.nextInt(ndocs);\n\n              \r\n              \r\n\n              boolean realTime = rand.nextInt(100) < percentRealtimeQuery;\n              DocInfo info;\n\n              if (realTime) {\n                info = model.get(id);\n              } else {\n                synchronized(TestStressReorder.this) {\n                  info = committedModel.get(id);\n                }\n              }\n\n              if (VERBOSE) {\n                verbose(\"querying id\", id);\n              }\n              SolrQueryRequest sreq;\n              if (realTime) {\n                sreq = req(\"wt\",\"json\", \"qt\",\"/get\", \"ids\",Integer.toString(id));\n              } else {\n                sreq = req(\"wt\",\"json\", \"q\",\"id:\"+Integer.toString(id), \"omitHeader\",\"true\");\n              }\n\n              String response = h.query(sreq);\n              Map rsp = (Map) Utils.fromJSONString(response);\n              List doclist = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n              if (doclist.size() == 0) {\n                \r\n              } else {\n                assertEquals(1, doclist.size());\n                long foundVal = (Long)(((Map)doclist.get(0)).get(FIELD));\n                long foundVer = (Long)(((Map)doclist.get(0)).get(\"_version_\"));\n                if (foundVer < Math.abs(info.version)\n                    || (foundVer == info.version && foundVal != info.val) ) {    \r\n                  log.error(\"ERROR, id={} found={} model {}\", id, response, info);\n                  assertTrue(false);\n                }\n              }\n            }\n          } catch (Throwable e) {\n            operations.set(-1L);\n            log.error(\"\",e);\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      threads.add(thread);\n    }\n\n\n    for (Thread thread : threads) {\n      thread.start();\n    }\n\n    for (Thread thread : threads) {\n      thread.join();\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestStressReorder.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"b01e249c9ec724b6df120a5d731020cfe4de3fce","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 1)\n","date":"2020-06-18 05:51:41","modifiedFileCount":"213","status":"M","submitter":"Erick Erickson"}]
