[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n","date":"2016-05-26 01:42:11","endLine":178,"groupId":"1856","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSortedDocValues","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fd/188505f2955843371df114c1b3917c4f4b52ee.src","preCode":"  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n","date":"2016-05-26 01:42:11","endLine":219,"groupId":"1857","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getSortedSetDocValues","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fd/188505f2955843371df114c1b3917c4f4b52ee.src","preCode":"  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":181,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    long totalCost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      totalCost += v.cost();\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map, totalCost);\n  }\n","date":"2016-10-03 03:18:22","endLine":154,"groupId":"40551","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSortedDocValues","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7c/7098cdc763ce8e898a85d929a8d4cf1191fc98.src","preCode":"  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":116,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n","date":"2016-10-03 03:18:22","endLine":197,"groupId":"41872","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getSortedSetDocValues","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7c/7098cdc763ce8e898a85d929a8d4cf1191fc98.src","preCode":"  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":157,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-02-28 21:21:30","codes":[{"authorDate":"2017-02-28 21:21:30","commitOrder":3,"curCode":"  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    long totalCost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      totalCost += v.cost();\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map, totalCost);\n  }\n","date":"2017-02-28 21:46:45","endLine":153,"groupId":"102010","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSortedDocValues","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/45cdf610f52cbb0a0da51f349491d1d34272dc.src","preCode":"  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    long totalCost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if (fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED) {\n        return null;\n      }\n      SortedDocValues v = reader.getSortedDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySorted();\n      }\n      totalCost += v.cost();\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map, totalCost);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":114,"status":"M"},{"authorDate":"2017-02-28 21:21:30","commitOrder":3,"curCode":"  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          IndexReader.CacheHelper cacheHelper = getReaderCacheHelper();\n          if (cacheHelper != null && map.owner == cacheHelper.getKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n","date":"2017-02-28 21:46:45","endLine":197,"groupId":"102010","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getSortedSetDocValues","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/45cdf610f52cbb0a0da51f349491d1d34272dc.src","preCode":"  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        \r\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiDocValues.MultiSortedSetDocValues) {\n          map = ((MultiDocValues.MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey() && merging == false) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n   \n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    long cost = 0;\n    for (int i = 0; i < size; i++) {\n      LeafReaderContext context = in.leaves().get(i);\n      final LeafReader reader = context.reader();\n      final FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      if(fieldInfo != null && fieldInfo.getDocValuesType() != DocValuesType.SORTED_SET){\n        return null;\n      }\n      SortedSetDocValues v = reader.getSortedSetDocValues(field);\n      if (v == null) {\n        v = DocValues.emptySortedSet();\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n      cost += v.cost();\n    }\n    starts[size] = maxDoc();\n    return new MultiDocValues.MultiSortedSetDocValues(values, starts, map, cost);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/index/SlowCompositeReaderWrapper.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"}],"commitId":"df6f83072303b4891a296b700a50c743284d3c30","commitMessage":"@@@LUCENE-7410: Make cache keys and close listeners less trappy.\n","date":"2017-02-28 21:46:45","modifiedFileCount":"75","status":"M","submitter":"Adrien Grand"}]
