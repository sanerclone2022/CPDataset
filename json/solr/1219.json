[{"authorTime":"2019-06-11 22:12:52","codes":[{"authorDate":"2018-08-23 06:26:37","commitOrder":5,"curCode":"    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n","date":"2018-08-23 06:26:37","endLine":1649,"groupId":"25142","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6a/bfba8858353f2c829fb713ed672ab52c69a89f.src","preCode":"    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1632,"status":"NB"},{"authorDate":"2019-06-11 22:12:52","commitOrder":5,"curCode":"    private PropsNotification(String collection, Map<String, String> collectionProperties) {\n      this.collection = collection;\n      this.collectionProperties = collectionProperties;\n      \r\n      \r\n      collectionPropsObservers.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n    }\n","date":"2019-06-11 22:12:52","endLine":2086,"groupId":"25142","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"PropsNotification","params":"(Stringcollection@Map<String@String>collectionProperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/9f89ec7f3e2cbaed6b7bd214a085115064c374.src","preCode":"    private PropsNotification(String collection, Map<String, String> collectionProperties) {\n      this.collection = collection;\n      this.collectionProperties = collectionProperties;\n      \r\n      \r\n      collectionPropsObservers.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2075,"status":"B"}],"commitId":"abeecfacd40e8bc345e9e4aa8e719fee143d2088","commitMessage":"@@@SOLR-13439 - Adds ability to locally cache collection properties for a specified duration.\n","date":"2019-06-11 22:12:52","modifiedFileCount":"1","status":"M","submitter":"Gus Heck"},{"authorTime":"2019-06-11 22:12:52","codes":[{"authorDate":"2019-06-18 00:59:43","commitOrder":6,"curCode":"    public void run() {\n      List<DocCollectionWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (DocCollectionWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(collectionState)) {\n            removeDocCollectionWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n","date":"2019-06-18 00:59:43","endLine":2006,"groupId":"1219","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"run","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cd/72203eacb801fba6859d03a0f8ad500243ef36.src","preCode":"    public void run() {\n      List<CollectionStateWatcher> watchers = new ArrayList<>();\n      collectionWatches.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n      for (CollectionStateWatcher watcher : watchers) {\n        try {\n          if (watcher.onStateChanged(liveNodes, collectionState)) {\n            removeCollectionStateWatcher(collection, watcher);\n          }\n        } catch (Exception exception) {\n          log.warn(\"Error on calling watcher\", exception);\n        }\n      }\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1989,"status":"M"},{"authorDate":"2019-06-11 22:12:52","commitOrder":6,"curCode":"    private PropsNotification(String collection, Map<String, String> collectionProperties) {\n      this.collection = collection;\n      this.collectionProperties = collectionProperties;\n      \r\n      \r\n      collectionPropsObservers.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n    }\n","date":"2019-06-11 22:12:52","endLine":2086,"groupId":"1219","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"PropsNotification","params":"(Stringcollection@Map<String@String>collectionProperties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/9f89ec7f3e2cbaed6b7bd214a085115064c374.src","preCode":"    private PropsNotification(String collection, Map<String, String> collectionProperties) {\n      this.collection = collection;\n      this.collectionProperties = collectionProperties;\n      \r\n      \r\n      collectionPropsObservers.compute(collection, (k, v) -> {\n        if (v == null)\n          return null;\n        watchers.addAll(v.stateWatchers);\n        return v;\n      });\n    }\n","realPath":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2075,"status":"N"}],"commitId":"5a974860fa83408a86ca64b417f3111b037da7eb","commitMessage":"@@@SOLR-13490: Fix CollectionStateWatcher/CollectionStatePredicate based APIs in ZkStateReader and CloudSolrClient to be triggered on liveNode changes.\n\nAlso add Predicate<DocCollection> equivilents for callers that don't care about liveNodes.\n","date":"2019-06-18 00:59:43","modifiedFileCount":"15","status":"M","submitter":"Chris Hostetter"}]
