[{"authorTime":"2019-05-30 00:52:57","codes":[{"authorDate":"2016-02-20 09:03:06","commitOrder":2,"curCode":"  private void openStreams() throws IOException {\n\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"TopicStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","date":"2016-02-20 09:03:43","endLine":257,"groupId":"28593","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"openStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/7aa90e16e30744d996fd1cf4d4192f115e344a.src","preCode":"  private void openStreams() throws IOException {\n\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"TopicStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":233,"status":"NB"},{"authorDate":"2019-05-30 00:52:57","commitOrder":2,"curCode":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","date":"2019-05-30 00:53:10","endLine":372,"groupId":"28593","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"openStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/50bcce86f2bda7bfa00c57017f77e4d1af4fb0.src","preCode":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"B"}],"commitId":"6ca372fcbb2a77dce3ed4488a56edf7da9a1bb32","commitMessage":"@@@SOLR-13494: Add DeepRandomStream implementation\n","date":"2019-05-30 00:53:10","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-04-13 10:46:35","codes":[{"authorDate":"2020-04-13 10:46:35","commitOrder":3,"curCode":"  private void openStreams() throws IOException {\n\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"TopicStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","date":"2020-04-13 10:46:35","endLine":336,"groupId":"28593","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"openStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/58/280a061fdad24fb21a7671d6a0d26a325499b1.src","preCode":"  private void openStreams() throws IOException {\n\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"TopicStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2020-04-13 10:46:35","commitOrder":3,"curCode":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","date":"2020-04-13 10:46:35","endLine":372,"groupId":"28593","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"openStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9c/9c2015cdd43e64be511a3c0c0eb80ddf87f78c.src","preCode":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"13f19f65559290a860df84fa1b5ac2db903b27ec","commitMessage":"@@@SOLR-9906: SolrjNamedThreadFactory is deprecated in favor of SolrNamedThreadFactory. DefaultSolrThreadFactory is removed from solr-core in favor of SolrNamedThreadFactory in solrj package and all solr-core classes now use SolrNamedThreadFactory\n","date":"2020-04-13 10:46:35","modifiedFileCount":"83","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2020-06-10 07:16:14","codes":[{"authorDate":"2020-06-10 07:16:14","commitOrder":4,"curCode":"  private void openStreams() throws IOException {\n\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"TopicStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList<>();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":336,"groupId":"10262","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"openStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b1/769a6667e410ee154a05ea53d1f319e0cd25e6.src","preCode":"  private void openStreams() throws IOException {\n\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"TopicStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"},{"authorDate":"2020-06-10 07:16:14","commitOrder":4,"curCode":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList<>();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","date":"2020-06-10 07:21:36","endLine":372,"groupId":"10262","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"openStreams","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/00/b3d3c74f5173e67d2666634a40b834f528322b.src","preCode":"  private void openStreams() throws IOException {\n    ExecutorService service = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrNamedThreadFactory(\"DeepRandomStream\"));\n    try {\n      List<Future<TupleWrapper>> futures = new ArrayList();\n      for (TupleStream solrStream : solrStreams) {\n        StreamOpener so = new StreamOpener((SolrStream) solrStream, comp);\n        Future<TupleWrapper> future = service.submit(so);\n        futures.add(future);\n      }\n\n      try {\n        for (Future<TupleWrapper> f : futures) {\n          TupleWrapper w = f.get();\n          if (w != null) {\n            tuples.add(w);\n          }\n        }\n      } catch (Exception e) {\n        throw new IOException(e);\n      }\n    } finally {\n      service.shutdown();\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/DeepRandomStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":349,"status":"M"}],"commitId":"c8f48d470108e5bbb356a9dbc8d040b75214c7dc","commitMessage":"@@@SOLR-14547: Fix or suppress warnings in solr/client/solrj/io/stream\n","date":"2020-06-10 07:21:36","modifiedFileCount":"43","status":"M","submitter":"Erick Erickson"}]
