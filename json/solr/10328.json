[{"authorTime":"2018-12-28 03:42:03","codes":[{"authorDate":"2018-10-11 22:43:30","commitOrder":6,"curCode":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n","date":"2018-10-11 22:43:57","endLine":114,"groupId":"22382","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"LetStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/881c3a446feb81315c311baa1acd44e3397224.src","preCode":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"NB"},{"authorDate":"2018-12-28 03:42:03","commitOrder":6,"curCode":"  public ZplotStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      }\n    }\n  }\n","date":"2018-12-28 03:42:27","endLine":64,"groupId":"22382","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"ZplotStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/280dca78e77607d20eef59d3d5a0f382d43971.src","preCode":"  public ZplotStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ZplotStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"d018cd18f4470982ffae6e7ff6c7de3ad868bec3","commitMessage":"@@@SOLR-13088: Add zplot Stream Evaluator to plot math expressions in Apache Zeppelin\n","date":"2018-12-28 03:42:27","modifiedFileCount":"3","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2021-06-22 00:19:37","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":7,"curCode":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet<>();\n        String echoString = np.getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = np.getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":114,"groupId":"10328","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"LetStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5a/464a2de72c75b8779a151c733ee3f37057a9f2.src","preCode":"  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {\n    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n    Set<String> echo = null;\n    boolean echoAll = false;\n    String currentName = null;\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      currentName = name;\n\n      if(name.equals(\"echo\")) {\n        echo = new HashSet();\n        String echoString = ((StreamExpressionNamedParameter) np).getParameter().toString().trim();\n        if(echoString.equalsIgnoreCase(\"true\")) {\n          echoAll = true;\n        } else {\n          String[] echoVars = echoString.split(\",\");\n          for (String echoVar : echoVars) {\n            echo.add(echoVar.trim());\n          }\n        }\n\n        continue;\n      }\n\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      } else {\n        TupleStream tupleStream = factory.constructStream((StreamExpression) param);\n        letParams.put(name, tupleStream);\n      }\n    }\n\n    if(streamExpressions.size() > 0) {\n      stream = factory.constructStream(streamExpressions.get(0));\n    } else {\n      StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n      if(!echoAll && echo == null) {\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));\n      } else {\n        Set<String> names = letParams.keySet();\n        for(String name : names) {\n          if(echoAll) {\n            tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n          } else {\n            if(echo.contains(name)) {\n              tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));\n            }\n          }\n        }\n      }\n\n      stream = factory.constructStream(tupleExpression);\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/LetStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":52,"status":"M"},{"authorDate":"2021-06-22 00:19:37","commitOrder":7,"curCode":"  public ZplotStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n\n    for(StreamExpressionNamedParameter np : namedParams) {\n      String name = np.getName();\n      StreamExpressionParameter param = np.getParameter();\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      }\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":76,"groupId":"10328","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"ZplotStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ef/a975d634d7d5cfe99743f66911c542d406d056.src","preCode":"  public ZplotStream(StreamExpression expression, StreamFactory factory) throws IOException {\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    \r\n\n    for(StreamExpressionParameter np : namedParams) {\n      String name = ((StreamExpressionNamedParameter)np).getName();\n      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();\n      if(param instanceof StreamExpressionValue) {\n        String paramValue = ((StreamExpressionValue) param).getValue();\n        letParams.put(name, factory.constructPrimitiveObject(paramValue));\n      } else if(factory.isEvaluator((StreamExpression)param)) {\n        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);\n        letParams.put(name, evaluator);\n      }\n    }\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ZplotStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":60,"status":"M"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
