[{"authorTime":"2018-12-17 00:58:20","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":1,"curCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n","date":"2018-12-17 00:58:20","endLine":308,"groupId":"55830","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"generateToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a6/0e70087248a30fe837ba874aa2feb4c8f4a000.src","preCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"B"},{"authorDate":"2018-12-17 00:58:20","commitOrder":1,"curCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","date":"2018-12-17 00:58:20","endLine":148,"groupId":"20177","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a8/f03550b553001dad302a5f9350cf80983280d8.src","preCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/HttpParamDelegationTokenPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"B","submitter":"Cao Manh Dat"},{"authorTime":"2019-01-05 16:31:28","codes":[{"authorDate":"2019-01-05 16:31:28","commitOrder":2,"curCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n","date":"2019-01-05 16:31:28","endLine":308,"groupId":"55830","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"generateToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b1/4068c9317a67cdd29b37eef3bd60a1d5ef950f.src","preCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":279,"status":"M"},{"authorDate":"2019-01-05 16:31:28","commitOrder":2,"curCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","date":"2019-01-05 16:31:28","endLine":148,"groupId":"20177","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/1818e0e9570f1bd76b743589df824a6286f9f6.src","preCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getReq().getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/HttpParamDelegationTokenPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"M"}],"commitId":"000d0c1364b4c39d53095b37f263f75880d432db","commitMessage":"@@@SOLR-12514: FIxed the test and another bug\n","date":"2019-01-05 16:31:28","modifiedFileCount":"6","status":"M","submitter":"Noble Paul"},{"authorTime":"2019-01-05 16:31:28","codes":[{"authorDate":"2020-01-23 00:32:25","commitOrder":3,"curCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"generateToken: principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        log.debug(\"generateToken: not a solr (server) thread\");\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n    return Optional.of(base64Cipher);\n  }\n","date":"2020-01-23 00:32:25","endLine":312,"groupId":"55830","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"generateToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/53/8334a6c84632566ef5fc899998e4a578799e9f.src","preCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    return Optional.of(base64Cipher);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":281,"status":"M"},{"authorDate":"2019-01-05 16:31:28","commitOrder":3,"curCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","date":"2019-01-05 16:31:28","endLine":148,"groupId":"20177","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/1818e0e9570f1bd76b743589df824a6286f9f6.src","preCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/HttpParamDelegationTokenPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"95dfddc7d4eaaa5997ccd69797dbe1fd966f32ac","commitMessage":"@@@SOLR-12859: Fixed DocExpirationUpdateProcessorFactory to work with BasicAuth and other auth plugins that delegate to PKI for server initiated node-to-node communication.\n","date":"2020-01-23 00:32:25","modifiedFileCount":"4","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2019-01-05 16:31:28","codes":[{"authorDate":"2021-06-17 22:47:38","commitOrder":4,"curCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null && !reqInfo.useServerToken()) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"generateToken: principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        log.debug(\"generateToken: not a solr (server) thread\");\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n    return Optional.of(base64Cipher);\n  }\n","date":"2021-06-17 22:47:38","endLine":329,"groupId":"55830","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"generateToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6a/66f5a2c2ad359eebb92548cb16a161c77c4847.src","preCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"generateToken: principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        log.debug(\"generateToken: not a solr (server) thread\");\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n    return Optional.of(base64Cipher);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":298,"status":"M"},{"authorDate":"2019-01-05 16:31:28","commitOrder":4,"curCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","date":"2019-01-05 16:31:28","endLine":148,"groupId":"20177","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/1818e0e9570f1bd76b743589df824a6286f9f6.src","preCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/HttpParamDelegationTokenPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"b24d73ec1042de92f8f048a5d5263e41414019ab","commitMessage":"@@@SOLR-15451: SolrSchema (for SQL) should use PKI principal for request to /admin/luke (#168)\n\n","date":"2021-06-17 22:47:38","modifiedFileCount":"4","status":"M","submitter":"Timothy Potter"},{"authorTime":"2019-01-05 16:31:28","codes":[{"authorDate":"2021-08-31 21:56:55","commitOrder":5,"curCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null && !reqInfo.useServerToken()) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"generateToken: principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        log.debug(\"generateToken: not a solr (server) thread\");\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.getEncoder().encodeToString(payloadCipher);\n    log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n    return Optional.of(base64Cipher);\n  }\n","date":"2021-08-31 21:56:55","endLine":328,"groupId":"102027","id":9,"instanceNumber":1,"isCurCommit":1,"methodName":"generateToken","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5e/c1d55516bf8874061eb2e845706825365e3480.src","preCode":"  private Optional<String> generateToken() {\n    SolrRequestInfo reqInfo = getRequestInfo();\n    String usr;\n    if (reqInfo != null && !reqInfo.useServerToken()) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        log.debug(\"generateToken: principal is null\");\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        log.debug(\"generateToken: not a solr (server) thread\");\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n\n    String s = usr + \" \" + System.currentTimeMillis();\n\n    byte[] payload = s.getBytes(UTF_8);\n    byte[] payloadCipher = publicKeyHandler.keyPair.encrypt(ByteBuffer.wrap(payload));\n    String base64Cipher = Base64.byteArrayToBase64(payloadCipher);\n    log.trace(\"generateToken: usr={} token={}\", usr, base64Cipher);\n    return Optional.of(base64Cipher);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/PKIAuthenticationPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"M"},{"authorDate":"2019-01-05 16:31:28","commitOrder":5,"curCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","date":"2019-01-05 16:31:28","endLine":148,"groupId":"102027","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getPrincipal","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/1818e0e9570f1bd76b743589df824a6286f9f6.src","preCode":"  private Optional<String> getPrincipal() {\n    SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n    String usr;\n    if (reqInfo != null) {\n      Principal principal = reqInfo.getUserPrincipal();\n      if (principal == null) {\n        \r\n        \r\n        return Optional.empty();\n      } else {\n        usr = principal.getName();\n      }\n    } else {\n      if (!isSolrThread()) {\n        \r\n        \r\n        return Optional.empty();\n      }\n      \r\n      usr = \"$\"; \r\n    }\n    return Optional.of(usr);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/HttpParamDelegationTokenPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"N"}],"commitId":"bd3c05868b4884cabe3eb747663ebdfdbdcd2770","commitMessage":"@@@SOLR-15111 Use JDK8 Base64 instead of own implementation (#24)\n\nCo-authored-by: Jan H?ydahl <janhoy@users.noreply.github.com>","date":"2021-08-31 21:56:55","modifiedFileCount":"20","status":"M","submitter":"Andr?s Salamon"}]
