[{"authorTime":"2015-11-08 06:08:56","codes":[{"authorDate":"2015-11-11 09:45:04","commitOrder":5,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for (PushBackStream stream : streams) {\n      expression.addParameter(stream.toExpression(factory));\n    }\n    \n    \r\n    if (eq instanceof Expressible) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"on\", ((Expressible) eq).toExpression(factory)));\n    } else {\n      throw new IOException(\n          \"This JoinStream contains a non-expressible equalitor - it cannot be converted to an expression\");\n    }\n    \n    return expression;\n  }\n","date":"2015-11-11 09:45:04","endLine":109,"groupId":"51339","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/e983dd2f74998984bfdec84934522bbce556ac.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for (PushBackStream stream : streams) {\n      expression.addParameter(stream.toExpression(factory));\n    }\n    \n    \r\n    if (eq instanceof Expressible) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"on\", ((Expressible) eq).toExpression(factory)));\n    } else {\n      throw new IOException(\n          \"This JoinStream contains a non-expressible equalitor - it cannot be converted to an expression\");\n    }\n    \n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":91,"status":"B"},{"authorDate":"2015-11-08 06:08:56","commitOrder":5,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for(PushBackStream stream : streams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n","date":"2015-11-08 06:08:56","endLine":112,"groupId":"58924","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/776483e52a26725cc638a1014233b957d04884.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for(PushBackStream stream : streams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"NB"}],"commitId":"5c5812940a58fd97c03de6822bb82202ec852add","commitMessage":"@@@SOLR-7584: Adds Inner and LeftOuter Joins to the Streaming API and Streaming Expressions (Dennis Gove.  Corey Wu)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713753 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-11 09:45:04","modifiedFileCount":"12","status":"M","submitter":"Dennis Gove"},{"authorTime":"2016-04-20 00:06:32","codes":[{"authorDate":"2016-04-20 00:06:32","commitOrder":6,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for (PushBackStream stream : streams) {\n      if(includeStreams){\n        expression.addParameter(stream.toExpression(factory));\n      }\n      else{\n        expression.addParameter(\"<stream>\");\n      }\n    }\n    \n    \r\n    if (eq instanceof Expressible) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"on\", ((Expressible) eq).toExpression(factory)));\n    } else {\n      throw new IOException(\n          \"This JoinStream contains a non-expressible equalitor - it cannot be converted to an expression\");\n    }\n    \n    return expression;\n  }\n","date":"2016-04-20 00:06:32","endLine":120,"groupId":"10320","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/b7fe99a3a105298a8865ebb4bab76608e45d63.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for (PushBackStream stream : streams) {\n      expression.addParameter(stream.toExpression(factory));\n    }\n    \n    \r\n    if (eq instanceof Expressible) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"on\", ((Expressible) eq).toExpression(factory)));\n    } else {\n      throw new IOException(\n          \"This JoinStream contains a non-expressible equalitor - it cannot be converted to an expression\");\n    }\n    \n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":97,"status":"M"},{"authorDate":"2016-04-20 00:06:32","commitOrder":6,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for(PushBackStream stream : streams){\n      if(includeStreams){\n        expression.addParameter(stream.toExpression(factory));\n      }\n      else{\n        expression.addParameter(\"<stream>\");\n      }\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":123,"groupId":"10320","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c5/0ac779a48ee5d96f1b241518b4c0bf9d7a5298.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    for(PushBackStream stream : streams){\n      expression.addParameter(stream.toExpression(factory));\n    }\n    \n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",comp.toExpression(factory)));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/MergeStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":105,"status":"M"}],"commitId":"8ba1a3880bdcfb0a8764e997fae7a79cc29142a4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-20 00:06:32","modifiedFileCount":"43","status":"M","submitter":"Karl Wright"}]
