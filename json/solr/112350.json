[{"authorTime":"2021-06-17 03:49:29","codes":[{"authorDate":"2021-06-17 03:49:29","commitOrder":2,"curCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","date":"2021-06-17 03:49:29","endLine":284,"groupId":"15159","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"translateBinary","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/817507e99de9526740ea9c55b59a4d2d9a228b.src","preCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":268,"status":"MB"},{"authorDate":"2021-06-17 03:49:29","commitOrder":2,"curCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n\n      if (a != null) {\n        if (reverseAggMappings.containsKey(a.getKey())) {\n          return new Pair<>(reverseAggMappings.get(a.getKey()), a.getValue());\n        }\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","date":"2021-06-17 03:49:29","endLine":427,"groupId":"15165","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"translateBinary","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/817507e99de9526740ea9c55b59a4d2d9a228b.src","preCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n\n      if (a != null) {\n        if (reverseAggMappings.containsKey(a.getKey())) {\n          return new Pair<>(reverseAggMappings.get(a.getKey()), a.getValue());\n        }\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"B"}],"commitId":"a79e71c732a4488b82d24713568b1a553c85266b","commitMessage":"@@@SOLR-15460: Implement LIKE.  IS NOT NULL.  IS NULL.  and support wildcard * in equals string literal (#173)\n\nAlso fixes SOLR-15459 & SOLR-15463","date":"2021-06-17 03:49:29","modifiedFileCount":"2","status":"M","submitter":"Timothy Potter"},{"authorTime":"2021-06-17 03:49:29","codes":[{"authorDate":"2021-06-29 22:22:46","commitOrder":3,"curCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n\n      if (left.getKind() == SqlKind.CAST && right.getKind() == SqlKind.CAST) {\n        return translateBinary2(((RexCall)left).operands.get(0), ((RexCall)right).operands.get(0));\n      }\n\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","date":"2021-06-29 22:22:46","endLine":352,"groupId":"15159","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"translateBinary","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/01b21ef3e491e060ae9e45ed2babe0b918fb73.src","preCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":331,"status":"M"},{"authorDate":"2021-06-17 03:49:29","commitOrder":3,"curCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n\n      if (a != null) {\n        if (reverseAggMappings.containsKey(a.getKey())) {\n          return new Pair<>(reverseAggMappings.get(a.getKey()), a.getValue());\n        }\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","date":"2021-06-17 03:49:29","endLine":427,"groupId":"15165","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"translateBinary","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2f/817507e99de9526740ea9c55b59a4d2d9a228b.src","preCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n\n      if (a != null) {\n        if (reverseAggMappings.containsKey(a.getKey())) {\n          return new Pair<>(reverseAggMappings.get(a.getKey()), a.getValue());\n        }\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":407,"status":"N"}],"commitId":"e89593cfca11c419bdc9b29146eedb605c76169a","commitMessage":"@@@SOLR-15461: Upgrade Apache Calcite to latest release. (#177)\n\n","date":"2021-06-29 22:22:46","modifiedFileCount":"5","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2021-08-07 00:32:27","codes":[{"authorDate":"2021-08-07 00:32:27","commitOrder":4,"curCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n\n      \r\n      if (call.op.kind == SqlKind.EQUALS || call.op.kind == SqlKind.NOT_EQUALS) {\n        final Pair<String, RexLiteral> b = translateBinary2(right, left);\n        if (b != null) {\n          return b;\n        }\n      }\n\n      if (left.getKind() == SqlKind.CAST && right.getKind() == SqlKind.CAST) {\n        return translateBinary2(((RexCall)left).operands.get(0), ((RexCall)right).operands.get(0));\n      }\n\n      \r\n      if (left.getKind() == SqlKind.INPUT_REF && right.getKind() == SqlKind.CAST) {\n        final RexCall cast = ((RexCall)right);\n        if (cast.operands.size() == 1 && cast.operands.get(0).getKind() == SqlKind.LITERAL) {\n          return translateBinary2(left, cast.operands.get(0));\n        }\n      }\n\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","date":"2021-08-07 00:32:27","endLine":371,"groupId":"112350","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"translateBinary","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/cabb7a2caedd421e0d37af152f03cc5379470d.src","preCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n\n      if (left.getKind() == SqlKind.CAST && right.getKind() == SqlKind.CAST) {\n        return translateBinary2(((RexCall)left).operands.get(0), ((RexCall)right).operands.get(0));\n      }\n\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":338,"status":"M"},{"authorDate":"2021-08-07 00:32:27","commitOrder":4,"curCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n\n      if (a != null) {\n        if (reverseAggMappings.containsKey(a.getKey())) {\n          return new Pair<>(reverseAggMappings.get(a.getKey()), a.getValue());\n        }\n        return a;\n      }\n\n      if (call.op.kind == SqlKind.EQUALS || call.op.kind == SqlKind.NOT_EQUALS) {\n        final Pair<String, RexLiteral> b = translateBinary2(right, left);\n        if (b != null) {\n          return b;\n        }\n      }\n\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","date":"2021-08-07 00:32:27","endLine":524,"groupId":"112350","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"translateBinary","params":"(RexCallcall)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/cabb7a2caedd421e0d37af152f03cc5379470d.src","preCode":"    protected Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n\n      if (a != null) {\n        if (reverseAggMappings.containsKey(a.getKey())) {\n          return new Pair<>(reverseAggMappings.get(a.getKey()), a.getValue());\n        }\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n","realPath":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":500,"status":"M"}],"commitId":"072c9c8a74a059946ef0150fd91d0b086151e169","commitMessage":"@@@SOLR-15576: Allow filtering on ISO-8601 formatted timestamp literals in SQL WHERE clause (#247)\n\n","date":"2021-08-07 00:32:27","modifiedFileCount":"3","status":"M","submitter":"Timothy Potter"}]
