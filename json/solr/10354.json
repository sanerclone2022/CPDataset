[{"authorTime":"2017-05-12 21:44:16","codes":[{"authorDate":"2017-05-12 21:44:16","commitOrder":1,"curCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata) throws SQLException {\n    final int columnNumber = columnIdx + 1; \r\n    \r\n    final String columnName = metadata.getColumnLabel(columnNumber);\n    final int jdbcType = metadata.getColumnType(columnNumber);      \n    final String className = metadata.getColumnClassName(columnNumber);\n    ResultSetValueSelector valueSelector = null;\n    \n    \r\n    if(directSupportedTypes.contains(className)){\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Object obj = resultSet.getObject(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          if(obj instanceof String) {\n            String s = (String)obj;\n            if(s.indexOf(sep) > -1) {\n              s = s.substring(1);\n              return s.split(sep);\n            }\n          }\n\n          return obj;\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    \r\n    else if(Short.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Short obj = resultSet.getShort(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Integer.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Integer obj = resultSet.getInt(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Float.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Float obj = resultSet.getFloat(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.doubleValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    else if (jdbcType == Types.DATE) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Date sqlDate = resultSet.getDate(columnNumber);\n          return resultSet.wasNull() ? null : sqlDate.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIME ) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Time sqlTime = resultSet.getTime(columnNumber);\n          return resultSet.wasNull() ? null : sqlTime.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIMESTAMP) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Timestamp sqlTimestamp = resultSet.getTimestamp(columnNumber);\n          return resultSet.wasNull() ? null : sqlTimestamp.toInstant().toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    else {\n      Class<?> clazz;\n      try {\n        clazz = Class.forName(className, false, getClass().getClassLoader());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      final int scale = metadata.getScale(columnNumber);\n      if (Number.class.isAssignableFrom(clazz)) {\n        if (scale > 0) {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.doubleValue();                \n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        } else {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.longValue();\n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        }          \n      } else if (Clob.class.isAssignableFrom(clazz)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Clob c = resultSet.getClob(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            long length = c.length();\n            int lengthInt = (int) length;\n            if (length != lengthInt) {\n              throw new SQLException(String.format(Locale.ROOT,\n                  \"Encountered a clob of length #%l in column '%s' (col #%d).  Max supported length is #%i.\",\n                  length, columnName, columnNumber, Integer.MAX_VALUE));\n            }\n            return c.getSubString(1, lengthInt);\n          }\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } \n    }\n    return valueSelector;\n  }\n","date":"2017-05-12 21:44:16","endLine":478,"groupId":"20347","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"determineValueSelector","params":"(intcolumnIdx@ResultSetMetaDatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/b090f866206f1d349885751384710dad0ed7c5.src","preCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata) throws SQLException {\n    final int columnNumber = columnIdx + 1; \r\n    \r\n    final String columnName = metadata.getColumnLabel(columnNumber);\n    final int jdbcType = metadata.getColumnType(columnNumber);      \n    final String className = metadata.getColumnClassName(columnNumber);\n    ResultSetValueSelector valueSelector = null;\n    \n    \r\n    if(directSupportedTypes.contains(className)){\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Object obj = resultSet.getObject(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          if(obj instanceof String) {\n            String s = (String)obj;\n            if(s.indexOf(sep) > -1) {\n              s = s.substring(1);\n              return s.split(sep);\n            }\n          }\n\n          return obj;\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    \r\n    else if(Short.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Short obj = resultSet.getShort(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Integer.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Integer obj = resultSet.getInt(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Float.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Float obj = resultSet.getFloat(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.doubleValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    else if (jdbcType == Types.DATE) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Date sqlDate = resultSet.getDate(columnNumber);\n          return resultSet.wasNull() ? null : sqlDate.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIME ) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Time sqlTime = resultSet.getTime(columnNumber);\n          return resultSet.wasNull() ? null : sqlTime.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIMESTAMP) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Timestamp sqlTimestamp = resultSet.getTimestamp(columnNumber);\n          return resultSet.wasNull() ? null : sqlTimestamp.toInstant().toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    else {\n      Class<?> clazz;\n      try {\n        clazz = Class.forName(className, false, getClass().getClassLoader());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      final int scale = metadata.getScale(columnNumber);\n      if (Number.class.isAssignableFrom(clazz)) {\n        if (scale > 0) {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.doubleValue();                \n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        } else {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.longValue();\n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        }          \n      } else if (Clob.class.isAssignableFrom(clazz)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Clob c = resultSet.getClob(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            long length = c.length();\n            int lengthInt = (int) length;\n            if (length != lengthInt) {\n              throw new SQLException(String.format(Locale.ROOT,\n                  \"Encountered a clob of length #%l in column '%s' (col #%d).  Max supported length is #%i.\",\n                  length, columnName, columnNumber, Integer.MAX_VALUE));\n            }\n            return c.getSubString(1, lengthInt);\n          }\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } \n    }\n    return valueSelector;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":301,"status":"B"},{"authorDate":"2017-05-12 21:44:16","commitOrder":1,"curCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata)\n      throws SQLException {\n    ResultSetValueSelector valueSelector = super.determineValueSelector(columnIdx, metadata);\n    if (valueSelector == null) {\n      final int columnNumber = columnIdx + 1;\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      final String className = metadata.getColumnClassName(columnNumber);\n      if (Array.class.getName().equals(className)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            if (o instanceof Array) {\n              Array array = (Array) o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    return valueSelector;\n  }\n","date":"2017-05-12 21:44:16","endLine":74,"groupId":"45650","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"determineValueSelector","params":"(intcolumnIdx@ResultSetMetaDatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/38f6223f55270a1981e759c17e254724ff10ef.src","preCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata)\n      throws SQLException {\n    ResultSetValueSelector valueSelector = super.determineValueSelector(columnIdx, metadata);\n    if (valueSelector == null) {\n      final int columnNumber = columnIdx + 1;\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      final String className = metadata.getColumnClassName(columnNumber);\n      if (Array.class.getName().equals(className)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            if (o instanceof Array) {\n              Array array = (Array) o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    return valueSelector;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/CalciteJDBCStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"B"}],"commitId":"e61b5b34bf14b9addd98eeafdad43b92e6208d5f","commitMessage":"@@@SOLR-10617: JDBCStream to support additional types.  minor refactoring to separate out CalciteJDBCStream.  upgrade hsqldb for JDBCStream & DIH tests.\n","date":"2017-05-12 21:44:16","modifiedFileCount":"4","status":"B","submitter":"jdyer1"},{"authorTime":"2017-05-12 21:44:16","codes":[{"authorDate":"2021-08-11 22:28:18","commitOrder":2,"curCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata) throws SQLException {\n    final int columnNumber = columnIdx + 1; \r\n    \r\n    final String columnName = metadata.getColumnLabel(columnNumber);\n    final int jdbcType = metadata.getColumnType(columnNumber);      \n    final String className = metadata.getColumnClassName(columnNumber);\n    ResultSetValueSelector valueSelector = null;\n    \n    \r\n    if(directSupportedTypes.contains(className)){\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Object obj = resultSet.getObject(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          if(obj instanceof String) {\n            String s = (String)obj;\n            if(s.indexOf(sep) > -1) {\n              s = s.substring(1);\n              return s.split(sep);\n            }\n          }\n\n          return obj;\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    \r\n    else if(Short.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Short obj = resultSet.getShort(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Integer.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Integer obj = resultSet.getInt(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Float.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Float obj = resultSet.getFloat(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.doubleValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    }\n    \r\n    \r\n    \r\n    else if (jdbcType == Types.DATE) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Date sqlDate = resultSet.getDate(columnNumber);\n          return resultSet.wasNull() ? null : sqlDate.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIME ) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Time sqlTime = resultSet.getTime(columnNumber);\n          return resultSet.wasNull() ? null : sqlTime.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIMESTAMP) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Timestamp sqlTimestamp = resultSet.getTimestamp(columnNumber);\n          return resultSet.wasNull() ? null : sqlTimestamp.toInstant().toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (Object.class.getName().equals(className)) {\n      \r\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Object obj = resultSet.getObject(columnNumber);\n          return resultSet.wasNull() ? null : obj;\n        }\n\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    }\n    \r\n    \r\n    \r\n    else {\n      Class<?> clazz;\n      try {\n        clazz = Class.forName(className, false, getClass().getClassLoader());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      final int scale = metadata.getScale(columnNumber);\n      if (Number.class.isAssignableFrom(clazz)) {\n        if (scale > 0) {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.doubleValue();                \n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        } else {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.longValue();\n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        }          \n      } else if (Clob.class.isAssignableFrom(clazz)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Clob c = resultSet.getClob(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            long length = c.length();\n            int lengthInt = (int) length;\n            if (length != lengthInt) {\n              throw new SQLException(String.format(Locale.ROOT,\n                  \"Encountered a clob of length #%l in column '%s' (col #%d).  Max supported length is #%i.\",\n                  length, columnName, columnNumber, Integer.MAX_VALUE));\n            }\n            return c.getSubString(1, lengthInt);\n          }\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } \n    }\n    return valueSelector;\n  }\n","date":"2021-08-11 22:28:18","endLine":507,"groupId":"10354","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"determineValueSelector","params":"(intcolumnIdx@ResultSetMetaDatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/44a865f069657f69a2e3fb73fe7fdf09caa207.src","preCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata) throws SQLException {\n    final int columnNumber = columnIdx + 1; \r\n    \r\n    final String columnName = metadata.getColumnLabel(columnNumber);\n    final int jdbcType = metadata.getColumnType(columnNumber);      \n    final String className = metadata.getColumnClassName(columnNumber);\n    ResultSetValueSelector valueSelector = null;\n    \n    \r\n    if(directSupportedTypes.contains(className)){\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Object obj = resultSet.getObject(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          if(obj instanceof String) {\n            String s = (String)obj;\n            if(s.indexOf(sep) > -1) {\n              s = s.substring(1);\n              return s.split(sep);\n            }\n          }\n\n          return obj;\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    \r\n    else if(Short.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Short obj = resultSet.getShort(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Integer.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Integer obj = resultSet.getInt(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.longValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if(Float.class.getName().equals(className)) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Float obj = resultSet.getFloat(columnNumber);\n          if(resultSet.wasNull()){ return null; }\n          return obj.doubleValue();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    else if (jdbcType == Types.DATE) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Date sqlDate = resultSet.getDate(columnNumber);\n          return resultSet.wasNull() ? null : sqlDate.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIME ) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Time sqlTime = resultSet.getTime(columnNumber);\n          return resultSet.wasNull() ? null : sqlTime.toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } else if (jdbcType == Types.TIMESTAMP) {\n      valueSelector = new ResultSetValueSelector() {\n        @Override\n        public Object selectValue(ResultSet resultSet) throws SQLException {\n          Timestamp sqlTimestamp = resultSet.getTimestamp(columnNumber);\n          return resultSet.wasNull() ? null : sqlTimestamp.toInstant().toString();\n        }\n        @Override\n        public String getColumnName() {\n          return columnName;\n        }\n      };\n    } \n    \r\n    \r\n    \r\n    else {\n      Class<?> clazz;\n      try {\n        clazz = Class.forName(className, false, getClass().getClassLoader());\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n      final int scale = metadata.getScale(columnNumber);\n      if (Number.class.isAssignableFrom(clazz)) {\n        if (scale > 0) {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.doubleValue();                \n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        } else {\n          valueSelector = new ResultSetValueSelector() {\n            @Override\n            public Object selectValue(ResultSet resultSet) throws SQLException {\n              BigDecimal bd = resultSet.getBigDecimal(columnNumber);\n              return resultSet.wasNull() ? null : bd.longValue();\n            }\n            @Override\n            public String getColumnName() {\n              return columnName;\n            }\n          };            \n        }          \n      } else if (Clob.class.isAssignableFrom(clazz)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Clob c = resultSet.getClob(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            long length = c.length();\n            int lengthInt = (int) length;\n            if (length != lengthInt) {\n              throw new SQLException(String.format(Locale.ROOT,\n                  \"Encountered a clob of length #%l in column '%s' (col #%d).  Max supported length is #%i.\",\n                  length, columnName, columnNumber, Integer.MAX_VALUE));\n            }\n            return c.getSubString(1, lengthInt);\n          }\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      } \n    }\n    return valueSelector;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":316,"status":"M"},{"authorDate":"2017-05-12 21:44:16","commitOrder":2,"curCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata)\n      throws SQLException {\n    ResultSetValueSelector valueSelector = super.determineValueSelector(columnIdx, metadata);\n    if (valueSelector == null) {\n      final int columnNumber = columnIdx + 1;\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      final String className = metadata.getColumnClassName(columnNumber);\n      if (Array.class.getName().equals(className)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            if (o instanceof Array) {\n              Array array = (Array) o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    return valueSelector;\n  }\n","date":"2017-05-12 21:44:16","endLine":74,"groupId":"10354","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"determineValueSelector","params":"(intcolumnIdx@ResultSetMetaDatametadata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/38f6223f55270a1981e759c17e254724ff10ef.src","preCode":"  protected ResultSetValueSelector determineValueSelector(int columnIdx, ResultSetMetaData metadata)\n      throws SQLException {\n    ResultSetValueSelector valueSelector = super.determineValueSelector(columnIdx, metadata);\n    if (valueSelector == null) {\n      final int columnNumber = columnIdx + 1;\n      final String columnName = metadata.getColumnLabel(columnNumber);\n      final String className = metadata.getColumnClassName(columnNumber);\n      if (Array.class.getName().equals(className)) {\n        valueSelector = new ResultSetValueSelector() {\n          @Override\n          public Object selectValue(ResultSet resultSet) throws SQLException {\n            Object o = resultSet.getObject(columnNumber);\n            if (resultSet.wasNull()) {\n              return null;\n            }\n            if (o instanceof Array) {\n              Array array = (Array) o;\n              return array.getArray();\n            } else {\n              return o;\n            }\n          }\n\n          @Override\n          public String getColumnName() {\n            return columnName;\n          }\n        };\n      }\n    }\n    return valueSelector;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/CalciteJDBCStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"86d95ce05d2273c6b5692f911fa047dd7ebf5fba","commitMessage":"@@@SOLR-9853: Ability to project multi-valued fields in SQL query results (#252)\n\n","date":"2021-08-11 22:28:18","modifiedFileCount":"5","status":"M","submitter":"Timothy Potter"}]
