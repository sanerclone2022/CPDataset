[{"authorTime":"2015-11-12 08:08:45","codes":[{"authorDate":"2015-11-12 08:08:45","commitOrder":1,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","date":"2015-11-12 08:08:45","endLine":76,"groupId":"16001","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/b83bfe049c05386170eba163e4163b6af68189.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/OuterHashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"B"},{"authorDate":"2015-11-12 08:08:45","commitOrder":1,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","date":"2015-11-12 08:08:45","endLine":125,"groupId":"16001","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/8a09166844b09a80f1248af991542529be8235.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":103,"status":"B"}],"commitId":"19715d10ef7e1fcee5a8f7de43b230e38d9b22c5","commitMessage":"@@@SOLR-8188: Adds Hash and OuterHash Joins to the Streaming API and Streaming Expressions\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1713950 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-12 08:08:45","modifiedFileCount":"2","status":"B","submitter":"Dennis Gove"},{"authorTime":"2016-04-20 00:06:32","codes":[{"authorDate":"2015-11-12 08:08:45","commitOrder":2,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","date":"2015-11-12 08:08:45","endLine":76,"groupId":"16001","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/b83bfe049c05386170eba163e4163b6af68189.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/OuterHashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"N"},{"authorDate":"2016-04-20 00:06:32","commitOrder":2,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      \r\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","date":"2016-04-20 00:06:32","endLine":137,"groupId":"34764","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/df/b678f63fc291fffb75fb9b832c2842f5779f2f.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":109,"status":"M"}],"commitId":"8ba1a3880bdcfb0a8764e997fae7a79cc29142a4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-20 00:06:32","modifiedFileCount":"43","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-06 19:40:52","codes":[{"authorDate":"2016-05-06 19:40:52","commitOrder":3,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(int idx = 0; idx < leftHashOn.size(); ++idx){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      \n      \r\n      String left = leftHashOn.get(idx);\n      String right = rightHashOn.get(idx);\n      \n      if(left.equals(right)){ \n        sb.append(left); \n      }\n      else{\n        sb.append(left);\n        sb.append(\"=\");\n        sb.append(right);\n      }\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","date":"2016-05-06 19:40:52","endLine":87,"groupId":"10259","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9e/8233492dc60bb8b2c7df4a24c083070c52b798.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    \r\n    if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n      expression.addParameter(((Expressible)fullStream).toExpression(factory));\n      expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n    }\n    else{\n      throw new IOException(\"This OuterHashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/OuterHashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":53,"status":"M"},{"authorDate":"2016-05-06 19:40:52","commitOrder":3,"curCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      \r\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(int idx = 0; idx < leftHashOn.size(); ++idx){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      \n      \r\n      String left = leftHashOn.get(idx);\n      String right = rightHashOn.get(idx);\n      \n      if(left.equals(right)){ \n        sb.append(left); \n      }\n      else{\n        sb.append(left);\n        sb.append(\"=\");\n        sb.append(right);\n      }\n    }\n    \n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    return expression;   \n  }\n","date":"2016-05-06 19:40:52","endLine":167,"groupId":"10259","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory@booleanincludeStreams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fe/ff591fbf2a4389526bd875a85e2715d2f861aa.src","preCode":"  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    if(includeStreams){\n      \r\n      if(hashStream instanceof Expressible && fullStream instanceof Expressible){\n        expression.addParameter(((Expressible)fullStream).toExpression(factory));\n        expression.addParameter(new StreamExpressionNamedParameter(\"hashed\", ((Expressible)hashStream).toExpression(factory)));\n      }\n      else{\n        throw new IOException(\"This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n      }\n    }\n    else{\n      expression.addParameter(\"<stream>\");\n      expression.addParameter(\"hashed=<stream>\");\n    }\n    \n    \r\n    StringBuilder sb = new StringBuilder();\n    for(String part : hashOn){\n      if(sb.length() > 0){ sb.append(\",\"); }\n      sb.append(part);\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",sb.toString()));\n    \n    return expression;   \n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/HashJoinStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":127,"status":"M"}],"commitId":"a531323b19125266289c7cafacbf5f6ea41cc84d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-06 19:40:52","modifiedFileCount":"5","status":"M","submitter":"Karl Wright"}]
