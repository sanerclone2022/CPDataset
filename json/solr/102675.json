[{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-01-19 09:27:21","endLine":779,"groupId":"51074","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldExactQuery","params":"(Stringfield@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":743,"status":"B"},{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); \r\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-01-19 09:27:21","endLine":1249,"groupId":"51082","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldExactQuery","params":"(Stringfield)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); \r\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1222,"status":"B"}],"commitId":"57934ba4480d71218c7f60d0417dbae9d26188d0","commitMessage":"@@@SOLR-8396: Add support for PointFields in Solr\n","date":"2017-01-19 09:27:21","modifiedFileCount":"33","status":"B","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-04-07 03:07:41","codes":[{"authorDate":"2017-04-07 03:07:41","commitOrder":2,"curCode":"  private void doTestIntPointFieldExactQuery(final String field, final boolean testLong, final boolean searchable) throws Exception {\n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          MATCH_ONE);\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"debug\", \"true\", \"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), MATCH_TWO);\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        MATCH_ONE);\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n                MATCH_ONE);\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n              MATCH_ONE);\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-04-07 03:07:41","endLine":1123,"groupId":"51074","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldExactQuery","params":"(finalStringfield@finalbooleantestLong@finalbooleansearchable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/458445fe4dd396b4e52d51b3e11132ad5e57dd.src","preCode":"  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), \"//*[@numFound='2']\");\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        \"//*[@numFound='1']\");\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n            \"//*[@numFound='1']\");\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1084,"status":"M"},{"authorDate":"2017-04-07 03:07:41","commitOrder":2,"curCode":"  private void doTestFloatPointFieldExactQuery(String field, final boolean searchable) throws Exception {\n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n              MATCH_ONE);\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2),\n              MATCH_TWO);\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); \r\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n              MATCH_ONE);\n    }\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-04-07 03:07:41","endLine":1893,"groupId":"51082","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldExactQuery","params":"(Stringfield@finalbooleansearchable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/458445fe4dd396b4e52d51b3e11132ad5e57dd.src","preCode":"  private void doTestFloatPointFieldExactQuery(String field) throws Exception {\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2), \"//*[@numFound='2']\");\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); \r\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n          \"//*[@numFound='1']\");\n    }\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1862,"status":"M"}],"commitId":"6e5f6fab53b8c6f4acbebd51c346173829a3247a","commitMessage":"@@@SOLR-10425: Fix indexed=\"false\" on numeric PointFields\n","date":"2017-04-07 03:07:41","modifiedFileCount":"7","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2017-07-11 07:58:23","codes":[{"authorDate":"2017-07-11 07:58:23","commitOrder":3,"curCode":"  private void doTestIntPointFieldExactQuery(final String field, final boolean testLong, final boolean searchable) throws Exception {\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    Map<String,Integer> randCount = new HashMap<>(numValues);\n    String[] rand = testLong ? toStringArray(getRandomLongs(numValues, false))\n                             : toStringArray(getRandomInts(numValues, false));\n    for (int i = 0 ; i < numValues ; i++) {\n      randCount.merge(rand[i], 1, (a, b) -> a + b); \r\n      assertU(adoc(\"id\", String.valueOf(i), field, rand[i]));\n    }\n    assertU(commit());\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertQ(req(\"q\", field + \":\" + (rand[i].startsWith(\"-\") ? \"\\\\\" : \"\") + rand[i],\n          \"fl\", \"id,\" + field), getTestString(searchable, randCount.get(rand[i])));\n    }\n    \n    StringBuilder builder = new StringBuilder();\n    for (String value : randCount.keySet()) {\n      if (builder.length() != 0) {\n        builder.append(\" OR \");\n      }\n      if (value.startsWith(\"-\")) {\n        builder.append(\"\\\\\"); \r\n      }\n      builder.append(value);\n    }\n    assertQ(req(\"debug\", \"true\", \"q\", field + \":(\" + builder.toString() + \")\"), getTestString(searchable, numValues));\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), getTestString(searchable, 1));\n    \n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-11 07:58:23","endLine":1949,"groupId":"102675","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldExactQuery","params":"(finalStringfield@finalbooleantestLong@finalbooleansearchable)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  private void doTestIntPointFieldExactQuery(final String field, final boolean testLong, final boolean searchable) throws Exception {\n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n\n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n          MATCH_ONE);\n    }\n    \n    for (int i = 0; i < 10; i++) {\n      assertQ(req(\"debug\", \"true\", \"q\", field + \":\" + (i+1) + \" OR \" + field + \":\" + ((i+1)%10 + 1)), MATCH_TWO);\n    }\n    \n    assertU(adoc(\"id\", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));\n    assertU(commit());\n    assertQ(req(\"q\", field + \":\"+Integer.MAX_VALUE, \"fl\", \"id, \" + field), \n        MATCH_ONE);\n    \n    if (testLong) {\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i+1)));\n      }\n      assertU(commit());\n      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {\n        assertQ(req(\"q\", field + \":\"+(i+1), \"fl\", \"id, \" + field), \n                MATCH_ONE);\n      }\n      assertU(adoc(\"id\", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\"+Long.MAX_VALUE, \"fl\", \"id, \" + field), \n              MATCH_ONE);\n    }\n    \n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1915,"status":"M"},{"authorDate":"2017-07-11 07:58:23","commitOrder":3,"curCode":"  private void doTestFloatPointFieldExactQuery(final String field, final boolean searchable, final boolean testDouble) \n      throws Exception {\n    int numValues = 10 * RANDOM_MULTIPLIER;\n    Map<String,Integer> randCount = new HashMap<>(numValues);\n    String[] rand = testDouble ? toStringArray(getRandomDoubles(numValues, false)) \n                               : toStringArray(getRandomFloats(numValues, false));\n    for (int i = 0 ; i < numValues ; i++) {\n      randCount.merge(rand[i], 1, (a, b) -> a + b); \r\n      assertU(adoc(\"id\", String.valueOf(i), field, rand[i]));\n    }\n    assertU(commit());\n\n    for (int i = 0 ; i < numValues ; i++) {\n      assertQ(req(\"q\", field + \":\" + (rand[i].startsWith(\"-\") ? \"\\\\\" : \"\") + rand[i],\n          \"fl\", \"id,\" + field), getTestString(searchable, randCount.get(rand[i])));\n    }\n\n    StringBuilder builder = new StringBuilder();\n    for (String value : randCount.keySet()) {\n      if (builder.length() != 0) {\n        builder.append(\" OR \");\n      }\n      if (value.startsWith(\"-\")) {\n        builder.append(\"\\\\\"); \r\n      }\n      builder.append(value);\n    }\n    assertQ(req(\"debug\", \"true\", \"q\", field + \":(\" + builder.toString() + \")\"), getTestString(searchable, numValues));\n\n    clearIndex();\n    assertU(commit());\n  }\n","date":"2017-07-11 07:58:23","endLine":2683,"groupId":"102675","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldExactQuery","params":"(finalStringfield@finalbooleansearchable@finalbooleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3d/ac18c2bdfac96349fcaebb19bf76a023cca188.src","preCode":"  private void doTestFloatPointFieldExactQuery(String field, final boolean searchable) throws Exception {\n    final String MATCH_ONE = \"//*[@numFound='\" + (searchable ? \"1\" : \"0\") + \"']\";\n    final String MATCH_TWO = \"//*[@numFound='\" + (searchable ? \"2\" : \"0\") + \"']\";\n    \n    for (int i=0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, String.valueOf(i + \".\" + i)));\n    }\n    assertU(commit());\n    for (int i = 0; i < 9; i++) {\n      assertQ(req(\"q\", field + \":\"+(i+1) + \".\" + (i+1), \"fl\", \"id, \" + field), \n              MATCH_ONE);\n    }\n    \n    for (int i = 0; i < 9; i++) {\n      String num1 = (i+1) + \".\" + (i+1);\n      String num2 = ((i+1)%9 + 1) + \".\" + ((i+1)%9 + 1);\n      assertQ(req(\"q\", field + \":\" + num1 + \" OR \" + field + \":\" + num2),\n              MATCH_TWO);\n    }\n    \n    clearIndex();\n    assertU(commit());\n    for (int i = 0; i < atLeast(10); i++) {\n      float rand = random().nextFloat() * 10;\n      assertU(adoc(\"id\", \"random_number \", field, String.valueOf(rand))); \r\n      assertU(commit());\n      assertQ(req(\"q\", field + \":\" + rand, \"fl\", \"id, \" + field), \n              MATCH_ONE);\n    }\n    clearIndex();\n    assertU(commit());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2652,"status":"M"}],"commitId":"5bb09e08528552c310d30fc627dc823a86aa6880","commitMessage":"@@@SOLR-10796: TestPointFields: increase randomized testing of non-trivial values\n","date":"2017-07-11 07:58:23","modifiedFileCount":"1","status":"M","submitter":"Steve Rowe"}]
