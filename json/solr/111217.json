[{"authorTime":"2016-11-02 01:50:14","codes":[{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          \r\n          \r\n          \r\n          \r\n          \r\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n","date":"2016-11-02 01:50:14","endLine":575,"groupId":"32770","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"score","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/1c1edf58f6bff1739bac28847d51ce1b85bfbf.src","preCode":"        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          \r\n          \r\n          \r\n          \r\n          \r\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":556,"status":"B"},{"authorDate":"2016-11-02 01:50:14","commitOrder":1,"curCode":"        public float score() throws IOException {\n          reset();\n          freq = 0;\n          if (targetDoc == activeDoc) {\n            for (final Scorer scorer : featureScorers) {\n              if (scorer.docID() == activeDoc) {\n                freq++;\n                Feature.FeatureWeight scFW = (Feature.FeatureWeight) scorer.getWeight();\n                final int featureId = scFW.getIndex();\n                featuresInfo[featureId].setValue(scorer.score());\n                featuresInfo[featureId].setUsed(true);\n              }\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n","date":"2016-11-02 01:50:14","endLine":668,"groupId":"595","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"score","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/99/1c1edf58f6bff1739bac28847d51ce1b85bfbf.src","preCode":"        public float score() throws IOException {\n          reset();\n          freq = 0;\n          if (targetDoc == activeDoc) {\n            for (final Scorer scorer : featureScorers) {\n              if (scorer.docID() == activeDoc) {\n                freq++;\n                Feature.FeatureWeight scFW = (Feature.FeatureWeight) scorer.getWeight();\n                final int featureId = scFW.getIndex();\n                featuresInfo[featureId].setValue(scorer.score());\n                featuresInfo[featureId].setUsed(true);\n              }\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":652,"status":"B"}],"commitId":"5a66b3bc089e4b3e73b1c41c4cdcd89b183b85e7","commitMessage":"@@@SOLR-8542: Adds Solr Learning to Rank (LTR) plugin for reranking results with machine learning models. (Michael Nilsson.  Diego Ceccarelli.  Joshua Pantony.  Jon Dorando.  Naveen Santhapuri.  Alessandro Benedetti.  David Grohmann.  Christine Poerschke)\n","date":"2016-11-02 01:50:14","modifiedFileCount":"0","status":"B","submitter":"Christine Poerschke"},{"authorTime":"2016-12-08 04:43:49","codes":[{"authorDate":"2016-12-08 04:43:49","commitOrder":2,"curCode":"        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          \r\n          \r\n          \r\n          \r\n          \r\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          return makeNormalizedFeaturesAndScore();\n        }\n","date":"2016-12-08 04:46:42","endLine":576,"groupId":"111217","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"score","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/0ebf55bb0b1d76e32655d0d8442b3f08d05fd7.src","preCode":"        public float score() throws IOException {\n          final DisiWrapper topList = subScorers.topList();\n          \r\n          \r\n          \r\n          \r\n          \r\n          reset();\n          if (activeDoc == targetDoc) {\n            for (DisiWrapper w = topList; w != null; w = w.next) {\n              final Scorer subScorer = w.scorer;\n              Feature.FeatureWeight scFW = (Feature.FeatureWeight) subScorer.getWeight();\n              final int featureId = scFW.getIndex();\n              featuresInfo[featureId].setValue(subScorer.score());\n              featuresInfo[featureId].setUsed(true);\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":558,"status":"M"},{"authorDate":"2016-12-08 04:43:49","commitOrder":2,"curCode":"        public float score() throws IOException {\n          reset();\n          freq = 0;\n          if (targetDoc == activeDoc) {\n            for (final Scorer scorer : featureScorers) {\n              if (scorer.docID() == activeDoc) {\n                freq++;\n                Feature.FeatureWeight scFW = (Feature.FeatureWeight) scorer.getWeight();\n                final int featureId = scFW.getIndex();\n                featuresInfo[featureId].setValue(scorer.score());\n                featuresInfo[featureId].setUsed(true);\n              }\n            }\n          }\n          return makeNormalizedFeaturesAndScore();\n        }\n","date":"2016-12-08 04:46:42","endLine":668,"groupId":"111217","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"score","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d6/0ebf55bb0b1d76e32655d0d8442b3f08d05fd7.src","preCode":"        public float score() throws IOException {\n          reset();\n          freq = 0;\n          if (targetDoc == activeDoc) {\n            for (final Scorer scorer : featureScorers) {\n              if (scorer.docID() == activeDoc) {\n                freq++;\n                Feature.FeatureWeight scFW = (Feature.FeatureWeight) scorer.getWeight();\n                final int featureId = scFW.getIndex();\n                featuresInfo[featureId].setValue(scorer.score());\n                featuresInfo[featureId].setUsed(true);\n              }\n            }\n          }\n          makeNormalizedFeatures();\n          return ltrScoringModel.score(modelFeatureValuesNormalized);\n        }\n","realPath":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":653,"status":"M"}],"commitId":"bfc3690d5203cee20550450bac3771e5c2b85cbf","commitMessage":"@@@SOLR-8542: couple of tweaks (Michael Nilsson.  Diego Ceccarelli.  Christine Poerschke)\n\n* removed code triplication in ManagedModelStore\n* LTRScoringQuery.java tweaks\n* FeatureLogger.makeFeatureVector(...) can now safely be called repeatedly (though that doesn't happen at present)\n* make Feature.FeatureWeight.extractTerms a no-op; (OriginalScore|SolrFeature)Weight now implement extractTerms\n\n* LTRThreadModule javadocs and README.md tweaks\n\n* add TestFieldValueFeature.testBooleanValue test; replace \"T\"/\"F\" magic string use in FieldValueFeature\n* add TestOriginalScoreScorer test; add OriginalScoreScorer.freq() method\n* in TestMultipleAdditiveTreesModel revive dead explain test\n","date":"2016-12-08 04:46:42","modifiedFileCount":"12","status":"M","submitter":"Christine Poerschke"}]
