[{"authorTime":"2016-08-03 23:12:57","codes":[{"authorDate":"2016-02-04 09:17:29","commitOrder":2,"curCode":"  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    \r\n    \r\n    \r\n    \n    \r\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n","date":"2016-02-04 09:42:48","endLine":327,"groupId":"4689","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudSolrStreamWithEscapedQuote","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/98a7b5f1b28424a68bd290e0dfa49e1ee37098.src","preCode":"  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    \r\n    \r\n    \r\n    \n    \r\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":311,"status":"NB"},{"authorDate":"2016-08-03 23:12:57","commitOrder":2,"curCode":"  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n","date":"2016-08-03 23:43:00","endLine":358,"groupId":"40749","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testFeaturesSelectionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4d/df4ce8dce80768547cf4ad2d6643c5ef22ab66.src","preCode":"  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":348,"status":"B"}],"commitId":"87938e00e9f1006801fbf0e8c0d7b2a84b5eda48","commitMessage":"@@@SOLR-9252: Feature selection and logistic regression on text\n","date":"2016-08-03 23:43:00","modifiedFileCount":"7","status":"M","submitter":"jbernste"},{"authorTime":"2018-02-26 14:13:26","codes":[{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    \r\n    \r\n    \r\n    \n    \r\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    try (CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory)) {\n      String firstExpressionString = firstStream.toExpression(factory).toString();\n\n      try (CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory)) {\n        String secondExpressionString = secondStream.toExpression(factory).toString();\n\n        assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n        assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n      }\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":341,"groupId":"10672","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testCloudSolrStreamWithEscapedQuote","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testCloudSolrStreamWithEscapedQuote() throws Exception {\n\n    \r\n    \r\n    \r\n    \n    \r\n    String originalExpressionString = \"search(collection1,fl=\\\"id,first\\\",sort=\\\"first asc\\\",q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\")\";\n    CloudSolrStream firstStream = new CloudSolrStream(StreamExpressionParser.parse(originalExpressionString), factory);\n    String firstExpressionString = firstStream.toExpression(factory).toString();\n    \n    CloudSolrStream secondStream = new CloudSolrStream(StreamExpressionParser.parse(firstExpressionString), factory);\n    String secondExpressionString = secondStream.toExpression(factory).toString();\n    \n    assertTrue(firstExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n    assertTrue(secondExpressionString.contains(\"q=\\\"presentTitles:\\\\\\\"chief, executive officer\\\\\\\" AND age:[36 TO *]\\\"\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":323,"status":"M"},{"authorDate":"2018-02-26 14:13:26","commitOrder":3,"curCode":"  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    try (FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory)) {\n      String expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"featureSet=first\"));\n      assertTrue(expressionString.contains(\"field=tv_text\"));\n      assertTrue(expressionString.contains(\"outcome=out_i\"));\n      assertTrue(expressionString.contains(\"numTerms=4\"));\n      assertTrue(expressionString.contains(\"positiveLabel=2\"));\n    }\n  }\n","date":"2018-02-26 14:13:47","endLine":355,"groupId":"10672","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testFeaturesSelectionStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/93/27ee98f997891ff1e0d706573957f6966cbe05.src","preCode":"  public void testFeaturesSelectionStream() throws Exception {\n    String expr = \"featuresSelection(collection1, q=\\\"*:*\\\", featureSet=\\\"first\\\", field=\\\"tv_text\\\", outcome=\\\"out_i\\\", numTerms=4, positiveLabel=2)\";\n    FeaturesSelectionStream stream = new FeaturesSelectionStream(StreamExpressionParser.parse(expr), factory);\n    String expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"featureSet=first\"));\n    assertTrue(expressionString.contains(\"field=tv_text\"));\n    assertTrue(expressionString.contains(\"outcome=out_i\"));\n    assertTrue(expressionString.contains(\"numTerms=4\"));\n    assertTrue(expressionString.contains(\"positiveLabel=2\"));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":344,"status":"M"}],"commitId":"6164643882f6f2bf371e53376cc9f0a2a184b150","commitMessage":"@@@SOLR-10809: Get precommit lint warnings out of Solr core\n","date":"2018-02-26 14:13:47","modifiedFileCount":"52","status":"M","submitter":"Erick Erickson"}]
