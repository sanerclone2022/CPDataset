[{"authorTime":"2016-10-20 03:56:31","codes":[{"authorDate":"2016-12-22 03:21:50","commitOrder":14,"curCode":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2016-12-22 04:48:25","endLine":330,"groupId":"6081","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e9/10443ea47cb3ae2bd89a3770564d3a8d4e7748.src","preCode":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":297,"status":"B"},{"authorDate":"2016-10-20 03:56:31","commitOrder":14,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2016-10-20 03:56:31","endLine":256,"groupId":"61200","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/841bdc4eece2120473f90290530040a6fbcb33.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"NB"}],"commitId":"de0a046b21b7c8698fff0db685eb287e24087b22","commitMessage":"@@@SOLR-9758: refactor preferLocalShards implementation\n","date":"2016-12-22 04:48:25","modifiedFileCount":"9","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2016-10-20 03:56:31","codes":[{"authorDate":"2017-02-22 19:19:56","commitOrder":15,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2017-02-22 22:15:40","endLine":354,"groupId":"6081","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/a2d60e72af87e24dc52378b4dc7f05202060a1.src","preCode":"  ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"M"},{"authorDate":"2016-10-20 03:56:31","commitOrder":15,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2016-10-20 03:56:31","endLine":256,"groupId":"61200","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3e/841bdc4eece2120473f90290530040a6fbcb33.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"N"}],"commitId":"ee55bec9f0dc44661e77b6c65b05d1ab586a4cdc","commitMessage":"@@@SOLR-10173: Make HttpShardHandlerFactory.getReplicaListTransformer more extensible. (Ramsey Haddad via Christine Poerschke)\n","date":"2017-02-22 22:15:40","modifiedFileCount":"3","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2017-03-09 10:10:56","codes":[{"authorDate":"2017-02-22 19:19:56","commitOrder":16,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2017-02-22 22:15:40","endLine":354,"groupId":"6081","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/a2d60e72af87e24dc52378b4dc7f05202060a1.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":321,"status":"N"},{"authorDate":"2017-03-09 10:10:56","commitOrder":16,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2017-03-09 10:11:26","endLine":276,"groupId":"14759","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/e59b6e194345dfd2edad21b839a9dabeb51683.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"M"}],"commitId":"682c6a7d5145129e8ae01ff00505ddf5a564d396","commitMessage":"@@@SOLR-10254: significantTerms Streaming Expression should work in non-SolrCloud mode\n","date":"2017-03-09 10:11:26","modifiedFileCount":"4","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-03-09 10:10:56","codes":[{"authorDate":"2017-04-13 08:02:40","commitOrder":17,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2017-04-13 08:02:40","endLine":350,"groupId":"6081","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e3/787cdf1ca89c1c04cf4ba4a98705ff4c19811b.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = coreDescriptor.getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"M"},{"authorDate":"2017-03-09 10:10:56","commitOrder":17,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2017-03-09 10:11:26","endLine":276,"groupId":"14759","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/e59b6e194345dfd2edad21b839a9dabeb51683.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":225,"status":"N"}],"commitId":"4cb00ccca40854f4b51ea7edb829d48228c95673","commitMessage":"@@@SOLR-10007: Clean up references to CoreContainer and CoreDescriptors\n","date":"2017-04-13 08:02:40","modifiedFileCount":"74","status":"M","submitter":"Erick Erickson"},{"authorTime":"2017-05-31 19:56:14","codes":[{"authorDate":"2017-04-13 08:02:40","commitOrder":18,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2017-04-13 08:02:40","endLine":350,"groupId":"6081","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e3/787cdf1ca89c1c04cf4ba4a98705ff4c19811b.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":317,"status":"N"},{"authorDate":"2017-05-31 19:56:14","commitOrder":18,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2017-05-31 19:56:14","endLine":353,"groupId":"14759","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f7/9f86ee05e2f99d0b79f7adf5833d1e9ec03f1c.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      tupleStream = this.streamFactory.constructStream(params.get(\"expr\"));\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"M"}],"commitId":"97693234def7fb4fc92d8fbaab775705aaaaf565","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-05-31 19:56:14","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-05-31 19:56:14","codes":[{"authorDate":"2018-04-12 18:39:56","commitOrder":19,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2018-04-12 18:39:56","endLine":446,"groupId":"20434","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/2a794ce0a4650b69ed9e3455f4dec79252acc8.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req)\n  {\n    final SolrParams params = req.getParams();\n\n    if (params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false)) {\n      final CoreDescriptor coreDescriptor = req.getCore().getCoreDescriptor();\n      final ZkController zkController = req.getCore().getCoreContainer().getZkController();\n      final String preferredHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;\n      if (preferredHostAddress == null) {\n        log.warn(\"Couldn't determine current host address to prefer local shards\");\n      } else {\n        return new ShufflingReplicaListTransformer(r) {\n          @Override\n          public void transform(List<?> choices)\n          {\n            if (choices.size() > 1) {\n              super.transform(choices);\n              if (log.isDebugEnabled()) {\n                log.debug(\"Trying to prefer local shard on {} among the choices: {}\",\n                    preferredHostAddress, Arrays.toString(choices.toArray()));\n              }\n              choices.sort(new IsOnPreferredHostComparator(preferredHostAddress));\n              if (log.isDebugEnabled()) {\n                log.debug(\"Applied local shard preference for choices: {}\",\n                    Arrays.toString(choices.toArray()));\n              }\n            }\n          }\n        };\n      }\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"M"},{"authorDate":"2017-05-31 19:56:14","commitOrder":19,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2017-05-31 19:56:14","endLine":353,"groupId":"14759","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f7/9f86ee05e2f99d0b79f7adf5833d1e9ec03f1c.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if(params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if(this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n    \n    \r\n    if(params.getBool(\"explain\", false)){\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n    \n    if(tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream)tupleStream;\n      if(daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open();  \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\"+daemonStream.getId()+\" started on \"+coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":295,"status":"N"}],"commitId":"017f59bae5b6ee883d5284285713d26c09629de5","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-04-12 18:39:56","modifiedFileCount":"9","status":"M","submitter":"Karl Wright"},{"authorTime":"2018-07-31 23:58:51","codes":[{"authorDate":"2018-04-12 18:39:56","commitOrder":20,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2018-04-12 18:39:56","endLine":446,"groupId":"20434","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/2a794ce0a4650b69ed9e3455f4dec79252acc8.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"},{"authorDate":"2018-07-31 23:58:51","commitOrder":20,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2018-07-31 23:58:51","endLine":195,"groupId":"14759","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/43e1ceb066caf2a859bfcfe759bfaf0a411e1e.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(logger, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":136,"status":"M"}],"commitId":"9262ed7e56085f125f666d24a375d12e9cdef089","commitMessage":"@@@SOLR-12558: solr/core (private) logger renames\n","date":"2018-07-31 23:58:51","modifiedFileCount":"9","status":"M","submitter":"Christine Poerschke"},{"authorTime":"2018-08-23 10:47:04","codes":[{"authorDate":"2018-04-12 18:39:56","commitOrder":21,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2018-04-12 18:39:56","endLine":446,"groupId":"20434","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/2a794ce0a4650b69ed9e3455f4dec79252acc8.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"},{"authorDate":"2018-08-23 10:47:04","commitOrder":21,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2018-08-27 07:48:56","endLine":192,"groupId":"60272","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a4/47093f736237c7036825054ff4371c752329b3.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":132,"status":"M"}],"commitId":"b72ff3babbaeebb4c754ca905ac62512bf5fc1e7","commitMessage":"@@@SOLR-12687: Add functions to cache data structures and mathematical models\n","date":"2018-08-27 07:48:56","modifiedFileCount":"5","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-05-09 00:13:07","codes":[{"authorDate":"2018-04-12 18:39:56","commitOrder":22,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2018-04-12 18:39:56","endLine":446,"groupId":"20434","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/2a794ce0a4650b69ed9e3455f4dec79252acc8.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":400,"status":"N"},{"authorDate":"2019-05-09 00:13:07","commitOrder":22,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2019-05-09 00:13:07","endLine":195,"groupId":"60272","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/dcc0ec93d0ec71045604d8bada2b86de2dd3ba.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"M"}],"commitId":"76b854cb4fce759c2b312a16126c4c0be0f7086a","commitMessage":"@@@SOLR-13306 Add a request parameter to execute a streaming expression locally\n","date":"2019-05-09 00:13:07","modifiedFileCount":"9","status":"M","submitter":"Gus Heck"},{"authorTime":"2019-05-09 00:13:07","codes":[{"authorDate":"2019-05-09 00:55:37","commitOrder":23,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    ZkController zkController = req.getCore().getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","date":"2019-05-09 00:55:49","endLine":507,"groupId":"0","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cf/16fa2f13b4b951636875193ae08ee785bcbadd.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, \"\");\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<String> preferenceRules = StrUtils.splitSmart(shardsPreferenceSpec, ',');\n      if (preferLocalShards) {\n        preferenceRules.add(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION + \":\" + ShardParams.REPLICA_LOCAL);\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":452,"status":"M"},{"authorDate":"2019-05-09 00:13:07","commitOrder":23,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2019-05-09 00:13:07","endLine":195,"groupId":"60272","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/dcc0ec93d0ec71045604d8bada2b86de2dd3ba.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"6b5b74bc9c9576913a5124eec138938e09037dad","commitMessage":"@@@SOLR-13445: Preferred replicas on nodes with same system properties as the query master\n","date":"2019-05-09 00:55:49","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2019-05-09 00:13:07","codes":[{"authorDate":"2019-08-22 02:31:12","commitOrder":24,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, req,\n          defaultRltFactory, randomRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.sortRules == null) {\n        \r\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, req, randomRltFactory);\n  }\n","date":"2019-08-22 02:31:12","endLine":674,"groupId":"5107","id":21,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/84/4acf3706cfdef00ce6a08b7a809b1f4fe5d524.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    ZkController zkController = req.getCore().getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      return new ShufflingReplicaListTransformer(r) {\n        @Override\n        public void transform(List<?> choices)\n        {\n          if (choices.size() > 1) {\n            super.transform(choices);\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applying the following sorting preferences to replicas: {}\",\n                  Arrays.toString(preferenceRules.toArray()));\n            }\n            try {\n              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));\n            } catch (IllegalArgumentException iae) {\n              throw new SolrException(\n                SolrException.ErrorCode.BAD_REQUEST,\n                iae.getMessage()\n              );\n            }\n            if (log.isDebugEnabled()) {\n              log.debug(\"Applied sorting preferences to replica list: {}\",\n                  Arrays.toString(choices.toArray()));\n            }\n          }\n        }\n      };\n    }\n\n    return shufflingReplicaListTransformer;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":634,"status":"M"},{"authorDate":"2019-05-09 00:13:07","commitOrder":24,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2019-05-09 00:13:07","endLine":195,"groupId":"60272","id":22,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/dcc0ec93d0ec71045604d8bada2b86de2dd3ba.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"8f4103dd4b7d572300aa585b9e25120fa97a25f3","commitMessage":"@@@SOLR-13257: Support deterministic replica routing\n\nDeterministic replica routing can help improve caching and allow a more consistent paging when sorting by score\n\nThis closes #677\n","date":"2019-08-22 02:31:12","modifiedFileCount":"3","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2019-05-09 00:13:07","codes":[{"authorDate":"2019-10-29 06:49:21","commitOrder":25,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","date":"2019-10-29 06:49:21","endLine":429,"groupId":"60272","id":23,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/918743b58d1eb8951c57012ce18171f990bafc.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    String defaultShardPreference = \"\";\n    if (zkController != null) {\n      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()\n          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n          .toString();\n    }\n\n\n    @SuppressWarnings(\"deprecation\")\n    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);\n    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);\n\n    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {\n      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {\n        throw new SolrException(\n          SolrException.ErrorCode.BAD_REQUEST,\n          \"preferLocalShards is deprecated and must not be used with shards.preference\" \n        );\n      }\n      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);\n      if (preferLocalShards) {\n        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));\n      }\n\n      NodePreferenceRulesComparator replicaComp = new NodePreferenceRulesComparator(preferenceRules, req,\n          defaultRltFactory, randomRltFactory, stableRltFactory);\n      ReplicaListTransformer baseReplicaListTransformer = replicaComp.getBaseReplicaListTransformer();\n      if (replicaComp.sortRules == null) {\n        \r\n        return baseReplicaListTransformer;\n      } else {\n        return new TopLevelReplicaListTransformer(replicaComp, baseReplicaListTransformer);\n      }\n    }\n\n    return defaultRltFactory.getInstance(null, req, randomRltFactory);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"M"},{"authorDate":"2019-05-09 00:13:07","commitOrder":25,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2019-05-09 00:13:07","endLine":195,"groupId":"60272","id":24,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/dcc0ec93d0ec71045604d8bada2b86de2dd3ba.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":133,"status":"N"}],"commitId":"fa27e476f74bc4ba83e3fcdc39b421bc53a45d16","commitMessage":"@@@SOLR-13865: Migrate replica routing code to SolrJ (#974)\n\n* [SOLR-13865] Migrate replica routing code to  solrJ\n\n* Added a CommonTestInjection class.\n\n* Fixing imports.\n\n* Reverted extraneous streaming changes.\n\n* Fix precommit errors.\n\n* Changing name of the RLTManager.\n\n* Splitting up existing tests.\n\n* Updated documentation.\n\n* Added solr/CHANGES.txt entry\n","date":"2019-10-29 06:49:21","modifiedFileCount":"7","status":"M","submitter":"Houston Putman"},{"authorTime":"2019-12-10 06:11:58","codes":[{"authorDate":"2019-10-29 06:49:21","commitOrder":26,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","date":"2019-10-29 06:49:21","endLine":429,"groupId":"60272","id":25,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/918743b58d1eb8951c57012ce18171f990bafc.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"N"},{"authorDate":"2019-12-10 06:11:58","commitOrder":26,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2019-12-10 06:11:58","endLine":219,"groupId":"60272","id":26,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/8bd5ca76b4f82c2d0d03e78011a375876c796d.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"1c78d2c63731d8b4b3b7ec313ac65ddd55761f6a","commitMessage":"@@@SOLR-12217: Support shards.preference in SolrJ for individual shard requests (#984)\n\n","date":"2019-12-10 06:11:58","modifiedFileCount":"13","status":"M","submitter":"Houston Putman"},{"authorTime":"2020-04-02 23:38:15","codes":[{"authorDate":"2019-10-29 06:49:21","commitOrder":27,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","date":"2019-10-29 06:49:21","endLine":429,"groupId":"60272","id":27,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/918743b58d1eb8951c57012ce18171f990bafc.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"N"},{"authorDate":"2020-04-02 23:38:15","commitOrder":27,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2020-04-02 23:38:15","endLine":254,"groupId":"60272","id":28,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bd/76ae9a92503d09e86134a7be0ee6321c0423f0.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Deamon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":173,"status":"M"}],"commitId":"927587d8ad908a7e2d25c99ad1db27967be42057","commitMessage":"@@@fix typo (#1302)\n\n","date":"2020-04-02 23:38:15","modifiedFileCount":"1","status":"M","submitter":"Eric Pugh"},{"authorTime":"2020-05-13 03:44:00","codes":[{"authorDate":"2019-10-29 06:49:21","commitOrder":28,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","date":"2019-10-29 06:49:21","endLine":429,"groupId":"60272","id":29,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a0/918743b58d1eb8951c57012ce18171f990bafc.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":412,"status":"N"},{"authorDate":"2020-05-13 03:44:00","commitOrder":28,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2020-05-13 03:44:00","endLine":242,"groupId":"60272","id":30,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/6af432e5fe8d7e05b924abad9637385fd9b8c7.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(clientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":161,"status":"M"}],"commitId":"4680e9245f26e8ba99400dfbbdc0002c6b2886fe","commitMessage":"@@@SOLR-14423: Move static SolrClientCache from StreamHandler to CoreContainer for wider reuse and better life-cycle management.\n","date":"2020-05-13 03:44:00","modifiedFileCount":"16","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2020-06-04 19:02:55","codes":[{"authorDate":"2020-06-04 19:02:55","commitOrder":29,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","date":"2020-06-04 19:02:55","endLine":426,"groupId":"60272","id":31,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d9/9156cdf4804939361880deb0ed3ec0495d5df9.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"M"},{"authorDate":"2020-06-04 19:02:55","commitOrder":29,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2020-06-04 19:02:55","endLine":242,"groupId":"60272","id":32,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d7/8a4fe2617585852a8b81bed04697f966ca854b.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":160,"status":"M"}],"commitId":"bab4fccba22707e254807c8152921da143fb8706","commitMessage":"@@@SOLR-14533: Fix or suppress warnings in solr/handler/admin\n","date":"2020-06-04 19:02:55","modifiedFileCount":"53","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-08 22:03:07","codes":[{"authorDate":"2020-06-04 19:02:55","commitOrder":30,"curCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","date":"2020-06-04 19:02:55","endLine":426,"groupId":"102330","id":33,"instanceNumber":1,"isCurCommit":0,"methodName":"getReplicaListTransformer","params":"(finalSolrQueryRequestreq)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d9/9156cdf4804939361880deb0ed3ec0495d5df9.src","preCode":"  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {\n    final SolrParams params = req.getParams();\n    final SolrCore core = req.getCore(); \r\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    if (zkController != null) {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(\n          params,\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      return requestReplicaListTransformerGenerator.getReplicaListTransformer(params);\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":408,"status":"N"},{"authorDate":"2020-06-08 22:03:07","commitOrder":30,"curCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(StreamParams.EXPR));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(StreamParams.TUPLE);\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(StreamParams.RETURN_VALUE, streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(StreamParams.RESULT_SET, new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(StreamParams.RESULT_SET, new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(StreamParams.RESULT_SET, new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","date":"2020-06-08 22:03:07","endLine":249,"groupId":"102330","id":34,"instanceNumber":2,"isCurCommit":0,"methodName":"handleRequestBody","params":"(SolrQueryRequestreq@SolrQueryResponsersp)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f1/b15445dc2a40fb52192f076a2b87072aae11ee.src","preCode":"  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    SolrParams params = req.getParams();\n    params = adjustParams(params);\n    req.setParams(params);\n\n    if (params.get(\"action\") != null) {\n      handleAdmin(req, rsp, params);\n      return;\n    }\n\n    TupleStream tupleStream;\n\n    try {\n      StreamExpression streamExpression = StreamExpressionParser.parse(params.get(\"expr\"));\n      if (this.streamFactory.isEvaluator(streamExpression)) {\n        StreamExpression tupleExpression = new StreamExpression(\"tuple\");\n        tupleExpression.addParameter(new StreamExpressionNamedParameter(\"return-value\", streamExpression));\n        tupleStream = this.streamFactory.constructStream(tupleExpression);\n      } else {\n        tupleStream = this.streamFactory.constructStream(streamExpression);\n      }\n    } catch (Exception e) {\n      \r\n      \r\n      SolrException.log(log, e);\n      rsp.add(\"result-set\", new DummyErrorStream(e));\n\n      return;\n    }\n\n\n    final SolrCore core = req.getCore(); \r\n    @SuppressWarnings(\"resource\")\n    ZkController zkController = core == null ? null : core.getCoreContainer().getZkController();\n    RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;\n    if (zkController != null) {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(\n          zkController.getZkStateReader().getClusterProperties()\n              .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\")\n              .toString(),\n          zkController.getNodeName(),\n          zkController.getBaseUrl(),\n          zkController.getSysPropsCacher()\n      );\n    } else {\n      requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();\n    }\n\n    int worker = params.getInt(\"workerID\", 0);\n    int numWorkers = params.getInt(\"numWorkers\", 1);\n    boolean local = params.getBool(\"streamLocalOnly\", false);\n    StreamContext context = new StreamContext();\n    context.setRequestParams(params);\n    context.setRequestReplicaListTransformerGenerator(requestReplicaListTransformerGenerator);\n    context.put(\"shards\", getCollectionShards(params));\n    context.workerID = worker;\n    context.numWorkers = numWorkers;\n    context.setSolrClientCache(solrClientCache);\n    context.setModelCache(modelCache);\n    context.setObjectCache(objectCache);\n    context.put(\"core\", this.coreName);\n    context.put(\"solr-core\", req.getCore());\n    context.setLocal(local);\n    tupleStream.setStreamContext(context);\n\n    \r\n    if (params.getBool(\"explain\", false)) {\n      rsp.add(\"explanation\", tupleStream.toExplanation(this.streamFactory));\n    }\n\n    if (tupleStream instanceof DaemonStream) {\n      DaemonStream daemonStream = (DaemonStream) tupleStream;\n      if (daemons.containsKey(daemonStream.getId())) {\n        daemons.remove(daemonStream.getId()).close();\n      }\n      daemonStream.setDaemons(daemons);\n      daemonStream.open(); \r\n      daemons.put(daemonStream.getId(), daemonStream);\n      rsp.add(\"result-set\", new DaemonResponseStream(\"Daemon:\" + daemonStream.getId() + \" started on \" + coreName));\n    } else {\n      rsp.add(\"result-set\", new TimerStream(new ExceptionStream(tupleStream)));\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/handler/StreamHandler.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":167,"status":"M"}],"commitId":"30924f23d6834605b9bf2d24509755ff61c4e878","commitMessage":"@@@SOLR-14470: Add streaming expressions to /export handler.\n","date":"2020-06-08 22:03:07","modifiedFileCount":"75","status":"M","submitter":"Andrzej Bialecki"}]
