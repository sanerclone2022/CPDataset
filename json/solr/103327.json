[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    if (i%2 == 0) {\n                      assertTrue(docsWithField.get(i));\n                      assertEquals(i, ints.get(i));\n                    } else {\n                      assertFalse(docsWithField.get(i));\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","date":"2016-05-26 01:42:11","endLine":407,"groupId":"28102","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDocsWithFieldThreadSafety","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/9ea952f6e27496597155605ce2dd009b5af1b3.src","preCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    if (i%2 == 0) {\n                      assertTrue(docsWithField.get(i));\n                      assertEquals(i, ints.get(i));\n                    } else {\n                      assertFalse(docsWithField.get(i));\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":343,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    if (i%2 == 0) {\n                      assertTrue(docsWithField.get(i));\n                      assertEquals(i, ints.get(i));\n                    } else {\n                      assertFalse(docsWithField.get(i));\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","date":"2016-05-26 01:42:11","endLine":294,"groupId":"40428","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDocsWithFieldThreadSafety","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/11/92f4b77c8a5ca7b3b081b3cbb831d5161eaa2c.src","preCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    if (i%2 == 0) {\n                      assertTrue(docsWithField.get(i));\n                      assertEquals(i, ints.get(i));\n                    } else {\n                      assertFalse(docsWithField.get(i));\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":230,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < reader.maxDoc();i++) {\n                    if (i%2 == 0) {\n                      assertEquals(i, ints.nextDoc());\n                      assertEquals(i, ints.longValue());\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","date":"2016-10-03 03:18:22","endLine":397,"groupId":"103327","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testGetDocsWithFieldThreadSafety","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/2c381f84ee2d3f02403e5f701ee19571254f48.src","preCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    if (i%2 == 0) {\n                      assertTrue(docsWithField.get(i));\n                      assertEquals(i, ints.get(i));\n                    } else {\n                      assertFalse(docsWithField.get(i));\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":336,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n                  for (int i = 0; i < reader.maxDoc(); i++) {\n                    if (i%2 == 0) {\n                      assertEquals(i, ints.nextDoc());\n                      assertEquals(i, ints.longValue());\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","date":"2016-10-03 03:18:22","endLine":288,"groupId":"103327","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testGetDocsWithFieldThreadSafety","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c047bcb3a10293e0e49cad7c003fe6f6ca2f01.src","preCode":"  public void testGetDocsWithFieldThreadSafety() throws Exception {\n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    int NUM_THREADS = 3;\n    Thread[] threads = new Thread[NUM_THREADS];\n    final AtomicBoolean failed = new AtomicBoolean();\n    final AtomicInteger iters = new AtomicInteger();\n    final int NUM_ITER = 200 * RANDOM_MULTIPLIER;\n    final CyclicBarrier restart = new CyclicBarrier(NUM_THREADS,\n                                                    new Runnable() {\n                                                      @Override\n                                                      public void run() {\n                                                        cache.purgeAllCaches();\n                                                        iters.incrementAndGet();\n                                                      }\n                                                    });\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX] = new Thread() {\n          @Override\n          public void run() {\n\n            try {\n              while(!failed.get()) {\n                final int op = random().nextInt(3);\n                if (op == 0) {\n                  \r\n                  \r\n                  restart.await();\n                  if (iters.get() >= NUM_ITER) {\n                    break;\n                  }\n                } else if (op == 1) {\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    assertEquals(i%2 == 0, docsWithField.get(i));\n                  }\n                } else {\n                  NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n                  Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", null);\n                  for (int i = 0; i < docsWithField.length(); i++) {\n                    if (i%2 == 0) {\n                      assertTrue(docsWithField.get(i));\n                      assertEquals(i, ints.get(i));\n                    } else {\n                      assertFalse(docsWithField.get(i));\n                    }\n                  }\n                }\n              }\n            } catch (Throwable t) {\n              failed.set(true);\n              restart.reset();\n              throw new RuntimeException(t);\n            }\n          }\n        };\n      threads[threadIDX].start();\n    }\n\n    for(int threadIDX=0;threadIDX<NUM_THREADS;threadIDX++) {\n      threads[threadIDX].join();\n    }\n    assertFalse(failed.get());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":227,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"}]
