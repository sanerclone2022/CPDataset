[{"authorTime":"2019-04-04 21:48:51","codes":[{"authorDate":"2019-04-04 21:48:51","commitOrder":1,"curCode":"  public void init() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"async\", false);\n    config.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.COMPLETED.name()));\n    ArrayList<Map<String, Object>> plugins = new ArrayList<Map<String, Object>>();\n\n    Map<String,Object> conf1 = new HashMap<>();\n    conf1.put(\"class\", \"solr.SolrLogAuditLoggerPlugin\");\n    conf1.put(\"async\", false);\n    conf1.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.ANONYMOUS.name()));\n    plugins.add(conf1);\n    Map<String,Object> conf2 = new HashMap<>();\n    conf2.put(\"class\", \"solr.MockAuditLoggerPlugin\");\n    conf2.put(\"async\", false);\n    conf2.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.AUTHENTICATED.name()));\n    plugins.add(conf2);\n    config.put(\"plugins\", plugins);\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    al.inform(loader);\n    al.init(config);\n\n    al.doAudit(new AuditEvent(AuditEvent.EventType.ANONYMOUS).setUsername(\"me\"));\n    assertEquals(0, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    al.doAudit(new AuditEvent(AuditEvent.EventType.AUTHENTICATED).setUsername(\"me\"));\n    assertEquals(1, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    \n    assertFalse(al.shouldLog(AuditEvent.EventType.ERROR));\n    assertFalse(al.shouldLog(AuditEvent.EventType.UNAUTHORIZED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.COMPLETED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.ANONYMOUS));\n    assertTrue(al.shouldLog(AuditEvent.EventType.AUTHENTICATED));\n\n    assertEquals(0, config.size());\n    \n    al.close();\n    loader.close();\n  }\n","date":"2019-04-04 21:48:51","endLine":70,"groupId":"11227","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/3a51f9a33bbf8488502e7eb3790a88cdd72cf3.src","preCode":"  public void init() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"async\", false);\n    config.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.COMPLETED.name()));\n    ArrayList<Map<String, Object>> plugins = new ArrayList<Map<String, Object>>();\n\n    Map<String,Object> conf1 = new HashMap<>();\n    conf1.put(\"class\", \"solr.SolrLogAuditLoggerPlugin\");\n    conf1.put(\"async\", false);\n    conf1.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.ANONYMOUS.name()));\n    plugins.add(conf1);\n    Map<String,Object> conf2 = new HashMap<>();\n    conf2.put(\"class\", \"solr.MockAuditLoggerPlugin\");\n    conf2.put(\"async\", false);\n    conf2.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.AUTHENTICATED.name()));\n    plugins.add(conf2);\n    config.put(\"plugins\", plugins);\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    al.inform(loader);\n    al.init(config);\n\n    al.doAudit(new AuditEvent(AuditEvent.EventType.ANONYMOUS).setUsername(\"me\"));\n    assertEquals(0, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    al.doAudit(new AuditEvent(AuditEvent.EventType.AUTHENTICATED).setUsername(\"me\"));\n    assertEquals(1, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    \n    assertFalse(al.shouldLog(AuditEvent.EventType.ERROR));\n    assertFalse(al.shouldLog(AuditEvent.EventType.UNAUTHORIZED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.COMPLETED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.ANONYMOUS));\n    assertTrue(al.shouldLog(AuditEvent.EventType.AUTHENTICATED));\n\n    assertEquals(0, config.size());\n    \n    al.close();\n    loader.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/MultiDestinationAuditLoggerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":31,"status":"B"},{"authorDate":"2019-04-04 21:48:51","commitOrder":1,"curCode":"  public void wrongConfigParam() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"foo\", \"Should complain\");\n    al.init(config);\n    assertEquals(1, config.size());\n    al.close();\n  }\n","date":"2019-04-04 21:48:51","endLine":81,"groupId":"11227","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"wrongConfigParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/3a51f9a33bbf8488502e7eb3790a88cdd72cf3.src","preCode":"  public void wrongConfigParam() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"foo\", \"Should complain\");\n    al.init(config);\n    assertEquals(1, config.size());\n    al.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/MultiDestinationAuditLoggerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"B"}],"commitId":"361502da8ade7dbb4516da9816e8bafe22eb79a3","commitMessage":"@@@SOLR-12120: New AuditLoggerPlugin type allowing custom Audit logger plugins\n","date":"2019-04-04 21:48:51","modifiedFileCount":"5","status":"B","submitter":"Jan H?ydahl"},{"authorTime":"2019-04-04 21:48:51","codes":[{"authorDate":"2020-12-03 01:24:36","commitOrder":2,"curCode":"  public void init() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"async\", false);\n    config.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.COMPLETED.name()));\n    ArrayList<Map<String, Object>> plugins = new ArrayList<Map<String, Object>>();\n\n    Map<String,Object> conf1 = new HashMap<>();\n    conf1.put(\"class\", \"solr.SolrLogAuditLoggerPlugin\");\n    conf1.put(\"async\", false);\n    conf1.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.ANONYMOUS.name()));\n    plugins.add(conf1);\n    Map<String,Object> conf2 = new HashMap<>();\n    conf2.put(\"class\", \"solr.MockAuditLoggerPlugin\");\n    conf2.put(\"async\", false);\n    conf2.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.AUTHENTICATED.name()));\n    plugins.add(conf2);\n    config.put(\"plugins\", plugins);\n\n    SolrResourceLoader loader = new SolrResourceLoader(Paths.get(\"\"));\n    al.inform(loader);\n    al.init(config);\n\n    al.doAudit(new AuditEvent(AuditEvent.EventType.ANONYMOUS).setUsername(\"me\"));\n    assertEquals(0, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    al.doAudit(new AuditEvent(AuditEvent.EventType.AUTHENTICATED).setUsername(\"me\"));\n    assertEquals(1, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    \n    assertFalse(al.shouldLog(AuditEvent.EventType.ERROR));\n    assertFalse(al.shouldLog(AuditEvent.EventType.UNAUTHORIZED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.COMPLETED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.ANONYMOUS));\n    assertTrue(al.shouldLog(AuditEvent.EventType.AUTHENTICATED));\n\n    assertEquals(0, config.size());\n    \n    al.close();\n    loader.close();\n  }\n","date":"2020-12-03 01:24:36","endLine":71,"groupId":"102852","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"init","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/0b6ddd1734887f0818c1265f7aa89eb386f583.src","preCode":"  public void init() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"async\", false);\n    config.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.COMPLETED.name()));\n    ArrayList<Map<String, Object>> plugins = new ArrayList<Map<String, Object>>();\n\n    Map<String,Object> conf1 = new HashMap<>();\n    conf1.put(\"class\", \"solr.SolrLogAuditLoggerPlugin\");\n    conf1.put(\"async\", false);\n    conf1.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.ANONYMOUS.name()));\n    plugins.add(conf1);\n    Map<String,Object> conf2 = new HashMap<>();\n    conf2.put(\"class\", \"solr.MockAuditLoggerPlugin\");\n    conf2.put(\"async\", false);\n    conf2.put(\"eventTypes\", Arrays.asList(AuditEvent.EventType.AUTHENTICATED.name()));\n    plugins.add(conf2);\n    config.put(\"plugins\", plugins);\n\n    SolrResourceLoader loader = new SolrResourceLoader();\n    al.inform(loader);\n    al.init(config);\n\n    al.doAudit(new AuditEvent(AuditEvent.EventType.ANONYMOUS).setUsername(\"me\"));\n    assertEquals(0, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    al.doAudit(new AuditEvent(AuditEvent.EventType.AUTHENTICATED).setUsername(\"me\"));\n    assertEquals(1, ((MockAuditLoggerPlugin)al.plugins.get(1)).events.size()); \r\n    \n    assertFalse(al.shouldLog(AuditEvent.EventType.ERROR));\n    assertFalse(al.shouldLog(AuditEvent.EventType.UNAUTHORIZED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.COMPLETED));\n    assertTrue(al.shouldLog(AuditEvent.EventType.ANONYMOUS));\n    assertTrue(al.shouldLog(AuditEvent.EventType.AUTHENTICATED));\n\n    assertEquals(0, config.size());\n    \n    al.close();\n    loader.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/MultiDestinationAuditLoggerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":32,"status":"M"},{"authorDate":"2019-04-04 21:48:51","commitOrder":2,"curCode":"  public void wrongConfigParam() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"foo\", \"Should complain\");\n    al.init(config);\n    assertEquals(1, config.size());\n    al.close();\n  }\n","date":"2019-04-04 21:48:51","endLine":81,"groupId":"102852","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"wrongConfigParam","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6b/3a51f9a33bbf8488502e7eb3790a88cdd72cf3.src","preCode":"  public void wrongConfigParam() throws IOException {\n    MultiDestinationAuditLogger al = new MultiDestinationAuditLogger();\n    Map<String,Object> config = new HashMap<>();\n    config.put(\"class\", \"solr.MultiDestinationAuditLogger\");\n    config.put(\"foo\", \"Should complain\");\n    al.init(config);\n    assertEquals(1, config.size());\n    al.close();\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/MultiDestinationAuditLoggerTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":73,"status":"N"}],"commitId":"2e6a02394ec4eea6ba72d5bc2bf02c0139a54f39","commitMessage":"@@@SOLR-14934: Refactored duplicate \"Solr Home\" logic into a single place to eliminate risk of tests using divergent values for a single solr node.\n","date":"2020-12-03 01:24:36","modifiedFileCount":"25","status":"M","submitter":"Chris Hostetter"}]
