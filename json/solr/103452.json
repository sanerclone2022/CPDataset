[{"authorTime":"2016-12-11 06:03:15","codes":[{"authorDate":"2017-01-31 13:57:33","commitOrder":3,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n  }\n","date":"2017-01-31 13:57:33","endLine":71,"groupId":"51810","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/f5d93bf7052e26badb7a61b5b39399a4669bff.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"B"},{"authorDate":"2016-12-11 06:03:15","commitOrder":3,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","date":"2016-12-11 06:03:15","endLine":157,"groupId":"44917","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/257f82865104ee19b81aadf8c2ec797a85a541.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"NB"}],"commitId":"71abe130697b0f279d6e3613145f1f8f052c7848","commitMessage":"@@@SOLR-8029: Added new style APIs and a framework for creating new APIs and mapping old APIs to new\n","date":"2017-01-31 13:57:33","modifiedFileCount":"43","status":"M","submitter":"Noble Paul"},{"authorTime":"2017-07-20 08:51:49","codes":[{"authorDate":"2017-01-31 13:57:33","commitOrder":4,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n  }\n","date":"2017-01-31 13:57:33","endLine":71,"groupId":"51810","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/f5d93bf7052e26badb7a61b5b39399a4669bff.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":64,"status":"N"},{"authorDate":"2017-07-20 08:51:49","commitOrder":4,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","date":"2017-07-20 08:51:49","endLine":158,"groupId":"44917","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3f/0fa473451a7cbed4c9353bd0299912bc8673b3.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", \"solr.TrieFloatField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", \"solr.TrieDoubleField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", \"solr.TrieDateField\", \"precisionStep\", \"0\"));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":76,"status":"M"}],"commitId":"9e5eaca217ca0ced3a1463ca773ad87c844fc767","commitMessage":"@@@SOLR-11123: Randomize PointFields in test classes that had usage of Trie field classes/names hardcoded\n","date":"2017-07-20 08:51:49","modifiedFileCount":"10","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2018-11-30 01:58:18","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":56,"groupId":"51810","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/d97bf21b802ede5ce8a9eee52c426c493d61b9.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"M"},{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","date":"2018-11-30 01:58:51","endLine":164,"groupId":"44917","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8e/5482e6732bb3918bdbf9cce9dec9b692d6c990.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2019-02-25 16:34:05","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":6,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":56,"groupId":"51810","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/d97bf21b802ede5ce8a9eee52c426c493d61b9.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2019-02-25 16:34:05","commitOrder":6,"curCode":"  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","date":"2019-02-25 16:34:05","endLine":168,"groupId":"51810","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/2083158f3113a21d2974c3e548f598f53ce084.src","preCode":"  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":80,"status":"M"}],"commitId":"c599ad98023a6615e4a47240cb5bde2c4be89cd0","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2019-02-25 16:34:05","modifiedFileCount":"18","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-04-28 22:26:01","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":7,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":56,"groupId":"51810","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/d97bf21b802ede5ce8a9eee52c426c493d61b9.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2019-04-28 22:26:01","commitOrder":7,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","date":"2019-04-28 22:26:01","endLine":169,"groupId":"51810","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/a76ffdb69427411fa6d8dcd9c540b928f58a66.src","preCode":"  public void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"a6262af84253c1e377c0c7a32d0277edb5dd2d6e","commitMessage":"@@@SOLR-11035: (at least) 2 distinct failures possible when clients attempt searches during SolrCore reload. More fixes.  bad test.\n","date":"2019-04-28 22:26:01","modifiedFileCount":"1","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":8,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":56,"groupId":"103452","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/d97bf21b802ede5ce8a9eee52c426c493d61b9.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLL_NAME, \"conf1\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLL_NAME, 1, 2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/V2ApiIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"N"},{"authorDate":"2020-07-08 23:57:24","commitOrder":8,"curCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","date":"2020-07-08 23:57:24","endLine":168,"groupId":"103452","id":12,"instanceNumber":2,"isCurCommit":1,"methodName":"createCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/45/ccbc98f5c3ecd37a5cff737f4c675b3e671b7f.src","preCode":"  public static void createCluster() throws Exception {\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    configureCluster(2)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-managed\").resolve(\"conf\"))\n        .configure();\n\n    \r\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf1\", 4, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 4, 4);\n\n    fieldsToTestSingle =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intField\", \"int\", 1),\n            new FieldProps(\"longField\", \"long\", 1),\n            new FieldProps(\"doubleField\", \"double\", 1),\n            new FieldProps(\"floatField\", \"float\", 1),\n            new FieldProps(\"dateField\", \"date\", 1),\n            new FieldProps(\"stringField\", \"string\", 1),\n            new FieldProps(\"boolField\", \"boolean\", 1),\n            new FieldProps(\"sortableText\", \"sortabletext\", 1)\n        ));\n\n    fieldsToTestMulti =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intFieldMulti\", \"int\", 5),\n            new FieldProps(\"longFieldMulti\", \"long\", 5),\n            new FieldProps(\"doubleFieldMulti\", \"double\", 5),\n            new FieldProps(\"floatFieldMulti\", \"float\", 5),\n            new FieldProps(\"dateFieldMulti\", \"date\", 5),\n            new FieldProps(\"stringFieldMulti\", \"string\", 5),\n            new FieldProps(\"boolFieldMulti\", \"boolean\", 2),\n            new FieldProps(\"sortableFieldMulti\", \"sortabletext\", 5)\n        ));\n\n    \r\n    fieldsToTestGroupSortFirst =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSF\", \"int\"),\n            new FieldProps(\"longGSF\", \"long\"),\n            new FieldProps(\"doubleGSF\", \"double\"),\n            new FieldProps(\"floatGSF\", \"float\"),\n            new FieldProps(\"dateGSF\", \"date\"),\n            new FieldProps(\"stringGSF\", \"string\"),\n            new FieldProps(\"boolGSF\", \"boolean\"),\n            new FieldProps(\"sortableGSF\", \"sortabletext\")\n        ));\n\n    fieldsToTestGroupSortLast =\n        Collections.unmodifiableList(Arrays.asList(\n            new FieldProps(\"intGSL\", \"int\"),\n            new FieldProps(\"longGSL\", \"long\"),\n            new FieldProps(\"doubleGSL\", \"double\"),\n            new FieldProps(\"floatGSL\", \"float\"),\n            new FieldProps(\"dateGSL\", \"date\"),\n            new FieldProps(\"stringGSL\", \"string\"),\n            new FieldProps(\"boolGSL\", \"boolean\"),\n            new FieldProps(\"sortableGSL\", \"sortabletext\")\n        ));\n\n    List<Update> updateList = new ArrayList<>(fieldsToTestSingle.size() +\n        fieldsToTestMulti.size() + fieldsToTestGroupSortFirst.size() + fieldsToTestGroupSortLast.size() +\n        4);\n\n    updateList.add(getType(\"name\", \"float\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Float.class)));\n\n    updateList.add(getType(\"name\", \"double\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Double.class)));\n\n    updateList.add(getType(\"name\", \"date\", \"class\", RANDOMIZED_NUMERIC_FIELDTYPES.get(Date.class)));\n\n    updateList.add(getType(\"name\", \"boolean\", \"class\", \"solr.BoolField\"));\n\n\n    \r\n\n    defineFields(updateList, fieldsToTestSingle, false);\n    defineFields(updateList, fieldsToTestMulti, true);\n    defineFields(updateList, fieldsToTestGroupSortFirst, false, \"sorMissingFirst\", \"true\");\n    defineFields(updateList, fieldsToTestGroupSortLast, false, \"sorMissingLast\", \"true\");\n\n\n    MultiUpdate multiUpdateRequest = new MultiUpdate(updateList);\n    SchemaResponse.UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLLECTION);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    cluster.getSolrClient().setDefaultCollection(COLLECTION);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DocValuesNotIndexedTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"}]
