[{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2017-04-26 22:57:52","commitOrder":4,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(startExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(startExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(startExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","date":"2017-04-26 23:17:43","endLine":164,"groupId":"13305","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f5/48a46c5b1c92b107a90f0d4c42f4a88132ce72.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(startExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(startExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(startExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"B"},{"authorDate":"2016-05-23 14:35:53","commitOrder":4,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","date":"2016-05-23 14:35:53","endLine":140,"groupId":"288","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/f4b438ee03e4b523c913884797851767748a88.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"NB"}],"commitId":"0e963f7a8aeac0b8a831cd44fd48cd0c6bda11d2","commitMessage":"@@@SOLR-10566: Add timeseries Streaming Expression\n","date":"2017-04-26 23:17:43","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2017-05-02 00:06:00","commitOrder":5,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","date":"2017-05-02 00:06:00","endLine":153,"groupId":"13305","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/965b07ce607aa5f80a440be1aa31cca97aa010.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(startExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(startExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(startExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","date":"2016-05-23 14:35:53","endLine":140,"groupId":"288","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/f4b438ee03e4b523c913884797851767748a88.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":88,"status":"N"}],"commitId":"0a2286c5f26d77f1bdf64e2c3843c7505ff6c356","commitMessage":"@@@SOLR-10566: Fix error handling\n","date":"2017-05-02 00:06:00","modifiedFileCount":"1","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-05-03 03:44:15","codes":[{"authorDate":"2017-05-02 00:06:00","commitOrder":6,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","date":"2017-05-02 00:06:00","endLine":153,"groupId":"13305","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/965b07ce607aa5f80a440be1aa31cca97aa010.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2017-05-03 03:44:15","commitOrder":6,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","date":"2017-05-03 08:34:28","endLine":148,"groupId":"288","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/46db4d8bcf6d8e1fadb3e9dbabd4b80d0b9069.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"b5e9b5aaf684951c3353959918bb0796a824a12e","commitMessage":"@@@SOLR-10536: stats Streaming Expression should work in non-SolrCloud mode\n","date":"2017-05-03 08:34:28","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2017-05-03 03:44:15","codes":[{"authorDate":"2017-05-31 19:56:14","commitOrder":7,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","date":"2017-05-31 19:56:14","endLine":172,"groupId":"13305","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fe/2a1066567727e488cc9db0bbc64092ed23dd8a.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap , zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":83,"status":"M"},{"authorDate":"2017-05-03 03:44:15","commitOrder":7,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","date":"2017-05-03 08:34:28","endLine":148,"groupId":"288","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/46db4d8bcf6d8e1fadb3e9dbabd4b80d0b9069.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"97693234def7fb4fc92d8fbaab775705aaaaf565","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-05-31 19:56:14","modifiedFileCount":"119","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-05-03 03:44:15","codes":[{"authorDate":"2018-12-12 22:15:41","commitOrder":8,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","date":"2018-12-12 22:16:08","endLine":183,"groupId":"13305","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/76/4c70bb9f32afe284a030dd7518ca75cbcc146a.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2017-05-03 03:44:15","commitOrder":8,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","date":"2017-05-03 08:34:28","endLine":148,"groupId":"288","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cb/46db4d8bcf6d8e1fadb3e9dbabd4b80d0b9069.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{   \n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    \n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n    \n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n        \n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n    \n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n    \n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n    \n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"N"}],"commitId":"7e4555a2fdb863d6aac2f785116f8f13e51bf16b","commitMessage":"@@@SOLR-13057: Allow search.  facet and timeseries Streaming Expressions to accept a comma delimited list of collections\n","date":"2018-12-12 22:16:08","modifiedFileCount":"6","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-12-10 05:02:29","codes":[{"authorDate":"2019-12-10 05:02:29","commitOrder":9,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","date":"2019-12-10 05:04:03","endLine":192,"groupId":"35775","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/cc4388b6dd73fee91a171f8a8c3f99a47fa1e5.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter qExpression = factory.getNamedOperand(expression, \"q\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n\n    if(qExpression == null) {\n      throw new IOException(\"The timeseries expression requires the q parameter\");\n    }\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    if(0 == metrics.length){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one metric expected.\",expression,collectionName));\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2019-12-10 05:02:29","commitOrder":9,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","date":"2019-12-10 05:04:03","endLine":137,"groupId":"0","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/97290d5858ce0cd87e81e93169c18f0baea54c.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n    \r\n    if(expression.getParameters().size() != 1 + namedParams.size() + metricExpressions.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - unknown operands found\",expression));\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"}],"commitId":"1eaa5b5ac25699e1dfa401862a1e1df9655185fb","commitMessage":"@@@SOLR-13957: Add sensible defaults for the facet.  random.  facet2D.  timeseries.  stats and update Streaming Expressions\n","date":"2019-12-10 05:04:03","modifiedFileCount":"9","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-05-19 04:22:56","codes":[{"authorDate":"2019-12-10 05:02:29","commitOrder":10,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","date":"2019-12-10 05:04:03","endLine":192,"groupId":"35775","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/cc4388b6dd73fee91a171f8a8c3f99a47fa1e5.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"N"},{"authorDate":"2020-05-19 04:22:56","commitOrder":10,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n    init(collectionName, params, metrics, zkHost);\n  }\n","date":"2020-05-19 21:10:23","endLine":134,"groupId":"48335","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/47565dbe0c81f84b453bb7a1fb690585c2c6e6.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Metric.class);\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n\r\n\r\n\r\n\n\n    \r\n    Metric[] metrics = new Metric[metricExpressions.size()];\n    for(int idx = 0; idx < metricExpressions.size(); ++idx){\n      metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n    }\n\n    \r\n    init(zkHost, collectionName, params, metrics);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"M"}],"commitId":"16aad55369d285fec96425f996984a9f4afe28e4","commitMessage":"@@@SOLR-14476: Add percentiles and standard deviation aggregations to stats.  facet and timeseries Streaming Expressions\n","date":"2020-05-19 21:10:23","modifiedFileCount":"8","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-05-19 04:22:56","codes":[{"authorDate":"2021-04-07 21:54:39","commitOrder":11,"curCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n    StreamExpressionNamedParameter splitExpression = factory.getNamedOperand(expression, \"split\");\n    StreamExpressionNamedParameter limitExpression = factory.getNamedOperand(expression, \"limit\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    String split = null;\n    if(splitExpression != null) {\n      split = ((StreamExpressionValue)splitExpression.getParameter()).getValue();\n    }\n\n    String limit = \"10\";\n    if(limitExpression != null) {\n      limit = ((StreamExpressionValue)limitExpression.getParameter()).getValue();\n      try {\n        Integer.parseInt(limit);\n      } catch (Exception e) {\n        throw new IOException(String.format(Locale.ROOT,\"invalid limit %s, integer expected\", limit));\n      }\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, split, limit, zkHost);\n  }\n","date":"2021-04-07 21:54:50","endLine":209,"groupId":"10364","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"TimeSeriesStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/aea17ea5bd3e25281eb439d37df5b0b4be5c41.src","preCode":"  public TimeSeriesStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n    StreamExpressionNamedParameter startExpression = factory.getNamedOperand(expression, \"start\");\n    StreamExpressionNamedParameter endExpression = factory.getNamedOperand(expression, \"end\");\n    StreamExpressionNamedParameter fieldExpression = factory.getNamedOperand(expression, \"field\");\n    StreamExpressionNamedParameter gapExpression = factory.getNamedOperand(expression, \"gap\");\n    StreamExpressionNamedParameter formatExpression = factory.getNamedOperand(expression, \"format\");\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    String start = null;\n    if(startExpression != null) {\n      start = ((StreamExpressionValue)startExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - start parameter is required\",expression));\n    }\n\n    String end = null;\n    if(endExpression != null) {\n      end = ((StreamExpressionValue)endExpression.getParameter()).getValue();\n    }  else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - end parameter is required\",expression));\n    }\n\n    String gap = null;\n    if(gapExpression != null) {\n      gap = ((StreamExpressionValue)gapExpression.getParameter()).getValue();\n    } else {\n    throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - gap parameter is required\",expression));\n  }\n\n    String field = null;\n    if(fieldExpression != null) {\n      field = ((StreamExpressionValue)fieldExpression.getParameter()).getValue();\n    } else {\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - field parameter is required\",expression));\n    }\n\n    String format = null;\n    if(formatExpression != null) {\n      format = ((StreamExpressionValue)formatExpression.getParameter()).getValue();\n    }\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    if(0 == namedParams.size()){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\") && !namedParam.getName().equals(\"start\") && !namedParam.getName().equals(\"end\") && !namedParam.getName().equals(\"gap\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    }\n    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n    if(null == zkHost){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - zkHost not found for collection '%s'\",expression,collectionName));\n    }\n\n    \r\n    init(collectionName, params, field, metrics, start, end, gap, format, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":90,"status":"M"},{"authorDate":"2020-05-19 04:22:56","commitOrder":11,"curCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n    init(collectionName, params, metrics, zkHost);\n  }\n","date":"2020-05-19 21:10:23","endLine":134,"groupId":"10364","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"StatsStream","params":"(StreamExpressionexpression@StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/87/47565dbe0c81f84b453bb7a1fb690585c2c6e6.src","preCode":"  public StatsStream(StreamExpression expression, StreamFactory factory) throws IOException{\n    \r\n    String collectionName = factory.getValueOperand(expression, 0);\n\n    if(collectionName.indexOf('\"') > -1) {\n      collectionName = collectionName.replaceAll(\"\\\"\", \"\").replaceAll(\" \", \"\");\n    }\n\n    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);\n\n    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, \"zkHost\");\n    List<StreamExpression> metricExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, Metric.class);\n\n    \r\n    if(null == collectionName){\n      throw new IOException(String.format(Locale.ROOT,\"invalid expression %s - collectionName expected as first operand\",expression));\n    }\n\n    \r\n    Metric[] metrics = null;\n    if(metricExpressions.size() > 0) {\n      metrics = new Metric[metricExpressions.size()];\n      for(int idx = 0; idx < metricExpressions.size(); ++idx){\n        metrics[idx] = factory.constructMetric(metricExpressions.get(idx));\n      }\n    } else {\n      metrics = new Metric[1];\n      metrics[0] = new CountMetric();\n    }\n\n    \r\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    for(StreamExpressionNamedParameter namedParam : namedParams){\n      if(!namedParam.getName().equals(\"zkHost\")){\n        params.add(namedParam.getName(), namedParam.getParameter().toString().trim());\n      }\n    }\n\n    if(params.get(\"q\") == null) {\n      params.set(\"q\", \"*:*\");\n    }\n\n    \r\n    String zkHost = null;\n    if(null == zkHostExpression){\n      zkHost = factory.getCollectionZkHost(collectionName);\n      if(zkHost == null) {\n        zkHost = factory.getDefaultZkHost();\n      }\n    } else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){\n      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();\n    }\n\n    \r\n    init(collectionName, params, metrics, zkHost);\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":79,"status":"N"}],"commitId":"440d4baab12885c962de75e46e150d2723e20215","commitMessage":"@@@SOLR-14916: Add split parameter to timeseries Streaming Expression\n","date":"2021-04-07 21:54:50","modifiedFileCount":"2","status":"M","submitter":"Joel Bernstein"}]
