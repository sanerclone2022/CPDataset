[{"authorTime":"2018-08-07 06:56:49","codes":[{"authorDate":"2018-08-07 06:56:49","commitOrder":1,"curCode":"  private void testNodeWontRetryBadRequest(NodeType nodeType) throws Exception {\n    ignoreException(\"Bad Request\");\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.BAD_REQUEST);\n      ArrayList<Node> nodes = new ArrayList<>();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      Node retryNode;\n      if (nodeType == NodeType.FORWARD) {\n        retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      } else {\n        retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      }\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n      unIgnoreException(\"Bad Request\");\n    }\n  }\n","date":"2018-08-07 06:56:49","endLine":678,"groupId":"12380","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testNodeWontRetryBadRequest","params":"(NodeTypenodeType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/cf71728efb8cdfc84d1af6bb65cd2dbc389111.src","preCode":"  private void testNodeWontRetryBadRequest(NodeType nodeType) throws Exception {\n    ignoreException(\"Bad Request\");\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.BAD_REQUEST);\n      ArrayList<Node> nodes = new ArrayList<>();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      Node retryNode;\n      if (nodeType == NodeType.FORWARD) {\n        retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      } else {\n        retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      }\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n      unIgnoreException(\"Bad Request\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"B"},{"authorDate":"2018-08-07 06:56:49","commitOrder":1,"curCode":"  private void testForwardNodeWontRetrySocketError() throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.SOCKET_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      ForwardNode retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n        @Override\n        public boolean checkRetry(Error err) {\n          retries.incrementAndGet();\n          return super.checkRetry(err);\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n","date":"2018-08-07 06:56:49","endLine":727,"groupId":"8635","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testForwardNodeWontRetrySocketError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/cf71728efb8cdfc84d1af6bb65cd2dbc389111.src","preCode":"  private void testForwardNodeWontRetrySocketError() throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.SOCKET_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      ForwardNode retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n        @Override\n        public boolean checkRetry(Error err) {\n          retries.incrementAndGet();\n          return super.checkRetry(err);\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":680,"status":"B"}],"commitId":"c338cf61e7baba4908c31e02beda47ae3e201752","commitMessage":"@@@SOLR-11881: Retry update requests from leaders to followers\n","date":"2018-08-07 06:56:49","modifiedFileCount":"6","status":"B","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2020-12-01 03:05:48","codes":[{"authorDate":"2018-08-07 06:56:49","commitOrder":2,"curCode":"  private void testNodeWontRetryBadRequest(NodeType nodeType) throws Exception {\n    ignoreException(\"Bad Request\");\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.BAD_REQUEST);\n      ArrayList<Node> nodes = new ArrayList<>();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      Node retryNode;\n      if (nodeType == NodeType.FORWARD) {\n        retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      } else {\n        retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      }\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n      unIgnoreException(\"Bad Request\");\n    }\n  }\n","date":"2018-08-07 06:56:49","endLine":678,"groupId":"102894","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testNodeWontRetryBadRequest","params":"(NodeTypenodeType)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/cf71728efb8cdfc84d1af6bb65cd2dbc389111.src","preCode":"  private void testNodeWontRetryBadRequest(NodeType nodeType) throws Exception {\n    ignoreException(\"Bad Request\");\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.BAD_REQUEST);\n      ArrayList<Node> nodes = new ArrayList<>();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      Node retryNode;\n      if (nodeType == NodeType.FORWARD) {\n        retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      } else {\n        retryNode = new StdNode(new ZkCoreNodeProps(nodeProps), \"collection1\", \"shard1\", 5) {\n          @Override\n          public boolean checkRetry(Error err) {\n            retries.incrementAndGet();\n            return super.checkRetry(err);\n          }\n        };\n      }\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n      unIgnoreException(\"Bad Request\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":622,"status":"N"},{"authorDate":"2020-12-01 03:05:48","commitOrder":2,"curCode":"  private void testForwardNodeWontRetrySocketError() throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.SOCKET_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      final AtomicInteger retries = new AtomicInteger();\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      ForwardNode retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n        @Override\n        public boolean checkRetry(Error err) {\n          retries.incrementAndGet();\n          return super.checkRetry(err);\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n","date":"2020-12-01 03:05:48","endLine":740,"groupId":"102894","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testForwardNodeWontRetrySocketError","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/9559273e10be75a5c348228d46f0c214d66a7e.src","preCode":"  private void testForwardNodeWontRetrySocketError() throws Exception {\n    final HttpSolrClient solrclient = (HttpSolrClient) clients.get(0);\n    long numFoundBefore = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n        .getNumFound();\n    final MockStreamingSolrClients streamingClients = new MockStreamingSolrClients(updateShardHandler);\n    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(streamingClients, 0)) {\n      streamingClients.setExp(Exp.SOCKET_EXCEPTION);\n      ArrayList<Node> nodes = new ArrayList<>();\n\n      ZkNodeProps nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(),\n          ZkStateReader.CORE_NAME_PROP, \"\");\n\n      final AtomicInteger retries = new AtomicInteger();\n      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP, solrclient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, \"\");\n      ForwardNode retryNode = new ForwardNode(new ZkCoreNodeProps(nodeProps), null, \"collection1\", \"shard1\", 5) {\n        @Override\n        public boolean checkRetry(Error err) {\n          retries.incrementAndGet();\n          return super.checkRetry(err);\n        }\n      };\n\n\n      nodes.add(retryNode);\n\n      AddUpdateCommand cmd = new AddUpdateCommand(null);\n      cmd.solrDoc = sdoc(\"id\", id.incrementAndGet());\n      ModifiableSolrParams params = new ModifiableSolrParams();\n\n      CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);\n      cmdDistrib.distribAdd(cmd, nodes, params);\n\n      streamingClients.setExp(null);\n      cmdDistrib.distribCommit(ccmd, nodes, params);\n      cmdDistrib.finish();\n\n      \r\n      assertEquals(1, retries.get());\n\n\n      long numFoundAfter = solrclient.query(new SolrQuery(\"*:*\")).getResults()\n          .getNumFound();\n\n      \r\n      assertEquals(numFoundBefore, numFoundAfter);\n      assertEquals(1, cmdDistrib.getErrors().size());\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/update/SolrCmdDistributorTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":696,"status":"M"}],"commitId":"a0492840ee8690ddf48369665c744d16c7dd30cb","commitMessage":"@@@SOLR-12182: Don't persist base_url in ZK as the scheme is variable.  compute from node_name instead (#2010)\n\n","date":"2020-12-01 03:05:48","modifiedFileCount":"53","status":"M","submitter":"Timothy Potter"}]
