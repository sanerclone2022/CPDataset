[{"authorTime":"2020-02-25 04:07:10","codes":[{"authorDate":"2020-02-25 04:07:10","commitOrder":2,"curCode":"  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","date":"2020-02-25 04:07:10","endLine":90,"groupId":"7037","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"verify","params":"(Stringsig@ByteBufferdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/98/b65ef6216063169e00c46decc3daa3c5eb52c4.src","preCode":"  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/CryptoKeys.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":74,"status":"MB"},{"authorDate":"2020-02-25 04:07:10","commitOrder":2,"curCode":"  public String verify(String sig, InputStream is) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), is);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","date":"2020-02-25 04:07:10","endLine":108,"groupId":"37837","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"verify","params":"(Stringsig@InputStreamis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/98/b65ef6216063169e00c46decc3daa3c5eb52c4.src","preCode":"  public String verify(String sig, InputStream is) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), is);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/CryptoKeys.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":92,"status":"B"}],"commitId":"1770797387d761706c6d93253a3759d885f662c4","commitMessage":"@@@SOLR-14223 Create RSAKeyPair from disk (#1217)\n\n* Create properties for PublicKeyHandler to read existing keys from disk\n* Move pregenerated keys from core/test-files to test-framework\n* Update tests to use existing keys instead of new keys each run","date":"2020-02-25 04:07:10","modifiedFileCount":"10","status":"M","submitter":"Mike"},{"authorTime":"2021-08-31 21:56:55","codes":[{"authorDate":"2021-08-31 21:56:55","commitOrder":3,"curCode":"  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.getDecoder().decode(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","date":"2021-08-31 21:56:55","endLine":91,"groupId":"112519","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"verify","params":"(Stringsig@ByteBufferdata)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/3feff8334f3f1643212304c8e8a4f6c0d87322.src","preCode":"  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/CryptoKeys.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":75,"status":"M"},{"authorDate":"2021-08-31 21:56:55","commitOrder":3,"curCode":"  public String verify(String sig, InputStream is) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.getDecoder().decode(sig), is);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","date":"2021-08-31 21:56:55","endLine":109,"groupId":"112519","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"verify","params":"(Stringsig@InputStreamis)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/3feff8334f3f1643212304c8e8a4f6c0d87322.src","preCode":"  public String verify(String sig, InputStream is) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), is);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/util/CryptoKeys.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":93,"status":"M"}],"commitId":"bd3c05868b4884cabe3eb747663ebdfdbdcd2770","commitMessage":"@@@SOLR-15111 Use JDK8 Base64 instead of own implementation (#24)\n\nCo-authored-by: Jan H?ydahl <janhoy@users.noreply.github.com>","date":"2021-08-31 21:56:55","modifiedFileCount":"20","status":"M","submitter":"Andr?s Salamon"}]
