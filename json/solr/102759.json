[{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2014-01-07 05:15:45","commitOrder":1,"curCode":"  public void testBadInputs() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n      assertU(commit());\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","date":"2014-01-07 05:15:45","endLine":113,"groupId":"24389","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public void testBadInputs() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n      assertU(commit());\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":70,"status":"B"},{"authorDate":"2014-01-07 05:15:45","commitOrder":1,"curCode":"  private void doBadInputTest() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      indexDoc(sdoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      indexDoc(sdoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      del(\"*:*\");\n    }\n    commit();\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","date":"2014-01-07 05:15:45","endLine":139,"groupId":"24389","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doBadInputTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/5336e26633f284f9f3bbe9438ec455dc64b9c5.src","preCode":"  private void doBadInputTest() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      indexDoc(sdoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      indexDoc(sdoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      del(\"*:*\");\n    }\n    commit();\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":96,"status":"B"}],"commitId":"5efc4132f10d476373b7da72e23f475eeec4046a","commitMessage":"@@@SOLR-5463: new 'cursorMark' request param for deep paging of sorted result sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1556036 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-07 05:15:45","modifiedFileCount":"10","status":"B","submitter":"Chris M. Hostetter"},{"authorTime":"2020-04-18 00:51:35","codes":[{"authorDate":"2020-04-18 00:51:35","commitOrder":2,"curCode":"  public void testBadInputs() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n      assertU(commit());\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","date":"2020-12-24 03:01:44","endLine":117,"groupId":"24389","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f6/01cb0598042e45ce3530f5eaef60a1ca85263d.src","preCode":"  public void testBadInputs() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n      assertU(commit());\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":81,"status":"M"},{"authorDate":"2020-04-18 00:51:35","commitOrder":2,"curCode":"  private void doBadInputTest() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      indexDoc(sdoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      indexDoc(sdoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      del(\"*:*\");\n    }\n    commit();\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","date":"2020-12-24 03:01:44","endLine":142,"groupId":"24389","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doBadInputTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/0614557f568235b284d43050bcb1f1c1150a7e.src","preCode":"  private void doBadInputTest() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      indexDoc(sdoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      indexDoc(sdoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      del(\"*:*\");\n    }\n    commit();\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      CommonParams.TIME_ALLOWED, \"1000\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, CommonParams.TIME_ALLOWED);\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"M"}],"commitId":"70f461ee453afd59f971a3ec5c431181aa1edd10","commitMessage":"@@@SOLR-14413 allow timeAllowed and cursorMark parameters\n\ncloses #1436\n","date":"2020-12-24 03:01:44","modifiedFileCount":"4","status":"M","submitter":"John Gallagher"},{"authorTime":"2020-04-18 00:51:35","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":3,"curCode":"  public void testBadInputs() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n    assertU(commit());\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n\n    \r\n    \r\n    \r\n    \r\n    assertU(adoc(\"id\", \"yyy\", \"str\", \"y\", \"float\", \"3\", \"int\", \"-3\"));\n    if (random().nextBoolean()) {\n      assertU(commit());\n    }\n    for (SolrParams p : Arrays.asList(params(),\n                                      params(CURSOR_MARK_PARAM, \"gibberish\"),\n                                      params(CURSOR_MARK_PARAM, \"gibberish\",\n                                             \"sort\", \"id asc\"))) {\n      assertJQ(req(p,\n                   \"qt\",\"/get\",\n                   \"fl\", \"id\",\n                   \"id\",\"yyy\") \n               , \"=={'doc':{'id':'yyy'}}\");\n      assertJQ(req(p,\n                   \"qt\",\"/get\",\n                   \"fl\", \"id\",\n                   \"id\",\"xxx\") \r\n               , \"=={'doc':null}\");\n    }\n  }\n","date":"2021-04-06 00:57:24","endLine":147,"groupId":"102759","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testBadInputs","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public void testBadInputs() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      assertU(adoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      assertU(adoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      assertU(commit());\n    }\n      assertU(commit());\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2020-04-18 00:51:35","commitOrder":3,"curCode":"  private void doBadInputTest() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      indexDoc(sdoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      indexDoc(sdoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      del(\"*:*\");\n    }\n    commit();\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","date":"2020-12-24 03:01:44","endLine":142,"groupId":"102759","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doBadInputTest","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b0/0614557f568235b284d43050bcb1f1c1150a7e.src","preCode":"  private void doBadInputTest() throws Exception {\n    \r\n    if (random().nextBoolean()) {\n      indexDoc(sdoc(\"id\", \"42\", \"str\", \"z\", \"float\", \"99.99\", \"int\", \"42\"));\n      indexDoc(sdoc(\"id\", \"66\", \"str\", \"x\", \"float\", \"22.00\", \"int\", \"-66\"));\n    } else {\n      del(\"*:*\");\n    }\n    commit();\n\n    \r\n    for (String c : new String[] { \"\", \"   \", \"all the docs please!\"}) {\n      assertFail(params(\"q\", \"*:*\", \n                        \"sort\", \"id desc\", \n                        CURSOR_MARK_PARAM, c),\n                 ErrorCode.BAD_REQUEST, \"Unable to parse\");\n    }\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"score desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"uniqueKey field\");\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"_docid_ asc, id desc\", \n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"_docid_\");\n\n    \r\n    assertFail(params(\"q\", \"*:*\", \n                      \"sort\", \"id desc\", \n                      GroupParams.GROUP, \"true\",\n                      GroupParams.GROUP_FIELD, \"str\",\n                      CURSOR_MARK_PARAM, CURSOR_MARK_START),\n               ErrorCode.BAD_REQUEST, \"Grouping\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":106,"status":"N"}],"commitId":"59a59138668e9513060824d85ee375a1723f4bfb","commitMessage":"@@@SOLR-11921: Move \"cursorMark\" logic from QueryComponent to SearchHandler so it can work with things like QueryElevationComponent that modify the SortSpec in prepare().  as well as possible custom \"search\" components other then QueryComponent\n","date":"2021-04-06 00:57:24","modifiedFileCount":"9","status":"M","submitter":"Chris Hostetter"}]
