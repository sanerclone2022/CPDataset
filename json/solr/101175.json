[{"authorTime":"2013-08-14 02:37:26","codes":[{"authorDate":"2013-10-16 16:04:31","commitOrder":3,"curCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","date":"2013-10-16 16:04:31","endLine":83,"groupId":"271","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"matches","params":"(Exceptione@StringerrString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/c2ff37132ded54d309a580c3725f42eb23efeb.src","preCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"B"},{"authorDate":"2013-08-14 02:37:26","commitOrder":3,"curCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","date":"2013-08-14 02:37:26","endLine":241,"groupId":"271","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddedFieldIndexableAndQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/27b67c6b1ec6841d6e1d0cdb37419b375f6c80.src","preCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"NB"}],"commitId":"9fecedb68e044c972773f5749a878ea5fc52905d","commitMessage":"@@@SOLR-5329: moved AbstractBadConfigTestBase to test-framework\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1532676 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-10-16 16:04:31","modifiedFileCount":"0","status":"M","submitter":"Ryan Ernst"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2013-10-16 16:04:31","commitOrder":4,"curCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","date":"2013-10-16 16:04:31","endLine":83,"groupId":"271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"matches","params":"(Exceptione@StringerrString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/c2ff37132ded54d309a580c3725f42eb23efeb.src","preCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","date":"2014-03-12 22:39:17","endLine":241,"groupId":"271","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddedFieldIndexableAndQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2c/95ef6c86dc408f0448bc34c197b11449c01195.src","preCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<String,Object>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":195,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2014-09-04 23:56:25","codes":[{"authorDate":"2013-10-16 16:04:31","commitOrder":5,"curCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","date":"2013-10-16 16:04:31","endLine":83,"groupId":"271","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"matches","params":"(Exceptione@StringerrString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/c2ff37132ded54d309a580c3725f42eb23efeb.src","preCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2014-09-04 23:56:25","commitOrder":5,"curCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","date":"2014-09-04 23:56:25","endLine":238,"groupId":"271","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testAddedFieldIndexableAndQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/06/36606af4135f348c7607f636cf1289ce878f05.src","preCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    assertTrue(managedSchemaFile.delete()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":192,"status":"M"}],"commitId":"3604769c3abad5b41a84fdd390ec3493b5804abc","commitMessage":"@@@LUCENE-5906: Use Files.delete everywhere instead of File.delete\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1622506 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-09-04 23:56:25","modifiedFileCount":"72","status":"M","submitter":"Robert Muir"},{"authorTime":"2021-09-16 20:43:31","codes":[{"authorDate":"2013-10-16 16:04:31","commitOrder":6,"curCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","date":"2013-10-16 16:04:31","endLine":83,"groupId":"101175","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"matches","params":"(Exceptione@StringerrString)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/c2ff37132ded54d309a580c3725f42eb23efeb.src","preCode":"  private static boolean matches(Exception e, String errString) {\n    for (Throwable t = e; t != null; t = t.getCause()) {\n      if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString))\n        return true;\n    }\n    return false;\n  }\n","realPath":"solr/test-framework/src/java/org/apache/solr/core/AbstractBadConfigTestBase.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":77,"status":"N"},{"authorDate":"2021-09-16 20:43:31","commitOrder":6,"curCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema.xml\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema.xml\");\n    Files.delete(managedSchemaFile.toPath()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","date":"2021-09-16 20:43:31","endLine":257,"groupId":"101175","id":8,"instanceNumber":2,"isCurCommit":1,"methodName":"testAddedFieldIndexableAndQueryable","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/a5a79a321defc265288209deb339419792b44d.src","preCode":"  public void testAddedFieldIndexableAndQueryable() throws Exception {\n    assertSchemaResource(collection, \"managed-schema\");\n    deleteCore();\n    File managedSchemaFile = new File(tmpConfDir, \"managed-schema\");\n    Files.delete(managedSchemaFile.toPath()); \r\n    System.setProperty(\"managed.schema.mutable\", \"true\");\n    initCore(\"solrconfig-managed-schema.xml\", \"schema-one-field-no-dynamic-field.xml\", tmpSolrHome.getPath());\n\n    assertTrue(managedSchemaFile.exists());\n    String managedSchemaContents = FileUtils.readFileToString(managedSchemaFile, \"UTF-8\");\n    assertFalse(managedSchemaContents.contains(\"\\\"new_field\\\"\"));\n\n    clearIndex();\n\n    String errString = \"unknown field 'new_field'\";\n    ignoreException(Pattern.quote(errString));\n    try {\n      assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n      fail();\n    } catch (Exception e) {\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        \r\n        if (t.getMessage() != null && -1 != t.getMessage().indexOf(errString)) return;\n      }\n      \r\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unexpected error, expected error matching: \" + errString, e);\n    } finally {\n      resetExceptionIgnores();\n    }\n    assertU(commit());\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='0']\");\n\n    Map<String,Object> options = new HashMap<>();\n    options.put(\"stored\", \"false\");\n    IndexSchema oldSchema = h.getCore().getLatestSchema();\n    String fieldName = \"new_field\";\n    String fieldType = \"text\";\n    SchemaField newField = oldSchema.newField(fieldName, fieldType, options);\n    IndexSchema newSchema = oldSchema.addField(newField);\n    h.getCore().setLatestSchema(newSchema);\n\n    assertU(adoc(\"new_field\", \"thing1 thing2\", \"str\", \"X\"));\n    assertU(commit());\n\n    assertQ(req(\"new_field:thing1\"), \"//*[@numFound='1']\");\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestManagedSchema.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":211,"status":"M"}],"commitId":"df903cbdc1de7fb2c3469b9773d6f9d23d591a5d","commitMessage":"@@@ SOLR-10887: Append .xml to managed-schema file VERSION 2 (#279)\n\nManaged schema file is now called \"managed-schema.xml\".  however there is a fallback to \"managed-schema\" since that is a common legacy name for the file.   Updated the name of the files used in running tests.","date":"2021-09-16 20:43:31","modifiedFileCount":"9","status":"M","submitter":"Eric Pugh"}]
