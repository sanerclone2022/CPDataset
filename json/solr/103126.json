[{"authorTime":"2013-06-27 04:18:33","codes":[{"authorDate":"2012-02-19 22:13:45","commitOrder":3,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2012-02-19 22:13:45","endLine":153,"groupId":"27271","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/97/342d1e0dd8d0966bf508459191053d1c352ba6.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"NB"},{"authorDate":"2013-06-27 04:18:33","commitOrder":3,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2013-06-27 04:18:33","endLine":217,"groupId":"27271","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a7/86702222f9ed799ef808f1237c408e8402db44.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":115,"status":"B"}],"commitId":"b9e1537a7e12e6c15622452e48d8ca8c23aa98c4","commitMessage":"@@@SOLR-4916: Add support to write and read Solr index files and transaction log files to and from HDFS.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1497072 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2013-06-27 04:18:33","modifiedFileCount":"42","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2014-03-12 22:39:17","endLine":200,"groupId":"27271","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1b/8bc633cd9e90f94f77b0ad52d2a6db02a4f5b8.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":98,"status":"M"},{"authorDate":"2014-03-12 22:39:17","commitOrder":4,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2014-03-12 22:39:17","endLine":230,"groupId":"27271","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/e9d3bf73f9faa9b5a0ac605af2edb00c101d18.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<Long>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2016-03-04 21:23:47","codes":[{"authorDate":"2016-03-04 21:23:47","commitOrder":5,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-03-04 21:23:47","endLine":183,"groupId":"27271","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/7492f53b602d299d6e1c3dfd2f814145a8aa99.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2016-03-04 21:23:47","commitOrder":5,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-03-04 21:23:47","endLine":243,"groupId":"27271","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/d61be5bcff6d6322edc3120b63273fc12281f3.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n          } catch (Exception e) {\n            throw new RuntimeException(e);\n          }\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = new Runnable() {\n        @Override\n        public void run() {\n          logReplayFinish.release();\n        }\n      };\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"c27dd8e03866082686ab3d17f7350f91975a8efc","commitMessage":"@@@SOLR-8750 : Use lambdas in code where SAM type interfaces are used\n","date":"2016-03-04 21:23:47","modifiedFileCount":"45","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-04-07 05:18:10","codes":[{"authorDate":"2016-03-04 21:23:47","commitOrder":6,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-03-04 21:23:47","endLine":183,"groupId":"27271","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/7492f53b602d299d6e1c3dfd2f814145a8aa99.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"N"},{"authorDate":"2016-04-07 05:18:10","commitOrder":6,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-04-07 05:18:10","endLine":243,"groupId":"27271","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/e7a2bcff44c8912249bf7ed097c60c2d288d9a.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"M"}],"commitId":"eda2a319595d01efaf05ed4bc4574682b91e7aaf","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-07 05:18:10","modifiedFileCount":"41","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-04-07 05:18:10","codes":[{"authorDate":"2017-01-10 04:00:00","commitOrder":7,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      assertEquals(5L, replayDocs.getCount());\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2017-01-10 04:00:00","endLine":197,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7b/d0951a8b9b157dfcd2fcdefd49b55d63b2aa38.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2016-04-07 05:18:10","commitOrder":7,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-04-07 05:18:10","endLine":243,"groupId":"27271","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/e7a2bcff44c8912249bf7ed097c60c2d288d9a.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"b8383db06ee194b9195cd95f058dc820cb70baf8","commitMessage":"@@@SOLR-9856 Collect metrics for shard replication and tlog replay on replicas.\n","date":"2017-01-10 04:00:00","modifiedFileCount":"6","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2016-04-07 05:18:10","codes":[{"authorDate":"2017-01-10 18:41:40","commitOrder":8,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(5L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2017-01-10 18:44:16","endLine":198,"groupId":"24207","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f3/e98dd85fdb252dc936ec91a2f05d4417f924b4.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      assertEquals(5L, replayDocs.getCount());\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":87,"status":"M"},{"authorDate":"2016-04-07 05:18:10","commitOrder":8,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-04-07 05:18:10","endLine":243,"groupId":"27271","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/e7a2bcff44c8912249bf7ed097c60c2d288d9a.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"98422e0dc0c7de4635e1bc80bcd5ca70a8d2761a","commitMessage":"@@@SOLR-9950 Check the difference in counts - meter may not be zero at this point.\n","date":"2017-01-10 18:44:16","modifiedFileCount":"1","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2016-04-07 05:18:10","codes":[{"authorDate":"2017-01-26 09:23:13","commitOrder":9,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2017-01-26 09:23:13","endLine":217,"groupId":"49680","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/efa523409a9c9ef2fd1ef79865661dc112f81f.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(5L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"M"},{"authorDate":"2016-04-07 05:18:10","commitOrder":9,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2016-04-07 05:18:10","endLine":243,"groupId":"27271","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/e7a2bcff44c8912249bf7ed097c60c2d288d9a.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"N"}],"commitId":"5375410807aecf3cc67f82ca1e9ee591f39d0ac7","commitMessage":"@@@SOLR-5944: In-place updates of Numeric DocValues\n","date":"2017-01-26 09:23:13","modifiedFileCount":"22","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2019-12-08 09:03:25","codes":[{"authorDate":"2017-01-26 09:23:13","commitOrder":10,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2017-01-26 09:23:13","endLine":217,"groupId":"49680","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/29/efa523409a9c9ef2fd1ef79865661dc112f81f.src","preCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":101,"status":"N"},{"authorDate":"2019-12-08 09:03:25","commitOrder":10,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2019-12-11 05:15:24","endLine":229,"groupId":"27271","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/48d59599fd7cdd2bcd84eba7e57f8e321ef337.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"48775ea18e903f401d7ab0299947abdf32107b27","commitMessage":"@@@SOLR-14033: Fix Hadoop tests with security manager\n\nThis removes the Solr security manager hacks\nfor Hadoop. It does so by:\n* Using a fake group mapping class instead of ShellGroupMapping\n* Copies a few Hadoop classes and modifies them for tests with no Shell\n* Nulls out some of the static variables in the tests\n\nThe Hadoop files were copied from Apache Hadoop 3.2.0\nand copied to the test package to be only picked up\nduring tests. They were modified to remove the need to\nshell out for access. The assumption is that these\nHDFS integration tests only run on Unix based systems\nand therefore Windows compatibility was removed in some\nof the modified classes. The long term goal is to remove\nthese custom Hadoop classes. All the copied classes are\nin the org.apache.hadoop package.\n\nSigned-off-by: Kevin Risden <krisden@apache.org>\n","date":"2019-12-11 05:15:24","modifiedFileCount":"17","status":"M","submitter":"Kevin Risden"},{"authorTime":"2020-01-17 02:47:06","codes":[{"authorDate":"2020-01-17 02:47:06","commitOrder":11,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2020-01-17 02:47:06","endLine":301,"groupId":"49680","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f4/df24c94837119d590d125caf3ff7e4ac72a719.src","preCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2020-01-17 02:47:06","commitOrder":11,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2020-01-17 02:47:06","endLine":234,"groupId":"27271","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/146ea80edc483c7a0812725eb1e071fb397ddb.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n      DirectUpdateHandler2.commitOnClose = false;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      DirectUpdateHandler2.commitOnClose = true;\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"M"}],"commitId":"5f2d7c4855987670489d68884c787e4cfb377fa9","commitMessage":"@@@SOLR-14184: Internal 'test' variable DirectUpdateHandler2.commitOnClose has been removed and replaced with TestInjection.skipIndexWriterCommitOnClose\n","date":"2020-01-17 02:47:06","modifiedFileCount":"13","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2020-01-17 02:47:06","codes":[{"authorDate":"2020-06-18 05:51:41","commitOrder":12,"curCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      @SuppressWarnings({\"unchecked\"})\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","date":"2020-06-18 05:51:41","endLine":304,"groupId":"103126","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/4e/7e12ec0afc77bdf59319a6ca336f9323d198a9.src","preCode":"  public void testLogReplay() throws Exception {\n    \n    try {\n\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(timeout, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();\n\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 1)), null)); \r\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\", \"val_i_dvo\", map(\"set\", 2)), null)); \r\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n\n      Map<String, Metric> metrics = getMetrics(); \r\n\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      assertEquals(UpdateLog.State.REPLAYING, h.getCore().getUpdateHandler().getUpdateLog().getState());\n      \r\n      Gauge<Integer> state = (Gauge<Integer>)metrics.get(\"TLOG.state\");\n      assertEquals(UpdateLog.State.REPLAYING.ordinal(), state.getValue().intValue());\n      Gauge<Integer> replayingLogs = (Gauge<Integer>)metrics.get(\"TLOG.replay.remaining.logs\");\n      assertTrue(replayingLogs.getValue().intValue() > 0);\n      Gauge<Long> replayingDocs = (Gauge<Long>)metrics.get(\"TLOG.replay.remaining.bytes\");\n      assertTrue(replayingDocs.getValue().longValue() > 0);\n      Meter replayDocs = (Meter)metrics.get(\"TLOG.replay.ops\");\n      long initialOps = replayDocs.getCount();\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      assertEquals(7L, replayDocs.getCount() - initialOps);\n      assertEquals(UpdateLog.State.ACTIVE.ordinal(), state.getValue().intValue());\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"val_i_dvo:2\") ,\"/response/numFound==1\"); \r\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecovery.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":186,"status":"M"},{"authorDate":"2020-01-17 02:47:06","commitOrder":12,"curCode":"  public void testLogReplay() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","date":"2020-01-17 02:47:06","endLine":234,"groupId":"103126","id":20,"instanceNumber":2,"isCurCommit":0,"methodName":"testLogReplay","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fa/146ea80edc483c7a0812725eb1e071fb397ddb.src","preCode":"  public void testLogReplay() throws Exception {\n    try {\n      TestInjection.skipIndexWriterCommitOnClose = true;\n      final Semaphore logReplay = new Semaphore(0);\n      final Semaphore logReplayFinish = new Semaphore(0);\n\n      UpdateLog.testing_logReplayHook = () -> {\n        try {\n          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n      };\n\n      UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;\n\n      clearIndex();\n      assertU(commit());\n\n      Deque<Long> versions = new ArrayDeque<>();\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A1\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A11\"), null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A12\"), null));\n      versions.addFirst(deleteByQueryAndGetVersion(\"id:A11\", null));\n      versions.addFirst(addAndGetVersion(sdoc(\"id\", \"A13\"), null));\n\n      assertJQ(req(\"q\",\"*:*\"),\"/response/numFound==0\");\n\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      \r\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==0\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      logReplay.release(1000);\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()),\"/versions==\" + versions);\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      \r\n      assertJQ(req(\"qt\",\"/get\", \"getVersions\",\"\"+versions.size()) ,\"/versions==\" + versions);\n\n      assertU(adoc(\"id\",\"A2\"));\n      assertU(adoc(\"id\",\"A3\"));\n      assertU(delI(\"A2\"));\n      assertU(adoc(\"id\",\"A4\"));\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==3\");\n\n      h.close();\n      createCore();\n      \r\n      \r\n\n      \r\n      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      assertJQ(req(\"q\",\"id:A2\") ,\"/response/numFound==0\");\n\n      \r\n      h.close();\n      int permits = logReplay.availablePermits();\n      createCore();\n      \r\n      \r\n\n      assertJQ(req(\"q\",\"*:*\") ,\"/response/numFound==5\");\n      Thread.sleep(100);\n      assertEquals(permits, logReplay.availablePermits()); \r\n\n      assertEquals(UpdateLog.State.ACTIVE, h.getCore().getUpdateHandler().getUpdateLog().getState());\n\n    } finally {\n      UpdateLog.testing_logReplayHook = null;\n      UpdateLog.testing_logReplayFinishHook = null;\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":144,"status":"N"}],"commitId":"b01e249c9ec724b6df120a5d731020cfe4de3fce","commitMessage":"@@@SOLR-14574: Fix or suppress warnings in solr/core/src/test (part 1)\n","date":"2020-06-18 05:51:41","modifiedFileCount":"213","status":"M","submitter":"Erick Erickson"}]
