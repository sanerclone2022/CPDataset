[{"authorTime":"2017-08-14 18:42:33","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n","date":"2016-05-05 15:05:25","endLine":65,"groupId":"21218","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/27/c9dca9477d295ec9327a2141e198b3a98e8bb7.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"NB"},{"authorDate":"2017-08-14 18:42:33","commitOrder":2,"curCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","date":"2017-08-14 18:42:33","endLine":51,"groupId":"21218","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/7ebafb741e9aba0e2b958e5fa00b470234103c.src","preCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"B"}],"commitId":"7aa660b747440bfc5beb63051db324db3c5dd761","commitMessage":"@@@SOLR-11221: SolrJmxReporter broken on core reload.\n","date":"2017-08-14 18:42:33","modifiedFileCount":"4","status":"M","submitter":"Andrzej Bialecki"},{"authorTime":"2017-08-14 18:42:33","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":62,"groupId":"21218","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/dc0e952ef1b95cf52c4a551d3ccfdc836ef7e7.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, TIMEOUT);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"M"},{"authorDate":"2017-08-14 18:42:33","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","date":"2017-08-14 18:42:33","endLine":51,"groupId":"21218","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ac/7ebafb741e9aba0e2b958e5fa00b470234103c.src","preCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":42,"status":"N"}],"commitId":"75b183196798232aa6f2dcaaaab117f309119053","commitMessage":"@@@SOLR-12801: Make massive improvements to the tests.\n\nSOLR-12804: Remove static modifier from Overseer queue access.\n\nSOLR-12896: Introduce more checks for shutdown and closed to improve clean close and shutdown. (Partial)\n\nSOLR-12897: Introduce AlreadyClosedException to clean up silly close / shutdown logging. (Partial)\n\nSOLR-12898: Replace cluster state polling with ZkStateReader#waitFor. (Partial)\n\nSOLR-12923: The new AutoScaling tests are way too flaky and need special attention. (Partial)\n\nSOLR-12932: ant test (without badapples=false) should pass easily for developers. (Partial)\n\nSOLR-12933: Fix SolrCloud distributed commit.\n","date":"2018-11-30 01:58:51","modifiedFileCount":"339","status":"M","submitter":"markrmiller"},{"authorTime":"2020-07-08 23:57:24","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":62,"groupId":"102799","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/dc0e952ef1b95cf52c4a551d3ccfdc836ef7e7.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2020-07-08 23:57:24","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .process(cluster.getSolrClient());\n  }\n","date":"2020-07-08 23:57:24","endLine":62,"groupId":"102799","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5c/ff7737ceb48550bd7ef43f4067ff6282f263f9.src","preCode":"  public static void setupCluster() throws Exception {\n    \r\n    mBeanServer = ManagementFactory.getPlatformMBeanServer();\n    configureCluster(1)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n  }\n","realPath":"solr/core/src/test/org/apache/solr/metrics/reporters/SolrJmxReporterCloudTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":54,"status":"M"}],"commitId":"cf742f45963f4747e7041e8131248bc3a2b44864","commitMessage":"@@@SOLR-12847: Remove support for maxShardsPerNode.\n","date":"2020-07-08 23:57:24","modifiedFileCount":"144","status":"M","submitter":"Andrzej Bialecki"}]
