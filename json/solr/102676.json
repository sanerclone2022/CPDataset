[{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(10, true);\n    } else {\n      arr = getRandomStringArrayWithInts(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","date":"2017-01-19 09:27:21","endLine":862,"groupId":"17567","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(10, true);\n    } else {\n      arr = getRandomStringArrayWithInts(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":797,"status":"B"},{"authorDate":"2017-01-19 09:27:21","commitOrder":1,"curCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","date":"2017-01-19 09:27:21","endLine":1349,"groupId":"17571","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1276,"status":"B"}],"commitId":"57934ba4480d71218c7f60d0417dbae9d26188d0","commitMessage":"@@@SOLR-8396: Add support for PointFields in Solr\n","date":"2017-01-19 09:27:21","modifiedFileCount":"33","status":"B","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-01-19 09:27:21","codes":[{"authorDate":"2017-02-23 02:28:53","commitOrder":2,"curCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n","date":"2017-02-23 02:31:12","endLine":873,"groupId":"17567","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b3/d0b97fa1ddd461ef413c44516dbd1bc3df5b74.src","preCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(10, true);\n    } else {\n      arr = getRandomStringArrayWithInts(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":791,"status":"M"},{"authorDate":"2017-01-19 09:27:21","commitOrder":2,"curCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","date":"2017-01-19 09:27:21","endLine":1349,"groupId":"17571","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/12/f15049c6918132b30ee767ca26785052fa0638.src","preCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1276,"status":"N"}],"commitId":"21690f5e126e1be0baf70cd3af2d570a18cd712d","commitMessage":"@@@SOLR-10143: PointFields will create IndexOrDocValuesQuery when a field is both.  indexed=true and docValues=true\n","date":"2017-02-23 02:31:12","modifiedFileCount":"4","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-03-15 00:49:22","codes":[{"authorDate":"2017-03-15 00:49:22","commitOrder":3,"curCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n","date":"2017-03-15 00:49:22","endLine":1031,"groupId":"34176","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/e8c1031f7e1268711817735be0b20bbc3208fd.src","preCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":942,"status":"M"},{"authorDate":"2017-03-15 00:49:22","commitOrder":3,"curCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","date":"2017-03-15 00:49:22","endLine":1739,"groupId":"48726","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/e8c1031f7e1268711817735be0b20bbc3208fd.src","preCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 0; i < 10; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1662,"status":"M"}],"commitId":"9417367b1afd404b944692d9947f78587e2b2d94","commitMessage":"@@@SOLR-10266: fix implicit test assumptions about doc order\n","date":"2017-03-15 00:49:22","modifiedFileCount":"1","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2017-06-29 17:00:17","commitOrder":4,"curCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n","date":"2017-06-29 17:00:17","endLine":1456,"groupId":"34176","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/d2260207d34be0adfa607eae44b8b2fd7b9140.src","preCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = getRandomStringArrayWithLongs(100, true);\n    } else {\n      arr = getRandomStringArrayWithInts(100, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1367,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":4,"curCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = toAscendingStringArray(getRandomDoubles(10, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomFloats(10, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","date":"2017-06-29 17:00:17","endLine":2264,"groupId":"48726","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a1/d2260207d34be0adfa607eae44b8b2fd7b9140.src","preCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = getRandomStringArrayWithDoubles(10, true);\n    } else {\n      arr = getRandomStringArrayWithFloats(10, true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2187,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-07-19 05:32:11","codes":[{"authorDate":"2017-07-19 05:32:11","commitOrder":5,"curCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    if (testLong) {\n      assertQ(req(\"q\", fieldName + \":[\" + Long.MIN_VALUE + \" TO \" + Long.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Long.MAX_VALUE + \" TO \" + Long.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Integer.MIN_VALUE + \" TO \" + Integer.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Integer.MAX_VALUE + \" TO \" + Integer.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n","date":"2017-07-19 05:32:11","endLine":2395,"groupId":"34176","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/ad5424d11579abb2d103af7e19d41df1df8994.src","preCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2295,"status":"M"},{"authorDate":"2017-07-19 05:32:11","commitOrder":5,"curCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = toAscendingStringArray(getRandomDoubles(10, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomFloats(10, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n    \n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldName, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"2\", fieldName, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"3\", fieldName, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"4\", fieldName, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[* TO *]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\");\n\r\n\r\n\r\n    assertQ(req(\"q\", fieldName + \":[\" + Float.MIN_VALUE + \" TO \" + Float.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\");\n    assertQ(req(\"q\", fieldName + \":{\" + Float.MIN_VALUE + \" TO \" + Float.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\");\n    assertQ(req(\"q\", fieldName + \":[\" + Float.MIN_VALUE + \" TO \" + Float.MAX_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\");\n    if (testDouble) {\n      assertQ(req(\"q\", fieldName + \":[\" + Double.MIN_VALUE + \" TO \" + Double.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Double.MAX_VALUE + \" TO \" + Double.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Double.NEGATIVE_INFINITY + \" TO \" + Double.NEGATIVE_INFINITY + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":[\" + Double.POSITIVE_INFINITY + \" TO \" + Double.POSITIVE_INFINITY + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Float.MIN_VALUE + \" TO \" + Float.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Float.MAX_VALUE + \" TO \" + Float.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Float.NEGATIVE_INFINITY + \" TO \" + Float.NEGATIVE_INFINITY + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":[\" + Float.POSITIVE_INFINITY + \" TO \" + Float.POSITIVE_INFINITY + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n","date":"2017-07-19 05:32:11","endLine":3232,"groupId":"48726","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/ad5424d11579abb2d103af7e19d41df1df8994.src","preCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = toAscendingStringArray(getRandomDoubles(10, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomFloats(10, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3118,"status":"M"}],"commitId":"beec66ece79bde6fd091fa40b5d2ce08ad65365c","commitMessage":"@@@SOLR-11057: Fix overflow in point range queries when querying the type limits\n","date":"2017-07-19 05:32:11","modifiedFileCount":"4","status":"M","submitter":"Tomas Fernandez Lobbe"},{"authorTime":"2017-07-27 01:10:40","codes":[{"authorDate":"2017-07-19 05:32:11","commitOrder":6,"curCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    if (testLong) {\n      assertQ(req(\"q\", fieldName + \":[\" + Long.MIN_VALUE + \" TO \" + Long.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Long.MAX_VALUE + \" TO \" + Long.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Integer.MIN_VALUE + \" TO \" + Integer.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Integer.MAX_VALUE + \" TO \" + Integer.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n","date":"2017-07-19 05:32:11","endLine":2395,"groupId":"102676","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"doTestIntPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestLong)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/ad5424d11579abb2d103af7e19d41df1df8994.src","preCode":"  private void doTestIntPointFieldRangeQuery(String fieldName, String type, boolean testLong) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='0'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id desc\"), \n        \"//*[@numFound='3']\",\n        \"0=count(//result/doc/\" + type + \"[@name='\" + fieldName + \"'][.='3'])\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='2']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] OR \" + fieldName + \":[8 TO 9]\" , \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='8']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='9']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 1] AND NOT \" + fieldName + \":[1 TO 2]\" , \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0']\");\n\n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testLong) {\n      arr = toAscendingStringArray(getRandomLongs(100, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomInts(100, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"] AND \" + fieldName + \":\" + arr[0].replace(\"-\", \"\\\\-\"), \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='1']\");\n    }\n    if (testLong) {\n      assertQ(req(\"q\", fieldName + \":[\" + Long.MIN_VALUE + \" TO \" + Long.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Long.MAX_VALUE + \" TO \" + Long.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Integer.MIN_VALUE + \" TO \" + Integer.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Integer.MAX_VALUE + \" TO \" + Integer.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2295,"status":"N"},{"authorDate":"2017-07-27 01:10:40","commitOrder":6,"curCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = toAscendingStringArray(getRandomDoubles(10, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomFloats(10, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n    doTestDoubleFloatRangeLimits(fieldName, testDouble);\n  }\n","date":"2017-07-27 01:12:40","endLine":3201,"groupId":"102676","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doTestFloatPointFieldRangeQuery","params":"(StringfieldName@Stringtype@booleantestDouble)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/81/92406c6a7dcb2645dd82b4038f051cad205b54.src","preCode":"  private void doTestFloatPointFieldRangeQuery(String fieldName, String type, boolean testDouble) throws Exception {\n    for (int i = 9; i >= 0; i--) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, String.valueOf(i)));\n    }\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='4']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[4]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3]\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='3.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='2']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0 TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='9']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO 3}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='3']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[2]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\",\n        \"//result/doc[3]/\" + type + \"[@name='\" + fieldName + \"'][.='2.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[* TO *}\", \"fl\", \"id, \" + fieldName, \"sort\", \"id asc\"), \n        \"//*[@numFound='10']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='0.0']\",\n        \"//result/doc[10]/\" + type + \"[@name='\" + fieldName + \"'][.='9.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":[0.9 TO 1.01]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    assertQ(req(\"q\", fieldName + \":{0.9 TO 1.01}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\",\n        \"//result/doc[1]/\" + type + \"[@name='\" + fieldName + \"'][.='1.0']\");\n    \n    clearIndex();\n    assertU(commit());\n    \n    String[] arr;\n    if (testDouble) {\n      arr = toAscendingStringArray(getRandomDoubles(10, false), true);\n    } else {\n      arr = toAscendingStringArray(getRandomFloats(10, false), true);\n    }\n    for (int i = 0; i < arr.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), fieldName, arr[i]));\n    }\n    assertU(commit());\n    for (int i = 0; i < arr.length; i++) {\n      assertQ(req(\"q\", fieldName + \":[\" + arr[0] + \" TO \" + arr[i] + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (i + 1) + \"']\");\n      assertQ(req(\"q\", fieldName + \":{\" + arr[0] + \" TO \" + arr[i] + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='\" + (Math.max(0,  i-1)) + \"']\");\n    }\n    \n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldName, String.valueOf(Float.MAX_VALUE)));\n    assertU(adoc(\"id\", \"2\", fieldName, String.valueOf(Float.MIN_VALUE)));\n    assertU(adoc(\"id\", \"3\", fieldName, String.valueOf(Float.NEGATIVE_INFINITY)));\n    assertU(adoc(\"id\", \"4\", fieldName, String.valueOf(Float.POSITIVE_INFINITY)));\n    assertU(commit());\n    assertQ(req(\"q\", fieldName + \":[* TO *]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='4']\");\n\r\n\r\n\r\n    assertQ(req(\"q\", fieldName + \":[\" + Float.MIN_VALUE + \" TO \" + Float.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='2']\");\n    assertQ(req(\"q\", fieldName + \":{\" + Float.MIN_VALUE + \" TO \" + Float.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\");\n    assertQ(req(\"q\", fieldName + \":[\" + Float.MIN_VALUE + \" TO \" + Float.MAX_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n        \"//*[@numFound='1']\");\n    if (testDouble) {\n      assertQ(req(\"q\", fieldName + \":[\" + Double.MIN_VALUE + \" TO \" + Double.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Double.MAX_VALUE + \" TO \" + Double.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Double.NEGATIVE_INFINITY + \" TO \" + Double.NEGATIVE_INFINITY + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":[\" + Double.POSITIVE_INFINITY + \" TO \" + Double.POSITIVE_INFINITY + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    } else {\n      assertQ(req(\"q\", fieldName + \":[\" + Float.MIN_VALUE + \" TO \" + Float.MIN_VALUE + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Float.MAX_VALUE + \" TO \" + Float.MAX_VALUE + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":{\" + Float.NEGATIVE_INFINITY + \" TO \" + Float.NEGATIVE_INFINITY + \"]\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n      assertQ(req(\"q\", fieldName + \":[\" + Float.POSITIVE_INFINITY + \" TO \" + Float.POSITIVE_INFINITY + \"}\", \"fl\", \"id, \" + fieldName), \n          \"//*[@numFound='0']\");\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/schema/TestPointFields.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3123,"status":"M"}],"commitId":"847ab9e326e9462aab9c5b6429cc6f1ee93acb1d","commitMessage":"@@@SOLR-11070.  SOLR-11056: Make docValues range queries behave the same as Trie/Point fields for Double/Float Infinity cases\n","date":"2017-07-27 01:12:40","modifiedFileCount":"5","status":"M","submitter":"Tomas Fernandez Lobbe"}]
