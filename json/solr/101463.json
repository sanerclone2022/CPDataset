[{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2014-09-16 23:29:54","commitOrder":2,"curCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","date":"2014-09-16 23:29:54","endLine":127,"groupId":"662","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"partition","params":"(List<T>list@intbegin@intend@TindexElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/57597793998faafd8b8c866a3793b0f53e4701.src","preCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":86,"status":"NB"},{"authorDate":"2017-06-29 17:00:17","commitOrder":2,"curCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left <= right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left > begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right < end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","date":"2017-06-29 17:00:17","endLine":162,"groupId":"662","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"partition","params":"(List<T>list@intbegin@intend@TindexElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/84e7caccaf9adee11b8936085f81630e3faaf9.src","preCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left <= right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left > begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right < end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"B"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2020-05-07 23:04:06","commitOrder":3,"curCode":"  private static <T extends Comparable<T>> OrdinalCalculator.Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new OrdinalCalculator.Point(left, right);\n  }\n","date":"2020-05-07 23:04:06","endLine":130,"groupId":"101463","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"partition","params":"(List<T>list@intbegin@intend@TindexElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1c/c7a36091cb0cc5aa98005fbe9209b93c71509f.src","preCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left < right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left != begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right != end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/MedianCalculator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":89,"status":"M"},{"authorDate":"2017-06-29 17:00:17","commitOrder":3,"curCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left <= right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left > begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right < end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","date":"2017-06-29 17:00:17","endLine":162,"groupId":"101463","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"partition","params":"(List<T>list@intbegin@intend@TindexElement)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e4/84e7caccaf9adee11b8936085f81630e3faaf9.src","preCode":"  private static <T extends Comparable<T>> Point partition(List<T> list, int begin, int end, T indexElement) {\n    T temp;\n    int left, right;\n    for (left = begin, right = end; left <= right; left++, right--) {\n      while (list.get(left).compareTo(indexElement) < 0) {\n        left++;\n      }\n      while (right != begin - 1 && list.get(right).compareTo(indexElement) >= 0) {\n        right--;\n      }\n      if (right <= left) {\n        left--;\n        right++;\n        break;\n      }\n      temp = list.get(left);\n      list.set(left, list.get(right));\n      list.set(right, temp);\n    }\n    while (left > begin - 1 && list.get(left).compareTo(indexElement) >= 0) {\n      left--;\n    }\n    while (right < end + 1 && list.get(right).compareTo(indexElement) <= 0) {\n      right++;\n    }\n    int rightMove = right + 1;\n    while (rightMove < end + 1) {\n      if (list.get(rightMove).equals(indexElement)) {\n        temp = list.get(rightMove);\n        list.set(rightMove, list.get(right));\n        list.set(right, temp);\n        do {\n          right++;\n        } while (list.get(right).equals(indexElement));\n        if (rightMove <= right) {\n          rightMove = right;\n        }\n      }\n      rightMove++;\n    }\n    return new Point(left, right);\n  }\n","realPath":"solr/contrib/analytics/src/java/org/apache/solr/analytics/util/OrdinalCalculator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"N"}],"commitId":"31b350e8040cbe30c4e85b7fb82eab4b6afd81c7","commitMessage":"@@@SOLR-14426 Move auxiliary classes to nested classes (#1487)\n\n","date":"2020-05-07 23:04:06","modifiedFileCount":"67","status":"M","submitter":"Mike Drob"}]
