[{"authorTime":"2015-11-13 06:52:06","codes":[{"authorDate":"2015-11-13 06:52:06","commitOrder":1,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal = (int) minMaxVals.get(contextDoc);\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":2218,"groupId":"27937","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal = (int) minMaxVals.get(contextDoc);\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2164,"status":"B"},{"authorDate":"2015-11-13 06:52:06","commitOrder":1,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":2457,"groupId":"37970","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2393,"status":"B"}],"commitId":"918476e0ac207fc2a0454e9047857cd78f68fa4a","commitMessage":"@@@SOLR-6168: Add a 'sort' local param to the collapse QParser to support using complex sort options to select the representitive doc for each collapsed group\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1714133 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-11-13 06:52:06","modifiedFileCount":"4","status":"B","submitter":"Chris M. Hostetter"},{"authorTime":"2015-11-13 06:52:06","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int valuesDocID = minMaxVals.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxVals.advance(contextDoc);\n      }\n\n      int minMaxVal;\n      if (valuesDocID == contextDoc) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2016-10-03 03:18:22","endLine":2356,"groupId":"27937","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/48/58d1c44517ebc98feb4473e3e8d9ea734591b9.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal = (int) minMaxVals.get(contextDoc);\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2291,"status":"M"},{"authorDate":"2015-11-13 06:52:06","commitOrder":2,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":2457,"groupId":"37970","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2393,"status":"N"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"},{"authorTime":"2015-11-13 06:52:06","codes":[{"authorDate":"2018-02-13 22:53:19","commitOrder":3,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2018-02-13 22:53:19","endLine":2331,"groupId":"27937","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/f1c8957dcfe1197be0a0757d08949da52a089e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int valuesDocID = minMaxVals.docID();\n      if (valuesDocID < contextDoc) {\n        valuesDocID = minMaxVals.advance(contextDoc);\n      }\n\n      int minMaxVal;\n      if (valuesDocID == contextDoc) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2271,"status":"M"},{"authorDate":"2015-11-13 06:52:06","commitOrder":3,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2015-11-13 06:52:06","endLine":2457,"groupId":"37970","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/2de9ccf2cd80f51acdcd2eda1677caa0e26c1e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2393,"status":"N"}],"commitId":"8a5a4a6317e272cdda316a54fa74f60fa82f1497","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2018-02-13 22:53:19","modifiedFileCount":"34","status":"M","submitter":"Karl Wright"},{"authorTime":"2019-05-03 05:15:15","codes":[{"authorDate":"2018-02-13 22:53:19","commitOrder":4,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2018-02-13 22:53:19","endLine":2331,"groupId":"27937","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/f1c8957dcfe1197be0a0757d08949da52a089e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2271,"status":"N"},{"authorDate":"2019-05-03 05:15:15","commitOrder":4,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2019-05-03 05:15:15","endLine":2651,"groupId":"12700","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c0/e9223c7d37476dde416583cecc18f2646230c3.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores) {\n        this.score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2571,"status":"M"}],"commitId":"29a98825d0b70166c6c759d022f2c1426b145fe1","commitMessage":"@@@SOLR-13348: Speed up collapsing by avoiding scoring of ineligible documents\n","date":"2019-05-03 05:15:15","modifiedFileCount":"1","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2020-04-10 16:24:10","codes":[{"authorDate":"2020-04-10 16:24:10","commitOrder":5,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores) {\n              scores.put(pointer, scorer.score());\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          testValues.put(index, currentVal);\n          docs.put(index, globalDoc);\n          if(needsScores) {\n            scores.put(index, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2020-04-10 16:24:10","endLine":2341,"groupId":"24343","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/e4bed5c1c6853f002e8ee7eef39a1eae46964e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues[pointer])) {\n            testValues[pointer] = currentVal;\n            docs[pointer] = globalDoc;\n            if(needsScores) {\n              scores[pointer] = scorer.score();\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          if(index == testValues.length) {\n            testValues = ArrayUtil.grow(testValues);\n            docs = ArrayUtil.grow(docs);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n\n          testValues[index] = currentVal;\n          docs[index] = globalDoc;\n          if(needsScores) {\n            scores[index] = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2289,"status":"M"},{"authorDate":"2020-04-10 16:24:10","commitOrder":5,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs.put(pointer, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2020-04-10 16:24:10","endLine":2584,"groupId":"24354","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/e4bed5c1c6853f002e8ee7eef39a1eae46964e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs[pointer] = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores[pointer] = score;\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          if (index == docs.length) {\n            docs = ArrayUtil.grow(docs);\n            compareState.grow(docs.length);\n            if(needsScores) {\n              scores = ArrayUtil.grow(scores);\n            }\n          }\n          docs[index] = globalDoc;\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores[index] = score;\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2511,"status":"M"}],"commitId":"adbd714b37d794e9aa7615e61c431e42162c1d3c","commitMessage":"@@@SOLR-14365: CollapsingQParser - Avoiding always allocate int[] and float[] with size equals to number of unique values (WIP) (#1395)\n\n","date":"2020-04-10 16:24:10","modifiedFileCount":"1","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-09-29 21:49:49","codes":[{"authorDate":"2020-09-29 21:49:49","commitOrder":6,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores) {\n              scores.put(pointer, scorer.score());\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          testValues.put(index, currentVal);\n          docs.put(index, globalDoc);\n          if(needsScores) {\n            scores.put(index, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2020-09-29 21:49:49","endLine":2389,"groupId":"24343","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/1e740bd8fb3cd95358bd57ec7a4102fd9b392f.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores) {\n              scores.put(pointer, scorer.score());\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          testValues.put(index, currentVal);\n          docs.put(index, globalDoc);\n          if(needsScores) {\n            scores.put(index, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2337,"status":"M"},{"authorDate":"2020-09-29 21:49:49","commitOrder":6,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs.put(pointer, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2020-09-29 21:49:49","endLine":2634,"groupId":"24354","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9a/1e740bd8fb3cd95358bd57ec7a4102fd9b392f.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs.put(pointer, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2561,"status":"M"}],"commitId":"1dba76c0d31b6f0294c1f257e5a1fc51a722b82f","commitMessage":"@@@SOLR-14333: Implement toString in Collapse filter  (#1371)\n\n","date":"2020-09-29 21:49:49","modifiedFileCount":"2","status":"M","submitter":"Guna Sekhar Dora Kovvuru"},{"authorTime":"2021-01-06 01:00:56","codes":[{"authorDate":"2021-01-06 01:00:56","commitOrder":7,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores) {\n              scores.put(pointer, scorer.score());\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          testValues.put(index, currentVal);\n          docs.put(index, globalDoc);\n          if(needsScores) {\n            scores.put(index, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","date":"2021-01-06 01:00:56","endLine":2266,"groupId":"24343","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/6ec45dfccf4b7d94c5215e8e7a648432ac563d.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores) {\n              scores.put(pointer, scorer.score());\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          testValues.put(index, currentVal);\n          docs.put(index, globalDoc);\n          if(needsScores) {\n            scores.put(index, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2221,"status":"M"},{"authorDate":"2021-01-06 01:00:56","commitOrder":7,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs.put(pointer, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","date":"2021-01-06 01:00:56","endLine":2497,"groupId":"24354","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/6ec45dfccf4b7d94c5215e8e7a648432ac563d.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      \r\n      if(boosts && mergeBoost.boost(globalDoc)) {\n        boostDocs.add(globalDoc);\n        boostKeys.add(collapseKey);\n        return;\n      }\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs.put(pointer, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2431,"status":"M"}],"commitId":"a48e937f599bc1487df3321c490589b0d8820616","commitMessage":"@@@SOLR-15048: Fixed collapse parser behavior when dealing with docs boosted by QueryElevationComponent that are in the null group to treat them consistently regardless of collapse field type or group head selector\n","date":"2021-01-06 01:00:56","modifiedFileCount":"2","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-01-07 01:07:32","codes":[{"authorDate":"2021-01-07 01:07:32","commitOrder":8,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      final float currentVal = advanceAndGetCurrentVal(contextDoc);\n\n      final int idx;\n      if((idx = cmap.indexOf(collapseKey)) >= 0) {\n        int pointer = cmap.indexGet(idx);\n        if(comp.test(currentVal, testValues.get(pointer))) {\n          testValues.put(pointer, currentVal);\n          docs.put(pointer, globalDoc);\n          if(needsScores) {\n            scores.put(pointer, scorer.score());\n          }\n        }\n      } else {\n        ++index;\n        cmap.put(collapseKey, index);\n        testValues.put(index, currentVal);\n        docs.put(index, globalDoc);\n        if(needsScores) {\n          scores.put(index, scorer.score());\n        }\n      }\n    }\n","date":"2021-01-07 01:07:32","endLine":2204,"groupId":"112139","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/ccaed8782b67bd1d6857cfc7865fef39b5701e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n\n      int minMaxVal;\n      if (minMaxVals.advanceExact(contextDoc)) {\n        minMaxVal = (int) minMaxVals.longValue();\n      } else {\n        minMaxVal = 0;\n      }\n\n      float currentVal = Float.intBitsToFloat(minMaxVal);\n\n      if(collapseKey != nullValue) {\n        final int idx;\n        if((idx = cmap.indexOf(collapseKey)) >= 0) {\n          int pointer = cmap.indexGet(idx);\n          if(comp.test(currentVal, testValues.get(pointer))) {\n            testValues.put(pointer, currentVal);\n            docs.put(pointer, globalDoc);\n            if(needsScores) {\n              scores.put(pointer, scorer.score());\n            }\n          }\n        } else {\n          ++index;\n          cmap.put(collapseKey, index);\n          testValues.put(index, currentVal);\n          docs.put(index, globalDoc);\n          if(needsScores) {\n            scores.put(index, scorer.score());\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if(comp.test(currentVal, nullCompVal)) {\n          nullCompVal = currentVal;\n          nullDoc = globalDoc;\n          if(needsScores) {\n            nullScore = scorer.score();\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if(needsScores) {\n          nullScores.add(scorer.score());\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2182,"status":"M"},{"authorDate":"2021-01-07 01:07:32","commitOrder":8,"curCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = computeScoreIfNeeded4Collapse();\n\n      final int idx;\n      if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n        \r\n        int pointer = cmap.indexGet(idx);\n        if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n          docs.put(pointer, globalDoc);\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(pointer, score);\n          }\n        }\n      } else {\n        \r\n        ++index;\n        cmap.put(collapseKey, index);\n        docs.put(index, globalDoc);\n        compareState.setGroupValues(index, contextDoc);\n        if(needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          scores.put(index, score);\n        }\n      }\n    }\n","date":"2021-01-07 01:07:32","endLine":2425,"groupId":"112139","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"collapse","params":"(intcollapseKey@intcontextDoc@intglobalDoc)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a9/ccaed8782b67bd1d6857cfc7865fef39b5701e.src","preCode":"    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {\n      float score = 0;\n\n      if (needsScores4Collapsing) {\n        score = scorer.score();\n      }\n\n      if (collapseKey != nullValue) {\n        final int idx;\n        if ((idx = cmap.indexOf(collapseKey)) >= 0) {\n          \r\n          int pointer = cmap.indexGet(idx);\n          if (compareState.testAndSetGroupValues(pointer, contextDoc)) {\n            docs.put(pointer, globalDoc);\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              scores.put(pointer, score);\n            }\n          }\n        } else {\n          \r\n          ++index;\n          cmap.put(collapseKey, index);\n          docs.put(index, globalDoc);\n          compareState.setGroupValues(index, contextDoc);\n          if(needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            scores.put(index, score);\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n        if (-1 == nullDoc) {\n          \r\n          compareState.setNullGroupValues(contextDoc);\n          nullDoc = globalDoc;\n          if (needsScores) {\n            if (!needsScores4Collapsing) {\n              score = scorer.score();\n            }\n            nullScore = score;\n          }\n        } else {\n          \r\n          if (compareState.testAndSetNullGroupValues(contextDoc)) {\n            nullDoc = globalDoc;\n            if (needsScores) {\n              if (!needsScores4Collapsing) {\n                score = scorer.score();\n              }\n              nullScore = score;\n            }\n          }\n        }\n      } else if(this.nullPolicy == NullPolicy.EXPAND.getCode()) {\n        this.collapsedSet.set(globalDoc);\n        if (needsScores) {\n          if (!needsScores4Collapsing) {\n            score = scorer.score();\n          }\n          nullScores.add(score);\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":2396,"status":"M"}],"commitId":"07071ca8e107d184f9dfc2a2271b5dcaaceda650","commitMessage":"@@@SOLR-15047: Fix collapse parser behavior when collapsing on numeric fields to differentiate '0' group from null group\n","date":"2021-01-07 01:07:32","modifiedFileCount":"2","status":"M","submitter":"Chris Hostetter"}]
