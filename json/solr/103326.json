[{"authorTime":"2016-05-26 01:42:11","codes":[{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n","date":"2016-05-26 01:42:11","endLine":341,"groupId":"54031","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocsWithField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/af/9ea952f6e27496597155605ce2dd009b5af1b3.src","preCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"B"},{"authorDate":"2016-05-26 01:42:11","commitOrder":1,"curCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n","date":"2016-05-26 01:42:11","endLine":228,"groupId":"54031","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocsWithField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/11/92f4b77c8a5ca7b3b081b3cbb831d5161eaa2c.src","preCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":190,"status":"B"}],"commitId":"366f8d18fe3ac9c9fb93493fe60d2bf4157de032","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-26 01:42:11","modifiedFileCount":"50","status":"B","submitter":"Noble Paul"},{"authorTime":"2016-10-03 03:18:22","codes":[{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, ints.nextDoc());\n        assertEquals(i, ints.longValue());\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, numInts.nextDoc());\n        assertEquals(i, numInts.longValue());\n      }\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":334,"groupId":"103326","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testDocsWithField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/2c381f84ee2d3f02403e5f701ee19571254f48.src","preCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER, true);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.DOUBLE_POINT_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.INT_POINT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.INT_POINT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.INT_POINT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.INT_POINT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":303,"status":"M"},{"authorDate":"2016-10-03 03:18:22","commitOrder":2,"curCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, ints.nextDoc());\n        assertEquals(i, ints.longValue());\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (i%2 == 0) {\n        assertEquals(i, numInts.nextDoc());\n        assertEquals(i, numInts.longValue());\n      }\n    }\n  }\n","date":"2016-10-03 03:18:22","endLine":225,"groupId":"103326","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testDocsWithField","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c047bcb3a10293e0e49cad7c003fe6f6ca2f01.src","preCode":"  public void testDocsWithField() throws Exception {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    cache.getNumerics(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n\n    \r\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    Bits bits = cache.getDocsWithField(reader, \"theDouble\", FieldCache.LEGACY_DOUBLE_PARSER);\n\n    \r\n    assertEquals(2, cache.getCacheEntries().length);\n    assertTrue(bits instanceof Bits.MatchAllBits);\n\n    NumericDocValues ints = cache.getNumerics(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(4, cache.getCacheEntries().length);\n    Bits docsWithField = cache.getDocsWithField(reader, \"sparse\", FieldCache.LEGACY_INT_PARSER);\n    assertEquals(4, cache.getCacheEntries().length);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, ints.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n\n    NumericDocValues numInts = cache.getNumerics(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER, random().nextBoolean());\n    docsWithField = cache.getDocsWithField(reader, \"numInt\", FieldCache.LEGACY_INT_PARSER);\n    for (int i = 0; i < docsWithField.length(); i++) {\n      if (i%2 == 0) {\n        assertTrue(docsWithField.get(i));\n        assertEquals(i, numInts.get(i));\n      } else {\n        assertFalse(docsWithField.get(i));\n      }\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":194,"status":"M"}],"commitId":"3182cd9872af3cb73a1f73e36de68b8d76646e59","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-10-03 03:18:22","modifiedFileCount":"570","status":"M","submitter":"Karl Wright"}]
