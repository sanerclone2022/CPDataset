[{"authorTime":"2021-02-19 21:40:23","codes":[{"authorDate":"2021-02-19 21:40:23","commitOrder":11,"curCode":"  private static void addSuccess(NamedList<Object> results, String key, Object value) {\n    SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n    if (success == null) {\n      success = new SimpleOrderedMap<>();\n      results.add(\"success\", success);\n    }\n    success.add(key, value);\n  }\n","date":"2021-02-19 21:40:23","endLine":393,"groupId":"41172","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"addSuccess","params":"(NamedList<Object>results@Stringkey@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/43/9d7c7d6907172cf1dc79e896bd41e04ca888f6.src","preCode":"  private static void addSuccess(NamedList<Object> results, String key, Object value) {\n    SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n    if (success == null) {\n      success = new SimpleOrderedMap<>();\n      results.add(\"success\", success);\n    }\n    success.add(key, value);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollectionHandlingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":386,"status":"B"},{"authorDate":"2021-02-19 21:40:23","commitOrder":11,"curCode":"  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n      \r\n      \r\n      \r\n      ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, message,\n          ccc.getSolrCloudManager(), ccc.getZkStateReader());\n    } else {\n      \r\n      ccc.offerStateUpdate(Utils.toJSON(message));\n    }\n\n    \r\n    clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, sliceName, ccc.getZkStateReader());\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        CollectionHandlingUtils.CREATE_NODE_SET, message.getStr(CollectionHandlingUtils.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    CollectionHandlingUtils.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      new AddReplicaCmd(ccc).addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      \r\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ccc).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n","date":"2021-02-19 21:40:23","endLine":138,"groupId":"41172","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"call","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedListresults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/bcaec8873a7bf13f236d6305242960b0ded0ff.src","preCode":"  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n      \r\n      \r\n      \r\n      ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, message,\n          ccc.getSolrCloudManager(), ccc.getZkStateReader());\n    } else {\n      \r\n      ccc.offerStateUpdate(Utils.toJSON(message));\n    }\n\n    \r\n    clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, sliceName, ccc.getZkStateReader());\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        CollectionHandlingUtils.CREATE_NODE_SET, message.getStr(CollectionHandlingUtils.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    CollectionHandlingUtils.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      new AddReplicaCmd(ccc).addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      \r\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ccc).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"MB"}],"commitId":"e7c80f6445a04cb3d1b49d85d773fde283c916fe","commitMessage":"@@@SOLR-15157: refactor Collection API to separate from Overseer and message handling abstractions (#2390)\n\nNo functional changes. In preparation of distributing the Collection API command execution.","date":"2021-02-19 21:40:23","modifiedFileCount":"42","status":"M","submitter":"Ilan Ginzburg"},{"authorTime":"2021-02-19 21:40:23","codes":[{"authorDate":"2021-07-08 04:15:36","commitOrder":12,"curCode":"  private static void addSuccess(NamedList<Object> results, String key, Object value) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n    if (success == null) {\n      success = new SimpleOrderedMap<>();\n      results.add(\"success\", success);\n    }\n    success.add(key, value);\n  }\n","date":"2021-07-08 04:15:36","endLine":365,"groupId":"41172","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"addSuccess","params":"(NamedList<Object>results@Stringkey@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/34817554376e47cdfacbfa6cb7c60ecd2e2755.src","preCode":"  private static void addSuccess(NamedList<Object> results, String key, Object value) {\n    SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n    if (success == null) {\n      success = new SimpleOrderedMap<>();\n      results.add(\"success\", success);\n    }\n    success.add(key, value);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollectionHandlingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"M"},{"authorDate":"2021-02-19 21:40:23","commitOrder":12,"curCode":"  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n      \r\n      \r\n      \r\n      ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, message,\n          ccc.getSolrCloudManager(), ccc.getZkStateReader());\n    } else {\n      \r\n      ccc.offerStateUpdate(Utils.toJSON(message));\n    }\n\n    \r\n    clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, sliceName, ccc.getZkStateReader());\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        CollectionHandlingUtils.CREATE_NODE_SET, message.getStr(CollectionHandlingUtils.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    CollectionHandlingUtils.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      new AddReplicaCmd(ccc).addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      \r\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ccc).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n","date":"2021-02-19 21:40:23","endLine":138,"groupId":"41172","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"call","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedListresults)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/14/bcaec8873a7bf13f236d6305242960b0ded0ff.src","preCode":"  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n      \r\n      \r\n      \r\n      ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, message,\n          ccc.getSolrCloudManager(), ccc.getZkStateReader());\n    } else {\n      \r\n      ccc.offerStateUpdate(Utils.toJSON(message));\n    }\n\n    \r\n    clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, sliceName, ccc.getZkStateReader());\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        CollectionHandlingUtils.CREATE_NODE_SET, message.getStr(CollectionHandlingUtils.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    CollectionHandlingUtils.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      new AddReplicaCmd(ccc).addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      \r\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ccc).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-07-13 23:49:56","codes":[{"authorDate":"2021-07-08 04:15:36","commitOrder":13,"curCode":"  private static void addSuccess(NamedList<Object> results, String key, Object value) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n    if (success == null) {\n      success = new SimpleOrderedMap<>();\n      results.add(\"success\", success);\n    }\n    success.add(key, value);\n  }\n","date":"2021-07-08 04:15:36","endLine":365,"groupId":"102444","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"addSuccess","params":"(NamedList<Object>results@Stringkey@Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/80/34817554376e47cdfacbfa6cb7c60ecd2e2755.src","preCode":"  private static void addSuccess(NamedList<Object> results, String key, Object value) {\n    @SuppressWarnings(\"unchecked\")\n    SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n    if (success == null) {\n      success = new SimpleOrderedMap<>();\n      results.add(\"success\", success);\n    }\n    success.add(key, value);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CollectionHandlingUtils.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":357,"status":"N"},{"authorDate":"2021-07-13 23:49:56","commitOrder":13,"curCode":"  public void call(ClusterState clusterState, ZkNodeProps message, NamedList<Object> results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n      \r\n      \r\n      \r\n      ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, message,\n          ccc.getSolrCloudManager(), ccc.getZkStateReader());\n    } else {\n      \r\n      ccc.offerStateUpdate(Utils.toJSON(message));\n    }\n\n    \r\n    clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, sliceName, ccc.getZkStateReader());\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        CollectionHandlingUtils.CREATE_NODE_SET, message.getStr(CollectionHandlingUtils.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    CollectionHandlingUtils.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList<Object> addResult = new NamedList<>();\n    try {\n      new AddReplicaCmd(ccc).addReplica(clusterState, addReplicasProps, addResult, () -> {\n        @SuppressWarnings(\"unchecked\")\n        NamedList<Object> addResultFailure = (NamedList<Object>) addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          @SuppressWarnings(\"unchecked\")\n          SimpleOrderedMap<Object> failure = (SimpleOrderedMap<Object>) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap<>();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll(addResultFailure);\n        } else {\n          @SuppressWarnings(\"unchecked\")\n          SimpleOrderedMap<Object> success = (SimpleOrderedMap<Object>) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap<>();\n            results.add(\"success\", success);\n          }\n          @SuppressWarnings(\"unchecked\")\n          NamedList<Object> addResultSuccess = (NamedList<Object>) addResult.get(\"success\");\n          success.addAll(addResultSuccess);\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      \r\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ccc).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n","date":"2021-07-13 23:49:56","endLine":142,"groupId":"102444","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"call","params":"(ClusterStateclusterState@ZkNodePropsmessage@NamedList<Object>results)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/25/c4cb5dab2775533dd61c7199ec826bbcc4e949.src","preCode":"  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(COLLECTION_PROP);\n    String sliceName = message.getStr(SHARD_ID_PROP);\n    boolean waitForFinalState = message.getBool(CommonAdminParams.WAIT_FOR_FINAL_STATE, false);\n\n    log.info(\"Create shard invoked: {}\", message);\n    if (extCollectionName == null || sliceName == null)\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"'collection' and 'shard' are required parameters\");\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ccc.getSolrCloudManager().getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n    DocCollection collection = clusterState.getCollection(collectionName);\n\n    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));\n    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));\n    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));\n\n    if (numNrtReplicas + numTlogReplicas <= 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + \" + \" + TLOG_REPLICAS + \" must be greater than 0\");\n    }\n\n    if (ccc.getDistributedClusterStateUpdater().isDistributedStateUpdate()) {\n      \r\n      \r\n      \r\n      ccc.getDistributedClusterStateUpdater().doSingleStateUpdate(DistributedClusterStateUpdater.MutatingCommand.CollectionCreateShard, message,\n          ccc.getSolrCloudManager(), ccc.getZkStateReader());\n    } else {\n      \r\n      ccc.offerStateUpdate(Utils.toJSON(message));\n    }\n\n    \r\n    clusterState = CollectionHandlingUtils.waitForNewShard(collectionName, sliceName, ccc.getZkStateReader());\n\n    String async = message.getStr(ASYNC);\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, collectionName,\n        SHARD_ID_PROP, sliceName,\n        ZkStateReader.NRT_REPLICAS, String.valueOf(numNrtReplicas),\n        ZkStateReader.TLOG_REPLICAS, String.valueOf(numTlogReplicas),\n        ZkStateReader.PULL_REPLICAS, String.valueOf(numPullReplicas),\n        CollectionHandlingUtils.CREATE_NODE_SET, message.getStr(CollectionHandlingUtils.CREATE_NODE_SET),\n        CommonAdminParams.WAIT_FOR_FINAL_STATE, Boolean.toString(waitForFinalState));\n\n    Map<String, Object> propertyParams = new HashMap<>();\n    CollectionHandlingUtils.addPropertyParams(message, propertyParams);\n    addReplicasProps = addReplicasProps.plus(propertyParams);\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    final NamedList addResult = new NamedList();\n    try {\n      new AddReplicaCmd(ccc).addReplica(clusterState, addReplicasProps, addResult, () -> {\n        Object addResultFailure = addResult.get(\"failure\");\n        if (addResultFailure != null) {\n          SimpleOrderedMap failure = (SimpleOrderedMap) results.get(\"failure\");\n          if (failure == null) {\n            failure = new SimpleOrderedMap();\n            results.add(\"failure\", failure);\n          }\n          failure.addAll((NamedList) addResultFailure);\n        } else {\n          SimpleOrderedMap success = (SimpleOrderedMap) results.get(\"success\");\n          if (success == null) {\n            success = new SimpleOrderedMap();\n            results.add(\"success\", success);\n          }\n          success.addAll((NamedList) addResult.get(\"success\"));\n        }\n      });\n    } catch (Assign.AssignmentException e) {\n      \r\n      ZkNodeProps deleteShard = new ZkNodeProps(COLLECTION_PROP, collectionName, SHARD_ID_PROP, sliceName, ASYNC, async);\n      new DeleteShardCmd(ccc).call(clusterState, deleteShard, results);\n      throw e;\n    }\n\n    log.info(\"Finished create command on all shards for collection: {}\", collectionName);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/api/collections/CreateShardCmd.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
