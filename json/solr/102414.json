[{"authorTime":"2015-09-02 00:13:38","codes":[{"authorDate":"2015-09-02 00:13:38","commitOrder":12,"curCode":"  private ContextKey closeExistingElectionContext(CoreDescriptor cd) {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.close();\n      electionContexts.remove(contextKey);\n    }\n    \n    return contextKey;\n  }\n","date":"2015-09-02 00:13:38","endLine":506,"groupId":"11237","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"closeExistingElectionContext","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/d48d956537267feedce9fd7ffa22bccee61b22.src","preCode":"  private ContextKey closeExistingElectionContext(CoreDescriptor cd) {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.close();\n      electionContexts.remove(contextKey);\n    }\n    \n    return contextKey;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"B"},{"authorDate":"2015-09-02 00:13:38","commitOrder":12,"curCode":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    \r\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    LeaderElector leaderElector = new LeaderElector(zkClient, contextKey, electionContexts);\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n","date":"2015-09-02 00:13:38","endLine":1107,"groupId":"46560","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"joinElection","params":"(CoreDescriptorcd@booleanafterExpiration@booleanjoinAtHead)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/d48d956537267feedce9fd7ffa22bccee61b22.src","preCode":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    \r\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    LeaderElector leaderElector = new LeaderElector(zkClient, contextKey, electionContexts);\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1074,"status":"MB"}],"commitId":"442963d020a1b543175d0a0180b347cc97465625","commitMessage":"@@@SOLR-7844: Zookeeper session expiry during shard leader election can cause multiple leaders.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1700603 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-09-02 00:13:38","modifiedFileCount":"10","status":"M","submitter":"Mark Robert Miller"},{"authorTime":"2020-12-01 03:05:48","codes":[{"authorDate":"2015-09-02 00:13:38","commitOrder":13,"curCode":"  private ContextKey closeExistingElectionContext(CoreDescriptor cd) {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.close();\n      electionContexts.remove(contextKey);\n    }\n    \n    return contextKey;\n  }\n","date":"2015-09-02 00:13:38","endLine":506,"groupId":"102414","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"closeExistingElectionContext","params":"(CoreDescriptorcd)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/d48d956537267feedce9fd7ffa22bccee61b22.src","preCode":"  private ContextKey closeExistingElectionContext(CoreDescriptor cd) {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.close();\n      electionContexts.remove(contextKey);\n    }\n    \n    return contextKey;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":492,"status":"N"},{"authorDate":"2020-12-01 03:05:48","commitOrder":13,"curCode":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    \r\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    LeaderElector leaderElector = new LeaderElector(zkClient, contextKey, electionContexts);\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n","date":"2020-12-01 03:05:48","endLine":1459,"groupId":"102414","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"joinElection","params":"(CoreDescriptorcd@booleanafterExpiration@booleanjoinAtHead)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/28/fcf73512b679cb3de6b5acad6ef09a3e8789a7.src","preCode":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    \r\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n\n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n\n    ElectionContext prevContext = electionContexts.get(contextKey);\n\n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n\n    String shardId = cd.getCloudDescriptor().getShardId();\n\n    Map<String, Object> props = new HashMap<>();\n    \r\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n\n\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    LeaderElector leaderElector = new LeaderElector(zkClient, contextKey, electionContexts);\n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/cloud/ZkController.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1427,"status":"M"}],"commitId":"a0492840ee8690ddf48369665c744d16c7dd30cb","commitMessage":"@@@SOLR-12182: Don't persist base_url in ZK as the scheme is variable.  compute from node_name instead (#2010)\n\n","date":"2020-12-01 03:05:48","modifiedFileCount":"53","status":"M","submitter":"Timothy Potter"}]
