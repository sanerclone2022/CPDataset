[{"authorTime":"2018-12-13 07:14:37","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":62,"groupId":"21218","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/dc0e952ef1b95cf52c4a551d3ccfdc836ef7e7.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"NB"},{"authorDate":"2018-12-13 07:14:37","commitOrder":3,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2018-12-13 07:14:37","endLine":56,"groupId":"21218","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/eb/25b8306af7430395bef48d718ebd66491072ce.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":48,"status":"B"}],"commitId":"9728dbc1675bb7fd4ca84071d40ae3c0528e424c","commitMessage":"@@@SOLR-12791.  SOLR-13067: Fix test failure for BasicAuthIntegrationTest\nMake PkiAuthenticationIntegrationTest beast-able\n","date":"2018-12-13 07:14:37","modifiedFileCount":"2","status":"M","submitter":"Jan H?ydahl"},{"authorTime":"2019-08-13 05:03:27","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":62,"groupId":"21218","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/dc0e952ef1b95cf52c4a551d3ccfdc836ef7e7.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2019-08-13 05:03:27","commitOrder":4,"curCode":"  public static void setupCluster() throws Exception {\n    final String SECURITY_CONF = Utils.toJSONString\n      (makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n               \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    \n    configureCluster(2)\n      .addConfig(\"conf\", configset(\"cloud-minimal\"))\n      .withSecurityJson(SECURITY_CONF)\n      .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2019-08-13 05:03:54","endLine":59,"groupId":"21218","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0c/220c96162209aeeb0a110c3ae01ad550444b87.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"c7822c393e6affa77c233f9e8e9bf9d8aeb12578","commitMessage":"@@@SOLR-13464: Test work arounds\n\n * Refactor existing work around in BasicAuthIntegrationTest up into SolrCloudAuthTestCase for re-use in JWTAuthPluginIntegrationTest\n\n * Simplify BasicAuthOnSingleNodeTest and PKIAuthenticationIntegrationTest to use their existing (static) security settings on creation of MiniSolrCloud.  Since they no longer modify security.json once the nodes are alive.  the issue no longer affects them\n","date":"2019-08-13 05:03:54","modifiedFileCount":"5","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-06-03 06:17:26","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":5,"curCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2018-11-30 01:58:51","endLine":62,"groupId":"102798","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1e/dc0e952ef1b95cf52c4a551d3ccfdc836ef7e7.src","preCode":"  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", getFile(\"solrj\").toPath().resolve(\"solr\").resolve(\"configsets\").resolve(\"streaming\").resolve(\"conf\"))\n        .configure();\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/graph/GraphTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":56,"status":"N"},{"authorDate":"2021-06-03 06:17:26","commitOrder":5,"curCode":"  public static void setupCluster() throws Exception {\n    final String SECURITY_CONF = Utils.toJSONString\n      (Map.of(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n          \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    \n    configureCluster(2)\n      .addConfig(\"conf\", configset(\"cloud-minimal\"))\n      .withSecurityJson(SECURITY_CONF)\n      .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","date":"2021-06-03 06:17:26","endLine":59,"groupId":"102798","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"setupCluster","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/78/7da2632a4e36ad109583e36ff91da0e626198b.src","preCode":"  public static void setupCluster() throws Exception {\n    final String SECURITY_CONF = Utils.toJSONString\n      (makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n               \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    \n    configureCluster(2)\n      .addConfig(\"conf\", configset(\"cloud-minimal\"))\n      .withSecurityJson(SECURITY_CONF)\n      .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n  }\n","realPath":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"}],"commitId":"c8e06a7298a2745c2b83102169073e2f8e8eceb5","commitMessage":"@@@SOLR-15385 Address many rawtypes warnings (#107)\n\nAddressed significant usage of raw types with Class.  Map.  and SolrRequest; removed over 400 SuppressWarning annotations.\n\nMap construction was replaced with Map.of when immutability was possible.  and Utils.makeMap when a mutable map was required.\n\nDiscovered a potential bug in the PackageStore tests where not all assertions were being verified - these tests will be fixed separately.\n\nCo-authored-by: David Smiley <dsmiley@salesforce.com>","date":"2021-06-03 06:17:26","modifiedFileCount":"244","status":"M","submitter":"Mike Drob"}]
