[{"authorTime":"2017-08-26 17:07:19","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":1,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2017-08-26 17:07:19","endLine":66,"groupId":"9245","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/305b11aecdb3c9955ea8e66c9ec15134de61f1.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2017-08-26 17:07:19","commitOrder":1,"curCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","date":"2017-08-26 17:07:19","endLine":95,"groupId":"9245","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/f46b1e2df5f1b5b554dcbe70364cd9b71af010.src","preCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"B"}],"commitId":"ddcb98e9c3e0d5f6acf59f872e8324e7ad144506","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-08-26 17:07:19","modifiedFileCount":"90","status":"B","submitter":"Karl Wright"},{"authorTime":"2017-12-05 10:08:58","codes":[{"authorDate":"2017-08-26 17:07:19","commitOrder":2,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2017-08-26 17:07:19","endLine":66,"groupId":"9245","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/08/305b11aecdb3c9955ea8e66c9ec15134de61f1.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2017-12-05 10:08:58","commitOrder":2,"curCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","date":"2017-12-05 10:09:41","endLine":97,"groupId":"9245","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b9/4c5dc58d5138490556317328fff38a241d6c8e.src","preCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":55,"status":"M"}],"commitId":"8750e5f2a97e2011da7a3c821dca38a31d0f9bf1","commitMessage":"@@@SOLR-11485: Add olsRegress.  spline and derivative Stream Evaluators\n","date":"2017-12-05 10:09:41","modifiedFileCount":"46","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2019-07-30 22:01:15","codes":[{"authorDate":"2019-07-30 22:01:15","commitOrder":3,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    } else if (value instanceof String) {\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2019-07-30 22:42:06","endLine":68,"groupId":"0","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/dce630f91d19fbbffc3d08f5e1309d8321805a.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2019-07-30 22:01:15","commitOrder":3,"curCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      \r\n      \r\n      try {\n        List<Number> vector = new ArrayList();\n        boolean allDoubles = true;\n        for(Object o : (Collection)value) {\n          if(o instanceof String) {\n            Double d = Double.parseDouble(o.toString());\n            vector.add(d);\n          } else {\n            allDoubles = false;\n            break;\n          }\n        }\n        if(allDoubles) {\n          return vector;\n        }\n      } catch(Exception e) {\n\n      }\n\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","date":"2019-07-30 22:42:06","endLine":120,"groupId":"9245","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/a5/fae7e6af0a96959817a5c782aeeeda3564280c.src","preCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"62955b1a4e98c4a583f9c6c5d71adc7947423b90","commitMessage":"@@@SOLR-13625: Fix broken test cases\n","date":"2019-07-30 22:42:06","modifiedFileCount":"34","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-08 09:31:51","codes":[{"authorDate":"2019-07-30 22:01:15","commitOrder":4,"curCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    } else if (value instanceof String) {\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","date":"2019-07-30 22:42:06","endLine":68,"groupId":"10161","id":7,"instanceNumber":1,"isCurCommit":1,"methodName":"convertToNumber","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e6/dce630f91d19fbbffc3d08f5e1309d8321805a.src","preCode":"  private BigDecimal convertToNumber(Object value){\n    if(null == value){\n      return null;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    } else if (value instanceof String) {\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else{\n      throw new StreamEvaluatorException(\"Numeric value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveNumericListEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"N"},{"authorDate":"2020-06-08 09:31:51","commitOrder":4,"curCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      \r\n      \r\n      try {\n        List<Number> vector = new ArrayList<>();\n        boolean allDoubles = true;\n        for(Object o : (Collection)value) {\n          if(o instanceof String) {\n            Double d = Double.parseDouble(o.toString());\n            vector.add(d);\n          } else {\n            allDoubles = false;\n            break;\n          }\n        }\n        if(allDoubles) {\n          return vector;\n        }\n      } catch(Exception e) {\n\n      }\n\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","date":"2020-06-08 09:31:51","endLine":120,"groupId":"10161","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"normalizeInputType","params":"(Objectvalue)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/30/455be4ea6456ea6965ed96bf89748772de65d9.src","preCode":"  protected Object normalizeInputType(Object value){\n    if(null == value){\n      return null;\n    } else if (value instanceof VectorFunction) {\n      return value;\n    }\n    else if(value instanceof Double){\n      if(Double.isNaN((Double)value)){\n        return null;\n      }\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof BigDecimal){\n      return (BigDecimal)value;\n    }\n    else if(value instanceof Number){\n      return new BigDecimal(value.toString());\n    }\n    else if(value instanceof Collection){\n      \r\n      \r\n      try {\n        List<Number> vector = new ArrayList();\n        boolean allDoubles = true;\n        for(Object o : (Collection)value) {\n          if(o instanceof String) {\n            Double d = Double.parseDouble(o.toString());\n            vector.add(d);\n          } else {\n            allDoubles = false;\n            break;\n          }\n        }\n        if(allDoubles) {\n          return vector;\n        }\n      } catch(Exception e) {\n\n      }\n\n      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else if(value.getClass().isArray()){\n      Stream<?> stream = Stream.empty();\n      if(value instanceof double[]){\n        stream = Arrays.stream((double[])value).boxed();\n      }\n      else if(value instanceof int[]){\n        stream = Arrays.stream((int[])value).boxed();\n      }\n      else if(value instanceof long[]){\n        stream = Arrays.stream((long[])value).boxed();\n      }\n      else if(value instanceof String[]){\n        stream = Arrays.stream((String[])value);\n      }      \n      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());\n    }\n    else{\n      \r\n      return value;\n    }\n\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/RecursiveEvaluator.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":57,"status":"M"}],"commitId":"7bf59a16bda85b19b68b639b395d143019a89fde","commitMessage":"@@@SOLR-14544: Fix or suppress warnings in solr/client/solrj/io/eval\n","date":"2020-06-08 09:31:51","modifiedFileCount":"110","status":"M","submitter":"Erick Erickson"}]
