[{"authorTime":"2016-02-20 09:03:06","codes":[{"authorDate":"2016-04-01 04:23:59","commitOrder":2,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    \r\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","date":"2016-04-01 04:24:51","endLine":245,"groupId":"10654","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bb/9b09df3e8c64b25d98eb0778e42d0a34b798e9.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    \r\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":217,"status":"B"},{"authorDate":"2016-02-20 09:03:06","commitOrder":2,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","date":"2016-02-20 09:03:43","endLine":202,"groupId":"33025","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3b/7aa90e16e30744d996fd1cf4d4192f115e344a.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":177,"status":"NB"}],"commitId":"3500b45d6d28253d44e48ff8e444774a5fb3ace0","commitMessage":"@@@SOLR-8888: Add shortestPath Streaming Expression\n","date":"2016-04-01 04:24:51","modifiedFileCount":"1","status":"M","submitter":"jbernste"},{"authorTime":"2016-04-20 00:06:32","codes":[{"authorDate":"2016-04-20 00:06:32","commitOrder":3,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    \r\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","date":"2016-04-20 00:06:32","endLine":249,"groupId":"10654","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/74/18e0f2523891ec02b5b844f22404c619f5064c.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    \r\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":221,"status":"M"},{"authorDate":"2016-04-20 00:06:32","commitOrder":3,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","date":"2016-04-20 00:06:32","endLine":208,"groupId":"33025","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/1a/6139ee42701342024ea2d4e280d3a779c4ebb8.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":183,"status":"M"}],"commitId":"8ba1a3880bdcfb0a8764e997fae7a79cc29142a4","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-04-20 00:06:32","modifiedFileCount":"43","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":4,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","date":"2016-05-23 14:35:53","endLine":276,"groupId":"10654","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6d/7b32af9a0a727a559516282e5c45366baf4a7f.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    \r\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":4,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","date":"2016-05-23 14:35:53","endLine":232,"groupId":"41164","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8d/3279ab55cfc721c9bae306c888876dfe213dba.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    for(Entry<String,String> param : params.entrySet()) {\n      String value = param.getValue();\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":206,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-07-12 08:10:27","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":5,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","date":"2016-05-23 14:35:53","endLine":276,"groupId":"10654","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6d/7b32af9a0a727a559516282e5c45366baf4a7f.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"N"},{"authorDate":"2016-07-12 08:10:27","commitOrder":5,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","date":"2016-07-17 10:36:30","endLine":251,"groupId":"41164","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/c4/343c687e144fb1b6c5ce44a1e690c39658acf6.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":222,"status":"M"}],"commitId":"fc3894e837701b78a4704cf27529c34c15666586","commitMessage":"@@@SOLR-9240:Support running the topic() Streaming Expression in parallel mode.\n","date":"2016-07-17 10:36:30","modifiedFileCount":"5","status":"M","submitter":"jbernste"},{"authorTime":"2017-03-23 09:15:50","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":6,"curCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","date":"2016-05-23 14:35:53","endLine":276,"groupId":"10105","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/6d/7b32af9a0a727a559516282e5c45366baf4a7f.src","preCode":"  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    \r\n    expression.addParameter(collection);\n\n    \r\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":248,"status":"N"},{"authorDate":"2017-03-23 09:15:50","commitOrder":6,"curCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(ID, id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","date":"2017-03-23 09:15:50","endLine":253,"groupId":"10105","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"toExpression","params":"(StreamFactoryfactory)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/cc/be8c1673c0b3238a58bea15abae38bbb1039d2.src","preCode":"  public StreamExpression toExpression(StreamFactory factory) throws IOException {\n    \r\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    expression.addParameter(checkpointCollection);\n    \r\n    expression.addParameter(collection);\n\n    ModifiableSolrParams mParams = new ModifiableSolrParams(params);\n    for(Entry<String, String[]> param : mParams.getMap().entrySet()) {\n      String value = String.join(\",\", param.getValue());\n\n      \r\n      \r\n      \r\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(), value));\n    }\n\n    \r\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"id\", id));\n    if(initialCheckpoint > -1) {\n      expression.addParameter(new StreamExpressionNamedParameter(\"initialCheckpoint\", Long.toString(initialCheckpoint)));\n    }\n    expression.addParameter(new StreamExpressionNamedParameter(\"checkpointEvery\", Long.toString(checkpointEvery)));\n\n    return expression;\n  }\n","realPath":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":224,"status":"M"}],"commitId":"eb587772ddecaea371b20feb955a197e80699f22","commitMessage":"@@@SOLR-6615: use constants for 'id'.  '_route_'.  '_version_'\n","date":"2017-03-23 09:15:50","modifiedFileCount":"48","status":"M","submitter":"Noble Paul"}]
