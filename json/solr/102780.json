[{"authorTime":"2021-04-06 00:57:24","codes":[{"authorDate":"2020-06-18 23:12:50","commitOrder":6,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2020-06-18 23:12:50","endLine":825,"groupId":"18961","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/10e18ec3f8283d3a93ed4728fe8defedf74380.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":749,"status":"NB"},{"authorDate":"2021-04-06 00:57:24","commitOrder":6,"curCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-04-06 00:57:24","endLine":1137,"groupId":"19296","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"assertCursorJQ","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7d/158aa23a5f0ccfdc226e924341ac8f9990fb01.src","preCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"B"}],"commitId":"59a59138668e9513060824d85ee375a1723f4bfb","commitMessage":"@@@SOLR-11921: Move \"cursorMark\" logic from QueryComponent to SearchHandler so it can work with things like QueryElevationComponent that modify the SortSpec in prepare().  as well as possible custom \"search\" components other then QueryComponent\n","date":"2021-04-06 00:57:24","modifiedFileCount":"9","status":"M","submitter":"Chris Hostetter"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2020-06-18 23:12:50","commitOrder":7,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2020-06-18 23:12:50","endLine":825,"groupId":"18961","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/22/10e18ec3f8283d3a93ed4728fe8defedf74380.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":749,"status":"N"},{"authorDate":"2021-07-08 04:15:36","commitOrder":7,"curCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-07-08 04:15:36","endLine":1136,"groupId":"19296","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCursorJQ","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/7576a44536af9ec981155e5fe2833bc2bdaf61.src","preCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    @SuppressWarnings({\"rawtypes\"})\n    Map rsp = (Map) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"M"}],"commitId":"201d56b350fa1b4e5f8361618f898a2155240c72","commitMessage":"@@@SOLR-15385 RawTypes Part V (#196)\n\n","date":"2021-07-08 04:15:36","modifiedFileCount":"88","status":"M","submitter":"Mike Drob"},{"authorTime":"2021-07-08 04:15:36","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":8,"curCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    List<?> previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      @SuppressWarnings({\"unchecked\"})\n      List<Map<Object,Object>> docs = (List<Map<Object, Object>>)(((Map<?, ?>)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      Map<?, ?> facetFields = (Map<?, ?>)((Map<?, ?>)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      List<?> facets = (List<?>)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","date":"2021-07-13 23:49:56","endLine":1006,"groupId":"102780","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"assertFullWalkNoDupsWithFacets","params":"(intmaxSize@SolrParamsparams)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/37/8574c5282e4ef5640946d05498ca4ddd1c7ea8.src","preCode":"  public SentinelIntSet assertFullWalkNoDupsWithFacets(int maxSize, SolrParams params)\n      throws Exception {\n\n    final String facetField = params.get(\"facet.field\");\n    assertNotNull(\"facet.field param not specified\", facetField);\n    assertFalse(\"facet.field param contains multiple values\", facetField.contains(\",\"));\n    assertEquals(\"facet.limit param not set to -1\", \"-1\", params.get(\"facet.limit\"));\n    final Map<String,MutableValueInt> facetCounts = new HashMap<>();\n    SentinelIntSet ids = new SentinelIntSet(maxSize, -1);\n    String cursorMark = CURSOR_MARK_START;\n    int docsOnThisPage = Integer.MAX_VALUE;\n    @SuppressWarnings({\"rawtypes\"})\n    List previousFacets = null;\n    while (0 < docsOnThisPage) {\n      String json = assertJQ(req(params, CURSOR_MARK_PARAM, cursorMark));\n      @SuppressWarnings({\"rawtypes\"})\n      Map rsp = (Map) fromJSONString(json);\n      assertTrue(\"response doesn't contain \" + CURSOR_MARK_NEXT + \": \" + json,\n                 rsp.containsKey(CURSOR_MARK_NEXT));\n      String nextCursorMark = (String)rsp.get(CURSOR_MARK_NEXT);\n      assertNotNull(CURSOR_MARK_NEXT + \" is null\", nextCursorMark);\n      List<Map<Object,Object>> docs = (List)(((Map)rsp.get(\"response\")).get(\"docs\"));\n      docsOnThisPage = docs.size();\n      if (null != params.getInt(CommonParams.ROWS)) {\n        int rows = params.getInt(CommonParams.ROWS);\n        assertTrue(\"Too many docs on this page: \" + rows + \" < \" + docsOnThisPage,\n                   docsOnThisPage <= rows);\n      }\n      if (0 == docsOnThisPage) {\n        assertEquals(\"no more docs, but \"+CURSOR_MARK_NEXT+\" isn't same\",\n                     cursorMark, nextCursorMark);\n      }\n      for (Map<Object,Object> doc : docs) {\n        int id = Integer.parseInt(doc.get(\"id\").toString());\n        assertFalse(\"walk already seen: \" + id, ids.exists(id));\n        ids.put(id);\n        assertFalse(\"id set bigger then max allowed (\"+maxSize+\"): \" + ids.size(),\n                    maxSize < ids.size());\n        Object facet = doc.get(facetField);\n        String facetString = null == facet ? null : facet.toString(); \r\n        MutableValueInt count = facetCounts.get(facetString);\n        if (null == count) {\n          count = new MutableValueInt();\n          facetCounts.put(facetString, count);\n        }\n        ++count.value;\n      }\n      cursorMark = nextCursorMark;\n\n      @SuppressWarnings({\"rawtypes\"})\n      Map facetFields = (Map)((Map)rsp.get(\"facet_counts\")).get(\"facet_fields\");\n      @SuppressWarnings({\"rawtypes\"})\n      List facets = (List)facetFields.get(facetField);\n      if (null != previousFacets) {\n        assertEquals(\"Facets not the same as on previous page:\\nprevious page facets: \"\n            + Arrays.toString(facets.toArray(new Object[facets.size()]))\n            + \"\\ncurrent page facets: \"\n            + Arrays.toString(previousFacets.toArray(new Object[previousFacets.size()])),\n            previousFacets, facets);\n      }\n      previousFacets = facets;\n    }\n\n    assertNotNull(\"previousFacets is null\", previousFacets);\n    assertEquals(\"Mismatch in number of facets: \", facetCounts.size(), previousFacets.size() / 2);\n    int pos;\n    for (pos = 0 ; pos < previousFacets.size() ; pos += 2) {\n      String label = (String)previousFacets.get(pos);\n      int expectedCount = ((Number)previousFacets.get(pos + 1)).intValue();\n      MutableValueInt count = facetCounts.get(label);\n      assertNotNull(\"Expected facet label #\" + (pos / 2) + \" not found: '\" + label + \"'\", count);\n      assertEquals(\"Facet count mismatch for label #\" + (pos / 2) + \" '\" + label + \"'\", expectedCount,\n                   facetCounts.get(label).value);\n      pos += 2;\n    }\n    return ids;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":933,"status":"M"},{"authorDate":"2021-07-08 04:15:36","commitOrder":8,"curCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","date":"2021-07-08 04:15:36","endLine":1136,"groupId":"102780","id":6,"instanceNumber":2,"isCurCommit":1,"methodName":"assertCursorJQ","params":"(SolrQueryRequestreq@String...tests)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/7576a44536af9ec981155e5fe2833bc2bdaf61.src","preCode":"  private static String assertCursorJQ(SolrQueryRequest req, String... tests) throws Exception {\n    String json = assertJQ(req, tests);\n    Map<?, ?> rsp = (Map<?, ?>) fromJSONString(json);\n    assertTrue(\"response doesn't contain \"+CURSOR_MARK_NEXT + \": \" + json,\n               rsp.containsKey(CURSOR_MARK_NEXT));\n    String next = (String)rsp.get(CURSOR_MARK_NEXT);\n    assertNotNull(CURSOR_MARK_NEXT + \" is null\", next);\n    return next;\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1128,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
