[{"authorTime":"2015-05-11 20:37:18","codes":[{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","date":"2015-05-11 20:37:18","endLine":152,"groupId":"35413","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":126,"status":"B"},{"authorDate":"2015-05-11 20:37:18","commitOrder":1,"curCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-05-11 20:37:18","endLine":626,"groupId":"58194","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/32/ba7f96454e46e64c77e60b785fae2461271f31.src","preCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":559,"status":"B"}],"commitId":"e50f4d94c74560d863df197f21bc87d21c212f8c","commitMessage":"@@@SOLR-7377: Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1678743 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-05-11 20:37:18","modifiedFileCount":"3","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2015-06-20 02:53:57","codes":[{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new StreamEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","date":"2015-06-20 02:53:57","endLine":150,"groupId":"35413","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/ef764448d34c5703ed5e7327acd3b09e6563ec.src","preCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2015-06-20 02:53:57","commitOrder":2,"curCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new StreamComparator(\"a_f\",ComparatorOrder.ASCENDING),new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new StreamComparator(\"a_f\",ComparatorOrder.ASCENDING),new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-20 02:53:57","endLine":859,"groupId":"58194","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/35/ef764448d34c5703ed5e7327acd3b09e6563ec.src","preCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":792,"status":"M"}],"commitId":"1ff66e90f1a5c209130bc39095f2f57107ee30d4","commitMessage":"@@@SOLR-7513.  SOLR-7528: Add Equalitors to Streaming Expressions\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1686481 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-20 02:53:57","modifiedFileCount":"16","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-06-24 21:07:09","codes":[{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n\n    try {\n      params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, \"collection1\", params);\n      ustream = new UniqueStream(stream, new FieldEqualitor(\"a_i\"));\n      throw new Exception(\"Equalitors did not match but no excepion was thrown\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid UniqueStream - substream comparator (sort) must be a superset of this stream's equalitor.\")) {\n        throw e;\n      }\n    }\n\n    del(\"*:*\");\n    commit();\n\n  }\n","date":"2015-06-24 21:07:09","endLine":162,"groupId":"35413","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new StreamEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":124,"status":"M"},{"authorDate":"2015-06-24 21:07:09","commitOrder":3,"curCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    try {\n      paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f desc,a_i desc\");\n      streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n      paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n      streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n      mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n      throw new Exception(\"Sorts did not match up and Exception was not not thrown.\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid MergeStream - both substream comparators (sort) must be a superset of this stream's comparator.\")) {\n        throw e;\n      }\n    }\n\n    try {\n      paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n      streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n      paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n      streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n      mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n      throw new Exception(\"Sorts did not match up and Exception was not not thrown.\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid MergeStream - both substream comparators (sort) must be a superset of this stream's comparator.\")) {\n        throw e;\n      }\n    }\n\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-06-24 21:07:09","endLine":912,"groupId":"58194","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8c/cc3148b7363eb4f9b7625c3474cad16e0ffd27.src","preCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new StreamComparator(\"a_f\",ComparatorOrder.ASCENDING),new StreamComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultiComp(new StreamComparator(\"a_f\",ComparatorOrder.ASCENDING),new StreamComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":816,"status":"M"}],"commitId":"33a4099b9850b4f5ee8f6fe237d07060a4272704","commitMessage":"@@@SOLR-7554: Add checks in Streams for incoming stream order\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1687258 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-06-24 21:07:09","modifiedFileCount":"18","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2015-07-04 22:24:35","codes":[{"authorDate":"2015-07-04 22:24:35","commitOrder":4,"curCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","date":"2015-07-04 22:24:35","endLine":151,"groupId":"35413","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/39b77576511aa84119410f06c2759a190fd198.src","preCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n\n    try {\n      params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n      stream = new CloudSolrStream(zkHost, \"collection1\", params);\n      ustream = new UniqueStream(stream, new FieldEqualitor(\"a_i\"));\n      throw new Exception(\"Equalitors did not match but no excepion was thrown\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid UniqueStream - substream comparator (sort) must be a superset of this stream's equalitor.\")) {\n        throw e;\n      }\n    }\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":125,"status":"M"},{"authorDate":"2015-07-04 22:24:35","commitOrder":4,"curCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","date":"2015-07-04 22:24:35","endLine":939,"groupId":"58194","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e7/39b77576511aa84119410f06c2759a190fd198.src","preCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    try {\n      paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f desc,a_i desc\");\n      streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n      paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n      streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n      mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n      throw new Exception(\"Sorts did not match up and Exception was not not thrown.\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid MergeStream - both substream comparators (sort) must be a superset of this stream's comparator.\")) {\n        throw e;\n      }\n    }\n\n    try {\n      paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n      streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n      paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n      streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n      mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n      throw new Exception(\"Sorts did not match up and Exception was not not thrown.\");\n    } catch(Exception e) {\n      if(!e.getMessage().equals(\"Invalid MergeStream - both substream comparators (sort) must be a superset of this stream's comparator.\")) {\n        throw e;\n      }\n    }\n\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":872,"status":"M"}],"commitId":"b22f711b6316df59789ac7421e972c0530cc0aef","commitMessage":"@@@SOLR-7707: Add StreamExpression Support to RollupStream\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1689168 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-04 22:24:35","modifiedFileCount":"17","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2016-05-05 15:05:25","codes":[{"authorDate":"2016-05-05 15:05:25","commitOrder":5,"curCode":"  public void testUniqueStream() throws Exception {\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":117,"groupId":"0","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testUniqueStream() throws Exception {\n\n    \r\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assert(tuples.size() == 4);\n    assertOrder(tuples, 0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":99,"status":"M"},{"authorDate":"2016-05-05 15:05:25","commitOrder":5,"curCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","date":"2016-05-05 15:05:25","endLine":1592,"groupId":"20489","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/b02ebadf479344ad8fe33a5aa3339235fd5455.src","preCode":"  private void testMergeStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\");\n    indexr(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n    streamFactory.withCollectionZkHost(\"collection1\", zkHost);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, \"collection1\", paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n    del(\"*:*\");\n    commit();\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1530,"status":"M"}],"commitId":"940281bb5d5ee299aa3965350216eb0e6c0e758d","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-05-05 15:05:25","modifiedFileCount":"49","status":"M","submitter":"Karl Wright"},{"authorTime":"2016-05-23 14:35:53","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":6,"curCode":"  public void testUniqueStream() throws Exception {\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":118,"groupId":"32949","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testUniqueStream() throws Exception {\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map params = mapParams(\"q\",\"*:*\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, params);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"M"},{"authorDate":"2016-05-23 14:35:53","commitOrder":6,"curCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":1613,"groupId":"20489","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    Map paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    Map paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    paramsA = mapParams(\"q\",\"id:(4 1)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 2 3)\",\"fl\",\"id,a_s,a_i\",\"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    paramsA = mapParams(\"q\",\"id:(2 4 1)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n\n    paramsB = mapParams(\"q\",\"id:(0 3)\",\"fl\",\"id,a_s,a_i,a_f\",\"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, paramsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1551,"status":"M"}],"commitId":"eae605b53294282e50452e60440c138a3529f11d","commitMessage":"@@@Merge remote-tracking branch 'origin/master'\n","date":"2016-05-23 14:35:53","modifiedFileCount":"309","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-11-14 15:03:37","codes":[{"authorDate":"2016-05-23 14:35:53","commitOrder":7,"curCode":"  public void testUniqueStream() throws Exception {\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n","date":"2016-05-23 14:35:53","endLine":118,"groupId":"32949","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/897598b96fa5c9895646b368ca346393d385e5.src","preCode":"  public void testUniqueStream() throws Exception {\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":100,"status":"N"},{"authorDate":"2016-11-14 15:03:37","commitOrder":7,"curCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","date":"2016-11-14 15:03:37","endLine":1619,"groupId":"20489","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/38/88a41484bf37a7cc226bd72e6a11f45ea4cfdf.src","preCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 0,2,1,3,4);\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assert(tuples.size() == 5);\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1557,"status":"M"}],"commitId":"b359636fd9f272f3617a97a276fa41f7dd252016","commitMessage":"@@@SOLR-9718: replace assert and assertTrue() to assertEquals()\n","date":"2016-11-14 15:03:37","modifiedFileCount":"1","status":"M","submitter":"Noble Paul"},{"authorTime":"2016-10-17 01:12:00","codes":[{"authorDate":"2016-10-17 01:12:00","commitOrder":8,"curCode":"public void testUniqueStream() throws Exception {\n\n  \r\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n  List<Tuple> tuples = getTuples(ustream);\n  assertEquals(4, tuples.size());\n  assertOrder(tuples, 0,1,3,4);\n\n}\n","date":"2016-11-16 10:33:58","endLine":139,"groupId":"27694","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testUniqueStream() throws Exception {\n\n    \r\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":121,"status":"M"},{"authorDate":"2016-10-17 01:12:00","commitOrder":8,"curCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","date":"2016-11-16 10:33:58","endLine":1870,"groupId":"27713","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/61/9845646f0543bbd6805943a29d15c73533b979.src","preCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTION, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1808,"status":"M"}],"commitId":"ace423e958182aa8ad6329f5cc1dc3ca6cd877c7","commitMessage":"@@@SOLR-9077: Streaming expressions should support collection alias\n","date":"2016-11-16 10:33:58","modifiedFileCount":"11","status":"M","submitter":"Kevin Risden"},{"authorTime":"2017-04-12 03:17:03","codes":[{"authorDate":"2017-04-12 03:17:03","commitOrder":9,"curCode":"public void testUniqueStream() throws Exception {\n\n  \r\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  StreamContext streamContext = new StreamContext();\n  SolrClientCache solrClientCache = new SolrClientCache();\n  streamContext.setSolrClientCache(solrClientCache);\n  try {\n    SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n    UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n    ustream.setStreamContext(streamContext);\n    List<Tuple> tuples = getTuples(ustream);\n    assertEquals(4, tuples.size());\n    assertOrder(tuples, 0, 1, 3, 4);\n  } finally {\n    solrClientCache.close();\n  }\n}\n","date":"2017-04-12 03:24:42","endLine":148,"groupId":"10853","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testUniqueStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"public void testUniqueStream() throws Exception {\n\n  \r\n  new UpdateRequest()\n      .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n      .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n      .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n      .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n      .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n      .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n  SolrParams sParams = StreamingTest.mapParams(\"q\", \"*:*\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n  CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams);\n  UniqueStream ustream = new UniqueStream(stream, new FieldEqualitor(\"a_f\"));\n  List<Tuple> tuples = getTuples(ustream);\n  assertEquals(4, tuples.size());\n  assertOrder(tuples, 0,1,3,4);\n\n}\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":123,"status":"M"},{"authorDate":"2017-04-12 03:17:03","commitOrder":9,"curCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try {\n      \r\n      SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n      CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n      CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING));\n      mstream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(mstream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      \r\n      sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n      streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n      streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING));\n      mstream.setStreamContext(streamContext);\n      tuples = getTuples(mstream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 4, 3, 2, 1, 0);\n\n      \r\n\n      sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n      streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n      streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), new FieldComparator(\"a_i\", ComparatorOrder.ASCENDING)));\n      mstream.setStreamContext(streamContext);\n      tuples = getTuples(mstream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 0, 2, 1, 3, 4);\n\n      sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n      streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n      sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n      streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n      mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\", ComparatorOrder.ASCENDING), new FieldComparator(\"a_i\", ComparatorOrder.DESCENDING)));\n      mstream.setStreamContext(streamContext);\n      tuples = getTuples(mstream);\n\n      assertEquals(5, tuples.size());\n      assertOrder(tuples, 2, 0, 1, 3, 4);\n    } finally {\n      solrClientCache.close();\n    }\n  }\n","date":"2017-04-12 03:24:42","endLine":2061,"groupId":"10853","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"testMergeStream","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/0d/e3aa052c87d83b30d7226f1bcbc4b526b1b0a6.src","preCode":"  public void testMergeStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    \r\n    SolrParams sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    SolrParams sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i asc\");\n    CloudSolrStream streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    MergeStream mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING));\n    List<Tuple> tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,1,2,3,4);\n\n    \r\n    sParamsA = mapParams(\"q\", \"id:(4 1)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 2 3)\", \"fl\", \"id,a_s,a_i\", \"sort\", \"a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 4,3,2,1,0);\n\n    \r\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i asc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.ASCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 0,2,1,3,4);\n\n    sParamsA = mapParams(\"q\", \"id:(2 4 1)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamA = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n\n    sParamsB = mapParams(\"q\", \"id:(0 3)\", \"fl\", \"id,a_s,a_i,a_f\", \"sort\", \"a_f asc,a_i desc\");\n    streamB = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsB);\n\n    mstream = new MergeStream(streamA, streamB, new MultipleFieldComparator(new FieldComparator(\"a_f\",ComparatorOrder.ASCENDING),new FieldComparator(\"a_i\",ComparatorOrder.DESCENDING)));\n    tuples = getTuples(mstream);\n\n    assertEquals(5, tuples.size());\n    assertOrder(tuples, 2,0,1,3,4);\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":1988,"status":"M"}],"commitId":"06a55b73b97db0a2cff490dcf40670079a953f60","commitMessage":"@@@SOLR-10274: The search Streaming Expression should work in non-SolrCloud mode\n","date":"2017-04-12 03:24:42","modifiedFileCount":"7","status":"M","submitter":"Joel Bernstein"}]
