[{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2020-07-31 16:23:18","commitOrder":2,"curCode":"  public static void checkAllNodesForFile(MiniSolrCloudCluster cluster, String path, Map expected , boolean verifyContent) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + \"/node/files\" + path + \"?wt=javabin&meta=true\";\n      assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      if(verifyContent) {\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files\" + path,\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n      }\n\n    }\n  }\n","date":"2020-07-31 16:23:18","endLine":193,"groupId":"14397","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"checkAllNodesForFile","params":"(MiniSolrCloudClustercluster@Stringpath@Mapexpected@booleanverifyContent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/811561ca007f62cd402bd74a5a6d927c43db71.src","preCode":"  public static void checkAllNodesForFile(MiniSolrCloudCluster cluster, String path, Map expected , boolean verifyContent) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + \"/node/files\" + path + \"?wt=javabin&meta=true\";\n      assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      if(verifyContent) {\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files\" + path,\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":174,"status":"B"},{"authorDate":"2020-06-25 11:08:51","commitOrder":2,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"14397","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"NB"}],"commitId":"f443edebd207f93398b35520b24e2b66eba3609a","commitMessage":"@@@SOLR-14681: Introduce ability to delete .jar stored in the Package Store (#1702)\n\n","date":"2020-07-31 16:23:18","modifiedFileCount":"7","status":"M","submitter":"Marcus"},{"authorTime":"2020-06-25 11:08:51","codes":[{"authorDate":"2021-07-13 23:49:56","commitOrder":3,"curCode":"  public static void checkAllNodesForFile(MiniSolrCloudCluster cluster, String path, Map<String, Object> expected , boolean verifyContent) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + \"/node/files\" + path + \"?wt=javabin&meta=true\";\n      assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      if(verifyContent) {\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files\" + path,\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n      }\n\n    }\n  }\n","date":"2021-07-13 23:49:56","endLine":189,"groupId":"102637","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"checkAllNodesForFile","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected@booleanverifyContent)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e2/5be647f980f58507cbd9c34fb8bde7fc591a61.src","preCode":"  public static void checkAllNodesForFile(MiniSolrCloudCluster cluster, String path, Map expected , boolean verifyContent) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + \"/node/files\" + path + \"?wt=javabin&meta=true\";\n      assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n\n      if(verifyContent) {\n        try (HttpSolrClient solrClient = (HttpSolrClient) jettySolrRunner.newClient()) {\n          ByteBuffer buf = Utils.executeGET(solrClient.getHttpClient(), baseUrl + \"/node/files\" + path,\n              Utils.newBytesConsumer(Integer.MAX_VALUE));\n          assertEquals(\n              \"d01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420\",\n              DigestUtils.sha512Hex(new ByteBufferInputStream(buf))\n          );\n\n        }\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/filestore/TestDistribPackageStore.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":170,"status":"M"},{"authorDate":"2020-06-25 11:08:51","commitOrder":3,"curCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","date":"2020-06-25 11:08:51","endLine":297,"groupId":"102637","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"waitForAllNodesToSync","params":"(MiniSolrCloudClustercluster@Stringpath@Map<String@Object>expected)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/2d/417e149b1e2f9856a239a0d199bb6c35d24724.src","preCode":"  public static void waitForAllNodesToSync(MiniSolrCloudCluster cluster, String path, Map<String,Object> expected) throws Exception {\n    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {\n      String baseUrl = jettySolrRunner.getBaseUrl().toString().replace(\"/solr\", \"/api\");\n      String url = baseUrl + path + \"?wt=javabin\";\n      TestDistribPackageStore.assertResponseValues(10, new Fetcher(url, jettySolrRunner), expected);\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/handler/TestContainerPlugin.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":291,"status":"N"}],"commitId":"09986130545fabfb2cc76ced85a0da6ba536acf0","commitMessage":"@@@SOLR-15385 RawTypes Part VI (#207)\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-07-13 23:49:56","modifiedFileCount":"185","status":"M","submitter":"Mike Drob"}]
