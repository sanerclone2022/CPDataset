[{"authorTime":"2016-12-19 23:15:04","codes":[{"authorDate":"2016-10-24 15:36:40","commitOrder":3,"curCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","date":"2016-10-24 15:36:40","endLine":175,"groupId":"44564","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getCuratorClient","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/42/1de5231de7cd60a15728bb8d75abe828fc09d5.src","preCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":150,"status":"NB"},{"authorDate":"2016-12-19 23:15:04","commitOrder":3,"curCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","date":"2016-12-19 23:15:04","endLine":153,"groupId":"44564","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCuratorClient","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/fb/35e722281c826fcb5003f943c4aa42e8aa48fe.src","preCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":128,"status":"B"}],"commitId":"a1a8b2864e621c18aa86b21d4a244233e991a47d","commitMessage":"@@@SOLR-9513: Generic Hadoop authentication plugins.  GenericHadoopAuthPlugin and ConfigurableInternodeAuthHadoopPlugin\n","date":"2016-12-19 23:15:04","modifiedFileCount":"7","status":"M","submitter":"Ishan Chattopadhyaya"},{"authorTime":"2017-08-09 18:46:53","codes":[{"authorDate":"2017-08-09 18:46:53","commitOrder":4,"curCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    \r\n    \r\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","date":"2017-08-09 18:46:53","endLine":192,"groupId":"44564","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getCuratorClient","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ce/3544c0658a85afec0c98ff13e634b6f4f46366.src","preCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":156,"status":"M"},{"authorDate":"2017-08-09 18:46:53","commitOrder":4,"curCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    \r\n    \r\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","date":"2017-08-09 18:46:53","endLine":170,"groupId":"44564","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCuratorClient","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/5becc88354ca6fc4f94d9aaeb29533159fd001.src","preCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"M"}],"commitId":"b091934f9e98568b848d0584a1145c8e514cbd21","commitMessage":"@@@Create znode upfront and fix chroot handling in delegation token feature\n","date":"2017-08-09 18:46:53","modifiedFileCount":"4","status":"M","submitter":"Shalin Shekhar Mangar"},{"authorTime":"2017-08-09 18:46:53","codes":[{"authorDate":"2020-05-08 03:02:36","commitOrder":5,"curCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    \r\n    \r\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n    } catch (KeeperException.NodeExistsException ex) {\n      \r\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","date":"2020-07-08 00:37:50","endLine":175,"groupId":"102020","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"getCuratorClient","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/68/a97a1558b1044aa888514252ef2d1c25f8f2c9.src","preCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws InterruptedException, KeeperException {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    \r\n    \r\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/DelegationTokenKerberosFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":142,"status":"M"},{"authorDate":"2017-08-09 18:46:53","commitOrder":5,"curCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    \r\n    \r\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","date":"2017-08-09 18:46:53","endLine":170,"groupId":"102020","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCuratorClient","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/20/5becc88354ca6fc4f94d9aaeb29533159fd001.src","preCode":"  protected CuratorFramework getCuratorClient(SolrZkClient zkClient) throws KeeperException, InterruptedException {\n    \r\n    RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    if (zkClient == null) {\n      throw new IllegalArgumentException(\"zkClient required\");\n    }\n    String zkHost = zkClient.getZkServerAddress();\n    String zkChroot = zkHost.contains(\"/\")? zkHost.substring(zkHost.indexOf(\"/\")): \"\";\n    String zkNamespace = zkChroot + SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH;\n    zkNamespace = zkNamespace.startsWith(\"/\") ? zkNamespace.substring(1) : zkNamespace;\n    String zkConnectionString = zkHost.contains(\"/\")? zkHost.substring(0, zkHost.indexOf(\"/\")): zkHost;\n    SolrZkToCuratorCredentialsACLs curatorToSolrZk = new SolrZkToCuratorCredentialsACLs(zkClient);\n    final int connectionTimeoutMs = 30000; \r\n\n    \r\n    \r\n    try {\n      zkClient.makePath(SecurityAwareZkACLProvider.SECURITY_ZNODE_PATH, CreateMode.PERSISTENT, true);\n\n    } catch (KeeperException ex) {\n      if (ex.code() != KeeperException.Code.NODEEXISTS) {\n        throw ex;\n      }\n    }\n\n    curatorFramework = CuratorFrameworkFactory.builder()\n        .namespace(zkNamespace)\n        .connectString(zkConnectionString)\n        .retryPolicy(retryPolicy)\n        .aclProvider(curatorToSolrZk.getACLProvider())\n        .authorization(curatorToSolrZk.getAuthInfos())\n        .sessionTimeoutMs(zkClient.getZkClientTimeout())\n        .connectionTimeoutMs(connectionTimeoutMs)\n        .build();\n    curatorFramework.start();\n    return curatorFramework;\n  }\n","realPath":"solr/core/src/java/org/apache/solr/security/HadoopAuthFilter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":134,"status":"N"}],"commitId":"d3f4b21deb0056098e9e888a6b9d72e0bf2d0834","commitMessage":"@@@SOLR-10814 Add short-name feature to RuleBasedAuthz plugin\n\nAdditional-Author: Hrishikesh Gadre <hgadre@cloudera.com>\n","date":"2020-07-08 00:37:50","modifiedFileCount":"11","status":"M","submitter":"Mike Drob"}]
