[{"authorTime":"2018-11-11 08:48:50","codes":[{"authorDate":"2018-11-11 08:48:50","commitOrder":1,"curCode":"  public void testSingleRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertEquals(0, response.getStatus());\n    final SolrDocumentList returnedDocs = response.getResults();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());\n    assertEquals(10, returnedDocs.size());\n    final NamedList<Object> rawResponse = response.getResponse();\n    assertHasFacetWithBucketValues(rawResponse,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n  }\n","date":"2018-11-11 10:44:25","endLine":168,"groupId":"45883","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/17f7f0535d3e8dfed600d6a9bebde7d0ff3bf4.src","preCode":"  public void testSingleRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertEquals(0, response.getStatus());\n    final SolrDocumentList returnedDocs = response.getResults();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());\n    assertEquals(10, returnedDocs.size());\n    final NamedList<Object> rawResponse = response.getResponse();\n    assertHasFacetWithBucketValues(rawResponse,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":149,"status":"B"},{"authorDate":"2018-11-11 08:48:50","commitOrder":1,"curCode":"  public void testMultiRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final RangeFacetMap shippingWeightFacet = new RangeFacetMap(\"weight\", 0, 200, 50);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet)\n        .withFacet(\"shipping_weights\", shippingWeightFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertEquals(0, response.getStatus());\n    final SolrDocumentList returnedDocs = response.getResults();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());\n    assertEquals(10, returnedDocs.size());\n    final NamedList<Object> rawResponse = response.getResponse();\n    assertHasFacetWithBucketValues(rawResponse,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n    assertHasFacetWithBucketValues(rawResponse, \"shipping_weights\",\n        new FacetBucket(0.0f, 6),\n        new FacetBucket(50.0f, 0),\n        new FacetBucket(100.0f, 0),\n        new FacetBucket(150.0f,1));\n  }\n","date":"2018-11-11 10:44:25","endLine":197,"groupId":"45883","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/77/17f7f0535d3e8dfed600d6a9bebde7d0ff3bf4.src","preCode":"  public void testMultiRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final RangeFacetMap shippingWeightFacet = new RangeFacetMap(\"weight\", 0, 200, 50);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet)\n        .withFacet(\"shipping_weights\", shippingWeightFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertEquals(0, response.getStatus());\n    final SolrDocumentList returnedDocs = response.getResults();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());\n    assertEquals(10, returnedDocs.size());\n    final NamedList<Object> rawResponse = response.getResponse();\n    assertHasFacetWithBucketValues(rawResponse,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n    assertHasFacetWithBucketValues(rawResponse, \"shipping_weights\",\n        new FacetBucket(0.0f, 6),\n        new FacetBucket(50.0f, 0),\n        new FacetBucket(100.0f, 0),\n        new FacetBucket(150.0f,1));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":171,"status":"B"}],"commitId":"52998fa50e60ce9c7f49167b1ab107347c30d8d6","commitMessage":"@@@SOLR-12965: Add facet support to JsonQueryRequest\n","date":"2018-11-11 10:44:25","modifiedFileCount":"3","status":"B","submitter":"Jason Gerlowski"},{"authorTime":"2018-11-17 21:25:16","codes":[{"authorDate":"2018-11-17 21:25:16","commitOrder":2,"curCode":"  public void testSingleRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertExpectedDocumentsFoundAndReturned(response, NUM_TECHPRODUCTS_DOCS, 10);\n    final NestableJsonFacet topLevelFacetData = response.getJsonFacetingResponse();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, topLevelFacetData.getCount());\n    assertHasFacetWithBucketValues(topLevelFacetData,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n  }\n","date":"2018-11-18 06:14:40","endLine":204,"groupId":"10978","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testSingleRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/4fdd2de78d748666b54478e94e6768d8f02407.src","preCode":"  public void testSingleRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertEquals(0, response.getStatus());\n    final SolrDocumentList returnedDocs = response.getResults();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());\n    assertEquals(10, returnedDocs.size());\n    final NamedList<Object> rawResponse = response.getResponse();\n    assertHasFacetWithBucketValues(rawResponse,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":187,"status":"M"},{"authorDate":"2018-11-17 21:25:16","commitOrder":2,"curCode":"  public void testMultiRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final RangeFacetMap shippingWeightFacet = new RangeFacetMap(\"weight\", 0, 200, 50);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet)\n        .withFacet(\"shipping_weights\", shippingWeightFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertExpectedDocumentsFoundAndReturned(response, NUM_TECHPRODUCTS_DOCS, 10);\n    final NestableJsonFacet topLevelFacetData = response.getJsonFacetingResponse();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, topLevelFacetData.getCount());\n    assertHasFacetWithBucketValues(topLevelFacetData,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n    assertHasFacetWithBucketValues(topLevelFacetData, \"shipping_weights\",\n        new FacetBucket(0.0f, 6),\n        new FacetBucket(50.0f, 0),\n        new FacetBucket(100.0f, 0),\n        new FacetBucket(150.0f,1));\n  }\n","date":"2018-11-18 06:14:40","endLine":252,"groupId":"10978","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testMultiRangeFacet","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/34/4fdd2de78d748666b54478e94e6768d8f02407.src","preCode":"  public void testMultiRangeFacet() throws Exception {\n    final RangeFacetMap pricesFacet = new RangeFacetMap(\"price\", 0, 100, 20);\n    final RangeFacetMap shippingWeightFacet = new RangeFacetMap(\"weight\", 0, 200, 50);\n    final JsonQueryRequest request = new JsonQueryRequest()\n        .setQuery(\"*:*\")\n        .withFacet(\"prices\", pricesFacet)\n        .withFacet(\"shipping_weights\", shippingWeightFacet);\n\n    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);\n\n    assertEquals(0, response.getStatus());\n    final SolrDocumentList returnedDocs = response.getResults();\n    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());\n    assertEquals(10, returnedDocs.size());\n    final NamedList<Object> rawResponse = response.getResponse();\n    assertHasFacetWithBucketValues(rawResponse,\"prices\",\n        new FacetBucket(0.0f, 5),\n        new FacetBucket(20.0f, 0),\n        new FacetBucket(40.0f, 0),\n        new FacetBucket(60.0f, 1),\n        new FacetBucket(80.0f, 1));\n    assertHasFacetWithBucketValues(rawResponse, \"shipping_weights\",\n        new FacetBucket(0.0f, 6),\n        new FacetBucket(50.0f, 0),\n        new FacetBucket(100.0f, 0),\n        new FacetBucket(150.0f,1));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/request/json/JsonQueryRequestFacetingIntegrationTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":228,"status":"M"}],"commitId":"d17c6d8897aad4b06c9c7200d0c445e1170e503f","commitMessage":"@@@SOLR-12981: Introduce SolrJ type for JSON facet response parsing\n\nRecent JIRA's (SOLR-12947.  SOLR-12965) have added support making it\neasier to compose JSON query/faceting requests using SolrJ.  But neither\nmade parsing the responses to these queries any easier.\n\nThis commit introduces NestableJsonFacet (along with several companion\ntypes) which are Java representations of the JSON faceting response.\nThey can be accessed via the new QueryResponse method:\n`getJsonFacetingResponse()`.\n","date":"2018-11-18 06:14:40","modifiedFileCount":"6","status":"M","submitter":"Jason Gerlowski"}]
