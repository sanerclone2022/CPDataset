[{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2018-12-17 00:58:20","commitOrder":6,"curCode":"  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      \r\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); \r\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n","date":"2018-12-17 00:58:20","endLine":108,"groupId":"53823","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testConcurrentUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9e/0745f72c2340de6aedcbc95ba55badd057258b.src","preCode":"  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      \r\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); \r\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"B"},{"authorDate":"2017-06-29 17:00:17","commitOrder":6,"curCode":"  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    \r\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    \r\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); \r\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n","date":"2017-06-29 17:00:17","endLine":191,"groupId":"36117","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testConcurrentUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/44/afccd5c6d34dc5862d82c9d06b5098d35b9c26.src","preCode":"  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    \r\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    \r\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); \r\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":137,"status":"NB"}],"commitId":"f80e8e11672d31c6e12069d2bd12a28b92e5a336","commitMessage":"@@@Merge jira/http2 branch to master\n","date":"2018-12-17 00:58:20","modifiedFileCount":"47","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-04-13 10:46:35","codes":[{"authorDate":"2020-04-13 10:46:35","commitOrder":7,"curCode":"  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      \r\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); \r\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n","date":"2020-04-13 10:46:35","endLine":108,"groupId":"10528","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"testConcurrentUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/c1a068b5a8bfc5b4d02deb14363b3244f68d3f.src","preCode":"  public void testConcurrentUpdate() throws Exception {\n    ConcurrentUpdateSolrClientTest.TestServlet.clear();\n\n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n\n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n\n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);\n    final StringBuilder errors = new StringBuilder();\n\n    try (Http2SolrClient http2Client = new Http2SolrClient.Builder().build();\n         ConcurrentUpdateHttp2SolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, http2Client, successCounter, errorCounter, errors)\n             .withQueueSize(cussQueueSize)\n             .withThreadCount(cussThreadCount)\n             .build()) {\n      concurrentClient.setPollQueueTime(0);\n\n      \r\n      concurrentClient.blockUntilFinished();\n\n      int poolSize = 5;\n      ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n      int numDocs = 100;\n      int numRunnables = 5;\n      for (int r=0; r < numRunnables; r++)\n        threadPool.execute(new ConcurrentUpdateSolrClientTest.SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n\n      \r\n      threadPool.awaitTermination(5, TimeUnit.SECONDS);\n      threadPool.shutdown();\n\n      \r\n      concurrentClient.blockUntilFinished();\n      concurrentClient.shutdownNow();\n\n      assertEquals(\"post\", ConcurrentUpdateSolrClientTest.TestServlet.lastMethod);\n\n      \r\n      int expectedSuccesses = ConcurrentUpdateSolrClientTest.TestServlet.numReqsRcvd.get();\n      assertTrue(expectedSuccesses > 0); \r\n\n      assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n          \", due to: \"+errors.toString(), errorCounter.get() == 0);\n      assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(),\n          successCounter.get() == expectedSuccesses);\n\n      int expectedDocs = numDocs * numRunnables;\n      assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+ ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get(),\n          ConcurrentUpdateSolrClientTest.TestServlet.numDocsRcvd.get() == expectedDocs);\n    }\n\n\n\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":51,"status":"M"},{"authorDate":"2020-04-13 10:46:35","commitOrder":7,"curCode":"  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    \r\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    \r\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); \r\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n","date":"2020-04-13 10:46:35","endLine":192,"groupId":"10528","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"testConcurrentUpdate","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/56/a32b47eb622622cac025c8a667cf064439df5d.src","preCode":"  public void testConcurrentUpdate() throws Exception {\n    TestServlet.clear();\n    \n    String serverUrl = jetty.getBaseUrl().toString() + \"/cuss/foo\";\n        \n    int cussThreadCount = 2;\n    int cussQueueSize = 100;\n    \n    \r\n    final AtomicInteger successCounter = new AtomicInteger(0);\n    final AtomicInteger errorCounter = new AtomicInteger(0);    \n    final StringBuilder errors = new StringBuilder();     \n    \n    @SuppressWarnings(\"serial\")\n    ConcurrentUpdateSolrClient concurrentClient = new OutcomeCountingConcurrentUpdateSolrClient.Builder(serverUrl, successCounter, errorCounter, errors)\n      .withQueueSize(cussQueueSize)\n      .withThreadCount(cussThreadCount)\n      .build();\n    \n    concurrentClient.setPollQueueTime(0);\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    \n    int poolSize = 5;\n    ExecutorService threadPool = ExecutorUtil.newMDCAwareFixedThreadPool(poolSize, new SolrjNamedThreadFactory(\"testCUSS\"));\n\n    int numDocs = 100;\n    int numRunnables = 5;\n    for (int r=0; r < numRunnables; r++)\n      threadPool.execute(new SendDocsRunnable(String.valueOf(r), numDocs, concurrentClient));\n    \n    \r\n    threadPool.awaitTermination(5, TimeUnit.SECONDS);\n    threadPool.shutdown();\n    \n    \r\n    concurrentClient.blockUntilFinished();\n    concurrentClient.shutdownNow();\n    \n    assertEquals(\"post\", TestServlet.lastMethod);\n        \n    \r\n    int expectedSuccesses = TestServlet.numReqsRcvd.get();\n    assertTrue(expectedSuccesses > 0); \r\n    \n    assertTrue(\"Expected no errors but got \"+errorCounter.get()+\n        \", due to: \"+errors.toString(), errorCounter.get() == 0);\n    assertTrue(\"Expected \"+expectedSuccesses+\" successes, but got \"+successCounter.get(), \n        successCounter.get() == expectedSuccesses);\n    \n    int expectedDocs = numDocs * numRunnables;\n    assertTrue(\"Expected CUSS to send \"+expectedDocs+\" but got \"+TestServlet.numDocsRcvd.get(), \n        TestServlet.numDocsRcvd.get() == expectedDocs);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":138,"status":"M"}],"commitId":"13f19f65559290a860df84fa1b5ac2db903b27ec","commitMessage":"@@@SOLR-9906: SolrjNamedThreadFactory is deprecated in favor of SolrNamedThreadFactory. DefaultSolrThreadFactory is removed from solr-core in favor of SolrNamedThreadFactory in solrj package and all solr-core classes now use SolrNamedThreadFactory\n","date":"2020-04-13 10:46:35","modifiedFileCount":"83","status":"M","submitter":"Shalin Shekhar Mangar"}]
