[{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2018-11-30 01:58:18","commitOrder":4,"curCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudSolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","date":"2018-11-30 01:58:51","endLine":762,"groupId":"6043","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializationWithSolrUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/b67d4b055ccc07147bf9c107c04228ac86f01e.src","preCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudSolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":754,"status":"NB"},{"authorDate":"2019-03-04 17:41:45","commitOrder":4,"curCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudHttp2SolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","date":"2019-03-04 17:41:45","endLine":773,"groupId":"6043","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testInitializationWithSolrUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudHttp2SolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"B"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2019-03-04 17:41:45","codes":[{"authorDate":"2021-01-18 23:59:41","commitOrder":5,"curCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .setPerReplicaState(USE_PER_REPLICA_STATE)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudSolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","date":"2021-01-18 23:59:41","endLine":859,"groupId":"10502","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testInitializationWithSolrUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e1/56607561e27fb90b089d6c2abf2126045876ee.src","preCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudSolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":849,"status":"M"},{"authorDate":"2019-03-04 17:41:45","commitOrder":5,"curCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudHttp2SolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","date":"2019-03-04 17:41:45","endLine":773,"groupId":"10502","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testInitializationWithSolrUrls","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/de/8c311c361e11acc2dea2be8a49e95e17467bdd.src","preCode":"  public void testInitializationWithSolrUrls() throws Exception {\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1).process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(COLLECTION, 2, 2);\n    CloudHttp2SolrClient client = httpBasedCloudSolrClient;\n    SolrInputDocument doc = new SolrInputDocument(\"id\", \"1\", \"title_s\", \"my doc\");\n    client.add(COLLECTION, doc);\n    client.commit(COLLECTION);\n    assertEquals(1, client.query(COLLECTION, params(\"q\", \"*:*\")).getResults().getNumFound());\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":765,"status":"N"}],"commitId":"8505d4d416fdf707bab55bc4da9a71ddb3374274","commitMessage":"@@@SOLR-15052: Per-replica states for reducing overseer bottlenecks (trunk) (#2177)\n\n","date":"2021-01-18 23:59:41","modifiedFileCount":"53","status":"M","submitter":"Noble Paul"}]
