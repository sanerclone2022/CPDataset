[{"authorTime":"2014-01-07 05:15:45","codes":[{"authorDate":"2014-01-07 05:15:45","commitOrder":1,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-01-07 05:15:45","endLine":541,"groupId":"48703","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"B"},{"authorDate":"2014-01-07 05:15:45","commitOrder":1,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(initialDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-01-07 05:15:45","endLine":498,"groupId":"59974","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/5336e26633f284f9f3bbe9438ec455dc64b9c5.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(initialDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":444,"status":"B"}],"commitId":"5efc4132f10d476373b7da72e23f475eeec4046a","commitMessage":"@@@SOLR-5463: new 'cursorMark' request param for deep paging of sorted result sets\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1556036 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-07 05:15:45","modifiedFileCount":"10","status":"B","submitter":"Chris M. Hostetter"},{"authorTime":"2014-01-22 07:32:43","codes":[{"authorDate":"2014-01-07 05:15:45","commitOrder":2,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-01-07 05:15:45","endLine":541,"groupId":"48703","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"N"},{"authorDate":"2014-01-22 07:32:43","commitOrder":2,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    log.info(\"SOLR-5652: Begining Loop over smallish num of docs\");\n    final boolean SOLR_5652 = true;\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(SOLR_5652,\n                                                  initialDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    log.info(\"SOLR-5652: Ending Loop over smallish num of docs\");\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-01-22 07:32:43","endLine":510,"groupId":"59974","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/23/bade3e8f03fed299d53cab6637a3255665a28e.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(initialDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":450,"status":"M"}],"commitId":"6851eab30caadeb2609c193adf90c5617f895712","commitMessage":"@@@SOLR-5652: Make test more deterministicly random.  and increase logging to try and track down strange test failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1560219 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-22 07:32:43","modifiedFileCount":"2","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2014-01-27 23:21:41","codes":[{"authorDate":"2014-01-07 05:15:45","commitOrder":3,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-01-07 05:15:45","endLine":541,"groupId":"48703","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/39/6fa6bc87c45fcc6bd03565bf3be402ff0cde76.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":488,"status":"N"},{"authorDate":"2014-01-27 23:21:41","commitOrder":3,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int numInitialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    log.info(\"SOLR-5652: Begining Loop over smallish num of docs\");\n    final boolean SOLR_5652 = true;\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(SOLR_5652,\n                                                  numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    log.info(\"SOLR-5652: Ending Loop over smallish num of docs\");\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-01-27 23:21:41","endLine":537,"groupId":"59974","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/3f/2a79c3ee1b8a52a2db361706a4f792086c3e04.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    log.info(\"SOLR-5652: Begining Loop over smallish num of docs\");\n    final boolean SOLR_5652 = true;\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(SOLR_5652,\n                                                  initialDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    log.info(\"SOLR-5652: Ending Loop over smallish num of docs\");\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":451,"status":"M"}],"commitId":"2a36de54dd29ac8890a3441ccc601fe2c38e6081","commitMessage":"@@@SOLR-5671: increase logging to try and track down test failure\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1561709 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-27 23:21:41","modifiedFileCount":"1","status":"M","submitter":"Steven Rowe"},{"authorTime":"2014-01-29 03:03:35","codes":[{"authorDate":"2014-01-29 03:03:35","commitOrder":4,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-01-29 03:03:35","endLine":606,"groupId":"48703","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/0d702777c3cc7087a82c9ae40617fb56ad77d5.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"},{"authorDate":"2014-01-29 03:03:35","commitOrder":4,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    log.info(\"SOLR-5652: Begining Loop over smallish num of docs\");\n    final boolean SOLR_5652 = true;\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(SOLR_5652,\n                                                  numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    log.info(\"SOLR-5652: Ending Loop over smallish num of docs\");\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-01-29 03:03:35","endLine":604,"groupId":"59974","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d2/79d6c7b977937f0ba4f2763749625b904c3a28.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllFieldNames();\n\n    final int numInitialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    log.info(\"SOLR-5652: Begining Loop over smallish num of docs\");\n    final boolean SOLR_5652 = true;\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(SOLR_5652,\n                                                  numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    log.info(\"SOLR-5652: Ending Loop over smallish num of docs\");\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"d593f195ba81f78a4facb906d295bb2aa8edf9a2","commitMessage":"@@@SOLR-5652: test fixes: add 'plain' docvalue field variants to schema.  and check codecs for support of missing docValues before trying to sort on them\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1562155 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-01-29 03:03:35","modifiedFileCount":"3","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2014-02-16 05:58:58","codes":[{"authorDate":"2014-01-29 03:03:35","commitOrder":5,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-01-29 03:03:35","endLine":606,"groupId":"48703","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f8/0d702777c3cc7087a82c9ae40617fb56ad77d5.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"},{"authorDate":"2014-02-16 05:58:58","commitOrder":5,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-02-16 05:58:58","endLine":598,"groupId":"13982","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/b5/e61ec425a385ac2cd6fcb0d1e591bdfd2ed658.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    log.info(\"SOLR-5652: Begining Loop over smallish num of docs\");\n    final boolean SOLR_5652 = true;\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(SOLR_5652,\n                                                  numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    log.info(\"SOLR-5652: Ending Loop over smallish num of docs\");\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":518,"status":"M"}],"commitId":"fecedd23499fbdc402ada2e4848f6b3242e03118","commitMessage":"@@@SOLR-5652: remove doc details logging now that we've identified hte original codec problem with the test\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1568690 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-16 05:58:58","modifiedFileCount":"1","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2014-02-19 09:38:33","codes":[{"authorDate":"2014-02-19 09:38:33","commitOrder":6,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-02-19 09:38:33","endLine":606,"groupId":"48703","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/25227bbf9c4a22ac04127b99a1691b8fb296d1.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"},{"authorDate":"2014-02-19 09:38:33","commitOrder":6,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-02-19 09:38:33","endLine":597,"groupId":"13982","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/e0/b310a141b66f3bfd5819fdae868d61fa1129ca.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = _TestUtil.nextInt(random(),100,200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + _TestUtil.nextInt(random(),13,50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + _TestUtil.nextInt(random(),63,113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"36b2f2512b53b3c4d5951dbeaf7d25106a806413","commitMessage":"@@@LUCENE-5449: Rename _TestUtil to TestUtil.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1569597 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-19 09:38:33","modifiedFileCount":"321","status":"M","submitter":"Benson Margulies"},{"authorTime":"2014-02-28 06:57:05","codes":[{"authorDate":"2014-02-28 06:57:05","commitOrder":7,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-02-28 06:57:05","endLine":606,"groupId":"48703","id":13,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/faa6f397c7e107e4a5e9dff95760e4011de73e.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"M"},{"authorDate":"2014-02-28 06:57:05","commitOrder":7,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-02-28 06:57:05","endLine":597,"groupId":"13982","id":14,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/83/5bbd20742ea160c4d30ddfd0ecaa22a8279983.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(5000);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(5);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"474373d7b3d5575251d22f7dce0033a30055c834","commitMessage":"@@@SOLR-5794: dial back the randomized constants so we don't blow up the world when running with -Dnightly=true -Dtests.multiplier=2\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1572775 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-02-28 06:57:05","modifiedFileCount":"2","status":"M","submitter":"Chris M. Hostetter"},{"authorTime":"2014-03-12 22:39:17","codes":[{"authorDate":"2014-02-28 06:57:05","commitOrder":8,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-02-28 06:57:05","endLine":606,"groupId":"48703","id":15,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/faa6f397c7e107e4a5e9dff95760e4011de73e.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"},{"authorDate":"2014-03-12 22:39:17","commitOrder":8,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2014-03-12 22:39:17","endLine":597,"groupId":"13982","id":16,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/8b/8e3b5fb723986245e69c42562283452c2ede7c.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<SolrInputDocument>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":517,"status":"M"}],"commitId":"3b67b17493216f6b0c81a981073fd5f61eace6f4","commitMessage":"@@@LUCENE-5512: remove redundant typing (diamond operator) in trunk\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1576755 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2014-03-12 22:39:17","modifiedFileCount":"1241","status":"M","submitter":"Robert Muir"},{"authorTime":"2017-06-29 17:00:17","codes":[{"authorDate":"2014-02-28 06:57:05","commitOrder":9,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","date":"2014-02-28 06:57:05","endLine":606,"groupId":"48703","id":17,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/7a/faa6f397c7e107e4a5e9dff95760e4011de73e.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":553,"status":"N"},{"authorDate":"2017-06-29 17:00:17","commitOrder":9,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = Integer.parseInt(doc.getFieldValue(\"id\").toString());\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","date":"2017-06-29 17:00:17","endLine":604,"groupId":"13982","id":18,"instanceNumber":2,"isCurCommit":0,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/5d/e766f3b6234f0d6a9a879430f85a1f3e52a2dd.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = ((Integer)doc.get(\"id\").getValue()).intValue();\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":524,"status":"M"}],"commitId":"b4fa0e785b70e39a3a1420bc020ad1183308b7af","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2017-06-29 17:00:17","modifiedFileCount":"697","status":"M","submitter":"Karl Wright"},{"authorTime":"2021-04-06 00:57:24","codes":[{"authorDate":"2021-04-06 00:57:24","commitOrder":10,"curCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        final SolrParams main = params(\"q\", \"*:*\",\n                                       \"fl\",\"id\",\n                                       \"rows\",rows,\n                                       \"sort\",sort);\n        final SentinelIntSet ids = assertFullWalkNoDups(totalDocs, main);\n        assertEquals(initialDocs, ids.size());\n\n        \r\n        final SentinelIntSet elevated = assertFullWalkNoDupsElevated(wrapDefaults(params(\"qt\", \"/elevate\",\n                                                                                         \"fl\",\"id,[elevated]\",\n                                                                                         \"forceElevation\",\"true\",\n                                                                                         \"elevateIds\", \"50,20,80\"),\n                                                                                  main),\n                                                                     ids);\n        assertTrue(elevated.exists(50));\n        assertTrue(elevated.exists(20));\n        assertTrue(elevated.exists(80));\n        assertEquals(3, elevated.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n      final SolrParams main = params(\"q\", q,\n                                     \"fl\",fl,\n                                     \"rows\",rows,\n                                     \"sort\",sort);\n      final SentinelIntSet ids = assertFullWalkNoDups(totalDocs, main);\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n      \r\n      \r\n      final int[] expectedElevated = pickElevations(TestUtil.nextInt(random(), 3, 33), ids);\n      final SentinelIntSet elevated = assertFullWalkNoDupsElevated\n        (wrapDefaults(params(\"qt\", \"/elevate\",\n                             \"fl\", fl + \",[elevated]\",\n                             \r\n                             \"sort\", (sort.startsWith(\"score asc\") ? \"score desc, \" + sort : sort),\n                             \"forceElevation\",\"true\",\n                             \"elevateIds\", StringUtils.join(expectedElevated,',')),\n                      main),\n         ids);\n      for (int expected : expectedElevated) {\n        assertTrue(expected + \" wasn't elevated even though it should have been\",\n                   elevated.exists(expected));\n      }\n      assertEquals(expectedElevated.length, elevated.size());\n    }\n  }\n","date":"2021-04-06 00:57:24","endLine":741,"groupId":"102760","id":19,"instanceNumber":1,"isCurCommit":0,"methodName":"testRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/33/75b8e9500653518d5146fee74f74dca98dd7f9.src","preCode":"  public void testRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int initialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    for (int i = 1; i <= initialDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id\",\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        assertEquals(initialDocs, ids.size());\n      }\n    }\n\n    \r\n    for (int i = initialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = buildRandomDocument(i);\n      assertU(adoc(doc));\n    }\n    assertU(commit());\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs, \n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n  }\n","realPath":"solr/core/src/test/org/apache/solr/CursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":660,"status":"M"},{"authorDate":"2021-04-06 00:57:24","commitOrder":10,"curCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        final SolrParams main = params(\"q\", \"*:*\",\n                                       \"fl\",\"id,\"+f,\n                                       \"rows\",rows,\n                                       \"sort\",sort);\n        final SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs, main);\n        assertEquals(numInitialDocs, ids.size());\n\n        \r\n        final SentinelIntSet elevated = assertFullWalkNoDupsElevated(wrapDefaults(params(\"qt\", \"/elevate\",\n                                                                                         \"fl\",\"id,[elevated]\",\n                                                                                         \"forceElevation\",\"true\",\n                                                                                         \"elevateIds\", \"50,20,80\"),\n                                                                                  main),\n                                                                     ids);\n        assertTrue(elevated.exists(50));\n        assertTrue(elevated.exists(20));\n        assertTrue(elevated.exists(80));\n        assertEquals(3, elevated.size());\n\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n      final SolrParams main = params(\"q\", q,\n                                     \"fl\",fl,\n                                     \"rows\",rows,\n                                     \"sort\",sort);\n      final SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                      params(\"q\", q,\n                                                             \"fl\",fl,\n                                                             \"rows\",rows,\n                                                             \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n      \n      \r\n      \r\n      final int[] expectedElevated = CursorPagingTest.pickElevations(TestUtil.nextInt(random(), 3, 33), ids);\n      final SentinelIntSet elevated = assertFullWalkNoDupsElevated\n        (wrapDefaults(params(\"qt\", \"/elevate\",\n                             \"fl\", fl + \",[elevated]\",\n                             \r\n                             \"sort\", (sort.startsWith(\"score asc\") ? \"score desc, \" + sort : sort),\n                             \"forceElevation\",\"true\",\n                             \"elevateIds\", StringUtils.join(expectedElevated,',')),\n                      main),\n         ids);\n      for (int expected : expectedElevated) {\n        assertTrue(expected + \" wasn't elevated even though it should have been\",\n                   elevated.exists(expected));\n      }\n      assertEquals(expectedElevated.length, elevated.size());\n\n    }\n\n  }\n","date":"2021-04-06 00:57:24","endLine":625,"groupId":"102760","id":20,"instanceNumber":2,"isCurCommit":1,"methodName":"doRandomSortsOnLargeIndex","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/89/b4971cc86f9775c40fddb970a4f525cf87168c.src","preCode":"  public void doRandomSortsOnLargeIndex() throws Exception {\n    final Collection<String> allFieldNames = getAllSortFieldNames();\n\n    final int numInitialDocs = TestUtil.nextInt(random(), 100, 200);\n    final int totalDocs = atLeast(500);\n\n    \r\n    \r\n\n    List<SolrInputDocument> initialDocs = new ArrayList<>();\n    for (int i = 1; i <= numInitialDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      initialDocs.add(doc);\n      indexDoc(doc);\n    }\n    commit();\n\n    for (String f : allFieldNames) {\n      for (String order : new String[] {\" asc\", \" desc\"}) {\n        String sort = f + order + (\"id\".equals(f) ? \"\" : \", id\" + order);\n        String rows = \"\" + TestUtil.nextInt(random(), 13, 50);\n        SentinelIntSet ids = assertFullWalkNoDups(numInitialDocs,\n                                                  params(\"q\", \"*:*\",\n                                                         \"fl\",\"id,\"+f,\n                                                         \"rows\",rows,\n                                                         \"sort\",sort));\n        if (numInitialDocs != ids.size()) {\n          StringBuilder message = new StringBuilder\n              (\"Expected \" + numInitialDocs + \" docs but got \" + ids.size() + \". \");\n          message.append(\"sort=\");\n          message.append(sort);\n          message.append(\". \");\n          if (ids.size() < numInitialDocs) {\n            message.append(\"Missing doc(s): \");\n            for (SolrInputDocument doc : initialDocs) {\n              int id = Integer.parseInt(doc.getFieldValue(\"id\").toString());\n              if ( ! ids.exists(id)) {\n                QueryResponse rsp = cloudClient.query(params(\"q\", \"id:\" + id,\n                                                             \"rows\", \"1\"));\n                if (0 == rsp.getResults().size()) {\n                  message.append(\"<NOT RETRIEVABLE>:\");\n                  message.append(doc.values());\n                } else {\n                  message.append(rsp.getResults().get(0).getFieldValueMap().toString());\n                }\n                message.append(\"; \");\n              }\n            }\n          }\n          fail(message.toString());\n        }\n      }\n    }\n\n    \r\n    for (int i = numInitialDocs+1; i <= totalDocs; i++) {\n      SolrInputDocument doc = CursorPagingTest.buildRandomDocument(i);\n      indexDoc(doc);\n    }\n    commit();\n\n    final int numRandomSorts = atLeast(3);\n    for (int i = 0; i < numRandomSorts; i++) {\n      final String sort = CursorPagingTest.buildRandomSort(allFieldNames);\n      final String rows = \"\" + TestUtil.nextInt(random(), 63, 113);\n      final String fl = random().nextBoolean() ? \"id\" : \"id,score\";\n      final boolean matchAll = random().nextBoolean();\n      final String q = matchAll ? \"*:*\" : CursorPagingTest.buildRandomQuery();\n\n      SentinelIntSet ids = assertFullWalkNoDups(totalDocs,\n                                                params(\"q\", q,\n                                                       \"fl\",fl,\n                                                       \"rows\",rows,\n                                                       \"sort\",sort));\n      if (matchAll) {\n        assertEquals(totalDocs, ids.size());\n      }\n\n    }\n\n  }\n","realPath":"solr/core/src/test/org/apache/solr/cloud/DistribCursorPagingTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":535,"status":"M"}],"commitId":"59a59138668e9513060824d85ee375a1723f4bfb","commitMessage":"@@@SOLR-11921: Move \"cursorMark\" logic from QueryComponent to SearchHandler so it can work with things like QueryElevationComponent that modify the SortSpec in prepare().  as well as possible custom \"search\" components other then QueryComponent\n","date":"2021-04-06 00:57:24","modifiedFileCount":"9","status":"M","submitter":"Chris Hostetter"}]
