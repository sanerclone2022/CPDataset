[{"authorTime":"2015-07-10 09:44:47","codes":[{"authorDate":"2015-07-10 09:44:47","commitOrder":3,"curCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0xff)==1) {\n          int pos = code>>>8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","date":"2015-07-10 09:44:47","endLine":288,"groupId":"29817","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"getSmallTerms","params":"(intdoc@Callbacktarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/a738c168812d14b21dc33a7e94b95bb5585c2c.src","preCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0xff)==1) {\n          int pos = code>>>8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"B"},{"authorDate":"2015-07-10 09:44:47","commitOrder":3,"curCode":"  private void getCounts(FacetFieldProcessorUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0xff) == 1) {\n          int pos = code >>> 8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2015-07-10 09:44:47","endLine":392,"groupId":"61456","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"getCounts","params":"(FacetFieldProcessorUIFprocessor@CountSlotAcccounts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/a738c168812d14b21dc33a7e94b95bb5585c2c.src","preCode":"  private void getCounts(FacetFieldProcessorUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0xff) == 1) {\n          int pos = code >>> 8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":304,"status":"MB"}],"commitId":"eff521bcd760c1b27a51cc52d5fef0c9d059db69","commitMessage":"@@@SOLR-7455: defer non-sorting facet stats\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1690189 13f79535-47bb-0310-9956-ffa450edef68\n","date":"2015-07-10 09:44:47","modifiedFileCount":"7","status":"M","submitter":"Yonik Seeley"},{"authorTime":"2016-08-20 19:36:01","codes":[{"authorDate":"2015-07-10 09:44:47","commitOrder":4,"curCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0xff)==1) {\n          int pos = code>>>8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","date":"2015-07-10 09:44:47","endLine":288,"groupId":"29817","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"getSmallTerms","params":"(intdoc@Callbacktarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d4/a738c168812d14b21dc33a7e94b95bb5585c2c.src","preCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0xff)==1) {\n          int pos = code>>>8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":253,"status":"N"},{"authorDate":"2016-08-20 19:36:01","commitOrder":4,"curCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0xff) == 1) {\n          int pos = code >>> 8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2016-08-20 19:36:01","endLine":396,"groupId":"61456","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"getCounts","params":"(FacetFieldProcessorByArrayUIFprocessor@CountSlotAcccounts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ad/3baf01bc903b55c0e6b8e646b405c3013d3fdc.src","preCode":"  private void getCounts(FacetFieldProcessorUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0xff) == 1) {\n          int pos = code >>> 8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":308,"status":"M"}],"commitId":"e325973119eae1fe8b7a81d505680952ec08964f","commitMessage":"@@@Merge branch 'master' of https://git-wip-us.apache.org/repos/asf/lucene-solr\n","date":"2016-08-20 19:36:01","modifiedFileCount":"105","status":"M","submitter":"Karl Wright"},{"authorTime":"2017-08-22 21:12:38","codes":[{"authorDate":"2017-08-22 21:12:38","commitOrder":5,"curCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","date":"2017-08-22 21:12:38","endLine":296,"groupId":"29817","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"getSmallTerms","params":"(intdoc@Callbacktarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/54175cb3a15a0bf599cb94bf8e141d5292dad5.src","preCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0xff)==1) {\n          int pos = code>>>8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"M"},{"authorDate":"2017-08-22 21:12:38","commitOrder":5,"curCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2017-08-22 21:12:38","endLine":400,"groupId":"34174","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"getCounts","params":"(FacetFieldProcessorByArrayUIFprocessor@CountSlotAcccounts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/54175cb3a15a0bf599cb94bf8e141d5292dad5.src","preCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0xff) == 1) {\n          int pos = code >>> 8;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":312,"status":"M"}],"commitId":"85b89d15a89802d3bf6fbeac6bd55286028dc8e0","commitMessage":"@@@SOLR-11240: Raise UnInvertedField internal limit\n","date":"2017-08-22 21:12:38","modifiedFileCount":"3","status":"M","submitter":"Toke Eskildsen"},{"authorTime":"2020-04-10 21:46:54","codes":[{"authorDate":"2017-08-22 21:12:38","commitOrder":6,"curCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","date":"2017-08-22 21:12:38","endLine":296,"groupId":"29817","id":7,"instanceNumber":1,"isCurCommit":0,"methodName":"getSmallTerms","params":"(intdoc@Callbacktarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/54175cb3a15a0bf599cb94bf8e141d5292dad5.src","preCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"},{"authorDate":"2020-04-10 21:46:54","commitOrder":6,"curCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - (int) counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2020-04-10 22:00:20","endLine":406,"groupId":"34174","id":8,"instanceNumber":2,"isCurCommit":0,"methodName":"getCounts","params":"(FacetFieldProcessorByArrayUIFprocessor@CountSlotAcccounts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/01/61d079330d30bb280d096a55bd49fb2022827d.src","preCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"36b280bd0a21952ea54c7567f037eb48dc93205a","commitMessage":"@@@SOLR-11775: return long val for facet count in json facet\n\n* Long value is returned for any count related to json facets\n  irrespective of number of shards\n","date":"2020-04-10 22:00:20","modifiedFileCount":"33","status":"M","submitter":"Munendra S N"},{"authorTime":"2020-05-21 20:59:32","codes":[{"authorDate":"2017-08-22 21:12:38","commitOrder":7,"curCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","date":"2017-08-22 21:12:38","endLine":296,"groupId":"29817","id":9,"instanceNumber":1,"isCurCommit":0,"methodName":"getSmallTerms","params":"(intdoc@Callbacktarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/54175cb3a15a0bf599cb94bf8e141d5292dad5.src","preCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"},{"authorDate":"2020-05-21 20:59:32","commitOrder":7,"curCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, SlotAcc.CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - (int) counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2020-05-21 20:59:32","endLine":406,"groupId":"34174","id":10,"instanceNumber":2,"isCurCommit":0,"methodName":"getCounts","params":"(FacetFieldProcessorByArrayUIFprocessor@SlotAcc.CountSlotAcccounts)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/04/f88f967d1399414fe7feb7fffdb9b64b4cdb60.src","preCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - (int) counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":318,"status":"M"}],"commitId":"9c066f60f1804c26db8be226429a0be046c5a4db","commitMessage":"@@@SOLR-14482: Fix or suppress warnings in solr/search/facet\n","date":"2020-05-21 20:59:32","modifiedFileCount":"57","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-07-10 09:42:37","codes":[{"authorDate":"2017-08-22 21:12:38","commitOrder":8,"curCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","date":"2017-08-22 21:12:38","endLine":296,"groupId":"102245","id":11,"instanceNumber":1,"isCurCommit":0,"methodName":"getSmallTerms","params":"(intdoc@Callbacktarget)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/17/54175cb3a15a0bf599cb94bf8e141d5292dad5.src","preCode":"    public void getSmallTerms(int doc, Callback target) {\n      if (termInstances > 0) {\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for(;;) {\n            int delta = 0;\n            for(;;) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            target.call(tnum);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (;;) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80)==0) {\n              if (delta==0) break;\n              tnum += delta - TNUM_OFFSET;\n              target.call(tnum);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":261,"status":"N"},{"authorDate":"2020-07-10 09:42:37","commitOrder":8,"curCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    SweepCountAccStruct baseCountAccStruct = SweepingCountSlotAcc.baseStructOf(processor);\n    final List<SweepCountAccStruct> others = SweepingCountSlotAcc.otherStructsOf(processor);\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet && baseCountAccStruct != null;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n      baseCountAccStruct = new SweepCountAccStruct(baseCountAccStruct, docs);\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      final int termOrd = tt.termNum;\n      Iterator<SweepCountAccStruct> othersIter = others.iterator();\n      SweepCountAccStruct entry = baseCountAccStruct != null ? baseCountAccStruct : othersIter.next();\n      for (;;) {\n        entry.countAcc.incrementCount(termOrd, searcher.numDocs(tt.termQuery, entry.docSet));\n        if (!othersIter.hasNext()) {\n          break;\n        }\n        entry = othersIter.next();\n      }\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      final SweepIteratorAndCounts iterAndCounts = SweepDocIterator.newInstance(baseCountAccStruct, others);\n      final SweepDocIterator iter = iterAndCounts.iter;\n      final SegCountGlobal counts = new SegCountGlobal(iterAndCounts.countAccs);\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int maxIdx = iter.registerCounts(counts);\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum, 1, maxIdx);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum, 1, maxIdx);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      final CountSlotAcc baseCounts = processor.countAcc;\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        baseCounts.incrementCount(i, maxTermCounts[i] - (int) baseCounts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","date":"2020-07-10 09:42:37","endLine":427,"groupId":"102245","id":12,"instanceNumber":2,"isCurCommit":0,"methodName":"getCounts","params":"(FacetFieldProcessorByArrayUIFprocessor)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ee/86fe04745ccae1f4e081a66fe16ad0b54f73b8.src","preCode":"  private void getCounts(FacetFieldProcessorByArrayUIF processor, SlotAcc.CountSlotAcc counts) throws IOException {\n    DocSet docs = processor.fcontext.base;\n    int baseSize = docs.size();\n    int maxDoc = searcher.maxDoc();\n\n    \r\n    if (baseSize < processor.effectiveMincount) {\n      return;\n    }\n\n    final int[] index = this.index;\n\n    boolean doNegative = baseSize > maxDoc >> 1 && termInstances > 0 && docs instanceof BitDocSet;\n\n    if (doNegative) {\n      FixedBitSet bs = ((BitDocSet) docs).getBits().clone();\n      bs.flip(0, maxDoc);\n      \r\n      \r\n      docs = new BitDocSet(bs, maxDoc - baseSize);\n      \r\n      \r\n    }\n\n    \r\n    for (TopTerm tt : bigTerms.values()) {\n      \r\n      counts.incrementCount(tt.termNum, searcher.numDocs(tt.termQuery, docs));\n    }\n\n    \r\n    \r\n\n    if (termInstances > 0) {\n      DocIterator iter = docs.iterator();\n      while (iter.hasNext()) {\n        int doc = iter.nextDoc();\n        int code = index[doc];\n\n        if ((code & 0x80000000)!=0) {\n          int pos = code & 0x7fffffff;\n          int whichArray = (doc >>> 16) & 0xff;\n          byte[] arr = tnums[whichArray];\n          int tnum = 0;\n          for (; ; ) {\n            int delta = 0;\n            for (; ; ) {\n              byte b = arr[pos++];\n              delta = (delta << 7) | (b & 0x7f);\n              if ((b & 0x80) == 0) break;\n            }\n            if (delta == 0) break;\n            tnum += delta - TNUM_OFFSET;\n            counts.incrementCount(tnum,1);\n          }\n        } else {\n          int tnum = 0;\n          int delta = 0;\n          for (; ; ) {\n            delta = (delta << 7) | (code & 0x7f);\n            if ((code & 0x80) == 0) {\n              if (delta == 0) break;\n              tnum += delta - TNUM_OFFSET;\n              counts.incrementCount(tnum,1);\n              delta = 0;\n            }\n            code >>>= 8;\n          }\n        }\n      }\n    }\n\n    if (doNegative) {\n      for (int i=0; i<numTermsInField; i++) {\n \r\n        counts.incrementCount(i, maxTermCounts[i] - (int) counts.getCount(i)*2);\n      }\n    }\n\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n  }\n","realPath":"solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":322,"status":"M"}],"commitId":"40e2122b5a5b89f446e51692ef0d72e48c7b71e5","commitMessage":"@@@SOLR-13132: JSON Facet perf improvements to support \"sweeping\" collection of \"relatedness()\"\n\nThis adds a lot of \"under the covers\" improvements to how JSON Faceting FacetField processors work.  to enable\n\"sweeping\" support when the SlotAcc used for sorting support it (currently just \"relatedness()\")\n\nThis is a squash commit of all changes on https://github.com/magibney/lucene-solr/tree/SOLR-13132\nUp to and including ca7a8e0b39840d00af9022c048346a7d84bf280d.\n\nCo-authored-by: Chris Hostetter <hossman@apache.org>\nCo-authored-by: Michael Gibney <michael@michaelgibney.net>\n","date":"2020-07-10 09:42:37","modifiedFileCount":"9","status":"M","submitter":"Michael Gibney"}]
