[{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n","date":"2018-04-06 02:00:07","endLine":3830,"groupId":"26105","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegressAndPredict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3782,"status":"B"},{"authorDate":"2018-04-05 23:21:49","commitOrder":1,"curCode":"  public void testLength() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), l=length(d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double length = tuple.getDouble(\"l\");\n\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    assertTrue(length == 7);\n  }\n","date":"2018-04-06 02:00:07","endLine":4024,"groupId":"26105","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testLength() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), l=length(d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double length = tuple.getDouble(\"l\");\n\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    assertTrue(length == 7);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3978,"status":"B"}],"commitId":"80375acb7f696df7fb3cf0424d5e82777e3f5c87","commitMessage":"@@@SOLR-12183: Refactor Streaming Expression test cases\n","date":"2018-04-06 02:00:07","modifiedFileCount":"1","status":"B","submitter":"Joel Bernstein"},{"authorTime":"2018-04-05 23:21:49","codes":[{"authorDate":"2019-10-11 09:18:45","commitOrder":2,"curCode":"  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n","date":"2019-10-11 09:19:25","endLine":5670,"groupId":"26105","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegressAndPredict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/bc/76c4ef5b2991c69762f5d3ca41c07dfd0b25a4.src","preCode":"  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200L, 400L, 600L, 200L, 400L, 800L, 1200L);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":5622,"status":"M"},{"authorDate":"2018-04-05 23:21:49","commitOrder":2,"curCode":"  public void testLength() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), l=length(d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double length = tuple.getDouble(\"l\");\n\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    assertTrue(length == 7);\n  }\n","date":"2018-04-06 02:00:07","endLine":4024,"groupId":"26105","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/41/116e2472f896490c08d0d10885a3045e839b67.src","preCode":"  public void testLength() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), l=length(d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double length = tuple.getDouble(\"l\");\n\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    assertTrue(length == 7);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":3978,"status":"N"}],"commitId":"ad1c24e1903a74c611ec610aaf350d50d709519e","commitMessage":"@@@SOLR-13829: RecursiveEvaluator casts Continuous numbers to Discrete Numbers.  causing mismatch\n","date":"2019-10-11 09:19:25","modifiedFileCount":"17","status":"M","submitter":"Joel Bernstein"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    @SuppressWarnings({\"rawtypes\"})\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    @SuppressWarnings({\"unchecked\"})\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n","date":"2020-06-17 01:27:53","endLine":5989,"groupId":"10931","id":5,"instanceNumber":1,"isCurCommit":0,"methodName":"testRegressAndPredict","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testRegressAndPredict() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), pl=predict(e, c)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double rSquare= (double) regression.get(\"RSquared\");\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    assertTrue(rSquare == 1.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    List<Number> predictions = (List<Number>)tuple.get(\"pl\");\n    assertList(predictions, 200D, 400D, 600D, 200D, 400D, 800D, 1200D);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":5939,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testLength() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), l=length(d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    @SuppressWarnings({\"rawtypes\"})\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double length = tuple.getDouble(\"l\");\n\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    assertTrue(length == 7);\n  }\n","date":"2020-06-17 01:27:53","endLine":6183,"groupId":"10931","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testLength","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/ed/ef2698f7694ad2f1f3cbcb23f4710d6776b7d2.src","preCode":"  public void testLength() throws Exception {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.add(id, \"1\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"1\");\n    updateRequest.add(id, \"2\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"2\");\n    updateRequest.add(id, \"3\", \"price_f\", \"300.0\", \"col_s\", \"a\", \"order_i\", \"3\");\n    updateRequest.add(id, \"4\", \"price_f\", \"100.0\", \"col_s\", \"a\", \"order_i\", \"4\");\n    updateRequest.add(id, \"5\", \"price_f\", \"200.0\", \"col_s\", \"a\", \"order_i\", \"5\");\n    updateRequest.add(id, \"6\", \"price_f\", \"400.0\", \"col_s\", \"a\", \"order_i\", \"6\");\n    updateRequest.add(id, \"7\", \"price_f\", \"600.0\", \"col_s\", \"a\", \"order_i\", \"7\");\n\n    updateRequest.add(id, \"8\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"1\");\n    updateRequest.add(id, \"9\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"2\");\n    updateRequest.add(id, \"10\", \"price_f\", \"600.0\", \"col_s\", \"b\", \"order_i\", \"3\");\n    updateRequest.add(id, \"11\", \"price_f\", \"200.0\", \"col_s\", \"b\", \"order_i\", \"4\");\n    updateRequest.add(id, \"12\", \"price_f\", \"400.0\", \"col_s\", \"b\", \"order_i\", \"5\");\n    updateRequest.add(id, \"13\", \"price_f\", \"800.0\", \"col_s\", \"b\", \"order_i\", \"6\");\n    updateRequest.add(id, \"14\", \"price_f\", \"1200.0\", \"col_s\", \"b\", \"order_i\", \"7\");\n    updateRequest.commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String expr1 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:a\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n    String expr2 = \"search(\"+COLLECTIONORALIAS+\", q=\\\"col_s:b\\\", fl=\\\"price_f, order_i\\\", sort=\\\"order_i asc\\\")\";\n\n    String cexpr = \"let(a=\"+expr1+\", b=\"+expr2+\", c=col(a, price_f), d=col(b, price_f), e=regress(c, d), tuple(regress=e, p=predict(e, 300), l=length(d)))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple tuple = tuples.get(0);\n    Map regression = (Map)tuple.get(\"regress\");\n    double slope = (double)regression.get(\"slope\");\n    double intercept= (double) regression.get(\"intercept\");\n    double length = tuple.getDouble(\"l\");\n\n    assertTrue(slope == 2.0D);\n    assertTrue(intercept == 0.0D);\n    double prediction = tuple.getDouble(\"p\");\n    assertTrue(prediction == 600.0D);\n    assertTrue(length == 7);\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":6136,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"}]
