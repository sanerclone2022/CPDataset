[{"authorTime":"2020-09-28 17:27:06","codes":[{"authorDate":"2020-09-28 17:27:06","commitOrder":2,"curCode":"  public void processConfigChange(Map<String, Object> properties) throws IOException {\n    RateLimiterConfig rateLimiterConfig = getRateLimiterConfig();\n    byte[] configInput = Utils.toJSON(properties.get(RL_CONFIG_KEY));\n\n    if (configInput == null) {\n      return;\n    }\n\n    RateLimiterMeta rateLimiterMeta = mapper.readValue(configInput, RateLimiterMeta.class);\n\n    constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n  }\n","date":"2020-09-28 17:27:06","endLine":57,"groupId":"30122","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"processConfigChange","params":"(Map<String@Object>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f7/46aca132244c679aa115cf7c1403efdb9e1bd5.src","preCode":"  public void processConfigChange(Map<String, Object> properties) throws IOException {\n    RateLimiterConfig rateLimiterConfig = getRateLimiterConfig();\n    byte[] configInput = Utils.toJSON(properties.get(RL_CONFIG_KEY));\n\n    if (configInput == null) {\n      return;\n    }\n\n    RateLimiterMeta rateLimiterMeta = mapper.readValue(configInput, RateLimiterMeta.class);\n\n    constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/QueryRateLimiter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2020-09-28 17:27:06","commitOrder":2,"curCode":"  private static RateLimiterConfig constructQueryRateLimiterConfig(SolrZkClient zkClient) {\n    try {\n\n      if (zkClient == null) {\n        return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      }\n\n      RateLimiterConfig rateLimiterConfig = new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      byte[] configInput = Utils.toJSON(clusterPropsJson.get(RL_CONFIG_KEY));\n\n      if (configInput.length == 0) {\n        \r\n        return rateLimiterConfig;\n      }\n\n      RateLimiterMeta rateLimiterMeta = mapper.readValue(configInput, RateLimiterMeta.class);\n\n      constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n\n      return rateLimiterConfig;\n    } catch (KeeperException.NoNodeException e) {\n      return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n    } catch (KeeperException | InterruptedException e) {\n      throw new RuntimeException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    } catch (IOException e) {\n      throw new RuntimeException(\"Encountered an IOException \" + e.getMessage());\n    }\n  }\n","date":"2020-09-28 17:27:06","endLine":89,"groupId":"30122","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"constructQueryRateLimiterConfig","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/f7/46aca132244c679aa115cf7c1403efdb9e1bd5.src","preCode":"  private static RateLimiterConfig constructQueryRateLimiterConfig(SolrZkClient zkClient) {\n    try {\n\n      if (zkClient == null) {\n        return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      }\n\n      RateLimiterConfig rateLimiterConfig = new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      byte[] configInput = Utils.toJSON(clusterPropsJson.get(RL_CONFIG_KEY));\n\n      if (configInput.length == 0) {\n        \r\n        return rateLimiterConfig;\n      }\n\n      RateLimiterMeta rateLimiterMeta = mapper.readValue(configInput, RateLimiterMeta.class);\n\n      constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n\n      return rateLimiterConfig;\n    } catch (KeeperException.NoNodeException e) {\n      return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n    } catch (KeeperException | InterruptedException e) {\n      throw new RuntimeException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    } catch (IOException e) {\n      throw new RuntimeException(\"Encountered an IOException \" + e.getMessage());\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/QueryRateLimiter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"MB"}],"commitId":"4105414c90c94a3f426ce28893a744d3a800dbf4","commitMessage":"@@@SOLR-13528: Implement API Based Config For Rate Limiters (#1906)\n\nThis commit moves Rate Limiter configurations from web.xml to a new command based approach using clusterprops.json","date":"2020-09-28 17:27:06","modifiedFileCount":"6","status":"M","submitter":"Atri Sharma"},{"authorTime":"2021-02-08 23:11:58","codes":[{"authorDate":"2021-02-08 23:11:58","commitOrder":3,"curCode":"  public void processConfigChange(Map<String, Object> properties) throws IOException {\n    RateLimiterConfig rateLimiterConfig = getRateLimiterConfig();\n    byte[] configInput = Utils.toJSON(properties.get(RL_CONFIG_KEY));\n\n    if (configInput == null) {\n      return;\n    }\n\n    RateLimiterPayload rateLimiterMeta = mapper.readValue(configInput, RateLimiterPayload.class);\n\n    constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n  }\n","date":"2021-02-08 23:11:58","endLine":57,"groupId":"102411","id":3,"instanceNumber":1,"isCurCommit":1,"methodName":"processConfigChange","params":"(Map<String@Object>properties)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/e5d3b01cc15e973c2c51114580b1d6e8258d5a.src","preCode":"  public void processConfigChange(Map<String, Object> properties) throws IOException {\n    RateLimiterConfig rateLimiterConfig = getRateLimiterConfig();\n    byte[] configInput = Utils.toJSON(properties.get(RL_CONFIG_KEY));\n\n    if (configInput == null) {\n      return;\n    }\n\n    RateLimiterMeta rateLimiterMeta = mapper.readValue(configInput, RateLimiterMeta.class);\n\n    constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/QueryRateLimiter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2021-02-08 23:11:58","commitOrder":3,"curCode":"  private static RateLimiterConfig constructQueryRateLimiterConfig(SolrZkClient zkClient) {\n    try {\n\n      if (zkClient == null) {\n        return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      }\n\n      RateLimiterConfig rateLimiterConfig = new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      byte[] configInput = Utils.toJSON(clusterPropsJson.get(RL_CONFIG_KEY));\n\n      if (configInput.length == 0) {\n        \r\n        return rateLimiterConfig;\n      }\n\n      RateLimiterPayload rateLimiterMeta = mapper.readValue(configInput, RateLimiterPayload.class);\n\n      constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n\n      return rateLimiterConfig;\n    } catch (KeeperException.NoNodeException e) {\n      return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n    } catch (KeeperException | InterruptedException e) {\n      throw new RuntimeException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    } catch (IOException e) {\n      throw new RuntimeException(\"Encountered an IOException \" + e.getMessage());\n    }\n  }\n","date":"2021-02-08 23:11:58","endLine":89,"groupId":"102411","id":4,"instanceNumber":2,"isCurCommit":1,"methodName":"constructQueryRateLimiterConfig","params":"(SolrZkClientzkClient)","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/36/e5d3b01cc15e973c2c51114580b1d6e8258d5a.src","preCode":"  private static RateLimiterConfig constructQueryRateLimiterConfig(SolrZkClient zkClient) {\n    try {\n\n      if (zkClient == null) {\n        return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      }\n\n      RateLimiterConfig rateLimiterConfig = new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n      Map<String, Object> clusterPropsJson = (Map<String, Object>) Utils.fromJSON(zkClient.getData(ZkStateReader.CLUSTER_PROPS, null, new Stat(), true));\n      byte[] configInput = Utils.toJSON(clusterPropsJson.get(RL_CONFIG_KEY));\n\n      if (configInput.length == 0) {\n        \r\n        return rateLimiterConfig;\n      }\n\n      RateLimiterMeta rateLimiterMeta = mapper.readValue(configInput, RateLimiterMeta.class);\n\n      constructQueryRateLimiterConfigInternal(rateLimiterMeta, rateLimiterConfig);\n\n      return rateLimiterConfig;\n    } catch (KeeperException.NoNodeException e) {\n      return new RateLimiterConfig(SolrRequest.SolrRequestType.QUERY);\n    } catch (KeeperException | InterruptedException e) {\n      throw new RuntimeException(\"Error reading cluster property\", SolrZkClient.checkInterrupted(e));\n    } catch (IOException e) {\n      throw new RuntimeException(\"Encountered an IOException \" + e.getMessage());\n    }\n  }\n","realPath":"solr/core/src/java/org/apache/solr/servlet/QueryRateLimiter.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":61,"status":"M"}],"commitId":"e89fba6fe7739cb213560b94b6a4a76e40c2e4a5","commitMessage":"@@@SOLR-15118: Convert /v2/collections APIs to annotations (#2281)\n\nSolr supports two different ways to write v2 APIs: a JSON spec based\napproach.  and one based on annotated POJOs.  The POJO method is now\npreferred.\n\nThis commit switches the /v2/collections APIs over to the\nannotation-based approach.  Since V2RequestSupport only works with\njsonspec-based APIs.  this commit also changes CollectionAdminRequest\nto no longer implement that interface.","date":"2021-02-08 23:11:58","modifiedFileCount":"11","status":"M","submitter":"Jason Gerlowski"}]
