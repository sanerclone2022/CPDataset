[{"authorTime":"2018-08-15 22:26:23","codes":[{"authorDate":"2019-03-04 17:41:45","commitOrder":2,"curCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n","date":"2019-03-04 17:41:45","endLine":82,"groupId":"5309","id":1,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/52/a4b84a15d294af345ef2c0e3db0277b73e33b2.src","preCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"B"},{"authorDate":"2018-08-15 22:26:23","commitOrder":2,"curCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n","date":"2018-08-15 22:26:23","endLine":78,"groupId":"5309","id":2,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/90/0ae7160f63182fab480fd7a7f81efbfad17f41.src","preCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"NB"}],"commitId":"e99934b240cbb197331edc5e1889203e60b3d5d9","commitMessage":"@@@SOLR-13276: Adding Http2 equivalent classes of CloudSolrClient and HttpClusterStateProvider\n","date":"2019-03-04 17:41:45","modifiedFileCount":"7","status":"M","submitter":"Cao Manh Dat"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n","date":"2020-06-17 01:27:53","endLine":83,"groupId":"5309","id":3,"instanceNumber":1,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/d0/266e87ae0c45c183a383891725220435a4d754.src","preCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":46,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":3,"curCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n","date":"2020-06-17 01:27:53","endLine":79,"groupId":"5309","id":4,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c1524432c29d29688256fb8b8b1f4f576ba96c.src","preCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"M"}],"commitId":"6357b3bdaaa0e2c2b1acfe838e55db3a83e38e73","commitMessage":"@@@SOLR-14573: Fix or suppress warnings in solrj/src/test\n","date":"2020-06-17 01:27:53","modifiedFileCount":"65","status":"M","submitter":"Erick Erickson"},{"authorTime":"2020-06-17 01:27:53","codes":[{"authorDate":"2021-06-22 00:19:37","commitOrder":4,"curCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      NamedList<?> metrics = (NamedList<?>) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList<?>) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n","date":"2021-06-22 00:19:37","endLine":83,"groupId":"10505","id":5,"instanceNumber":1,"isCurCommit":1,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/24/efb24d936c3edb9bfa15a8912909dba4d50392.src","preCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {\n      CollectionAdminRequest.createCollection(collectionName, 1, 1)\n          .process(solrClient);\n\n      solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CommonParams.QT, \"/admin/metrics\");\n      String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n      params.set(\"key\", updateRequestCountKey);\n      params.set(\"indent\", \"true\");\n\n      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      NamedList<Object> namedList = response.getResponse();\n      System.out.println(namedList);\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(1L, metrics.get(updateRequestCountKey));\n\n      TestInjection.failUpdateRequests = \"true:100\";\n      try {\n        expectThrows(BaseCloudSolrClient.RouteException.class,\n            \"Expected an exception on the client when failure is injected during updates\", () -> {\n              solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n            });\n      } finally {\n        TestInjection.reset();\n      }\n\n      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n      namedList = response.getResponse();\n      System.out.println(namedList);\n      metrics = (NamedList) namedList.get(\"metrics\");\n      assertEquals(2L, metrics.get(updateRequestCountKey));\n    }\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudHttp2SolrClientRetryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":47,"status":"M"},{"authorDate":"2020-06-17 01:27:53","commitOrder":4,"curCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n","date":"2020-06-17 01:27:53","endLine":79,"groupId":"10505","id":6,"instanceNumber":2,"isCurCommit":0,"methodName":"testRetry","params":"()","path":"/mnt/clonedata/CloneManagementServer/ManagementServer/consistResult/result-solr-10-0.7/blobInfo/CC_OUT/blobs/9d/c1524432c29d29688256fb8b8b1f4f576ba96c.src","preCode":"  public void testRetry() throws Exception {\n    String collectionName = \"testRetry\";\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .process(solrClient);\n\n    solrClient.add(collectionName, new SolrInputDocument(\"id\", \"1\"));\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/admin/metrics\");\n    String updateRequestCountKey = \"solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count\";\n    params.set(\"key\", updateRequestCountKey);\n    params.set(\"indent\", \"true\");\n\n    QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    NamedList<Object> namedList = response.getResponse();\n    System.out.println(namedList);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(1L, metrics.get(updateRequestCountKey));\n\n    TestInjection.failUpdateRequests = \"true:100\";\n    try {\n      expectThrows(CloudSolrClient.RouteException.class,\n          \"Expected an exception on the client when failure is injected during updates\", () -> {\n            solrClient.add(collectionName, new SolrInputDocument(\"id\", \"2\"));\n          });\n    } finally {\n      TestInjection.reset();\n    }\n\n    response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);\n    namedList = response.getResponse();\n    System.out.println(namedList);\n    metrics = (NamedList) namedList.get(\"metrics\");\n    assertEquals(2L, metrics.get(updateRequestCountKey));\n  }\n","realPath":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientRetryTest.java","repoName":"solr","snippetEndLine":0,"snippetStartLine":0,"startLine":43,"status":"N"}],"commitId":"1725e778ac86d88e2deff8f7339d45bb4e50a719","commitMessage":"@@@SOLR-15385 RawTypes Part III.  contrib and solrj (#169)\n\n* SOLR-15385 RawTypes Part III.  contrib and solrj\n\nCo-authored-by: Christine Poerschke <cpoerschke@apache.org>","date":"2021-06-22 00:19:37","modifiedFileCount":"216","status":"M","submitter":"Mike Drob"}]
